
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

01000000 <_vector_table>:
 1000000:	10 0b 00 21 95 1a 00 01 cd 64 00 01 69 1a 00 01     ...!.....d..i...
 1000010:	69 1a 00 01 69 1a 00 01 69 1a 00 01 00 00 00 00     i...i...i.......
	...
 100002c:	a9 15 00 01 69 1a 00 01 00 00 00 00 51 15 00 01     ....i.......Q...
 100003c:	69 1a 00 01                                         i...

01000040 <_irq_vector_table>:
 1000040:	29 16 00 01 29 16 00 01 29 16 00 01 29 16 00 01     )...)...)...)...
 1000050:	29 16 00 01 29 16 00 01 29 16 00 01 29 16 00 01     )...)...)...)...
 1000060:	8d 35 00 01 29 16 00 01 29 16 00 01 29 16 00 01     .5..)...)...)...
 1000070:	29 16 00 01 29 16 00 01 29 16 00 01 29 16 00 01     )...)...)...)...
 1000080:	29 16 00 01 29 16 00 01 29 16 00 01 29 16 00 01     )...)...)...)...
 1000090:	f9 35 00 01 29 16 00 01 29 16 00 01 29 16 00 01     .5..)...)...)...
 10000a0:	29 16 00 01 31 68 00 01 29 16 00 01 29 16 00 01     )...1h..)...)...
 10000b0:	29 16 00 01 29 16 00 01                             )...)...

Disassembly of section text:

010000b8 <__aeabi_uldivmod>:
 10000b8:	b953      	cbnz	r3, 10000d0 <__aeabi_uldivmod+0x18>
 10000ba:	b94a      	cbnz	r2, 10000d0 <__aeabi_uldivmod+0x18>
 10000bc:	2900      	cmp	r1, #0
 10000be:	bf08      	it	eq
 10000c0:	2800      	cmpeq	r0, #0
 10000c2:	bf1c      	itt	ne
 10000c4:	f04f 31ff 	movne.w	r1, #4294967295
 10000c8:	f04f 30ff 	movne.w	r0, #4294967295
 10000cc:	f000 b80c 	b.w	10000e8 <__aeabi_idiv0>
 10000d0:	f1ad 0c08 	sub.w	ip, sp, #8
 10000d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 10000d8:	f000 f808 	bl	10000ec <__udivmoddi4>
 10000dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 10000e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 10000e4:	b004      	add	sp, #16
 10000e6:	4770      	bx	lr

010000e8 <__aeabi_idiv0>:
 10000e8:	4770      	bx	lr
 10000ea:	bf00      	nop

010000ec <__udivmoddi4>:
 10000ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10000f0:	4607      	mov	r7, r0
 10000f2:	468c      	mov	ip, r1
 10000f4:	4608      	mov	r0, r1
 10000f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 10000f8:	4615      	mov	r5, r2
 10000fa:	463c      	mov	r4, r7
 10000fc:	4619      	mov	r1, r3
 10000fe:	2b00      	cmp	r3, #0
 1000100:	f040 80c5 	bne.w	100028e <__udivmoddi4+0x1a2>
 1000104:	4282      	cmp	r2, r0
 1000106:	fab2 f782 	clz	r7, r2
 100010a:	d946      	bls.n	100019a <__udivmoddi4+0xae>
 100010c:	b14f      	cbz	r7, 1000122 <__udivmoddi4+0x36>
 100010e:	f1c7 0e20 	rsb	lr, r7, #32
 1000112:	fa00 f307 	lsl.w	r3, r0, r7
 1000116:	40bd      	lsls	r5, r7
 1000118:	fa24 fe0e 	lsr.w	lr, r4, lr
 100011c:	40bc      	lsls	r4, r7
 100011e:	ea4e 0c03 	orr.w	ip, lr, r3
 1000122:	ea4f 4815 	mov.w	r8, r5, lsr #16
 1000126:	fa1f fe85 	uxth.w	lr, r5
 100012a:	0c22      	lsrs	r2, r4, #16
 100012c:	fbbc f9f8 	udiv	r9, ip, r8
 1000130:	fb08 c319 	mls	r3, r8, r9, ip
 1000134:	fb09 fa0e 	mul.w	sl, r9, lr
 1000138:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 100013c:	459a      	cmp	sl, r3
 100013e:	d928      	bls.n	1000192 <__udivmoddi4+0xa6>
 1000140:	18eb      	adds	r3, r5, r3
 1000142:	f109 30ff 	add.w	r0, r9, #4294967295
 1000146:	d204      	bcs.n	1000152 <__udivmoddi4+0x66>
 1000148:	459a      	cmp	sl, r3
 100014a:	d902      	bls.n	1000152 <__udivmoddi4+0x66>
 100014c:	f1a9 0002 	sub.w	r0, r9, #2
 1000150:	442b      	add	r3, r5
 1000152:	eba3 030a 	sub.w	r3, r3, sl
 1000156:	b2a4      	uxth	r4, r4
 1000158:	fbb3 f2f8 	udiv	r2, r3, r8
 100015c:	fb08 3312 	mls	r3, r8, r2, r3
 1000160:	fb02 fe0e 	mul.w	lr, r2, lr
 1000164:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 1000168:	45a6      	cmp	lr, r4
 100016a:	d914      	bls.n	1000196 <__udivmoddi4+0xaa>
 100016c:	192c      	adds	r4, r5, r4
 100016e:	f102 33ff 	add.w	r3, r2, #4294967295
 1000172:	d203      	bcs.n	100017c <__udivmoddi4+0x90>
 1000174:	45a6      	cmp	lr, r4
 1000176:	d901      	bls.n	100017c <__udivmoddi4+0x90>
 1000178:	1e93      	subs	r3, r2, #2
 100017a:	442c      	add	r4, r5
 100017c:	eba4 040e 	sub.w	r4, r4, lr
 1000180:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 1000184:	b11e      	cbz	r6, 100018e <__udivmoddi4+0xa2>
 1000186:	40fc      	lsrs	r4, r7
 1000188:	2300      	movs	r3, #0
 100018a:	6034      	str	r4, [r6, #0]
 100018c:	6073      	str	r3, [r6, #4]
 100018e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1000192:	4648      	mov	r0, r9
 1000194:	e7dd      	b.n	1000152 <__udivmoddi4+0x66>
 1000196:	4613      	mov	r3, r2
 1000198:	e7f0      	b.n	100017c <__udivmoddi4+0x90>
 100019a:	b902      	cbnz	r2, 100019e <__udivmoddi4+0xb2>
 100019c:	deff      	udf	#255	; 0xff
 100019e:	bb87      	cbnz	r7, 1000202 <__udivmoddi4+0x116>
 10001a0:	1a83      	subs	r3, r0, r2
 10001a2:	2101      	movs	r1, #1
 10001a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 10001a8:	b2aa      	uxth	r2, r5
 10001aa:	0c20      	lsrs	r0, r4, #16
 10001ac:	fbb3 fcfe 	udiv	ip, r3, lr
 10001b0:	fb0e 331c 	mls	r3, lr, ip, r3
 10001b4:	fb0c f802 	mul.w	r8, ip, r2
 10001b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 10001bc:	4598      	cmp	r8, r3
 10001be:	d962      	bls.n	1000286 <__udivmoddi4+0x19a>
 10001c0:	18eb      	adds	r3, r5, r3
 10001c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 10001c6:	d204      	bcs.n	10001d2 <__udivmoddi4+0xe6>
 10001c8:	4598      	cmp	r8, r3
 10001ca:	d902      	bls.n	10001d2 <__udivmoddi4+0xe6>
 10001cc:	f1ac 0002 	sub.w	r0, ip, #2
 10001d0:	442b      	add	r3, r5
 10001d2:	eba3 0308 	sub.w	r3, r3, r8
 10001d6:	b2a4      	uxth	r4, r4
 10001d8:	fbb3 fcfe 	udiv	ip, r3, lr
 10001dc:	fb0e 331c 	mls	r3, lr, ip, r3
 10001e0:	fb0c f202 	mul.w	r2, ip, r2
 10001e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 10001e8:	42a2      	cmp	r2, r4
 10001ea:	d94e      	bls.n	100028a <__udivmoddi4+0x19e>
 10001ec:	192c      	adds	r4, r5, r4
 10001ee:	f10c 33ff 	add.w	r3, ip, #4294967295
 10001f2:	d204      	bcs.n	10001fe <__udivmoddi4+0x112>
 10001f4:	42a2      	cmp	r2, r4
 10001f6:	d902      	bls.n	10001fe <__udivmoddi4+0x112>
 10001f8:	f1ac 0302 	sub.w	r3, ip, #2
 10001fc:	442c      	add	r4, r5
 10001fe:	1aa4      	subs	r4, r4, r2
 1000200:	e7be      	b.n	1000180 <__udivmoddi4+0x94>
 1000202:	f1c7 0c20 	rsb	ip, r7, #32
 1000206:	40bd      	lsls	r5, r7
 1000208:	fa00 f307 	lsl.w	r3, r0, r7
 100020c:	fa20 f80c 	lsr.w	r8, r0, ip
 1000210:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 1000214:	fa24 fc0c 	lsr.w	ip, r4, ip
 1000218:	40bc      	lsls	r4, r7
 100021a:	ea4c 0203 	orr.w	r2, ip, r3
 100021e:	b2ab      	uxth	r3, r5
 1000220:	fbb8 fcfe 	udiv	ip, r8, lr
 1000224:	0c11      	lsrs	r1, r2, #16
 1000226:	fb0e 801c 	mls	r0, lr, ip, r8
 100022a:	fb0c f903 	mul.w	r9, ip, r3
 100022e:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 1000232:	4581      	cmp	r9, r0
 1000234:	d923      	bls.n	100027e <__udivmoddi4+0x192>
 1000236:	1828      	adds	r0, r5, r0
 1000238:	f10c 31ff 	add.w	r1, ip, #4294967295
 100023c:	d204      	bcs.n	1000248 <__udivmoddi4+0x15c>
 100023e:	4581      	cmp	r9, r0
 1000240:	d902      	bls.n	1000248 <__udivmoddi4+0x15c>
 1000242:	f1ac 0102 	sub.w	r1, ip, #2
 1000246:	4428      	add	r0, r5
 1000248:	eba0 0009 	sub.w	r0, r0, r9
 100024c:	b292      	uxth	r2, r2
 100024e:	fbb0 fcfe 	udiv	ip, r0, lr
 1000252:	fb0e 001c 	mls	r0, lr, ip, r0
 1000256:	fb0c f803 	mul.w	r8, ip, r3
 100025a:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 100025e:	4598      	cmp	r8, r3
 1000260:	d90f      	bls.n	1000282 <__udivmoddi4+0x196>
 1000262:	18eb      	adds	r3, r5, r3
 1000264:	f10c 32ff 	add.w	r2, ip, #4294967295
 1000268:	d204      	bcs.n	1000274 <__udivmoddi4+0x188>
 100026a:	4598      	cmp	r8, r3
 100026c:	d902      	bls.n	1000274 <__udivmoddi4+0x188>
 100026e:	f1ac 0202 	sub.w	r2, ip, #2
 1000272:	442b      	add	r3, r5
 1000274:	eba3 0308 	sub.w	r3, r3, r8
 1000278:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 100027c:	e792      	b.n	10001a4 <__udivmoddi4+0xb8>
 100027e:	4661      	mov	r1, ip
 1000280:	e7e2      	b.n	1000248 <__udivmoddi4+0x15c>
 1000282:	4662      	mov	r2, ip
 1000284:	e7f6      	b.n	1000274 <__udivmoddi4+0x188>
 1000286:	4660      	mov	r0, ip
 1000288:	e7a3      	b.n	10001d2 <__udivmoddi4+0xe6>
 100028a:	4663      	mov	r3, ip
 100028c:	e7b7      	b.n	10001fe <__udivmoddi4+0x112>
 100028e:	4283      	cmp	r3, r0
 1000290:	d905      	bls.n	100029e <__udivmoddi4+0x1b2>
 1000292:	b10e      	cbz	r6, 1000298 <__udivmoddi4+0x1ac>
 1000294:	e9c6 7000 	strd	r7, r0, [r6]
 1000298:	2100      	movs	r1, #0
 100029a:	4608      	mov	r0, r1
 100029c:	e777      	b.n	100018e <__udivmoddi4+0xa2>
 100029e:	fab3 f183 	clz	r1, r3
 10002a2:	b981      	cbnz	r1, 10002c6 <__udivmoddi4+0x1da>
 10002a4:	4283      	cmp	r3, r0
 10002a6:	d301      	bcc.n	10002ac <__udivmoddi4+0x1c0>
 10002a8:	42ba      	cmp	r2, r7
 10002aa:	d80a      	bhi.n	10002c2 <__udivmoddi4+0x1d6>
 10002ac:	1abc      	subs	r4, r7, r2
 10002ae:	eb60 0303 	sbc.w	r3, r0, r3
 10002b2:	2001      	movs	r0, #1
 10002b4:	469c      	mov	ip, r3
 10002b6:	2e00      	cmp	r6, #0
 10002b8:	d067      	beq.n	100038a <__udivmoddi4+0x29e>
 10002ba:	e9c6 4c00 	strd	r4, ip, [r6]
 10002be:	2100      	movs	r1, #0
 10002c0:	e765      	b.n	100018e <__udivmoddi4+0xa2>
 10002c2:	4608      	mov	r0, r1
 10002c4:	e7f7      	b.n	10002b6 <__udivmoddi4+0x1ca>
 10002c6:	f1c1 0c20 	rsb	ip, r1, #32
 10002ca:	408b      	lsls	r3, r1
 10002cc:	fa02 f501 	lsl.w	r5, r2, r1
 10002d0:	fa22 f40c 	lsr.w	r4, r2, ip
 10002d4:	fa20 fb0c 	lsr.w	fp, r0, ip
 10002d8:	fa27 f20c 	lsr.w	r2, r7, ip
 10002dc:	408f      	lsls	r7, r1
 10002de:	431c      	orrs	r4, r3
 10002e0:	fa00 f301 	lsl.w	r3, r0, r1
 10002e4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 10002e8:	4313      	orrs	r3, r2
 10002ea:	fa1f fe84 	uxth.w	lr, r4
 10002ee:	0c1a      	lsrs	r2, r3, #16
 10002f0:	fbbb f8f9 	udiv	r8, fp, r9
 10002f4:	fb09 bb18 	mls	fp, r9, r8, fp
 10002f8:	fb08 fa0e 	mul.w	sl, r8, lr
 10002fc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 1000300:	4592      	cmp	sl, r2
 1000302:	d93e      	bls.n	1000382 <__udivmoddi4+0x296>
 1000304:	18a2      	adds	r2, r4, r2
 1000306:	f108 30ff 	add.w	r0, r8, #4294967295
 100030a:	d204      	bcs.n	1000316 <__udivmoddi4+0x22a>
 100030c:	4592      	cmp	sl, r2
 100030e:	d902      	bls.n	1000316 <__udivmoddi4+0x22a>
 1000310:	f1a8 0002 	sub.w	r0, r8, #2
 1000314:	4422      	add	r2, r4
 1000316:	eba2 020a 	sub.w	r2, r2, sl
 100031a:	b29b      	uxth	r3, r3
 100031c:	fbb2 f8f9 	udiv	r8, r2, r9
 1000320:	fb09 2218 	mls	r2, r9, r8, r2
 1000324:	fb08 fe0e 	mul.w	lr, r8, lr
 1000328:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 100032c:	4596      	cmp	lr, r2
 100032e:	d92a      	bls.n	1000386 <__udivmoddi4+0x29a>
 1000330:	18a2      	adds	r2, r4, r2
 1000332:	f108 33ff 	add.w	r3, r8, #4294967295
 1000336:	d204      	bcs.n	1000342 <__udivmoddi4+0x256>
 1000338:	4596      	cmp	lr, r2
 100033a:	d902      	bls.n	1000342 <__udivmoddi4+0x256>
 100033c:	f1a8 0302 	sub.w	r3, r8, #2
 1000340:	4422      	add	r2, r4
 1000342:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 1000346:	eba2 020e 	sub.w	r2, r2, lr
 100034a:	fba0 9305 	umull	r9, r3, r0, r5
 100034e:	429a      	cmp	r2, r3
 1000350:	46ce      	mov	lr, r9
 1000352:	4698      	mov	r8, r3
 1000354:	d302      	bcc.n	100035c <__udivmoddi4+0x270>
 1000356:	d106      	bne.n	1000366 <__udivmoddi4+0x27a>
 1000358:	454f      	cmp	r7, r9
 100035a:	d204      	bcs.n	1000366 <__udivmoddi4+0x27a>
 100035c:	3801      	subs	r0, #1
 100035e:	ebb9 0e05 	subs.w	lr, r9, r5
 1000362:	eb63 0804 	sbc.w	r8, r3, r4
 1000366:	b186      	cbz	r6, 100038a <__udivmoddi4+0x29e>
 1000368:	ebb7 030e 	subs.w	r3, r7, lr
 100036c:	eb62 0708 	sbc.w	r7, r2, r8
 1000370:	fa07 fc0c 	lsl.w	ip, r7, ip
 1000374:	40cb      	lsrs	r3, r1
 1000376:	40cf      	lsrs	r7, r1
 1000378:	ea4c 0303 	orr.w	r3, ip, r3
 100037c:	e9c6 3700 	strd	r3, r7, [r6]
 1000380:	e79d      	b.n	10002be <__udivmoddi4+0x1d2>
 1000382:	4640      	mov	r0, r8
 1000384:	e7c7      	b.n	1000316 <__udivmoddi4+0x22a>
 1000386:	4643      	mov	r3, r8
 1000388:	e7db      	b.n	1000342 <__udivmoddi4+0x256>
 100038a:	4631      	mov	r1, r6
 100038c:	e6ff      	b.n	100018e <__udivmoddi4+0xa2>
	...

01000390 <event_handler>:

	gpio_port_set_masked_raw(leds[0].port, mask, val);
}

void event_handler(struct esb_evt const *event)
{ 
 1000390:	b510      	push	{r4, lr}
	switch (event->evt_id) {
 1000392:	7803      	ldrb	r3, [r0, #0]
{ 
 1000394:	b088      	sub	sp, #32
	switch (event->evt_id) {
 1000396:	2b01      	cmp	r3, #1
 1000398:	d00a      	beq.n	10003b0 <event_handler+0x20>
 100039a:	2b02      	cmp	r3, #2
 100039c:	d00b      	beq.n	10003b6 <event_handler+0x26>
 100039e:	2b00      	cmp	r3, #0
 10003a0:	d151      	bne.n	1000446 <event_handler+0xb6>
				LOG_DBG("TX SUCCESS EVENT");

	case ESB_EVENT_TX_SUCCESS:
		LOG_DBG("TX SUCCESS EVENT");
 10003a2:	2144      	movs	r1, #68	; 0x44
 10003a4:	4829      	ldr	r0, [pc, #164]	; (100044c <event_handler+0xbc>)
		} else {
			LOG_ERR("Error while reading rx packet");
		}
		break;
	}
}
 10003a6:	b008      	add	sp, #32
 10003a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_ERR("Error while reading rx packet");
 10003ac:	f006 b879 	b.w	10064a2 <z_log_minimal_printk>
		LOG_DBG("TX FAILED EVENT");
 10003b0:	2144      	movs	r1, #68	; 0x44
 10003b2:	4827      	ldr	r0, [pc, #156]	; (1000450 <event_handler+0xc0>)
 10003b4:	e7f7      	b.n	10003a6 <event_handler+0x16>
		if (esb_read_rx_payload(&rx_payload) == 0) {
 10003b6:	4c27      	ldr	r4, [pc, #156]	; (1000454 <event_handler+0xc4>)
 10003b8:	4620      	mov	r0, r4
 10003ba:	f003 fc81 	bl	1003cc0 <esb_read_rx_payload>
 10003be:	2800      	cmp	r0, #0
 10003c0:	d13e      	bne.n	1000440 <event_handler+0xb0>
			LOG_DBG("Packet received, len %d : "
 10003c2:	7b23      	ldrb	r3, [r4, #12]
 10003c4:	2144      	movs	r1, #68	; 0x44
 10003c6:	9306      	str	r3, [sp, #24]
 10003c8:	7ae3      	ldrb	r3, [r4, #11]
 10003ca:	4823      	ldr	r0, [pc, #140]	; (1000458 <event_handler+0xc8>)
 10003cc:	9305      	str	r3, [sp, #20]
 10003ce:	7aa3      	ldrb	r3, [r4, #10]
 10003d0:	9304      	str	r3, [sp, #16]
 10003d2:	7a63      	ldrb	r3, [r4, #9]
 10003d4:	9303      	str	r3, [sp, #12]
 10003d6:	7a23      	ldrb	r3, [r4, #8]
 10003d8:	9302      	str	r3, [sp, #8]
 10003da:	79e3      	ldrb	r3, [r4, #7]
 10003dc:	9301      	str	r3, [sp, #4]
 10003de:	79a3      	ldrb	r3, [r4, #6]
 10003e0:	9300      	str	r3, [sp, #0]
 10003e2:	7963      	ldrb	r3, [r4, #5]
 10003e4:	7822      	ldrb	r2, [r4, #0]
 10003e6:	f006 f85c 	bl	10064a2 <z_log_minimal_printk>
			leds_update(rx_payload.data[1]);
 10003ea:	79a1      	ldrb	r1, [r4, #6]
	bool led0_status = !(value % 8 > 0 && value % 8 <= 4);
 10003ec:	f001 0007 	and.w	r0, r1, #7
 10003f0:	1e43      	subs	r3, r0, #1
 10003f2:	2b03      	cmp	r3, #3
 10003f4:	bf94      	ite	ls
 10003f6:	2300      	movls	r3, #0
 10003f8:	2301      	movhi	r3, #1
	bool led1_status = !(value % 8 > 1 && value % 8 <= 5);
 10003fa:	f011 0f06 	tst.w	r1, #6
 10003fe:	d01d      	beq.n	100043c <event_handler+0xac>
 1000400:	2805      	cmp	r0, #5
 1000402:	bf94      	ite	ls
 1000404:	2200      	movls	r2, #0
 1000406:	2201      	movhi	r2, #1
	bool led2_status = !(value % 8 > 2 && value % 8 <= 6);
 1000408:	3803      	subs	r0, #3
 100040a:	2803      	cmp	r0, #3
 100040c:	bf94      	ite	ls
 100040e:	2000      	movls	r0, #0
 1000410:	2001      	movhi	r0, #1
	gpio_port_value_t val = led0_status << leds[0].pin |
 1000412:	071b      	lsls	r3, r3, #28
				led2_status << leds[2].pin |
 1000414:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
	bool led3_status = !(value % 8 > 3);
 1000418:	f081 0104 	eor.w	r1, r1, #4
						  gpio_port_value_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_set_masked_raw(port, mask, value);
 100041c:	480f      	ldr	r0, [pc, #60]	; (100045c <event_handler+0xcc>)
 100041e:	f3c1 0180 	ubfx	r1, r1, #2, #1
				led2_status << leds[2].pin |
 1000422:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 1000426:	6881      	ldr	r1, [r0, #8]
 1000428:	ea43 7242 	orr.w	r2, r3, r2, lsl #29
 100042c:	688c      	ldr	r4, [r1, #8]
 100042e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 1000432:	4623      	mov	r3, r4
}
 1000434:	b008      	add	sp, #32
 1000436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 100043a:	4718      	bx	r3
	bool led1_status = !(value % 8 > 1 && value % 8 <= 5);
 100043c:	2201      	movs	r2, #1
 100043e:	e7e3      	b.n	1000408 <event_handler+0x78>
			LOG_ERR("Error while reading rx packet");
 1000440:	2145      	movs	r1, #69	; 0x45
 1000442:	4807      	ldr	r0, [pc, #28]	; (1000460 <event_handler+0xd0>)
 1000444:	e7af      	b.n	10003a6 <event_handler+0x16>
}
 1000446:	b008      	add	sp, #32
 1000448:	bd10      	pop	{r4, pc}
 100044a:	bf00      	nop
 100044c:	01006d10 	.word	0x01006d10
 1000450:	01006d26 	.word	0x01006d26
 1000454:	21000444 	.word	0x21000444
 1000458:	01006d3b 	.word	0x01006d3b
 100045c:	01006a14 	.word	0x01006a14
 1000460:	01006d99 	.word	0x01006d99

01000464 <clocks_start>:

int clocks_start(void)
{
 1000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	int res;
	struct onoff_manager *clk_mgr;
	struct onoff_client clk_cli;

	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
 1000466:	2000      	movs	r0, #0
 1000468:	f001 ff06 	bl	1002278 <z_nrf_clock_control_get_onoff>
	if (!clk_mgr) {
 100046c:	b940      	cbnz	r0, 1000480 <clocks_start+0x1c>
		LOG_ERR("Unable to get the Clock manager");
 100046e:	2145      	movs	r1, #69	; 0x45
 1000470:	4812      	ldr	r0, [pc, #72]	; (10004bc <clocks_start+0x58>)
 1000472:	f006 f816 	bl	10064a2 <z_log_minimal_printk>
		return -ENXIO;
 1000476:	f06f 0405 	mvn.w	r4, #5
		}
	} while (err);

	LOG_DBG("HF clock started");
	return 0;
}
 100047a:	4620      	mov	r0, r4
 100047c:	b004      	add	sp, #16
 100047e:	bd10      	pop	{r4, pc}
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
 1000480:	2300      	movs	r3, #0
 1000482:	9301      	str	r3, [sp, #4]
 1000484:	9303      	str	r3, [sp, #12]
 1000486:	2301      	movs	r3, #1
	err = onoff_request(clk_mgr, &clk_cli);
 1000488:	4669      	mov	r1, sp
 100048a:	9302      	str	r3, [sp, #8]
 100048c:	f000 fb24 	bl	1000ad8 <onoff_request>
	if (err < 0) {
 1000490:	1e04      	subs	r4, r0, #0
 1000492:	da05      	bge.n	10004a0 <clocks_start+0x3c>
		LOG_ERR("Clock request failed: %d", err);
 1000494:	4622      	mov	r2, r4
 1000496:	2145      	movs	r1, #69	; 0x45
 1000498:	4809      	ldr	r0, [pc, #36]	; (10004c0 <clocks_start+0x5c>)
			LOG_ERR("Clock could not be started: %d", res);
 100049a:	f006 f802 	bl	10064a2 <z_log_minimal_printk>
			return res;
 100049e:	e7ec      	b.n	100047a <clocks_start+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 10004a0:	9b02      	ldr	r3, [sp, #8]
	if (sys_notify_get_method(notify) == SYS_NOTIFY_METHOD_COMPLETED) {
 10004a2:	079b      	lsls	r3, r3, #30
 10004a4:	d1fc      	bne.n	10004a0 <clocks_start+0x3c>
		*result = notify->result;
 10004a6:	9c03      	ldr	r4, [sp, #12]
		if (!err && res) {
 10004a8:	b11c      	cbz	r4, 10004b2 <clocks_start+0x4e>
			LOG_ERR("Clock could not be started: %d", res);
 10004aa:	4622      	mov	r2, r4
 10004ac:	2145      	movs	r1, #69	; 0x45
 10004ae:	4805      	ldr	r0, [pc, #20]	; (10004c4 <clocks_start+0x60>)
 10004b0:	e7f3      	b.n	100049a <clocks_start+0x36>
	LOG_DBG("HF clock started");
 10004b2:	2144      	movs	r1, #68	; 0x44
 10004b4:	4804      	ldr	r0, [pc, #16]	; (10004c8 <clocks_start+0x64>)
 10004b6:	f005 fff4 	bl	10064a2 <z_log_minimal_printk>
	return 0;
 10004ba:	e7de      	b.n	100047a <clocks_start+0x16>
 10004bc:	01006dbc 	.word	0x01006dbc
 10004c0:	01006de1 	.word	0x01006de1
 10004c4:	01006dff 	.word	0x01006dff
 10004c8:	01006e23 	.word	0x01006e23

010004cc <esb_initialize>:
	int err;
	/* These are arbitrary default addresses. In end user products
	 * different addresses should be used for each set of devices.
	 */
	uint8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
 10004cc:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
 10004d0:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
{
 10004d4:	b530      	push	{r4, r5, lr}
 10004d6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
 10004d8:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
 10004dc:	4a11      	ldr	r2, [pc, #68]	; (1000524 <esb_initialize+0x58>)
 10004de:	ab03      	add	r3, sp, #12
 10004e0:	6810      	ldr	r0, [r2, #0]
 10004e2:	6851      	ldr	r1, [r2, #4]

	struct esb_config config = ESB_DEFAULT_CONFIG;
 10004e4:	4d10      	ldr	r5, [pc, #64]	; (1000528 <esb_initialize+0x5c>)
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
 10004e6:	c303      	stmia	r3!, {r0, r1}
	struct esb_config config = ESB_DEFAULT_CONFIG;
 10004e8:	461c      	mov	r4, r3
 10004ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 10004ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 10004ee:	682b      	ldr	r3, [r5, #0]

	config.protocol = ESB_PROTOCOL_ESB_DPL;
	config.bitrate = ESB_BITRATE_2MBPS;
	config.mode = ESB_MODE_PRX;
	config.event_handler = event_handler;
 10004f0:	4a0e      	ldr	r2, [pc, #56]	; (100052c <esb_initialize+0x60>)
	struct esb_config config = ESB_DEFAULT_CONFIG;
 10004f2:	6023      	str	r3, [r4, #0]
	config.mode = ESB_MODE_PRX;
 10004f4:	2301      	movs	r3, #1
	config.selective_auto_ack = true;

	err = esb_init(&config);
 10004f6:	a805      	add	r0, sp, #20
	config.mode = ESB_MODE_PRX;
 10004f8:	f88d 3015 	strb.w	r3, [sp, #21]
	config.event_handler = event_handler;
 10004fc:	9206      	str	r2, [sp, #24]
	config.selective_auto_ack = true;
 10004fe:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	err = esb_init(&config);
 1000502:	f003 fa07 	bl	1003914 <esb_init>
	if (err) {
 1000506:	b958      	cbnz	r0, 1000520 <esb_initialize+0x54>
		return err;
	}

	err = esb_set_base_address_0(base_addr_0);
 1000508:	a801      	add	r0, sp, #4
 100050a:	f003 fc69 	bl	1003de0 <esb_set_base_address_0>
	if (err) {
 100050e:	b938      	cbnz	r0, 1000520 <esb_initialize+0x54>
		return err;
	}

	err = esb_set_base_address_1(base_addr_1);
 1000510:	a802      	add	r0, sp, #8
 1000512:	f003 fc87 	bl	1003e24 <esb_set_base_address_1>
	if (err) {
 1000516:	b918      	cbnz	r0, 1000520 <esb_initialize+0x54>
		return err;
	}

	err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
 1000518:	2108      	movs	r1, #8
 100051a:	a803      	add	r0, sp, #12
 100051c:	f003 fca4 	bl	1003e68 <esb_set_prefixes>
	if (err) {
		return err;
	}

	return 0;
}
 1000520:	b00b      	add	sp, #44	; 0x2c
 1000522:	bd30      	pop	{r4, r5, pc}
 1000524:	01006e39 	.word	0x01006e39
 1000528:	01006ba0 	.word	0x01006ba0
 100052c:	01000391 	.word	0x01000391

01000530 <main>:

void main(void)
{
 1000530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;

	LOG_INF("Enhanced ShockBurst prx sample");
 1000534:	2149      	movs	r1, #73	; 0x49
 1000536:	484e      	ldr	r0, [pc, #312]	; (1000670 <main+0x140>)
{
 1000538:	b085      	sub	sp, #20
	LOG_INF("Enhanced ShockBurst prx sample");
 100053a:	f005 ffb2 	bl	10064a2 <z_log_minimal_printk>

	err = clocks_start();
 100053e:	f7ff ff91 	bl	1000464 <clocks_start>
	if (err) {
 1000542:	4604      	mov	r4, r0
 1000544:	2800      	cmp	r0, #0
 1000546:	f040 808f 	bne.w	1000668 <main+0x138>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 100054a:	484a      	ldr	r0, [pc, #296]	; (1000674 <main+0x144>)
 100054c:	f006 f9f9 	bl	1006942 <z_device_is_ready>
	if (!device_is_ready(leds[0].port)) {
 1000550:	b930      	cbnz	r0, 1000560 <main+0x30>
		LOG_ERR("LEDs port not ready");
 1000552:	2145      	movs	r1, #69	; 0x45
 1000554:	4848      	ldr	r0, [pc, #288]	; (1000678 <main+0x148>)
		return;
	}

	/* return to idle thread */
	return;
}
 1000556:	b005      	add	sp, #20
 1000558:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_ERR("LEDs port not ready");
 100055c:	f005 bfa1 	b.w	10064a2 <z_log_minimal_printk>
 1000560:	4e46      	ldr	r6, [pc, #280]	; (100067c <main+0x14c>)
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 1000562:	4d47      	ldr	r5, [pc, #284]	; (1000680 <main+0x150>)
 1000564:	f8df 911c 	ldr.w	r9, [pc, #284]	; 1000684 <main+0x154>
				  spec->dt_flags | extra_flags);
 1000568:	f8b6 8006 	ldrh.w	r8, [r6, #6]
	return gpio_pin_configure(spec->port,
 100056c:	6837      	ldr	r7, [r6, #0]
 100056e:	f896 a004 	ldrb.w	sl, [r6, #4]
 1000572:	f448 3b00 	orr.w	fp, r8, #131072	; 0x20000
	const struct gpio_driver_api *api =
 1000576:	68bb      	ldr	r3, [r7, #8]
 1000578:	9302      	str	r3, [sp, #8]
	const struct gpio_driver_config *const cfg =
 100057a:	687b      	ldr	r3, [r7, #4]
 100057c:	9303      	str	r3, [sp, #12]
	struct gpio_driver_data *data =
 100057e:	693b      	ldr	r3, [r7, #16]
 1000580:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 1000582:	f008 0330 	and.w	r3, r8, #48	; 0x30
 1000586:	2b30      	cmp	r3, #48	; 0x30
 1000588:	d10a      	bne.n	10005a0 <main+0x70>
 100058a:	4629      	mov	r1, r5
 100058c:	4648      	mov	r0, r9
 100058e:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 1000592:	f005 ff78 	bl	1006486 <assert_print>
 1000596:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 100059a:	4628      	mov	r0, r5
 100059c:	f005 ff6c 	bl	1006478 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
 10005a0:	f008 0306 	and.w	r3, r8, #6
 10005a4:	2b04      	cmp	r3, #4
 10005a6:	d10a      	bne.n	10005be <main+0x8e>
 10005a8:	4629      	mov	r1, r5
 10005aa:	4648      	mov	r0, r9
 10005ac:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 10005b0:	f005 ff69 	bl	1006486 <assert_print>
 10005b4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 10005b8:	4628      	mov	r0, r5
 10005ba:	f005 ff5d 	bl	1006478 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 10005be:	2301      	movs	r3, #1
 10005c0:	9a03      	ldr	r2, [sp, #12]
 10005c2:	fa03 f30a 	lsl.w	r3, r3, sl
 10005c6:	6812      	ldr	r2, [r2, #0]
 10005c8:	4213      	tst	r3, r2
 10005ca:	d10c      	bne.n	10005e6 <main+0xb6>
 10005cc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 10005d0:	4629      	mov	r1, r5
 10005d2:	4648      	mov	r0, r9
 10005d4:	9303      	str	r3, [sp, #12]
 10005d6:	f005 ff56 	bl	1006486 <assert_print>
 10005da:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 10005de:	4628      	mov	r0, r5
 10005e0:	f005 ff4a 	bl	1006478 <assert_post_action>
 10005e4:	9b03      	ldr	r3, [sp, #12]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 10005e6:	9a01      	ldr	r2, [sp, #4]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 10005e8:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 10005ec:	6812      	ldr	r2, [r2, #0]
	return api->pin_configure(port, pin, flags);
 10005ee:	4651      	mov	r1, sl
		data->invert |= (gpio_port_pins_t)BIT(pin);
 10005f0:	bf14      	ite	ne
 10005f2:	4313      	orrne	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 10005f4:	ea22 0303 	biceq.w	r3, r2, r3
 10005f8:	9a01      	ldr	r2, [sp, #4]
	return api->pin_configure(port, pin, flags);
 10005fa:	4638      	mov	r0, r7
 10005fc:	6013      	str	r3, [r2, #0]
 10005fe:	9b02      	ldr	r3, [sp, #8]
 1000600:	465a      	mov	r2, fp
 1000602:	681b      	ldr	r3, [r3, #0]
 1000604:	4798      	blx	r3
		if (err) {
 1000606:	4603      	mov	r3, r0
 1000608:	b138      	cbz	r0, 100061a <main+0xea>
			LOG_ERR("Unable to configure LED%u, err %d.", i, err);
 100060a:	4622      	mov	r2, r4
 100060c:	2145      	movs	r1, #69	; 0x45
 100060e:	481e      	ldr	r0, [pc, #120]	; (1000688 <main+0x158>)
}
 1000610:	b005      	add	sp, #20
 1000612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Unable to configure LED%u, err %d.", i, err);
 1000616:	f005 bf44 	b.w	10064a2 <z_log_minimal_printk>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
 100061a:	3401      	adds	r4, #1
 100061c:	2c04      	cmp	r4, #4
 100061e:	f106 0608 	add.w	r6, r6, #8
 1000622:	d1a1      	bne.n	1000568 <main+0x38>
	err = esb_initialize();
 1000624:	f7ff ff52 	bl	10004cc <esb_initialize>
	if (err) {
 1000628:	4602      	mov	r2, r0
 100062a:	b130      	cbz	r0, 100063a <main+0x10a>
		LOG_ERR("ESB initialization failed, err %d", err);
 100062c:	2145      	movs	r1, #69	; 0x45
 100062e:	4817      	ldr	r0, [pc, #92]	; (100068c <main+0x15c>)
}
 1000630:	b005      	add	sp, #20
 1000632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_ERR("RX setup failed, err %d", err);
 1000636:	f005 bf34 	b.w	10064a2 <z_log_minimal_printk>
	LOG_INF("Initialization complete");
 100063a:	2149      	movs	r1, #73	; 0x49
 100063c:	4814      	ldr	r0, [pc, #80]	; (1000690 <main+0x160>)
 100063e:	f005 ff30 	bl	10064a2 <z_log_minimal_printk>
	err = esb_write_payload(&tx_payload);
 1000642:	4814      	ldr	r0, [pc, #80]	; (1000694 <main+0x164>)
 1000644:	f003 fa9c 	bl	1003b80 <esb_write_payload>
	if (err) {
 1000648:	4602      	mov	r2, r0
 100064a:	b110      	cbz	r0, 1000652 <main+0x122>
		LOG_ERR("Write payload, err %d", err);
 100064c:	2145      	movs	r1, #69	; 0x45
 100064e:	4812      	ldr	r0, [pc, #72]	; (1000698 <main+0x168>)
 1000650:	e7ee      	b.n	1000630 <main+0x100>
	LOG_INF("Setting up for packet receiption");
 1000652:	2149      	movs	r1, #73	; 0x49
 1000654:	4811      	ldr	r0, [pc, #68]	; (100069c <main+0x16c>)
 1000656:	f005 ff24 	bl	10064a2 <z_log_minimal_printk>
	err = esb_start_rx();
 100065a:	f003 fb7b 	bl	1003d54 <esb_start_rx>
	if (err) {
 100065e:	4602      	mov	r2, r0
 1000660:	b110      	cbz	r0, 1000668 <main+0x138>
		LOG_ERR("RX setup failed, err %d", err);
 1000662:	2145      	movs	r1, #69	; 0x45
 1000664:	480e      	ldr	r0, [pc, #56]	; (10006a0 <main+0x170>)
 1000666:	e7e3      	b.n	1000630 <main+0x100>
}
 1000668:	b005      	add	sp, #20
 100066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 100066e:	bf00      	nop
 1000670:	01006e42 	.word	0x01006e42
 1000674:	01006a14 	.word	0x01006a14
 1000678:	01006e66 	.word	0x01006e66
 100067c:	01006bc8 	.word	0x01006bc8
 1000680:	01006e7f 	.word	0x01006e7f
 1000684:	01006eb0 	.word	0x01006eb0
 1000688:	01006ec8 	.word	0x01006ec8
 100068c:	01006ef0 	.word	0x01006ef0
 1000690:	01006f17 	.word	0x01006f17
 1000694:	210000bc 	.word	0x210000bc
 1000698:	01006f34 	.word	0x01006f34
 100069c:	01006f4f 	.word	0x01006f4f
 10006a0:	01006f75 	.word	0x01006f75

010006a4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
 10006a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 10006a6:	6844      	ldr	r4, [r0, #4]
 10006a8:	4605      	mov	r5, r0
	return method & SYS_NOTIFY_METHOD_MASK;
 10006aa:	f004 0403 	and.w	r4, r4, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 10006ae:	2c03      	cmp	r4, #3
	notify->result = res;
 10006b0:	6081      	str	r1, [r0, #8]
	switch (method) {
 10006b2:	d002      	beq.n	10006ba <sys_notify_finalize+0x16>
 10006b4:	b12c      	cbz	r4, 10006c2 <sys_notify_finalize+0x1e>
 10006b6:	2000      	movs	r0, #0
 10006b8:	e000      	b.n	10006bc <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 10006ba:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 10006bc:	2300      	movs	r3, #0
 10006be:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 10006c0:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
 10006c2:	2245      	movs	r2, #69	; 0x45
 10006c4:	4904      	ldr	r1, [pc, #16]	; (10006d8 <sys_notify_finalize+0x34>)
 10006c6:	4805      	ldr	r0, [pc, #20]	; (10006dc <sys_notify_finalize+0x38>)
 10006c8:	f005 fedd 	bl	1006486 <assert_print>
 10006cc:	2145      	movs	r1, #69	; 0x45
 10006ce:	4802      	ldr	r0, [pc, #8]	; (10006d8 <sys_notify_finalize+0x34>)
 10006d0:	f005 fed2 	bl	1006478 <assert_post_action>
 10006d4:	e7ef      	b.n	10006b6 <sys_notify_finalize+0x12>
 10006d6:	bf00      	nop
 10006d8:	01006f9a 	.word	0x01006f9a
 10006dc:	01006eb0 	.word	0x01006eb0

010006e0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 10006e0:	680b      	ldr	r3, [r1, #0]
 10006e2:	3301      	adds	r3, #1
 10006e4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 10006e6:	4b01      	ldr	r3, [pc, #4]	; (10006ec <char_out+0xc>)
 10006e8:	681b      	ldr	r3, [r3, #0]
 10006ea:	4718      	bx	r3
 10006ec:	21000000 	.word	0x21000000

010006f0 <__printk_hook_install>:
	_char_out = fn;
 10006f0:	4b01      	ldr	r3, [pc, #4]	; (10006f8 <__printk_hook_install+0x8>)
 10006f2:	6018      	str	r0, [r3, #0]
}
 10006f4:	4770      	bx	lr
 10006f6:	bf00      	nop
 10006f8:	21000000 	.word	0x21000000

010006fc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 10006fc:	b507      	push	{r0, r1, r2, lr}
 10006fe:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 1000700:	2100      	movs	r1, #0
{
 1000702:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
 1000704:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 1000706:	4803      	ldr	r0, [pc, #12]	; (1000714 <vprintk+0x18>)
 1000708:	a901      	add	r1, sp, #4
 100070a:	f000 fa69 	bl	1000be0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 100070e:	b003      	add	sp, #12
 1000710:	f85d fb04 	ldr.w	pc, [sp], #4
 1000714:	010006e1 	.word	0x010006e1

01000718 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
 1000718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100071c:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
 1000720:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
 1000722:	f01a 0f08 	tst.w	sl, #8
{
 1000726:	4693      	mov	fp, r2
	if (processing) {
 1000728:	d01c      	beq.n	1000764 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
 100072a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
 100072c:	bf0c      	ite	eq
 100072e:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000732:	f04a 0a20 	orrne.w	sl, sl, #32
 1000736:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 100073a:	f104 0014 	add.w	r0, r4, #20
 100073e:	f004 fbb7 	bl	1004eb0 <z_spin_unlock_valid>
 1000742:	b940      	cbnz	r0, 1000756 <process_event+0x3e>
 1000744:	4992      	ldr	r1, [pc, #584]	; (1000990 <process_event+0x278>)
 1000746:	4893      	ldr	r0, [pc, #588]	; (1000994 <process_event+0x27c>)
 1000748:	22b9      	movs	r2, #185	; 0xb9
 100074a:	f005 fe9c 	bl	1006486 <assert_print>
 100074e:	21b9      	movs	r1, #185	; 0xb9
 1000750:	488f      	ldr	r0, [pc, #572]	; (1000990 <process_event+0x278>)
 1000752:	f005 fe91 	bl	1006478 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 1000756:	f38b 8811 	msr	BASEPRI, fp
 100075a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
 100075e:	b003      	add	sp, #12
 1000760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
 1000764:	4f8c      	ldr	r7, [pc, #560]	; (1000998 <process_event+0x280>)
 1000766:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1000994 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 100076a:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
 100076e:	2902      	cmp	r1, #2
 1000770:	d106      	bne.n	1000780 <process_event+0x68>
			evt = process_recheck(mgr);
 1000772:	4620      	mov	r0, r4
 1000774:	f005 fdc6 	bl	1006304 <process_recheck>
		if (evt == EVT_NOP) {
 1000778:	2800      	cmp	r0, #0
 100077a:	d0de      	beq.n	100073a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
 100077c:	2801      	cmp	r0, #1
 100077e:	d163      	bne.n	1000848 <process_event+0x130>
			res = mgr->last_res;
 1000780:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1000784:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
 1000786:	f1b9 0f00 	cmp.w	r9, #0
 100078a:	da19      	bge.n	10007c0 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
 100078c:	2600      	movs	r6, #0
		*clients = mgr->clients;
 100078e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000790:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
 1000794:	e9c4 6600 	strd	r6, r6, [r4]
 1000798:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
 100079c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 100079e:	8ba3      	ldrh	r3, [r4, #28]
 10007a0:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 10007a4:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 10007a6:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
 10007a8:	d003      	beq.n	10007b2 <process_event+0x9a>
		if (do_monitors
 10007aa:	68a2      	ldr	r2, [r4, #8]
 10007ac:	2a00      	cmp	r2, #0
 10007ae:	f040 80f5 	bne.w	100099c <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
 10007b2:	b915      	cbnz	r5, 10007ba <process_event+0xa2>
		    || (transit != NULL)) {
 10007b4:	2e00      	cmp	r6, #0
 10007b6:	f000 812f 	beq.w	1000a18 <process_event+0x300>
 10007ba:	f04f 0a00 	mov.w	sl, #0
 10007be:	e0ef      	b.n	10009a0 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 10007c0:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
 10007c4:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
 10007c6:	2901      	cmp	r1, #1
 10007c8:	d820      	bhi.n	100080c <process_event+0xf4>
	list->head = NULL;
 10007ca:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10007cc:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
 10007d0:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
 10007d2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10007d4:	b29b      	uxth	r3, r3
	list->tail = NULL;
 10007d6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
 10007da:	d10a      	bne.n	10007f2 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 10007dc:	b13d      	cbz	r5, 10007ee <process_event+0xd6>
 10007de:	4629      	mov	r1, r5
 10007e0:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 10007e2:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
 10007e4:	3201      	adds	r2, #1
 10007e6:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 10007e8:	2900      	cmp	r1, #0
 10007ea:	d1fa      	bne.n	10007e2 <process_event+0xca>
 10007ec:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 10007ee:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
 10007f2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 10007f4:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
 10007f6:	f005 fd85 	bl	1006304 <process_recheck>
 10007fa:	4606      	mov	r6, r0
 10007fc:	2800      	cmp	r0, #0
 10007fe:	d0ce      	beq.n	100079e <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000800:	8ba3      	ldrh	r3, [r4, #28]
 1000802:	f043 0320 	orr.w	r3, r3, #32
 1000806:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
 1000808:	2600      	movs	r6, #0
 100080a:	e7c8      	b.n	100079e <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
 100080c:	2a04      	cmp	r2, #4
 100080e:	d10d      	bne.n	100082c <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000810:	f023 0307 	bic.w	r3, r3, #7
 1000814:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
 1000816:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000818:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
 100081a:	f005 fd73 	bl	1006304 <process_recheck>
 100081e:	4605      	mov	r5, r0
 1000820:	b180      	cbz	r0, 1000844 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000822:	f042 0220 	orr.w	r2, r2, #32
 1000826:	2500      	movs	r5, #0
 1000828:	83a2      	strh	r2, [r4, #28]
 100082a:	e7ed      	b.n	1000808 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
 100082c:	f240 121b 	movw	r2, #283	; 0x11b
 1000830:	4639      	mov	r1, r7
 1000832:	4640      	mov	r0, r8
 1000834:	f005 fe27 	bl	1006486 <assert_print>
 1000838:	f240 111b 	movw	r1, #283	; 0x11b
 100083c:	4638      	mov	r0, r7
 100083e:	f005 fe1b 	bl	1006478 <assert_post_action>
 1000842:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
 1000844:	462e      	mov	r6, r5
 1000846:	e7aa      	b.n	100079e <process_event+0x86>
		} else if (evt == EVT_START) {
 1000848:	2803      	cmp	r0, #3
 100084a:	d131      	bne.n	10008b0 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
 100084c:	f1ba 0f00 	cmp.w	sl, #0
 1000850:	d00a      	beq.n	1000868 <process_event+0x150>
 1000852:	4639      	mov	r1, r7
 1000854:	4640      	mov	r0, r8
 1000856:	f44f 72ab 	mov.w	r2, #342	; 0x156
 100085a:	f005 fe14 	bl	1006486 <assert_print>
 100085e:	f44f 71ab 	mov.w	r1, #342	; 0x156
 1000862:	4638      	mov	r0, r7
 1000864:	f005 fe08 	bl	1006478 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
 1000868:	6823      	ldr	r3, [r4, #0]
 100086a:	b953      	cbnz	r3, 1000882 <process_event+0x16a>
 100086c:	4639      	mov	r1, r7
 100086e:	4640      	mov	r0, r8
 1000870:	f240 1257 	movw	r2, #343	; 0x157
 1000874:	f005 fe07 	bl	1006486 <assert_print>
 1000878:	f240 1157 	movw	r1, #343	; 0x157
 100087c:	4638      	mov	r0, r7
 100087e:	f005 fdfb 	bl	1006478 <assert_post_action>
			transit = mgr->transitions->start;
 1000882:	6923      	ldr	r3, [r4, #16]
 1000884:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
 1000886:	b956      	cbnz	r6, 100089e <process_event+0x186>
 1000888:	4639      	mov	r1, r7
 100088a:	4640      	mov	r0, r8
 100088c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 1000890:	f005 fdf9 	bl	1006486 <assert_print>
 1000894:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 1000898:	4638      	mov	r0, r7
 100089a:	f005 fded 	bl	1006478 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 100089e:	8ba3      	ldrh	r3, [r4, #28]
 10008a0:	f023 0307 	bic.w	r3, r3, #7
 10008a4:	f043 0306 	orr.w	r3, r3, #6
}
 10008a8:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
 10008aa:	83a3      	strh	r3, [r4, #28]
		res = 0;
 10008ac:	46a9      	mov	r9, r5
}
 10008ae:	e776      	b.n	100079e <process_event+0x86>
		} else if (evt == EVT_STOP) {
 10008b0:	2804      	cmp	r0, #4
 10008b2:	d12e      	bne.n	1000912 <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
 10008b4:	f1ba 0f02 	cmp.w	sl, #2
 10008b8:	d00a      	beq.n	10008d0 <process_event+0x1b8>
 10008ba:	4639      	mov	r1, r7
 10008bc:	4640      	mov	r0, r8
 10008be:	f240 125d 	movw	r2, #349	; 0x15d
 10008c2:	f005 fde0 	bl	1006486 <assert_print>
 10008c6:	f240 115d 	movw	r1, #349	; 0x15d
 10008ca:	4638      	mov	r0, r7
 10008cc:	f005 fdd4 	bl	1006478 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
 10008d0:	8be3      	ldrh	r3, [r4, #30]
 10008d2:	b153      	cbz	r3, 10008ea <process_event+0x1d2>
 10008d4:	4639      	mov	r1, r7
 10008d6:	4640      	mov	r0, r8
 10008d8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 10008dc:	f005 fdd3 	bl	1006486 <assert_print>
 10008e0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 10008e4:	4638      	mov	r0, r7
 10008e6:	f005 fdc7 	bl	1006478 <assert_post_action>
			transit = mgr->transitions->stop;
 10008ea:	6923      	ldr	r3, [r4, #16]
 10008ec:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
 10008ee:	b956      	cbnz	r6, 1000906 <process_event+0x1ee>
 10008f0:	4639      	mov	r1, r7
 10008f2:	4640      	mov	r0, r8
 10008f4:	f240 1261 	movw	r2, #353	; 0x161
 10008f8:	f005 fdc5 	bl	1006486 <assert_print>
 10008fc:	f240 1161 	movw	r1, #353	; 0x161
 1000900:	4638      	mov	r0, r7
 1000902:	f005 fdb9 	bl	1006478 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000906:	8ba3      	ldrh	r3, [r4, #28]
 1000908:	f023 0307 	bic.w	r3, r3, #7
 100090c:	f043 0304 	orr.w	r3, r3, #4
 1000910:	e7ca      	b.n	10008a8 <process_event+0x190>
		} else if (evt == EVT_RESET) {
 1000912:	2805      	cmp	r0, #5
 1000914:	d12e      	bne.n	1000974 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
 1000916:	f1ba 0f01 	cmp.w	sl, #1
 100091a:	d00a      	beq.n	1000932 <process_event+0x21a>
 100091c:	4639      	mov	r1, r7
 100091e:	4640      	mov	r0, r8
 1000920:	f44f 72b2 	mov.w	r2, #356	; 0x164
 1000924:	f005 fdaf 	bl	1006486 <assert_print>
 1000928:	f44f 71b2 	mov.w	r1, #356	; 0x164
 100092c:	4638      	mov	r0, r7
 100092e:	f005 fda3 	bl	1006478 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
 1000932:	6823      	ldr	r3, [r4, #0]
 1000934:	b953      	cbnz	r3, 100094c <process_event+0x234>
 1000936:	4639      	mov	r1, r7
 1000938:	4640      	mov	r0, r8
 100093a:	f240 1265 	movw	r2, #357	; 0x165
 100093e:	f005 fda2 	bl	1006486 <assert_print>
 1000942:	f240 1165 	movw	r1, #357	; 0x165
 1000946:	4638      	mov	r0, r7
 1000948:	f005 fd96 	bl	1006478 <assert_post_action>
			transit = mgr->transitions->reset;
 100094c:	6923      	ldr	r3, [r4, #16]
 100094e:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
 1000950:	b956      	cbnz	r6, 1000968 <process_event+0x250>
 1000952:	4639      	mov	r1, r7
 1000954:	4640      	mov	r0, r8
 1000956:	f44f 72b4 	mov.w	r2, #360	; 0x168
 100095a:	f005 fd94 	bl	1006486 <assert_print>
 100095e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 1000962:	4638      	mov	r0, r7
 1000964:	f005 fd88 	bl	1006478 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000968:	8ba3      	ldrh	r3, [r4, #28]
 100096a:	f023 0307 	bic.w	r3, r3, #7
 100096e:	f043 0305 	orr.w	r3, r3, #5
 1000972:	e799      	b.n	10008a8 <process_event+0x190>
			__ASSERT_NO_MSG(false);
 1000974:	2500      	movs	r5, #0
 1000976:	f240 126b 	movw	r2, #363	; 0x16b
 100097a:	4639      	mov	r1, r7
 100097c:	4640      	mov	r0, r8
 100097e:	f005 fd82 	bl	1006486 <assert_print>
 1000982:	f240 116b 	movw	r1, #363	; 0x16b
 1000986:	4638      	mov	r0, r7
 1000988:	f005 fd76 	bl	1006478 <assert_post_action>
		onoff_transition_fn transit = NULL;
 100098c:	462e      	mov	r6, r5
 100098e:	e78d      	b.n	10008ac <process_event+0x194>
 1000990:	01006fdf 	.word	0x01006fdf
 1000994:	01006eb0 	.word	0x01006eb0
 1000998:	01006fbd 	.word	0x01006fbd
				   && !sys_slist_is_empty(&mgr->monitors);
 100099c:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 10009a0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
 10009a4:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
 10009a6:	f104 0314 	add.w	r3, r4, #20
 10009aa:	4618      	mov	r0, r3
 10009ac:	9301      	str	r3, [sp, #4]
 10009ae:	f004 fa7f 	bl	1004eb0 <z_spin_unlock_valid>
 10009b2:	b940      	cbnz	r0, 10009c6 <process_event+0x2ae>
 10009b4:	4640      	mov	r0, r8
 10009b6:	4931      	ldr	r1, [pc, #196]	; (1000a7c <process_event+0x364>)
 10009b8:	22b9      	movs	r2, #185	; 0xb9
 10009ba:	f005 fd64 	bl	1006486 <assert_print>
 10009be:	21b9      	movs	r1, #185	; 0xb9
 10009c0:	482e      	ldr	r0, [pc, #184]	; (1000a7c <process_event+0x364>)
 10009c2:	f005 fd59 	bl	1006478 <assert_post_action>
 10009c6:	f38b 8811 	msr	BASEPRI, fp
 10009ca:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
 10009ce:	f1ba 0f00 	cmp.w	sl, #0
 10009d2:	d130      	bne.n	1000a36 <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
 10009d4:	2d00      	cmp	r5, #0
 10009d6:	d140      	bne.n	1000a5a <process_event+0x342>
			if (transit != NULL) {
 10009d8:	b116      	cbz	r6, 10009e0 <process_event+0x2c8>
				transit(mgr, transition_complete);
 10009da:	4620      	mov	r0, r4
 10009dc:	4928      	ldr	r1, [pc, #160]	; (1000a80 <process_event+0x368>)
 10009de:	47b0      	blx	r6
	__asm__ volatile(
 10009e0:	f04f 0320 	mov.w	r3, #32
 10009e4:	f3ef 8b11 	mrs	fp, BASEPRI
 10009e8:	f383 8812 	msr	BASEPRI_MAX, r3
 10009ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 10009f0:	9801      	ldr	r0, [sp, #4]
 10009f2:	f004 fa4f 	bl	1004e94 <z_spin_lock_valid>
 10009f6:	b940      	cbnz	r0, 1000a0a <process_event+0x2f2>
 10009f8:	4640      	mov	r0, r8
 10009fa:	4920      	ldr	r1, [pc, #128]	; (1000a7c <process_event+0x364>)
 10009fc:	228e      	movs	r2, #142	; 0x8e
 10009fe:	f005 fd42 	bl	1006486 <assert_print>
 1000a02:	218e      	movs	r1, #142	; 0x8e
 1000a04:	481d      	ldr	r0, [pc, #116]	; (1000a7c <process_event+0x364>)
 1000a06:	f005 fd37 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1000a0a:	9801      	ldr	r0, [sp, #4]
 1000a0c:	f004 fa5e 	bl	1004ecc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
 1000a10:	8ba3      	ldrh	r3, [r4, #28]
 1000a12:	f023 0308 	bic.w	r3, r3, #8
 1000a16:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
 1000a18:	8ba3      	ldrh	r3, [r4, #28]
 1000a1a:	06da      	lsls	r2, r3, #27
 1000a1c:	d525      	bpl.n	1000a6a <process_event+0x352>
			evt = EVT_COMPLETE;
 1000a1e:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 1000a20:	f023 0310 	bic.w	r3, r3, #16
 1000a24:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
 1000a26:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
 1000a2a:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
 1000a2e:	2900      	cmp	r1, #0
 1000a30:	f47f ae9d 	bne.w	100076e <process_event+0x56>
out:
 1000a34:	e681      	b.n	100073a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 1000a36:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 1000a38:	2900      	cmp	r1, #0
 1000a3a:	d0cb      	beq.n	10009d4 <process_event+0x2bc>
	return node->next;
 1000a3c:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
 1000a40:	464b      	mov	r3, r9
 1000a42:	4620      	mov	r0, r4
 1000a44:	f8d1 b004 	ldr.w	fp, [r1, #4]
 1000a48:	9a00      	ldr	r2, [sp, #0]
 1000a4a:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 1000a4c:	f1ba 0f00 	cmp.w	sl, #0
 1000a50:	d0c0      	beq.n	10009d4 <process_event+0x2bc>
 1000a52:	4651      	mov	r1, sl
 1000a54:	f8da a000 	ldr.w	sl, [sl]
 1000a58:	e7f2      	b.n	1000a40 <process_event+0x328>
 1000a5a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
 1000a5c:	464b      	mov	r3, r9
 1000a5e:	4620      	mov	r0, r4
 1000a60:	9a00      	ldr	r2, [sp, #0]
 1000a62:	682d      	ldr	r5, [r5, #0]
 1000a64:	f005 fc6a 	bl	100633c <notify_one>
 1000a68:	e7b4      	b.n	10009d4 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
 1000a6a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 1000a6e:	bf1e      	ittt	ne
 1000a70:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
 1000a74:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 1000a76:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
 1000a78:	e7d5      	b.n	1000a26 <process_event+0x30e>
 1000a7a:	bf00      	nop
 1000a7c:	01006fdf 	.word	0x01006fdf
 1000a80:	01000a85 	.word	0x01000a85

01000a84 <transition_complete>:
{
 1000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1000a86:	4604      	mov	r4, r0
 1000a88:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
 1000a8a:	f100 0614 	add.w	r6, r0, #20
 1000a8e:	f04f 0320 	mov.w	r3, #32
 1000a92:	f3ef 8711 	mrs	r7, BASEPRI
 1000a96:	f383 8812 	msr	BASEPRI_MAX, r3
 1000a9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1000a9e:	4630      	mov	r0, r6
 1000aa0:	f004 f9f8 	bl	1004e94 <z_spin_lock_valid>
 1000aa4:	b940      	cbnz	r0, 1000ab8 <transition_complete+0x34>
 1000aa6:	490a      	ldr	r1, [pc, #40]	; (1000ad0 <transition_complete+0x4c>)
 1000aa8:	480a      	ldr	r0, [pc, #40]	; (1000ad4 <transition_complete+0x50>)
 1000aaa:	228e      	movs	r2, #142	; 0x8e
 1000aac:	f005 fceb 	bl	1006486 <assert_print>
 1000ab0:	218e      	movs	r1, #142	; 0x8e
 1000ab2:	4807      	ldr	r0, [pc, #28]	; (1000ad0 <transition_complete+0x4c>)
 1000ab4:	f005 fce0 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1000ab8:	4630      	mov	r0, r6
 1000aba:	f004 fa07 	bl	1004ecc <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
 1000abe:	463a      	mov	r2, r7
 1000ac0:	4620      	mov	r0, r4
	mgr->last_res = res;
 1000ac2:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
 1000ac4:	2101      	movs	r1, #1
}
 1000ac6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
 1000aca:	f7ff be25 	b.w	1000718 <process_event>
 1000ace:	bf00      	nop
 1000ad0:	01006fdf 	.word	0x01006fdf
 1000ad4:	01006eb0 	.word	0x01006eb0

01000ad8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
 1000ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1000adc:	4604      	mov	r4, r0
 1000ade:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
 1000ae0:	f005 fc42 	bl	1006368 <validate_args>

	if (rv < 0) {
 1000ae4:	1e05      	subs	r5, r0, #0
 1000ae6:	db54      	blt.n	1000b92 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
 1000ae8:	f104 0914 	add.w	r9, r4, #20
 1000aec:	f04f 0320 	mov.w	r3, #32
 1000af0:	f3ef 8a11 	mrs	sl, BASEPRI
 1000af4:	f383 8812 	msr	BASEPRI_MAX, r3
 1000af8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1000afc:	4648      	mov	r0, r9
 1000afe:	f004 f9c9 	bl	1004e94 <z_spin_lock_valid>
 1000b02:	b940      	cbnz	r0, 1000b16 <onoff_request+0x3e>
 1000b04:	4933      	ldr	r1, [pc, #204]	; (1000bd4 <onoff_request+0xfc>)
 1000b06:	4834      	ldr	r0, [pc, #208]	; (1000bd8 <onoff_request+0x100>)
 1000b08:	228e      	movs	r2, #142	; 0x8e
 1000b0a:	f005 fcbc 	bl	1006486 <assert_print>
 1000b0e:	218e      	movs	r1, #142	; 0x8e
 1000b10:	4830      	ldr	r0, [pc, #192]	; (1000bd4 <onoff_request+0xfc>)
 1000b12:	f005 fcb1 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1000b16:	4648      	mov	r0, r9
 1000b18:	f004 f9d8 	bl	1004ecc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
 1000b1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 1000b20:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1000b22:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
 1000b24:	428b      	cmp	r3, r1
 1000b26:	f002 0607 	and.w	r6, r2, #7
 1000b2a:	d04a      	beq.n	1000bc2 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
 1000b2c:	2e02      	cmp	r6, #2
 1000b2e:	d11f      	bne.n	1000b70 <onoff_request+0x98>
	rv = state;
 1000b30:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
 1000b32:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
 1000b36:	3301      	adds	r3, #1
 1000b38:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1000b3a:	4648      	mov	r0, r9
 1000b3c:	f004 f9b8 	bl	1004eb0 <z_spin_unlock_valid>
 1000b40:	b940      	cbnz	r0, 1000b54 <onoff_request+0x7c>
 1000b42:	4924      	ldr	r1, [pc, #144]	; (1000bd4 <onoff_request+0xfc>)
 1000b44:	4824      	ldr	r0, [pc, #144]	; (1000bd8 <onoff_request+0x100>)
 1000b46:	22b9      	movs	r2, #185	; 0xb9
 1000b48:	f005 fc9d 	bl	1006486 <assert_print>
 1000b4c:	21b9      	movs	r1, #185	; 0xb9
 1000b4e:	4821      	ldr	r0, [pc, #132]	; (1000bd4 <onoff_request+0xfc>)
 1000b50:	f005 fc92 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1000b54:	f38a 8811 	msr	BASEPRI, sl
 1000b58:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
 1000b5c:	f1b8 0f00 	cmp.w	r8, #0
 1000b60:	d017      	beq.n	1000b92 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
 1000b62:	2300      	movs	r3, #0
 1000b64:	4632      	mov	r2, r6
 1000b66:	4639      	mov	r1, r7
 1000b68:	4620      	mov	r0, r4
 1000b6a:	f005 fbe7 	bl	100633c <notify_one>
 1000b6e:	e010      	b.n	1000b92 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
 1000b70:	0793      	lsls	r3, r2, #30
 1000b72:	d001      	beq.n	1000b78 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
 1000b74:	2e06      	cmp	r6, #6
 1000b76:	d10f      	bne.n	1000b98 <onoff_request+0xc0>
	parent->next = child;
 1000b78:	2300      	movs	r3, #0
 1000b7a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 1000b7c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 1000b7e:	b9eb      	cbnz	r3, 1000bbc <onoff_request+0xe4>
	list->head = node;
 1000b80:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
 1000b84:	4635      	mov	r5, r6
 1000b86:	b9f6      	cbnz	r6, 1000bc6 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
 1000b88:	4652      	mov	r2, sl
 1000b8a:	2102      	movs	r1, #2
 1000b8c:	4620      	mov	r0, r4
 1000b8e:	f7ff fdc3 	bl	1000718 <process_event>
		}
	}

	return rv;
}
 1000b92:	4628      	mov	r0, r5
 1000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
 1000b98:	2e05      	cmp	r6, #5
 1000b9a:	d017      	beq.n	1000bcc <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
 1000b9c:	2e01      	cmp	r6, #1
 1000b9e:	d00a      	beq.n	1000bb6 <onoff_request+0xde>
 1000ba0:	490e      	ldr	r1, [pc, #56]	; (1000bdc <onoff_request+0x104>)
 1000ba2:	480d      	ldr	r0, [pc, #52]	; (1000bd8 <onoff_request+0x100>)
 1000ba4:	f240 12c9 	movw	r2, #457	; 0x1c9
 1000ba8:	f005 fc6d 	bl	1006486 <assert_print>
 1000bac:	f240 11c9 	movw	r1, #457	; 0x1c9
 1000bb0:	480a      	ldr	r0, [pc, #40]	; (1000bdc <onoff_request+0x104>)
 1000bb2:	f005 fc61 	bl	1006478 <assert_post_action>
		rv = -EIO;
 1000bb6:	f06f 0504 	mvn.w	r5, #4
 1000bba:	e004      	b.n	1000bc6 <onoff_request+0xee>
	parent->next = child;
 1000bbc:	601f      	str	r7, [r3, #0]
	list->tail = node;
 1000bbe:	6067      	str	r7, [r4, #4]
}
 1000bc0:	e7e0      	b.n	1000b84 <onoff_request+0xac>
		rv = -EAGAIN;
 1000bc2:	f06f 050a 	mvn.w	r5, #10
 1000bc6:	f04f 0800 	mov.w	r8, #0
 1000bca:	e7b6      	b.n	1000b3a <onoff_request+0x62>
		rv = -ENOTSUP;
 1000bcc:	f06f 0585 	mvn.w	r5, #133	; 0x85
 1000bd0:	e7f9      	b.n	1000bc6 <onoff_request+0xee>
 1000bd2:	bf00      	nop
 1000bd4:	01006fdf 	.word	0x01006fdf
 1000bd8:	01006eb0 	.word	0x01006eb0
 1000bdc:	01006fbd 	.word	0x01006fbd

01000be0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 1000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1000be4:	468b      	mov	fp, r1
 1000be6:	4692      	mov	sl, r2
 1000be8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 1000bea:	2500      	movs	r5, #0
{
 1000bec:	b091      	sub	sp, #68	; 0x44
 1000bee:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 1000bf0:	f89a 0000 	ldrb.w	r0, [sl]
 1000bf4:	b908      	cbnz	r0, 1000bfa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 1000bf6:	4628      	mov	r0, r5
 1000bf8:	e35f      	b.n	10012ba <cbvprintf+0x6da>
		if (*fp != '%') {
 1000bfa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 1000bfc:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 1000c00:	d007      	beq.n	1000c12 <cbvprintf+0x32>
			OUTC('%');
 1000c02:	4659      	mov	r1, fp
 1000c04:	9b02      	ldr	r3, [sp, #8]
 1000c06:	4798      	blx	r3
 1000c08:	2800      	cmp	r0, #0
 1000c0a:	f2c0 8356 	blt.w	10012ba <cbvprintf+0x6da>
 1000c0e:	3501      	adds	r5, #1
			break;
 1000c10:	e212      	b.n	1001038 <cbvprintf+0x458>
		} state = {
 1000c12:	2218      	movs	r2, #24
 1000c14:	2100      	movs	r1, #0
 1000c16:	a80a      	add	r0, sp, #40	; 0x28
 1000c18:	f005 fc87 	bl	100652a <memset>
	if (*sp == '%') {
 1000c1c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 1000c20:	2b25      	cmp	r3, #37	; 0x25
 1000c22:	d078      	beq.n	1000d16 <cbvprintf+0x136>
 1000c24:	2200      	movs	r2, #0
 1000c26:	4610      	mov	r0, r2
 1000c28:	4696      	mov	lr, r2
 1000c2a:	4694      	mov	ip, r2
 1000c2c:	4616      	mov	r6, r2
 1000c2e:	4639      	mov	r1, r7
		switch (*sp) {
 1000c30:	f817 3b01 	ldrb.w	r3, [r7], #1
 1000c34:	2b2b      	cmp	r3, #43	; 0x2b
 1000c36:	f000 809d 	beq.w	1000d74 <cbvprintf+0x194>
 1000c3a:	f200 8094 	bhi.w	1000d66 <cbvprintf+0x186>
 1000c3e:	2b20      	cmp	r3, #32
 1000c40:	f000 809b 	beq.w	1000d7a <cbvprintf+0x19a>
 1000c44:	2b23      	cmp	r3, #35	; 0x23
 1000c46:	f000 809b 	beq.w	1000d80 <cbvprintf+0x1a0>
 1000c4a:	b12e      	cbz	r6, 1000c58 <cbvprintf+0x78>
 1000c4c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1000c50:	f046 0604 	orr.w	r6, r6, #4
 1000c54:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 1000c58:	f1bc 0f00 	cmp.w	ip, #0
 1000c5c:	d005      	beq.n	1000c6a <cbvprintf+0x8a>
 1000c5e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1000c62:	f046 0608 	orr.w	r6, r6, #8
 1000c66:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 1000c6a:	f1be 0f00 	cmp.w	lr, #0
 1000c6e:	d005      	beq.n	1000c7c <cbvprintf+0x9c>
 1000c70:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 1000c74:	f046 0610 	orr.w	r6, r6, #16
 1000c78:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 1000c7c:	b128      	cbz	r0, 1000c8a <cbvprintf+0xaa>
 1000c7e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 1000c82:	f040 0020 	orr.w	r0, r0, #32
 1000c86:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 1000c8a:	b12a      	cbz	r2, 1000c98 <cbvprintf+0xb8>
 1000c8c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 1000c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 1000c94:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 1000c98:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 1000c9c:	f002 0044 	and.w	r0, r2, #68	; 0x44
 1000ca0:	2844      	cmp	r0, #68	; 0x44
 1000ca2:	d103      	bne.n	1000cac <cbvprintf+0xcc>
		conv->flag_zero = false;
 1000ca4:	f36f 1286 	bfc	r2, #6, #1
 1000ca8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 1000cac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 1000cb0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 1000cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 1000cb6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 1000cba:	d17b      	bne.n	1000db4 <cbvprintf+0x1d4>
		conv->width_star = true;
 1000cbc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
 1000cc0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 1000cc2:	f042 0201 	orr.w	r2, r2, #1
 1000cc6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 1000cca:	781a      	ldrb	r2, [r3, #0]
 1000ccc:	2a2e      	cmp	r2, #46	; 0x2e
 1000cce:	bf0c      	ite	eq
 1000cd0:	2101      	moveq	r1, #1
 1000cd2:	2100      	movne	r1, #0
 1000cd4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 1000cd8:	f361 0241 	bfi	r2, r1, #1, #1
 1000cdc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 1000ce0:	d174      	bne.n	1000dcc <cbvprintf+0x1ec>
	if (*sp == '*') {
 1000ce2:	785a      	ldrb	r2, [r3, #1]
 1000ce4:	2a2a      	cmp	r2, #42	; 0x2a
 1000ce6:	d06a      	beq.n	1000dbe <cbvprintf+0x1de>
	size_t val = 0;
 1000ce8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 1000cea:	260a      	movs	r6, #10
	++sp;
 1000cec:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 1000cee:	4618      	mov	r0, r3
 1000cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 1000cf4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 1000cf8:	2f09      	cmp	r7, #9
 1000cfa:	f240 808e 	bls.w	1000e1a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 1000cfe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 1000d02:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 1000d04:	f3c2 0040 	ubfx	r0, r2, #1, #1
 1000d08:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 1000d0c:	f361 0241 	bfi	r2, r1, #1, #1
 1000d10:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 1000d14:	e05a      	b.n	1000dcc <cbvprintf+0x1ec>
		conv->specifier = *sp++;
 1000d16:	f10a 0702 	add.w	r7, sl, #2
 1000d1a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 1000d1e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000d22:	07d9      	lsls	r1, r3, #31
 1000d24:	f140 8149 	bpl.w	1000fba <cbvprintf+0x3da>
			width = va_arg(ap, int);
 1000d28:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 1000d2c:	f1b9 0f00 	cmp.w	r9, #0
 1000d30:	da07      	bge.n	1000d42 <cbvprintf+0x162>
				conv->flag_dash = true;
 1000d32:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
 1000d36:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
 1000d3a:	f042 0204 	orr.w	r2, r2, #4
 1000d3e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
 1000d42:	075a      	lsls	r2, r3, #29
 1000d44:	f140 8142 	bpl.w	1000fcc <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
 1000d48:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 1000d4c:	f1b8 0f00 	cmp.w	r8, #0
 1000d50:	f280 8141 	bge.w	1000fd6 <cbvprintf+0x3f6>
				conv->prec_present = false;
 1000d54:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000d58:	f36f 0341 	bfc	r3, #1, #1
 1000d5c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 1000d60:	f04f 38ff 	mov.w	r8, #4294967295
 1000d64:	e137      	b.n	1000fd6 <cbvprintf+0x3f6>
		switch (*sp) {
 1000d66:	2b2d      	cmp	r3, #45	; 0x2d
 1000d68:	d00c      	beq.n	1000d84 <cbvprintf+0x1a4>
 1000d6a:	2b30      	cmp	r3, #48	; 0x30
 1000d6c:	f47f af6d 	bne.w	1000c4a <cbvprintf+0x6a>
			conv->flag_zero = true;
 1000d70:	2201      	movs	r2, #1
	} while (loop);
 1000d72:	e75c      	b.n	1000c2e <cbvprintf+0x4e>
			conv->flag_plus = true;
 1000d74:	f04f 0c01 	mov.w	ip, #1
 1000d78:	e759      	b.n	1000c2e <cbvprintf+0x4e>
			conv->flag_space = true;
 1000d7a:	f04f 0e01 	mov.w	lr, #1
 1000d7e:	e756      	b.n	1000c2e <cbvprintf+0x4e>
			conv->flag_hash = true;
 1000d80:	2001      	movs	r0, #1
 1000d82:	e754      	b.n	1000c2e <cbvprintf+0x4e>
		switch (*sp) {
 1000d84:	2601      	movs	r6, #1
 1000d86:	e752      	b.n	1000c2e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
 1000d88:	4633      	mov	r3, r6
 1000d8a:	fb0c 0202 	mla	r2, ip, r2, r0
 1000d8e:	3a30      	subs	r2, #48	; 0x30
 1000d90:	461e      	mov	r6, r3
 1000d92:	f816 0b01 	ldrb.w	r0, [r6], #1
 1000d96:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 1000d9a:	2f09      	cmp	r7, #9
 1000d9c:	d9f4      	bls.n	1000d88 <cbvprintf+0x1a8>
	if (sp != wp) {
 1000d9e:	4299      	cmp	r1, r3
 1000da0:	d093      	beq.n	1000cca <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 1000da2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 1000da6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 1000da8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 1000daa:	f362 0141 	bfi	r1, r2, #1, #1
 1000dae:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 1000db2:	e78a      	b.n	1000cca <cbvprintf+0xea>
 1000db4:	460b      	mov	r3, r1
	size_t val = 0;
 1000db6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 1000db8:	f04f 0c0a 	mov.w	ip, #10
 1000dbc:	e7e8      	b.n	1000d90 <cbvprintf+0x1b0>
		conv->prec_star = true;
 1000dbe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 1000dc2:	3302      	adds	r3, #2
		conv->prec_star = true;
 1000dc4:	f042 0204 	orr.w	r2, r2, #4
 1000dc8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
 1000dcc:	461f      	mov	r7, r3
 1000dce:	f817 2b01 	ldrb.w	r2, [r7], #1
 1000dd2:	2a6c      	cmp	r2, #108	; 0x6c
 1000dd4:	d041      	beq.n	1000e5a <cbvprintf+0x27a>
 1000dd6:	d825      	bhi.n	1000e24 <cbvprintf+0x244>
 1000dd8:	2a68      	cmp	r2, #104	; 0x68
 1000dda:	d02b      	beq.n	1000e34 <cbvprintf+0x254>
 1000ddc:	2a6a      	cmp	r2, #106	; 0x6a
 1000dde:	d046      	beq.n	1000e6e <cbvprintf+0x28e>
 1000de0:	2a4c      	cmp	r2, #76	; 0x4c
 1000de2:	d04c      	beq.n	1000e7e <cbvprintf+0x29e>
 1000de4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 1000de6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000dea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
 1000dee:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 1000df0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 1000df4:	f200 80d9 	bhi.w	1000faa <cbvprintf+0x3ca>
 1000df8:	2a57      	cmp	r2, #87	; 0x57
 1000dfa:	d84d      	bhi.n	1000e98 <cbvprintf+0x2b8>
 1000dfc:	2a41      	cmp	r2, #65	; 0x41
 1000dfe:	d003      	beq.n	1000e08 <cbvprintf+0x228>
 1000e00:	3a45      	subs	r2, #69	; 0x45
 1000e02:	2a02      	cmp	r2, #2
 1000e04:	f200 80d1 	bhi.w	1000faa <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 1000e08:	2204      	movs	r2, #4
 1000e0a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 1000e0e:	f362 0302 	bfi	r3, r2, #0, #3
 1000e12:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 1000e16:	2301      	movs	r3, #1
			break;
 1000e18:	e09e      	b.n	1000f58 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
 1000e1a:	fb06 2101 	mla	r1, r6, r1, r2
 1000e1e:	4603      	mov	r3, r0
 1000e20:	3930      	subs	r1, #48	; 0x30
 1000e22:	e764      	b.n	1000cee <cbvprintf+0x10e>
	switch (*sp) {
 1000e24:	2a74      	cmp	r2, #116	; 0x74
 1000e26:	d026      	beq.n	1000e76 <cbvprintf+0x296>
 1000e28:	2a7a      	cmp	r2, #122	; 0x7a
 1000e2a:	d1db      	bne.n	1000de4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
 1000e2c:	2206      	movs	r2, #6
 1000e2e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000e32:	e00d      	b.n	1000e50 <cbvprintf+0x270>
		if (*++sp == 'h') {
 1000e34:	785a      	ldrb	r2, [r3, #1]
 1000e36:	2a68      	cmp	r2, #104	; 0x68
 1000e38:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 1000e3c:	d106      	bne.n	1000e4c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
 1000e3e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 1000e40:	f361 02c6 	bfi	r2, r1, #3, #4
 1000e44:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 1000e48:	1c9f      	adds	r7, r3, #2
 1000e4a:	e7cc      	b.n	1000de6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
 1000e4c:	4613      	mov	r3, r2
 1000e4e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 1000e50:	f362 03c6 	bfi	r3, r2, #3, #4
 1000e54:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 1000e58:	e7c5      	b.n	1000de6 <cbvprintf+0x206>
		if (*++sp == 'l') {
 1000e5a:	785a      	ldrb	r2, [r3, #1]
 1000e5c:	2a6c      	cmp	r2, #108	; 0x6c
 1000e5e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 1000e62:	d101      	bne.n	1000e68 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
 1000e64:	2104      	movs	r1, #4
 1000e66:	e7eb      	b.n	1000e40 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
 1000e68:	4613      	mov	r3, r2
 1000e6a:	2203      	movs	r2, #3
 1000e6c:	e7f0      	b.n	1000e50 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
 1000e6e:	2205      	movs	r2, #5
 1000e70:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000e74:	e7ec      	b.n	1000e50 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
 1000e76:	2207      	movs	r2, #7
 1000e78:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 1000e7c:	e7e8      	b.n	1000e50 <cbvprintf+0x270>
		conv->unsupported = true;
 1000e7e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 1000e82:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 1000e86:	f023 0302 	bic.w	r3, r3, #2
 1000e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 1000e8e:	f043 0302 	orr.w	r3, r3, #2
 1000e92:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 1000e96:	e7a6      	b.n	1000de6 <cbvprintf+0x206>
	switch (conv->specifier) {
 1000e98:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 1000e9c:	2920      	cmp	r1, #32
 1000e9e:	f200 8084 	bhi.w	1000faa <cbvprintf+0x3ca>
 1000ea2:	a001      	add	r0, pc, #4	; (adr r0, 1000ea8 <cbvprintf+0x2c8>)
 1000ea4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 1000ea8:	01000f6d 	.word	0x01000f6d
 1000eac:	01000fab 	.word	0x01000fab
 1000eb0:	01000fab 	.word	0x01000fab
 1000eb4:	01000fab 	.word	0x01000fab
 1000eb8:	01000fab 	.word	0x01000fab
 1000ebc:	01000fab 	.word	0x01000fab
 1000ec0:	01000fab 	.word	0x01000fab
 1000ec4:	01000fab 	.word	0x01000fab
 1000ec8:	01000fab 	.word	0x01000fab
 1000ecc:	01000e09 	.word	0x01000e09
 1000ed0:	01000fab 	.word	0x01000fab
 1000ed4:	01000f6d 	.word	0x01000f6d
 1000ed8:	01000f2d 	.word	0x01000f2d
 1000edc:	01000e09 	.word	0x01000e09
 1000ee0:	01000e09 	.word	0x01000e09
 1000ee4:	01000e09 	.word	0x01000e09
 1000ee8:	01000fab 	.word	0x01000fab
 1000eec:	01000f2d 	.word	0x01000f2d
 1000ef0:	01000fab 	.word	0x01000fab
 1000ef4:	01000fab 	.word	0x01000fab
 1000ef8:	01000fab 	.word	0x01000fab
 1000efc:	01000fab 	.word	0x01000fab
 1000f00:	01000f75 	.word	0x01000f75
 1000f04:	01000f6d 	.word	0x01000f6d
 1000f08:	01000f91 	.word	0x01000f91
 1000f0c:	01000fab 	.word	0x01000fab
 1000f10:	01000fab 	.word	0x01000fab
 1000f14:	01000f91 	.word	0x01000f91
 1000f18:	01000fab 	.word	0x01000fab
 1000f1c:	01000f6d 	.word	0x01000f6d
 1000f20:	01000fab 	.word	0x01000fab
 1000f24:	01000fab 	.word	0x01000fab
 1000f28:	01000f6d 	.word	0x01000f6d
		conv->specifier_cat = SPECIFIER_SINT;
 1000f2c:	2001      	movs	r0, #1
 1000f2e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000f32:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 1000f36:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000f3a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 1000f3c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 1000f40:	bf02      	ittt	eq
 1000f42:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 1000f46:	f041 0101 	orreq.w	r1, r1, #1
 1000f4a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 1000f4e:	2a63      	cmp	r2, #99	; 0x63
 1000f50:	d131      	bne.n	1000fb6 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 1000f52:	3b00      	subs	r3, #0
 1000f54:	bf18      	it	ne
 1000f56:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 1000f58:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 1000f5c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 1000f60:	430b      	orrs	r3, r1
 1000f62:	f363 0241 	bfi	r2, r3, #1, #1
 1000f66:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 1000f6a:	e6d8      	b.n	1000d1e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 1000f6c:	2002      	movs	r0, #2
 1000f6e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 1000f72:	e7de      	b.n	1000f32 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 1000f74:	2103      	movs	r1, #3
 1000f76:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000f7a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 1000f7e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 1000f82:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000f86:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 1000f88:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 1000f8c:	4143      	adcs	r3, r0
 1000f8e:	e7e3      	b.n	1000f58 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 1000f90:	2103      	movs	r1, #3
 1000f92:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 1000f96:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 1000f9a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 1000f9e:	bf14      	ite	ne
 1000fa0:	2301      	movne	r3, #1
 1000fa2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
 1000fa4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 1000fa8:	e7d6      	b.n	1000f58 <cbvprintf+0x378>
		conv->invalid = true;
 1000faa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 1000fae:	f043 0301 	orr.w	r3, r3, #1
 1000fb2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 1000fb6:	2300      	movs	r3, #0
 1000fb8:	e7ce      	b.n	1000f58 <cbvprintf+0x378>
		} else if (conv->width_present) {
 1000fba:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 1000fbe:	2a00      	cmp	r2, #0
		int width = -1;
 1000fc0:	bfac      	ite	ge
 1000fc2:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
 1000fc6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
 1000fca:	e6ba      	b.n	1000d42 <cbvprintf+0x162>
		} else if (conv->prec_present) {
 1000fcc:	079b      	lsls	r3, r3, #30
 1000fce:	f57f aec7 	bpl.w	1000d60 <cbvprintf+0x180>
			precision = conv->prec_value;
 1000fd2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
 1000fd6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 1000fd8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 1000fdc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
 1000fe0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
 1000fe4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 1000fe8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 1000fea:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 1000fee:	d138      	bne.n	1001062 <cbvprintf+0x482>
			switch (length_mod) {
 1000ff0:	1ecb      	subs	r3, r1, #3
 1000ff2:	2b04      	cmp	r3, #4
 1000ff4:	d822      	bhi.n	100103c <cbvprintf+0x45c>
 1000ff6:	e8df f003 	tbb	[pc, r3]
 1000ffa:	0903      	.short	0x0903
 1000ffc:	2109      	.short	0x2109
 1000ffe:	21          	.byte	0x21
 1000fff:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 1001000:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 1001004:	17da      	asrs	r2, r3, #31
 1001006:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 100100a:	e006      	b.n	100101a <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 100100c:	3407      	adds	r4, #7
 100100e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 1001012:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 1001016:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 100101a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 100101e:	f013 0603 	ands.w	r6, r3, #3
 1001022:	d056      	beq.n	10010d2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
 1001024:	463b      	mov	r3, r7
 1001026:	4652      	mov	r2, sl
 1001028:	4659      	mov	r1, fp
 100102a:	9802      	ldr	r0, [sp, #8]
 100102c:	f005 fa0e 	bl	100644c <outs>
 1001030:	2800      	cmp	r0, #0
 1001032:	f2c0 8142 	blt.w	10012ba <cbvprintf+0x6da>
 1001036:	4405      	add	r5, r0
			continue;
 1001038:	46ba      	mov	sl, r7
 100103a:	e5d9      	b.n	1000bf0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 100103c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1001040:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 1001042:	ea4f 72e3 	mov.w	r2, r3, asr #31
 1001046:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 100104a:	d105      	bne.n	1001058 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
 100104c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 1001050:	930a      	str	r3, [sp, #40]	; 0x28
 1001052:	2300      	movs	r3, #0
 1001054:	930b      	str	r3, [sp, #44]	; 0x2c
 1001056:	e7e0      	b.n	100101a <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
 1001058:	2902      	cmp	r1, #2
 100105a:	d1de      	bne.n	100101a <cbvprintf+0x43a>
				value->sint = (short)value->sint;
 100105c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 1001060:	e7d0      	b.n	1001004 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 1001062:	2b02      	cmp	r3, #2
 1001064:	d123      	bne.n	10010ae <cbvprintf+0x4ce>
			switch (length_mod) {
 1001066:	1ecb      	subs	r3, r1, #3
 1001068:	2b04      	cmp	r3, #4
 100106a:	d813      	bhi.n	1001094 <cbvprintf+0x4b4>
 100106c:	e8df f003 	tbb	[pc, r3]
 1001070:	120a0a03 	.word	0x120a0a03
 1001074:	12          	.byte	0x12
 1001075:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
 1001076:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
 1001078:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
 100107a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 100107c:	920a      	str	r2, [sp, #40]	; 0x28
 100107e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 1001080:	4604      	mov	r4, r0
 1001082:	e7ca      	b.n	100101a <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
 1001084:	1de0      	adds	r0, r4, #7
 1001086:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 100108a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 100108e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 1001092:	e7f5      	b.n	1001080 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
 1001094:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1001098:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 100109a:	930a      	str	r3, [sp, #40]	; 0x28
 100109c:	f04f 0300 	mov.w	r3, #0
 10010a0:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 10010a2:	d0d3      	beq.n	100104c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
 10010a4:	2902      	cmp	r1, #2
 10010a6:	d1b8      	bne.n	100101a <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
 10010a8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 10010ac:	e7d0      	b.n	1001050 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
 10010ae:	2b04      	cmp	r3, #4
 10010b0:	d109      	bne.n	10010c6 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
 10010b2:	1de3      	adds	r3, r4, #7
 10010b4:	f023 0307 	bic.w	r3, r3, #7
 10010b8:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 10010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 10010c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 10010c4:	e7a9      	b.n	100101a <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 10010c6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 10010c8:	bf04      	itt	eq
 10010ca:	f854 3b04 	ldreq.w	r3, [r4], #4
 10010ce:	930a      	streq	r3, [sp, #40]	; 0x28
 10010d0:	e7a3      	b.n	100101a <cbvprintf+0x43a>
		switch (conv->specifier) {
 10010d2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 10010d6:	2878      	cmp	r0, #120	; 0x78
 10010d8:	d8ae      	bhi.n	1001038 <cbvprintf+0x458>
 10010da:	2862      	cmp	r0, #98	; 0x62
 10010dc:	d822      	bhi.n	1001124 <cbvprintf+0x544>
 10010de:	2825      	cmp	r0, #37	; 0x25
 10010e0:	f43f ad8f 	beq.w	1000c02 <cbvprintf+0x22>
 10010e4:	2858      	cmp	r0, #88	; 0x58
 10010e6:	d1a7      	bne.n	1001038 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 10010e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 10010ec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 10010f0:	9300      	str	r3, [sp, #0]
 10010f2:	aa0c      	add	r2, sp, #48	; 0x30
 10010f4:	ab04      	add	r3, sp, #16
 10010f6:	f005 f963 	bl	10063c0 <encode_uint>
 10010fa:	4682      	mov	sl, r0
			if (precision >= 0) {
 10010fc:	f1b8 0f00 	cmp.w	r8, #0
 1001100:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 1001104:	db0c      	blt.n	1001120 <cbvprintf+0x540>
				conv->flag_zero = false;
 1001106:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 100110a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 100110e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 1001112:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 1001114:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 1001118:	d902      	bls.n	1001120 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
 100111a:	eba8 0303 	sub.w	r3, r8, r3
 100111e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 1001120:	4680      	mov	r8, r0
 1001122:	e03d      	b.n	10011a0 <cbvprintf+0x5c0>
		switch (conv->specifier) {
 1001124:	3863      	subs	r0, #99	; 0x63
 1001126:	2815      	cmp	r0, #21
 1001128:	d886      	bhi.n	1001038 <cbvprintf+0x458>
 100112a:	a201      	add	r2, pc, #4	; (adr r2, 1001130 <cbvprintf+0x550>)
 100112c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 1001130:	010011b1 	.word	0x010011b1
 1001134:	01001215 	.word	0x01001215
 1001138:	01001039 	.word	0x01001039
 100113c:	01001039 	.word	0x01001039
 1001140:	01001039 	.word	0x01001039
 1001144:	01001039 	.word	0x01001039
 1001148:	01001215 	.word	0x01001215
 100114c:	01001039 	.word	0x01001039
 1001150:	01001039 	.word	0x01001039
 1001154:	01001039 	.word	0x01001039
 1001158:	01001039 	.word	0x01001039
 100115c:	0100126f 	.word	0x0100126f
 1001160:	0100123d 	.word	0x0100123d
 1001164:	01001241 	.word	0x01001241
 1001168:	01001039 	.word	0x01001039
 100116c:	01001039 	.word	0x01001039
 1001170:	01001189 	.word	0x01001189
 1001174:	01001039 	.word	0x01001039
 1001178:	0100123d 	.word	0x0100123d
 100117c:	01001039 	.word	0x01001039
 1001180:	01001039 	.word	0x01001039
 1001184:	0100123d 	.word	0x0100123d
			if (precision >= 0) {
 1001188:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 100118c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 1001190:	db0a      	blt.n	10011a8 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
 1001192:	4641      	mov	r1, r8
 1001194:	4650      	mov	r0, sl
 1001196:	f005 f9b4 	bl	1006502 <strnlen>
		char sign = 0;
 100119a:	2600      	movs	r6, #0
			bpe = bps + len;
 100119c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
 10011a0:	f1ba 0f00 	cmp.w	sl, #0
 10011a4:	d10c      	bne.n	10011c0 <cbvprintf+0x5e0>
 10011a6:	e747      	b.n	1001038 <cbvprintf+0x458>
				len = strlen(bps);
 10011a8:	4650      	mov	r0, sl
 10011aa:	f005 f9a3 	bl	10064f4 <strlen>
 10011ae:	e7f4      	b.n	100119a <cbvprintf+0x5ba>
			break;
 10011b0:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 10011b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
 10011b4:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 10011b8:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
 10011bc:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
 10011c0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 10011c4:	b106      	cbz	r6, 10011c8 <cbvprintf+0x5e8>
			nj_len += 1U;
 10011c6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 10011c8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 10011cc:	06d0      	lsls	r0, r2, #27
 10011ce:	d568      	bpl.n	10012a2 <cbvprintf+0x6c2>
			nj_len += 2U;
 10011d0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 10011d2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 10011d4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 10011d6:	bf48      	it	mi
 10011d8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 10011da:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 10011dc:	bf48      	it	mi
 10011de:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 10011e0:	f1b9 0f00 	cmp.w	r9, #0
 10011e4:	dd76      	ble.n	10012d4 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
 10011e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 10011ea:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 10011ee:	f3c2 0380 	ubfx	r3, r2, #2, #1
 10011f2:	9303      	str	r3, [sp, #12]
 10011f4:	0753      	lsls	r3, r2, #29
 10011f6:	d46d      	bmi.n	10012d4 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
 10011f8:	0650      	lsls	r0, r2, #25
 10011fa:	d561      	bpl.n	10012c0 <cbvprintf+0x6e0>
					if (sign != 0) {
 10011fc:	b146      	cbz	r6, 1001210 <cbvprintf+0x630>
						OUTC(sign);
 10011fe:	4659      	mov	r1, fp
 1001200:	4630      	mov	r0, r6
 1001202:	9b02      	ldr	r3, [sp, #8]
 1001204:	4798      	blx	r3
 1001206:	2800      	cmp	r0, #0
 1001208:	db57      	blt.n	10012ba <cbvprintf+0x6da>
						sign = 0;
 100120a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 100120c:	3501      	adds	r5, #1
						sign = 0;
 100120e:	461e      	mov	r6, r3
					pad = '0';
 1001210:	2330      	movs	r3, #48	; 0x30
 1001212:	e056      	b.n	10012c2 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
 1001214:	071e      	lsls	r6, r3, #28
 1001216:	d40f      	bmi.n	1001238 <cbvprintf+0x658>
				sign = ' ';
 1001218:	f013 0610 	ands.w	r6, r3, #16
 100121c:	bf18      	it	ne
 100121e:	2620      	movne	r6, #32
			sint = value->sint;
 1001220:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 1001224:	2b00      	cmp	r3, #0
 1001226:	f6bf af5f 	bge.w	10010e8 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
 100122a:	4252      	negs	r2, r2
 100122c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 1001230:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 1001232:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 1001236:	e757      	b.n	10010e8 <cbvprintf+0x508>
				sign = '+';
 1001238:	262b      	movs	r6, #43	; 0x2b
 100123a:	e7f1      	b.n	1001220 <cbvprintf+0x640>
		switch (conv->specifier) {
 100123c:	2600      	movs	r6, #0
 100123e:	e753      	b.n	10010e8 <cbvprintf+0x508>
			if (value->ptr != NULL) {
 1001240:	980a      	ldr	r0, [sp, #40]	; 0x28
 1001242:	b340      	cbz	r0, 1001296 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1001244:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 1001248:	9300      	str	r3, [sp, #0]
 100124a:	2100      	movs	r1, #0
 100124c:	ab04      	add	r3, sp, #16
 100124e:	aa0c      	add	r2, sp, #48	; 0x30
 1001250:	f005 f8b6 	bl	10063c0 <encode_uint>
				conv->altform_0c = true;
 1001254:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1001258:	4682      	mov	sl, r0
				conv->altform_0c = true;
 100125a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 100125e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 1001262:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
 1001266:	2600      	movs	r6, #0
				conv->altform_0c = true;
 1001268:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
 100126c:	e746      	b.n	10010fc <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
 100126e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 1001270:	2907      	cmp	r1, #7
 1001272:	f63f aee1 	bhi.w	1001038 <cbvprintf+0x458>
 1001276:	e8df f001 	tbb	[pc, r1]
 100127a:	040c      	.short	0x040c
 100127c:	08080c06 	.word	0x08080c06
 1001280:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 1001282:	701d      	strb	r5, [r3, #0]
		break;
 1001284:	e6d8      	b.n	1001038 <cbvprintf+0x458>
		*(short *)dp = (short)count;
 1001286:	801d      	strh	r5, [r3, #0]
		break;
 1001288:	e6d6      	b.n	1001038 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 100128a:	17ea      	asrs	r2, r5, #31
 100128c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 1001290:	e6d2      	b.n	1001038 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 1001292:	601d      	str	r5, [r3, #0]
		break;
 1001294:	e6d0      	b.n	1001038 <cbvprintf+0x458>
			bps = "(nil)";
 1001296:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1001360 <cbvprintf+0x780>
 100129a:	4606      	mov	r6, r0
			bpe = bps + 5;
 100129c:	f10a 0805 	add.w	r8, sl, #5
 10012a0:	e78e      	b.n	10011c0 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
 10012a2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 10012a4:	bf48      	it	mi
 10012a6:	3301      	addmi	r3, #1
 10012a8:	e793      	b.n	10011d2 <cbvprintf+0x5f2>
					OUTC(pad);
 10012aa:	4618      	mov	r0, r3
 10012ac:	9303      	str	r3, [sp, #12]
 10012ae:	4659      	mov	r1, fp
 10012b0:	9b02      	ldr	r3, [sp, #8]
 10012b2:	4798      	blx	r3
 10012b4:	2800      	cmp	r0, #0
 10012b6:	9b03      	ldr	r3, [sp, #12]
 10012b8:	da04      	bge.n	10012c4 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
 10012ba:	b011      	add	sp, #68	; 0x44
 10012bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 10012c0:	2320      	movs	r3, #32
 10012c2:	444d      	add	r5, r9
 10012c4:	464a      	mov	r2, r9
				while (width-- > 0) {
 10012c6:	2a00      	cmp	r2, #0
 10012c8:	eba5 0109 	sub.w	r1, r5, r9
 10012cc:	f109 39ff 	add.w	r9, r9, #4294967295
 10012d0:	dceb      	bgt.n	10012aa <cbvprintf+0x6ca>
 10012d2:	460d      	mov	r5, r1
		if (sign != 0) {
 10012d4:	b136      	cbz	r6, 10012e4 <cbvprintf+0x704>
			OUTC(sign);
 10012d6:	4659      	mov	r1, fp
 10012d8:	4630      	mov	r0, r6
 10012da:	9b02      	ldr	r3, [sp, #8]
 10012dc:	4798      	blx	r3
 10012de:	2800      	cmp	r0, #0
 10012e0:	dbeb      	blt.n	10012ba <cbvprintf+0x6da>
 10012e2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 10012e4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 10012e8:	06d9      	lsls	r1, r3, #27
 10012ea:	d401      	bmi.n	10012f0 <cbvprintf+0x710>
 10012ec:	071a      	lsls	r2, r3, #28
 10012ee:	d506      	bpl.n	10012fe <cbvprintf+0x71e>
				OUTC('0');
 10012f0:	4659      	mov	r1, fp
 10012f2:	2030      	movs	r0, #48	; 0x30
 10012f4:	9b02      	ldr	r3, [sp, #8]
 10012f6:	4798      	blx	r3
 10012f8:	2800      	cmp	r0, #0
 10012fa:	dbde      	blt.n	10012ba <cbvprintf+0x6da>
 10012fc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 10012fe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 1001302:	06db      	lsls	r3, r3, #27
 1001304:	d507      	bpl.n	1001316 <cbvprintf+0x736>
				OUTC(conv->specifier);
 1001306:	4659      	mov	r1, fp
 1001308:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 100130c:	9b02      	ldr	r3, [sp, #8]
 100130e:	4798      	blx	r3
 1001310:	2800      	cmp	r0, #0
 1001312:	dbd2      	blt.n	10012ba <cbvprintf+0x6da>
 1001314:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 1001316:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 1001318:	442e      	add	r6, r5
 100131a:	1b73      	subs	r3, r6, r5
 100131c:	2b00      	cmp	r3, #0
 100131e:	dc16      	bgt.n	100134e <cbvprintf+0x76e>
			OUTS(bps, bpe);
 1001320:	4643      	mov	r3, r8
 1001322:	4652      	mov	r2, sl
 1001324:	4659      	mov	r1, fp
 1001326:	9802      	ldr	r0, [sp, #8]
 1001328:	f005 f890 	bl	100644c <outs>
 100132c:	2800      	cmp	r0, #0
 100132e:	dbc4      	blt.n	10012ba <cbvprintf+0x6da>
 1001330:	4405      	add	r5, r0
		while (width > 0) {
 1001332:	44a9      	add	r9, r5
 1001334:	eba9 0305 	sub.w	r3, r9, r5
 1001338:	2b00      	cmp	r3, #0
 100133a:	f77f ae7d 	ble.w	1001038 <cbvprintf+0x458>
			OUTC(' ');
 100133e:	4659      	mov	r1, fp
 1001340:	2020      	movs	r0, #32
 1001342:	9b02      	ldr	r3, [sp, #8]
 1001344:	4798      	blx	r3
 1001346:	2800      	cmp	r0, #0
 1001348:	dbb7      	blt.n	10012ba <cbvprintf+0x6da>
 100134a:	3501      	adds	r5, #1
			--width;
 100134c:	e7f2      	b.n	1001334 <cbvprintf+0x754>
				OUTC('0');
 100134e:	4659      	mov	r1, fp
 1001350:	2030      	movs	r0, #48	; 0x30
 1001352:	9b02      	ldr	r3, [sp, #8]
 1001354:	4798      	blx	r3
 1001356:	2800      	cmp	r0, #0
 1001358:	dbaf      	blt.n	10012ba <cbvprintf+0x6da>
 100135a:	3501      	adds	r5, #1
 100135c:	e7dd      	b.n	100131a <cbvprintf+0x73a>
 100135e:	bf00      	nop
 1001360:	0100700c 	.word	0x0100700c

01001364 <nordicsemi_nrf53_init>:
	__asm__ volatile(
 1001364:	f04f 0220 	mov.w	r2, #32
 1001368:	f3ef 8311 	mrs	r3, BASEPRI
 100136c:	f382 8812 	msr	BASEPRI_MAX, r2
 1001370:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }
    else
#endif
    {
        p_reg->ICACHECNF = (uint32_t)config;
 1001374:	2101      	movs	r1, #1
 1001376:	4a04      	ldr	r2, [pc, #16]	; (1001388 <nordicsemi_nrf53_init+0x24>)
 1001378:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
 100137c:	f383 8811 	msr	BASEPRI, r3
 1001380:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
 1001384:	2000      	movs	r0, #0
 1001386:	4770      	bx	lr
 1001388:	41080000 	.word	0x41080000

0100138c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
 100138c:	b120      	cbz	r0, 1001398 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
 100138e:	4b03      	ldr	r3, [pc, #12]	; (100139c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
 1001390:	0180      	lsls	r0, r0, #6
 1001392:	f043 0301 	orr.w	r3, r3, #1
 1001396:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
 1001398:	4770      	bx	lr
 100139a:	bf00      	nop
 100139c:	01006bc0 	.word	0x01006bc0

010013a0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 10013a0:	4901      	ldr	r1, [pc, #4]	; (10013a8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 10013a2:	2210      	movs	r2, #16
	str	r2, [r1]
 10013a4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 10013a6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 10013a8:	e000ed10 	.word	0xe000ed10

010013ac <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 10013ac:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 10013ae:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 10013b0:	f380 8811 	msr	BASEPRI, r0
	isb
 10013b4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 10013b8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 10013bc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 10013be:	b662      	cpsie	i
	isb
 10013c0:	f3bf 8f6f 	isb	sy

	bx	lr
 10013c4:	4770      	bx	lr
 10013c6:	bf00      	nop

010013c8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
 10013c8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
 10013ca:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
 10013cc:	f381 8811 	msr	BASEPRI, r1

	wfe
 10013d0:	bf20      	wfe

	msr	BASEPRI, r0
 10013d2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
 10013d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
 10013d8:	4770      	bx	lr
 10013da:	bf00      	nop

010013dc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 10013dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 10013de:	4605      	mov	r5, r0

	if (esf != NULL) {
 10013e0:	460c      	mov	r4, r1
 10013e2:	b1c9      	cbz	r1, 1001418 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 10013e4:	688b      	ldr	r3, [r1, #8]
 10013e6:	4810      	ldr	r0, [pc, #64]	; (1001428 <z_arm_fatal_error+0x4c>)
 10013e8:	9300      	str	r3, [sp, #0]
 10013ea:	e9d1 2300 	ldrd	r2, r3, [r1]
 10013ee:	2145      	movs	r1, #69	; 0x45
 10013f0:	f005 f857 	bl	10064a2 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 10013f4:	6963      	ldr	r3, [r4, #20]
 10013f6:	2145      	movs	r1, #69	; 0x45
 10013f8:	9300      	str	r3, [sp, #0]
 10013fa:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 10013fe:	480b      	ldr	r0, [pc, #44]	; (100142c <z_arm_fatal_error+0x50>)
 1001400:	f005 f84f 	bl	10064a2 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 1001404:	2145      	movs	r1, #69	; 0x45
 1001406:	69e2      	ldr	r2, [r4, #28]
 1001408:	4809      	ldr	r0, [pc, #36]	; (1001430 <z_arm_fatal_error+0x54>)
 100140a:	f005 f84a 	bl	10064a2 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 100140e:	2145      	movs	r1, #69	; 0x45
 1001410:	69a2      	ldr	r2, [r4, #24]
 1001412:	4808      	ldr	r0, [pc, #32]	; (1001434 <z_arm_fatal_error+0x58>)
 1001414:	f005 f845 	bl	10064a2 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 1001418:	4621      	mov	r1, r4
 100141a:	4628      	mov	r0, r5
}
 100141c:	b003      	add	sp, #12
 100141e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
 1001422:	f003 bb47 	b.w	1004ab4 <z_fatal_error>
 1001426:	bf00      	nop
 1001428:	01007016 	.word	0x01007016
 100142c:	0100704a 	.word	0x0100704a
 1001430:	0100707e 	.word	0x0100707e
 1001434:	01007092 	.word	0x01007092

01001438 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 1001438:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 100143a:	2b00      	cmp	r3, #0
 100143c:	db08      	blt.n	1001450 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 100143e:	2201      	movs	r2, #1
 1001440:	f000 001f 	and.w	r0, r0, #31
 1001444:	fa02 f000 	lsl.w	r0, r2, r0
 1001448:	4a02      	ldr	r2, [pc, #8]	; (1001454 <arch_irq_enable+0x1c>)
 100144a:	095b      	lsrs	r3, r3, #5
 100144c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 1001450:	4770      	bx	lr
 1001452:	bf00      	nop
 1001454:	e000e100 	.word	0xe000e100

01001458 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 1001458:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 100145a:	2b00      	cmp	r3, #0
 100145c:	db0d      	blt.n	100147a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 100145e:	2201      	movs	r2, #1
 1001460:	f000 001f 	and.w	r0, r0, #31
 1001464:	fa02 f000 	lsl.w	r0, r2, r0
 1001468:	095b      	lsrs	r3, r3, #5
 100146a:	4a04      	ldr	r2, [pc, #16]	; (100147c <arch_irq_disable+0x24>)
 100146c:	3320      	adds	r3, #32
 100146e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 1001472:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1001476:	f3bf 8f6f 	isb	sy
}
 100147a:	4770      	bx	lr
 100147c:	e000e100 	.word	0xe000e100

01001480 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 1001480:	4b05      	ldr	r3, [pc, #20]	; (1001498 <arch_irq_is_enabled+0x18>)
 1001482:	0942      	lsrs	r2, r0, #5
 1001484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1001488:	2301      	movs	r3, #1
 100148a:	f000 001f 	and.w	r0, r0, #31
 100148e:	fa03 f000 	lsl.w	r0, r3, r0
}
 1001492:	4010      	ands	r0, r2
 1001494:	4770      	bx	lr
 1001496:	bf00      	nop
 1001498:	e000e100 	.word	0xe000e100

0100149c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
 100149c:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 100149e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 10014a0:	2c07      	cmp	r4, #7
{
 10014a2:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 10014a4:	d908      	bls.n	10014b8 <z_arm_irq_priority_set+0x1c>
 10014a6:	490d      	ldr	r1, [pc, #52]	; (10014dc <z_arm_irq_priority_set+0x40>)
 10014a8:	480d      	ldr	r0, [pc, #52]	; (10014e0 <z_arm_irq_priority_set+0x44>)
 10014aa:	2257      	movs	r2, #87	; 0x57
 10014ac:	f004 ffeb 	bl	1006486 <assert_print>
 10014b0:	2157      	movs	r1, #87	; 0x57
 10014b2:	480a      	ldr	r0, [pc, #40]	; (10014dc <z_arm_irq_priority_set+0x40>)
 10014b4:	f004 ffe0 	bl	1006478 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 10014b8:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 10014ba:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10014bc:	bfac      	ite	ge
 10014be:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10014c2:	4b08      	ldrlt	r3, [pc, #32]	; (10014e4 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10014c4:	ea4f 1444 	mov.w	r4, r4, lsl #5
 10014c8:	b2e4      	uxtb	r4, r4
 10014ca:	bfab      	itete	ge
 10014cc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10014d0:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10014d4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 10014d8:	555c      	strblt	r4, [r3, r5]
}
 10014da:	bd38      	pop	{r3, r4, r5, pc}
 10014dc:	010070c5 	.word	0x010070c5
 10014e0:	01006eb0 	.word	0x01006eb0
 10014e4:	e000ed14 	.word	0xe000ed14

010014e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 10014e8:	bf30      	wfi
    b z_SysNmiOnReset
 10014ea:	f7ff bffd 	b.w	10014e8 <z_SysNmiOnReset>
 10014ee:	bf00      	nop

010014f0 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 10014f0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 10014f2:	4b08      	ldr	r3, [pc, #32]	; (1001514 <z_arm_prep_c+0x24>)
 10014f4:	4a08      	ldr	r2, [pc, #32]	; (1001518 <z_arm_prep_c+0x28>)
 10014f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 10014fa:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 10014fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1001500:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 1001504:	f003 fb4c 	bl	1004ba0 <z_bss_zero>
	z_data_copy();
 1001508:	f004 fc68 	bl	1005ddc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 100150c:	f000 fab6 	bl	1001a7c <z_arm_interrupt_init>
	z_cstart();
 1001510:	f003 fb86 	bl	1004c20 <z_cstart>
 1001514:	01000000 	.word	0x01000000
 1001518:	e000ed00 	.word	0xe000ed00

0100151c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 100151c:	4a09      	ldr	r2, [pc, #36]	; (1001544 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 100151e:	490a      	ldr	r1, [pc, #40]	; (1001548 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 1001520:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 1001522:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 1001524:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 1001526:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 1001528:	4908      	ldr	r1, [pc, #32]	; (100154c <arch_swap+0x30>)
 100152a:	684b      	ldr	r3, [r1, #4]
 100152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 1001530:	604b      	str	r3, [r1, #4]
 1001532:	2300      	movs	r3, #0
 1001534:	f383 8811 	msr	BASEPRI, r3
 1001538:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 100153c:	6893      	ldr	r3, [r2, #8]
}
 100153e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 1001540:	4770      	bx	lr
 1001542:	bf00      	nop
 1001544:	210003e4 	.word	0x210003e4
 1001548:	01006cf8 	.word	0x01006cf8
 100154c:	e000ed00 	.word	0xe000ed00

01001550 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 1001550:	4913      	ldr	r1, [pc, #76]	; (10015a0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 1001552:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 1001554:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 1001558:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 100155a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 100155e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1001562:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
 1001564:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 1001568:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 100156c:	4f0d      	ldr	r7, [pc, #52]	; (10015a4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 100156e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 1001572:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 1001574:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 1001576:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 1001578:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 100157a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 100157c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 100157e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 1001582:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 1001586:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 100158a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
 100158e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
 1001592:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
 1001594:	f004 ffa1 	bl	10064da <configure_builtin_stack_guard>
    pop {r2, lr}
 1001598:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 100159c:	4770      	bx	lr
 100159e:	0000      	.short	0x0000
    ldr r1, =_kernel
 10015a0:	210003e4 	.word	0x210003e4
    ldr v4, =_SCS_ICSR
 10015a4:	e000ed04 	.word	0xe000ed04

010015a8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 10015a8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 10015ac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 10015ae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 10015b2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 10015b6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 10015b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 10015bc:	2902      	cmp	r1, #2
    beq _oops
 10015be:	d0ff      	beq.n	10015c0 <_oops>

010015c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 10015c0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 10015c2:	f004 ff7b 	bl	10064bc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 10015c6:	bd01      	pop	{r0, pc}

010015c8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 10015c8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 10015cc:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 10015ce:	490b      	ldr	r1, [pc, #44]	; (10015fc <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
 10015d0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 10015d4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 10015d6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 10015da:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 10015de:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 10015e0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 10015e4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 10015e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 10015ec:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 10015f0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 10015f2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 10015f4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 10015f6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 10015f8:	4770      	bx	lr
 10015fa:	bf00      	nop
 10015fc:	010063ad 	.word	0x010063ad

01001600 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 1001600:	4b08      	ldr	r3, [pc, #32]	; (1001624 <arch_switch_to_main_thread+0x24>)
 1001602:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 1001604:	6e43      	ldr	r3, [r0, #100]	; 0x64
 1001606:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 100160a:	4610      	mov	r0, r2
 100160c:	f381 8809 	msr	PSP, r1
 1001610:	2100      	movs	r1, #0
 1001612:	b663      	cpsie	if
 1001614:	f381 8811 	msr	BASEPRI, r1
 1001618:	f3bf 8f6f 	isb	sy
 100161c:	2200      	movs	r2, #0
 100161e:	2300      	movs	r3, #0
 1001620:	f004 fec4 	bl	10063ac <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 1001624:	210003e4 	.word	0x210003e4

01001628 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 1001628:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 100162a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 100162e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 1001632:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 1001636:	4904      	ldr	r1, [pc, #16]	; (1001648 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 1001638:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 100163a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 100163c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 100163e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 1001642:	4902      	ldr	r1, [pc, #8]	; (100164c <_isr_wrapper+0x24>)
	bx r1
 1001644:	4708      	bx	r1
 1001646:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 1001648:	01006a5c 	.word	0x01006a5c
	ldr r1, =z_arm_int_exit
 100164c:	01001651 	.word	0x01001651

01001650 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 1001650:	4b04      	ldr	r3, [pc, #16]	; (1001664 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 1001652:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 1001654:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 1001656:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 1001658:	d003      	beq.n	1001662 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 100165a:	4903      	ldr	r1, [pc, #12]	; (1001668 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 100165c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 1001660:	600a      	str	r2, [r1, #0]

01001662 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 1001662:	4770      	bx	lr
	ldr r3, =_kernel
 1001664:	210003e4 	.word	0x210003e4
	ldr r1, =_SCS_ICSR
 1001668:	e000ed04 	.word	0xe000ed04

0100166c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 100166c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 100166e:	4c21      	ldr	r4, [pc, #132]	; (10016f4 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
 1001670:	2145      	movs	r1, #69	; 0x45
 1001672:	4821      	ldr	r0, [pc, #132]	; (10016f8 <usage_fault.constprop.0+0x8c>)
 1001674:	f004 ff15 	bl	10064a2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 1001678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 100167a:	019d      	lsls	r5, r3, #6
 100167c:	d503      	bpl.n	1001686 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
 100167e:	2145      	movs	r1, #69	; 0x45
 1001680:	481e      	ldr	r0, [pc, #120]	; (10016fc <usage_fault.constprop.0+0x90>)
 1001682:	f004 ff0e 	bl	10064a2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 1001686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001688:	01dc      	lsls	r4, r3, #7
 100168a:	d503      	bpl.n	1001694 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
 100168c:	2145      	movs	r1, #69	; 0x45
 100168e:	481c      	ldr	r0, [pc, #112]	; (1001700 <usage_fault.constprop.0+0x94>)
 1001690:	f004 ff07 	bl	10064a2 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
 1001694:	4d17      	ldr	r5, [pc, #92]	; (10016f4 <usage_fault.constprop.0+0x88>)
 1001696:	6aac      	ldr	r4, [r5, #40]	; 0x28
 1001698:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
 100169c:	d004      	beq.n	10016a8 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
 100169e:	2145      	movs	r1, #69	; 0x45
 10016a0:	4818      	ldr	r0, [pc, #96]	; (1001704 <usage_fault.constprop.0+0x98>)
 10016a2:	f004 fefe 	bl	10064a2 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
 10016a6:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 10016a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 10016aa:	0318      	lsls	r0, r3, #12
 10016ac:	d503      	bpl.n	10016b6 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
 10016ae:	2145      	movs	r1, #69	; 0x45
 10016b0:	4815      	ldr	r0, [pc, #84]	; (1001708 <usage_fault.constprop.0+0x9c>)
 10016b2:	f004 fef6 	bl	10064a2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 10016b6:	4d0f      	ldr	r5, [pc, #60]	; (10016f4 <usage_fault.constprop.0+0x88>)
 10016b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 10016ba:	0359      	lsls	r1, r3, #13
 10016bc:	d503      	bpl.n	10016c6 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 10016be:	2145      	movs	r1, #69	; 0x45
 10016c0:	4812      	ldr	r0, [pc, #72]	; (100170c <usage_fault.constprop.0+0xa0>)
 10016c2:	f004 feee 	bl	10064a2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 10016c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 10016c8:	039a      	lsls	r2, r3, #14
 10016ca:	d503      	bpl.n	10016d4 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 10016cc:	2145      	movs	r1, #69	; 0x45
 10016ce:	4810      	ldr	r0, [pc, #64]	; (1001710 <usage_fault.constprop.0+0xa4>)
 10016d0:	f004 fee7 	bl	10064a2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 10016d4:	4d07      	ldr	r5, [pc, #28]	; (10016f4 <usage_fault.constprop.0+0x88>)
 10016d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 10016d8:	03db      	lsls	r3, r3, #15
 10016da:	d503      	bpl.n	10016e4 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 10016dc:	2145      	movs	r1, #69	; 0x45
 10016de:	480d      	ldr	r0, [pc, #52]	; (1001714 <usage_fault.constprop.0+0xa8>)
 10016e0:	f004 fedf 	bl	10064a2 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 10016e4:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
 10016e6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 10016e8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 10016ec:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 10016f0:	62ab      	str	r3, [r5, #40]	; 0x28
}
 10016f2:	bd38      	pop	{r3, r4, r5, pc}
 10016f4:	e000ed00 	.word	0xe000ed00
 10016f8:	010070fb 	.word	0x010070fb
 10016fc:	01007118 	.word	0x01007118
 1001700:	01007130 	.word	0x01007130
 1001704:	0100714f 	.word	0x0100714f
 1001708:	0100717e 	.word	0x0100717e
 100170c:	010071a1 	.word	0x010071a1
 1001710:	010071cb 	.word	0x010071cb
 1001714:	010071ea 	.word	0x010071ea

01001718 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 1001718:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 100171a:	4c20      	ldr	r4, [pc, #128]	; (100179c <bus_fault.constprop.0+0x84>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 100171c:	4606      	mov	r6, r0
 100171e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 1001720:	481f      	ldr	r0, [pc, #124]	; (10017a0 <bus_fault.constprop.0+0x88>)
 1001722:	2145      	movs	r1, #69	; 0x45
 1001724:	f004 febd 	bl	10064a2 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 1001728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 100172a:	04db      	lsls	r3, r3, #19
 100172c:	d503      	bpl.n	1001736 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
 100172e:	2145      	movs	r1, #69	; 0x45
 1001730:	481c      	ldr	r0, [pc, #112]	; (10017a4 <bus_fault.constprop.0+0x8c>)
 1001732:	f004 feb6 	bl	10064a2 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 1001736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001738:	051c      	lsls	r4, r3, #20
 100173a:	d503      	bpl.n	1001744 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
 100173c:	2145      	movs	r1, #69	; 0x45
 100173e:	481a      	ldr	r0, [pc, #104]	; (10017a8 <bus_fault.constprop.0+0x90>)
 1001740:	f004 feaf 	bl	10064a2 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 1001744:	4c15      	ldr	r4, [pc, #84]	; (100179c <bus_fault.constprop.0+0x84>)
 1001746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001748:	0598      	lsls	r0, r3, #22
 100174a:	d510      	bpl.n	100176e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
 100174c:	2145      	movs	r1, #69	; 0x45
 100174e:	4817      	ldr	r0, [pc, #92]	; (10017ac <bus_fault.constprop.0+0x94>)
 1001750:	f004 fea7 	bl	10064a2 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
 1001754:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 1001756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001758:	0419      	lsls	r1, r3, #16
 100175a:	d508      	bpl.n	100176e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 100175c:	2145      	movs	r1, #69	; 0x45
 100175e:	4814      	ldr	r0, [pc, #80]	; (10017b0 <bus_fault.constprop.0+0x98>)
 1001760:	f004 fe9f 	bl	10064a2 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
 1001764:	b11e      	cbz	r6, 100176e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 1001766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001768:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 100176c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 100176e:	4c0b      	ldr	r4, [pc, #44]	; (100179c <bus_fault.constprop.0+0x84>)
 1001770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001772:	055a      	lsls	r2, r3, #21
 1001774:	d503      	bpl.n	100177e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
 1001776:	2145      	movs	r1, #69	; 0x45
 1001778:	480e      	ldr	r0, [pc, #56]	; (10017b4 <bus_fault.constprop.0+0x9c>)
 100177a:	f004 fe92 	bl	10064a2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 100177e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001780:	05db      	lsls	r3, r3, #23
 1001782:	d503      	bpl.n	100178c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Instruction bus error");
 1001784:	2145      	movs	r1, #69	; 0x45
 1001786:	480c      	ldr	r0, [pc, #48]	; (10017b8 <bus_fault.constprop.0+0xa0>)
 1001788:	f004 fe8b 	bl	10064a2 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
 100178c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 100178e:	4a03      	ldr	r2, [pc, #12]	; (100179c <bus_fault.constprop.0+0x84>)
 1001790:	6a93      	ldr	r3, [r2, #40]	; 0x28
 1001792:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 1001796:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1001798:	7028      	strb	r0, [r5, #0]
}
 100179a:	bd70      	pop	{r4, r5, r6, pc}
 100179c:	e000ed00 	.word	0xe000ed00
 10017a0:	0100721a 	.word	0x0100721a
 10017a4:	01007235 	.word	0x01007235
 10017a8:	0100724b 	.word	0x0100724b
 10017ac:	01007263 	.word	0x01007263
 10017b0:	01007281 	.word	0x01007281
 10017b4:	0100729b 	.word	0x0100729b
 10017b8:	010072bb 	.word	0x010072bb

010017bc <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 10017bc:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 10017be:	4c27      	ldr	r4, [pc, #156]	; (100185c <mem_manage_fault.constprop.0+0xa0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 10017c0:	4606      	mov	r6, r0
 10017c2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 10017c4:	4826      	ldr	r0, [pc, #152]	; (1001860 <mem_manage_fault.constprop.0+0xa4>)
 10017c6:	2145      	movs	r1, #69	; 0x45
 10017c8:	f004 fe6b 	bl	10064a2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 10017cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10017ce:	06d8      	lsls	r0, r3, #27
 10017d0:	d503      	bpl.n	10017da <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
 10017d2:	2145      	movs	r1, #69	; 0x45
 10017d4:	4823      	ldr	r0, [pc, #140]	; (1001864 <mem_manage_fault.constprop.0+0xa8>)
 10017d6:	f004 fe64 	bl	10064a2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 10017da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10017dc:	0719      	lsls	r1, r3, #28
 10017de:	d503      	bpl.n	10017e8 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
 10017e0:	2145      	movs	r1, #69	; 0x45
 10017e2:	4821      	ldr	r0, [pc, #132]	; (1001868 <mem_manage_fault.constprop.0+0xac>)
 10017e4:	f004 fe5d 	bl	10064a2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 10017e8:	4c1c      	ldr	r4, [pc, #112]	; (100185c <mem_manage_fault.constprop.0+0xa0>)
 10017ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10017ec:	079a      	lsls	r2, r3, #30
 10017ee:	d510      	bpl.n	1001812 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
 10017f0:	2145      	movs	r1, #69	; 0x45
 10017f2:	481e      	ldr	r0, [pc, #120]	; (100186c <mem_manage_fault.constprop.0+0xb0>)
 10017f4:	f004 fe55 	bl	10064a2 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
 10017f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 10017fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10017fc:	061b      	lsls	r3, r3, #24
 10017fe:	d508      	bpl.n	1001812 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 1001800:	2145      	movs	r1, #69	; 0x45
 1001802:	481b      	ldr	r0, [pc, #108]	; (1001870 <mem_manage_fault.constprop.0+0xb4>)
 1001804:	f004 fe4d 	bl	10064a2 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
 1001808:	b11e      	cbz	r6, 1001812 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 100180a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 100180c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 1001810:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 1001812:	4c12      	ldr	r4, [pc, #72]	; (100185c <mem_manage_fault.constprop.0+0xa0>)
 1001814:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001816:	07d8      	lsls	r0, r3, #31
 1001818:	d503      	bpl.n	1001822 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
 100181a:	2145      	movs	r1, #69	; 0x45
 100181c:	4815      	ldr	r0, [pc, #84]	; (1001874 <mem_manage_fault.constprop.0+0xb8>)
 100181e:	f004 fe40 	bl	10064a2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 1001822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1001824:	06d9      	lsls	r1, r3, #27
 1001826:	d402      	bmi.n	100182e <mem_manage_fault.constprop.0+0x72>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 1001828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 100182a:	079a      	lsls	r2, r3, #30
 100182c:	d50e      	bpl.n	100184c <mem_manage_fault.constprop.0+0x90>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
 100182e:	4b0b      	ldr	r3, [pc, #44]	; (100185c <mem_manage_fault.constprop.0+0xa0>)
 1001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1001832:	06db      	lsls	r3, r3, #27
 1001834:	d50a      	bpl.n	100184c <mem_manage_fault.constprop.0+0x90>
 1001836:	4910      	ldr	r1, [pc, #64]	; (1001878 <mem_manage_fault.constprop.0+0xbc>)
 1001838:	4810      	ldr	r0, [pc, #64]	; (100187c <mem_manage_fault.constprop.0+0xc0>)
 100183a:	f240 124f 	movw	r2, #335	; 0x14f
 100183e:	f004 fe22 	bl	1006486 <assert_print>
 1001842:	f240 114f 	movw	r1, #335	; 0x14f
 1001846:	480c      	ldr	r0, [pc, #48]	; (1001878 <mem_manage_fault.constprop.0+0xbc>)
 1001848:	f004 fe16 	bl	1006478 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
 100184c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 100184e:	4a03      	ldr	r2, [pc, #12]	; (100185c <mem_manage_fault.constprop.0+0xa0>)
 1001850:	6a93      	ldr	r3, [r2, #40]	; 0x28
 1001852:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 1001856:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1001858:	7028      	strb	r0, [r5, #0]
}
 100185a:	bd70      	pop	{r4, r5, r6, pc}
 100185c:	e000ed00 	.word	0xe000ed00
 1001860:	010072d8 	.word	0x010072d8
 1001864:	010072f3 	.word	0x010072f3
 1001868:	0100724b 	.word	0x0100724b
 100186c:	0100732b 	.word	0x0100732b
 1001870:	01007348 	.word	0x01007348
 1001874:	01007363 	.word	0x01007363
 1001878:	01007387 	.word	0x01007387
 100187c:	01006eb0 	.word	0x01006eb0

01001880 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 1001880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1001884:	4b65      	ldr	r3, [pc, #404]	; (1001a1c <z_arm_fault+0x19c>)
 1001886:	2700      	movs	r7, #0
 1001888:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
 100188c:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 100188e:	f3c8 0508 	ubfx	r5, r8, #0, #9
 1001892:	f387 8811 	msr	BASEPRI, r7
 1001896:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 100189a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 100189e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 10018a2:	d107      	bne.n	10018b4 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 10018a4:	f002 030c 	and.w	r3, r2, #12
 10018a8:	2b08      	cmp	r3, #8
 10018aa:	d110      	bne.n	10018ce <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 10018ac:	2145      	movs	r1, #69	; 0x45
 10018ae:	485c      	ldr	r0, [pc, #368]	; (1001a20 <z_arm_fault+0x1a0>)
 10018b0:	f004 fdf7 	bl	10064a2 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
 10018b4:	f240 32fb 	movw	r2, #1019	; 0x3fb
 10018b8:	495a      	ldr	r1, [pc, #360]	; (1001a24 <z_arm_fault+0x1a4>)
 10018ba:	485b      	ldr	r0, [pc, #364]	; (1001a28 <z_arm_fault+0x1a8>)
 10018bc:	f004 fde3 	bl	1006486 <assert_print>
 10018c0:	f240 31fb 	movw	r1, #1019	; 0x3fb
 10018c4:	4857      	ldr	r0, [pc, #348]	; (1001a24 <z_arm_fault+0x1a4>)
 10018c6:	f004 fdd7 	bl	1006478 <assert_post_action>
 10018ca:	2600      	movs	r6, #0
 10018cc:	e006      	b.n	10018dc <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 10018ce:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 10018d0:	bf4e      	itee	mi
 10018d2:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
 10018d4:	4606      	movpl	r6, r0
			*nested_exc = true;
 10018d6:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
 10018d8:	2e00      	cmp	r6, #0
 10018da:	d0eb      	beq.n	10018b4 <z_arm_fault+0x34>
	*recoverable = false;
 10018dc:	2400      	movs	r4, #0
	switch (fault) {
 10018de:	1eeb      	subs	r3, r5, #3
	*recoverable = false;
 10018e0:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
 10018e4:	2b09      	cmp	r3, #9
 10018e6:	f200 8087 	bhi.w	10019f8 <z_arm_fault+0x178>
 10018ea:	e8df f003 	tbb	[pc, r3]
 10018ee:	7a05      	.short	0x7a05
 10018f0:	8585627e 	.word	0x8585627e
 10018f4:	82858585 	.word	0x82858585
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 10018f8:	4d48      	ldr	r5, [pc, #288]	; (1001a1c <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
 10018fa:	2145      	movs	r1, #69	; 0x45
 10018fc:	484b      	ldr	r0, [pc, #300]	; (1001a2c <z_arm_fault+0x1ac>)
 10018fe:	f004 fdd0 	bl	10064a2 <z_log_minimal_printk>
	*recoverable = false;
 1001902:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 1001906:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 1001908:	f014 0402 	ands.w	r4, r4, #2
 100190c:	d005      	beq.n	100191a <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
 100190e:	2145      	movs	r1, #69	; 0x45
 1001910:	4847      	ldr	r0, [pc, #284]	; (1001a30 <z_arm_fault+0x1b0>)
	PR_FAULT_INFO(
 1001912:	f004 fdc6 	bl	10064a2 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 1001916:	2400      	movs	r4, #0
}
 1001918:	e006      	b.n	1001928 <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 100191a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 100191c:	2b00      	cmp	r3, #0
 100191e:	da1d      	bge.n	100195c <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
 1001920:	2145      	movs	r1, #69	; 0x45
 1001922:	4844      	ldr	r0, [pc, #272]	; (1001a34 <z_arm_fault+0x1b4>)
 1001924:	f004 fdbd 	bl	10064a2 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 1001928:	f89d 3007 	ldrb.w	r3, [sp, #7]
 100192c:	b99b      	cbnz	r3, 1001956 <z_arm_fault+0xd6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 100192e:	2220      	movs	r2, #32
 1001930:	4631      	mov	r1, r6
 1001932:	a802      	add	r0, sp, #8
 1001934:	f004 fdee 	bl	1006514 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 1001938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 100193a:	2f00      	cmp	r7, #0
 100193c:	d069      	beq.n	1001a12 <z_arm_fault+0x192>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 100193e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 1001942:	b922      	cbnz	r2, 100194e <z_arm_fault+0xce>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 1001944:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 1001948:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 100194c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 100194e:	4620      	mov	r0, r4
 1001950:	a902      	add	r1, sp, #8
 1001952:	f7ff fd43 	bl	10013dc <z_arm_fatal_error>
}
 1001956:	b00a      	add	sp, #40	; 0x28
 1001958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 100195c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 100195e:	005b      	lsls	r3, r3, #1
 1001960:	d536      	bpl.n	10019d0 <z_arm_fault+0x150>
		PR_EXC("  Fault escalation (see below)");
 1001962:	2145      	movs	r1, #69	; 0x45
 1001964:	4834      	ldr	r0, [pc, #208]	; (1001a38 <z_arm_fault+0x1b8>)
 1001966:	f004 fd9c 	bl	10064a2 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
 100196a:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 100196c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 1001970:	f64d 7302 	movw	r3, #57090	; 0xdf02
 1001974:	429a      	cmp	r2, r3
 1001976:	d106      	bne.n	1001986 <z_arm_fault+0x106>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 1001978:	2145      	movs	r1, #69	; 0x45
 100197a:	6832      	ldr	r2, [r6, #0]
 100197c:	482f      	ldr	r0, [pc, #188]	; (1001a3c <z_arm_fault+0x1bc>)
 100197e:	f004 fd90 	bl	10064a2 <z_log_minimal_printk>
			reason = esf->basic.r0;
 1001982:	6834      	ldr	r4, [r6, #0]
 1001984:	e7d0      	b.n	1001928 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
 1001986:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 100198a:	b133      	cbz	r3, 100199a <z_arm_fault+0x11a>
			reason = mem_manage_fault(esf, 1, recoverable);
 100198c:	2001      	movs	r0, #1
 100198e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 1001992:	f7ff ff13 	bl	10017bc <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
 1001996:	4604      	mov	r4, r0
		break;
 1001998:	e7c6      	b.n	1001928 <z_arm_fault+0xa8>
		} else if (SCB_BFSR != 0) {
 100199a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 100199e:	b12b      	cbz	r3, 10019ac <z_arm_fault+0x12c>
			reason = bus_fault(esf, 1, recoverable);
 10019a0:	2001      	movs	r0, #1
 10019a2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
 10019a6:	f7ff feb7 	bl	1001718 <bus_fault.constprop.0>
 10019aa:	e7f4      	b.n	1001996 <z_arm_fault+0x116>
		} else if (SCB_UFSR != 0) {
 10019ac:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 10019ae:	b29b      	uxth	r3, r3
 10019b0:	b113      	cbz	r3, 10019b8 <z_arm_fault+0x138>
		reason = usage_fault(esf);
 10019b2:	f7ff fe5b 	bl	100166c <usage_fault.constprop.0>
 10019b6:	e7ee      	b.n	1001996 <z_arm_fault+0x116>
			__ASSERT(0,
 10019b8:	491a      	ldr	r1, [pc, #104]	; (1001a24 <z_arm_fault+0x1a4>)
 10019ba:	f240 22cd 	movw	r2, #717	; 0x2cd
 10019be:	481a      	ldr	r0, [pc, #104]	; (1001a28 <z_arm_fault+0x1a8>)
 10019c0:	f004 fd61 	bl	1006486 <assert_print>
 10019c4:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
 10019c8:	4816      	ldr	r0, [pc, #88]	; (1001a24 <z_arm_fault+0x1a4>)
 10019ca:	f004 fd55 	bl	1006478 <assert_post_action>
 10019ce:	e7ab      	b.n	1001928 <z_arm_fault+0xa8>
 10019d0:	4914      	ldr	r1, [pc, #80]	; (1001a24 <z_arm_fault+0x1a4>)
 10019d2:	f240 22d1 	movw	r2, #721	; 0x2d1
 10019d6:	4814      	ldr	r0, [pc, #80]	; (1001a28 <z_arm_fault+0x1a8>)
 10019d8:	f004 fd55 	bl	1006486 <assert_print>
 10019dc:	f240 21d1 	movw	r1, #721	; 0x2d1
 10019e0:	e7f2      	b.n	10019c8 <z_arm_fault+0x148>
		reason = mem_manage_fault(esf, 0, recoverable);
 10019e2:	2000      	movs	r0, #0
 10019e4:	f10d 0107 	add.w	r1, sp, #7
 10019e8:	e7d3      	b.n	1001992 <z_arm_fault+0x112>
		reason = bus_fault(esf, 0, recoverable);
 10019ea:	2000      	movs	r0, #0
 10019ec:	f10d 0107 	add.w	r1, sp, #7
 10019f0:	e7d9      	b.n	10019a6 <z_arm_fault+0x126>
	PR_FAULT_INFO(
 10019f2:	2145      	movs	r1, #69	; 0x45
 10019f4:	4812      	ldr	r0, [pc, #72]	; (1001a40 <z_arm_fault+0x1c0>)
 10019f6:	e78c      	b.n	1001912 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
 10019f8:	4912      	ldr	r1, [pc, #72]	; (1001a44 <z_arm_fault+0x1c4>)
 10019fa:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
 10019fe:	4a12      	ldr	r2, [pc, #72]	; (1001a48 <z_arm_fault+0x1c8>)
 1001a00:	4812      	ldr	r0, [pc, #72]	; (1001a4c <z_arm_fault+0x1cc>)
 1001a02:	bf08      	it	eq
 1001a04:	460a      	moveq	r2, r1
 1001a06:	f1a5 0310 	sub.w	r3, r5, #16
 1001a0a:	2145      	movs	r1, #69	; 0x45
 1001a0c:	f004 fd49 	bl	10064a2 <z_log_minimal_printk>
 1001a10:	e781      	b.n	1001916 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1001a12:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 1001a16:	f023 0301 	bic.w	r3, r3, #1
 1001a1a:	e797      	b.n	100194c <z_arm_fault+0xcc>
 1001a1c:	e000ed00 	.word	0xe000ed00
 1001a20:	010073ef 	.word	0x010073ef
 1001a24:	01007387 	.word	0x01007387
 1001a28:	01006eb0 	.word	0x01006eb0
 1001a2c:	0100741f 	.word	0x0100741f
 1001a30:	0100743b 	.word	0x0100743b
 1001a34:	01007461 	.word	0x01007461
 1001a38:	01007474 	.word	0x01007474
 1001a3c:	01007498 	.word	0x01007498
 1001a40:	010074b9 	.word	0x010074b9
 1001a44:	010073c1 	.word	0x010073c1
 1001a48:	010073d6 	.word	0x010073d6
 1001a4c:	010074e2 	.word	0x010074e2

01001a50 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 1001a50:	4b04      	ldr	r3, [pc, #16]	; (1001a64 <z_arm_fault_init+0x14>)
 1001a52:	695a      	ldr	r2, [r3, #20]
 1001a54:	f042 0210 	orr.w	r2, r2, #16
 1001a58:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
 1001a5a:	695a      	ldr	r2, [r3, #20]
 1001a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 1001a60:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 1001a62:	4770      	bx	lr
 1001a64:	e000ed00 	.word	0xe000ed00

01001a68 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 1001a68:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 1001a6c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 1001a70:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 1001a72:	4672      	mov	r2, lr
	bl z_arm_fault
 1001a74:	f7ff ff04 	bl	1001880 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 1001a78:	bd01      	pop	{r0, pc}
 1001a7a:	bf00      	nop

01001a7c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 1001a7c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1001a7e:	2120      	movs	r1, #32
 1001a80:	4803      	ldr	r0, [pc, #12]	; (1001a90 <z_arm_interrupt_init+0x14>)
 1001a82:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 1001a84:	3301      	adds	r3, #1
 1001a86:	2b1e      	cmp	r3, #30
 1001a88:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 1001a8c:	d1f9      	bne.n	1001a82 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 1001a8e:	4770      	bx	lr
 1001a90:	e000e100 	.word	0xe000e100

01001a94 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
 1001a94:	2000      	movs	r0, #0
    msr CONTROL, r0
 1001a96:	f380 8814 	msr	CONTROL, r0
    isb
 1001a9a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
 1001a9e:	2000      	movs	r0, #0
    msr MSPLIM, r0
 1001aa0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
 1001aa4:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
 1001aa8:	f004 ff86 	bl	10069b8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
 1001aac:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
 1001aae:	490e      	ldr	r1, [pc, #56]	; (1001ae8 <__start+0x54>)
    str r0, [r1]
 1001ab0:	6008      	str	r0, [r1, #0]
    dsb
 1001ab2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1001ab6:	480d      	ldr	r0, [pc, #52]	; (1001aec <__start+0x58>)
    msr msp, r0
 1001ab8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
 1001abc:	f000 f83e 	bl	1001b3c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1001ac0:	2020      	movs	r0, #32
    msr BASEPRI, r0
 1001ac2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 1001ac6:	480a      	ldr	r0, [pc, #40]	; (1001af0 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 1001ac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 1001acc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 1001ace:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 1001ad2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 1001ad6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 1001ad8:	4308      	orrs	r0, r1
    msr CONTROL, r0
 1001ada:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 1001ade:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 1001ae2:	f7ff fd05 	bl	10014f0 <z_arm_prep_c>
 1001ae6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
 1001ae8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1001aec:	21000b10 	.word	0x21000b10
    ldr r0, =z_interrupt_stacks
 1001af0:	21000c10 	.word	0x21000c10

01001af4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
 1001af4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1001af8:	4905      	ldr	r1, [pc, #20]	; (1001b10 <sys_arch_reboot+0x1c>)
 1001afa:	4b06      	ldr	r3, [pc, #24]	; (1001b14 <sys_arch_reboot+0x20>)
 1001afc:	68ca      	ldr	r2, [r1, #12]
 1001afe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 1001b02:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 1001b04:	60cb      	str	r3, [r1, #12]
 1001b06:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 1001b0a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 1001b0c:	e7fd      	b.n	1001b0a <sys_arch_reboot+0x16>
 1001b0e:	bf00      	nop
 1001b10:	e000ed00 	.word	0xe000ed00
 1001b14:	05fa0004 	.word	0x05fa0004

01001b18 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
 1001b18:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
 1001b1a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
 1001b1c:	4906      	ldr	r1, [pc, #24]	; (1001b38 <z_arm_clear_arm_mpu_config+0x20>)
 1001b1e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
 1001b22:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
 1001b26:	4293      	cmp	r3, r2
 1001b28:	d100      	bne.n	1001b2c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
 1001b2a:	4770      	bx	lr
  mpu->RNR = rnr;
 1001b2c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
 1001b30:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
 1001b34:	3301      	adds	r3, #1
 1001b36:	e7f6      	b.n	1001b26 <z_arm_clear_arm_mpu_config+0xe>
 1001b38:	e000ed00 	.word	0xe000ed00

01001b3c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
 1001b3c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 1001b3e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 1001b40:	2400      	movs	r4, #0
 1001b42:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
 1001b46:	f7ff ffe7 	bl	1001b18 <z_arm_clear_arm_mpu_config>
 1001b4a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
 1001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 1001b50:	4a0b      	ldr	r2, [pc, #44]	; (1001b80 <z_arm_init_arch_hw_at_boot+0x44>)
 1001b52:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1001b56:	3301      	adds	r3, #1
 1001b58:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
 1001b5a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1001b5e:	d1f8      	bne.n	1001b52 <z_arm_init_arch_hw_at_boot+0x16>
 1001b60:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1001b62:	f04f 30ff 	mov.w	r0, #4294967295
 1001b66:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1001b6a:	3301      	adds	r3, #1
 1001b6c:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1001b6e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1001b72:	d1f8      	bne.n	1001b66 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 1001b74:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 1001b76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1001b7a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
 1001b7e:	bd10      	pop	{r4, pc}
 1001b80:	e000e100 	.word	0xe000e100

01001b84 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 1001b84:	4b08      	ldr	r3, [pc, #32]	; (1001ba8 <z_impl_k_thread_abort+0x24>)
 1001b86:	689b      	ldr	r3, [r3, #8]
 1001b88:	4283      	cmp	r3, r0
 1001b8a:	d10b      	bne.n	1001ba4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1001b8c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 1001b90:	b143      	cbz	r3, 1001ba4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 1001b92:	4b06      	ldr	r3, [pc, #24]	; (1001bac <z_impl_k_thread_abort+0x28>)
 1001b94:	685a      	ldr	r2, [r3, #4]
 1001b96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 1001b9a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 1001b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 1001b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 1001ba2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 1001ba4:	f004 b886 	b.w	1005cb4 <z_thread_abort>
 1001ba8:	210003e4 	.word	0x210003e4
 1001bac:	e000ed00 	.word	0xe000ed00

01001bb0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 1001bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 1001bb2:	4c09      	ldr	r4, [pc, #36]	; (1001bd8 <z_arm_configure_static_mpu_regions+0x28>)
 1001bb4:	4a09      	ldr	r2, [pc, #36]	; (1001bdc <z_arm_configure_static_mpu_regions+0x2c>)
 1001bb6:	4623      	mov	r3, r4
 1001bb8:	2101      	movs	r1, #1
 1001bba:	4809      	ldr	r0, [pc, #36]	; (1001be0 <z_arm_configure_static_mpu_regions+0x30>)
 1001bbc:	f000 f92c 	bl	1001e18 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 1001bc0:	2300      	movs	r3, #0
 1001bc2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
 1001bc4:	4b07      	ldr	r3, [pc, #28]	; (1001be4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1001bc6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
 1001bc8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1001bca:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 1001bcc:	9301      	str	r3, [sp, #4]
 1001bce:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1001bd0:	f000 f93e 	bl	1001e50 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 1001bd4:	b004      	add	sp, #16
 1001bd6:	bd10      	pop	{r4, pc}
 1001bd8:	21010000 	.word	0x21010000
 1001bdc:	21000000 	.word	0x21000000
 1001be0:	01006be8 	.word	0x01006be8
 1001be4:	210000f8 	.word	0x210000f8

01001be8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
 1001be8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
 1001bea:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
 1001bec:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
 1001bee:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
 1001bf2:	f004 031f 	and.w	r3, r4, #31
 1001bf6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1001bf8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1001bfa:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1001bfc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
 1001c00:	4905      	ldr	r1, [pc, #20]	; (1001c18 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1001c02:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
 1001c06:	f043 0301 	orr.w	r3, r3, #1
 1001c0a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
 1001c0e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
 1001c12:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
 1001c16:	bd10      	pop	{r4, pc}
 1001c18:	e000ed00 	.word	0xe000ed00

01001c1c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
 1001c1c:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 1001c1e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
 1001c20:	680c      	ldr	r4, [r1, #0]
{
 1001c22:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
 1001c24:	890a      	ldrh	r2, [r1, #8]
 1001c26:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
 1001c28:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
 1001c2a:	3b01      	subs	r3, #1
 1001c2c:	f024 041f 	bic.w	r4, r4, #31
 1001c30:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
 1001c32:	f002 021f 	and.w	r2, r2, #31
 1001c36:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
 1001c3a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
 1001c3e:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 1001c40:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
 1001c42:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
 1001c46:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
 1001c48:	d909      	bls.n	1001c5e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 1001c4a:	4602      	mov	r2, r0
 1001c4c:	2145      	movs	r1, #69	; 0x45
 1001c4e:	4806      	ldr	r0, [pc, #24]	; (1001c68 <mpu_configure_region+0x4c>)
 1001c50:	f004 fc27 	bl	10064a2 <z_log_minimal_printk>
 1001c54:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
 1001c58:	4620      	mov	r0, r4
 1001c5a:	b005      	add	sp, #20
 1001c5c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
 1001c5e:	4669      	mov	r1, sp
 1001c60:	f7ff ffc2 	bl	1001be8 <region_init>
	return region_allocate_and_init(index,
 1001c64:	e7f8      	b.n	1001c58 <mpu_configure_region+0x3c>
 1001c66:	bf00      	nop
 1001c68:	010074fe 	.word	0x010074fe

01001c6c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1001c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001c70:	4689      	mov	r9, r1
 1001c72:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 1001c74:	4606      	mov	r6, r0
 1001c76:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
 1001c7a:	4d58      	ldr	r5, [pc, #352]	; (1001ddc <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1001c7c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
 1001c7e:	45c8      	cmp	r8, r9
 1001c80:	da27      	bge.n	1001cd2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
 1001c82:	f8d6 a004 	ldr.w	sl, [r6, #4]
 1001c86:	f1ba 0f00 	cmp.w	sl, #0
 1001c8a:	d044      	beq.n	1001d16 <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
 1001c8c:	f1ba 0f1f 	cmp.w	sl, #31
 1001c90:	d918      	bls.n	1001cc4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
 1001c92:	f01a 0f1f 	tst.w	sl, #31
 1001c96:	d115      	bne.n	1001cc4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
 1001c98:	f8d6 b000 	ldr.w	fp, [r6]
		&&
 1001c9c:	f01b 0f1f 	tst.w	fp, #31
 1001ca0:	d110      	bne.n	1001cc4 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1001ca2:	4658      	mov	r0, fp
 1001ca4:	f004 fc1d 	bl	10064e2 <arm_cmse_mpu_region_get>
 1001ca8:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 1001caa:	eb0a 000b 	add.w	r0, sl, fp
 1001cae:	3801      	subs	r0, #1
 1001cb0:	f004 fc17 	bl	10064e2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 1001cb4:	4287      	cmp	r7, r0
 1001cb6:	d010      	beq.n	1001cda <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
 1001cb8:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
 1001cbc:	463a      	mov	r2, r7
 1001cbe:	2145      	movs	r1, #69	; 0x45
 1001cc0:	4847      	ldr	r0, [pc, #284]	; (1001de0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
 1001cc2:	e002      	b.n	1001cca <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
 1001cc4:	4642      	mov	r2, r8
 1001cc6:	2145      	movs	r1, #69	; 0x45
 1001cc8:	4846      	ldr	r0, [pc, #280]	; (1001de4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 1001cca:	f004 fbea 	bl	10064a2 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
 1001cce:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
 1001cd2:	4620      	mov	r0, r4
 1001cd4:	b005      	add	sp, #20
 1001cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
 1001cda:	f117 0f16 	cmn.w	r7, #22
 1001cde:	d0ed      	beq.n	1001cbc <mpu_configure_regions_and_partition.constprop.0+0x50>
 1001ce0:	42bc      	cmp	r4, r7
 1001ce2:	ddeb      	ble.n	1001cbc <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
 1001ce4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
 1001ce8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
 1001cec:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
 1001cf0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
 1001cf4:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
 1001cf8:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 1001cfc:	e9d6 3200 	ldrd	r3, r2, [r6]
 1001d00:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
 1001d02:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 1001d04:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
 1001d08:	d11d      	bne.n	1001d46 <mpu_configure_regions_and_partition.constprop.0+0xda>
 1001d0a:	45d3      	cmp	fp, sl
 1001d0c:	d107      	bne.n	1001d1e <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
 1001d0e:	4631      	mov	r1, r6
 1001d10:	b2f8      	uxtb	r0, r7
 1001d12:	f7ff ff83 	bl	1001c1c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
 1001d16:	f108 0801 	add.w	r8, r8, #1
 1001d1a:	360c      	adds	r6, #12
 1001d1c:	e7af      	b.n	1001c7e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
 1001d1e:	4631      	mov	r1, r6
	MPU->RNR = index;
 1001d20:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
 1001d24:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
 1001d28:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
 1001d2c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
 1001d30:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
 1001d32:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
 1001d36:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
 1001d38:	f7ff ff70 	bl	1001c1c <mpu_configure_region>
			if (reg_index == -EINVAL) {
 1001d3c:	f110 0f16 	cmn.w	r0, #22
 1001d40:	d0c5      	beq.n	1001cce <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
 1001d42:	1c44      	adds	r4, r0, #1
 1001d44:	e7e7      	b.n	1001d16 <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
 1001d46:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
 1001d48:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
 1001d4a:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
 1001d4c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
 1001d50:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
 1001d54:	d108      	bne.n	1001d68 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 1001d56:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
 1001d5a:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 1001d5c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
 1001d60:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 1001d62:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
 1001d66:	e7e7      	b.n	1001d38 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 1001d68:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 1001d6c:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
 1001d70:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
 1001d72:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
 1001d76:	4631      	mov	r1, r6
 1001d78:	f7ff ff50 	bl	1001c1c <mpu_configure_region>
			if (reg_index == -EINVAL) {
 1001d7c:	f110 0f16 	cmn.w	r0, #22
 1001d80:	d0a5      	beq.n	1001cce <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
 1001d82:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
 1001d86:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
 1001d8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
 1001d8e:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
 1001d92:	f362 0304 	bfi	r3, r2, #0, #5
 1001d96:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
 1001d9a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 1001d9e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 1001da2:	085b      	lsrs	r3, r3, #1
 1001da4:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
 1001da8:	e9d6 3100 	ldrd	r3, r1, [r6]
 1001dac:	440b      	add	r3, r1
 1001dae:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
 1001db0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
 1001db4:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
 1001db6:	445b      	add	r3, fp
 1001db8:	eba3 030a 	sub.w	r3, r3, sl
 1001dbc:	b2c0      	uxtb	r0, r0
 1001dbe:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
 1001dc2:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
 1001dc4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
 1001dc8:	9303      	str	r3, [sp, #12]
 1001dca:	d903      	bls.n	1001dd4 <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 1001dcc:	4602      	mov	r2, r0
 1001dce:	2145      	movs	r1, #69	; 0x45
 1001dd0:	4805      	ldr	r0, [pc, #20]	; (1001de8 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
 1001dd2:	e77a      	b.n	1001cca <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
 1001dd4:	4669      	mov	r1, sp
 1001dd6:	f7ff ff07 	bl	1001be8 <region_init>
 1001dda:	e7b2      	b.n	1001d42 <mpu_configure_regions_and_partition.constprop.0+0xd6>
 1001ddc:	e000ed00 	.word	0xe000ed00
 1001de0:	01007551 	.word	0x01007551
 1001de4:	01007529 	.word	0x01007529
 1001de8:	010074fe 	.word	0x010074fe

01001dec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 1001dec:	2205      	movs	r2, #5
 1001dee:	4b04      	ldr	r3, [pc, #16]	; (1001e00 <arm_core_mpu_enable+0x14>)
 1001df0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 1001df4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1001df8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 1001dfc:	4770      	bx	lr
 1001dfe:	bf00      	nop
 1001e00:	e000ed00 	.word	0xe000ed00

01001e04 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 1001e04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 1001e08:	2200      	movs	r2, #0
 1001e0a:	4b02      	ldr	r3, [pc, #8]	; (1001e14 <arm_core_mpu_disable+0x10>)
 1001e0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 1001e10:	4770      	bx	lr
 1001e12:	bf00      	nop
 1001e14:	e000ed00 	.word	0xe000ed00

01001e18 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 1001e18:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 1001e1a:	4c0a      	ldr	r4, [pc, #40]	; (1001e44 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
 1001e1c:	7822      	ldrb	r2, [r4, #0]
 1001e1e:	f7ff ff25 	bl	1001c6c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 1001e22:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 1001e24:	3016      	adds	r0, #22
 1001e26:	d10c      	bne.n	1001e42 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
 1001e28:	4907      	ldr	r1, [pc, #28]	; (1001e48 <arm_core_mpu_configure_static_mpu_regions+0x30>)
 1001e2a:	4808      	ldr	r0, [pc, #32]	; (1001e4c <arm_core_mpu_configure_static_mpu_regions+0x34>)
 1001e2c:	f240 1211 	movw	r2, #273	; 0x111
 1001e30:	f004 fb29 	bl	1006486 <assert_print>
			regions_num);
	}
}
 1001e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
 1001e38:	f240 1111 	movw	r1, #273	; 0x111
 1001e3c:	4802      	ldr	r0, [pc, #8]	; (1001e48 <arm_core_mpu_configure_static_mpu_regions+0x30>)
 1001e3e:	f004 bb1b 	b.w	1006478 <assert_post_action>
}
 1001e42:	bd10      	pop	{r4, pc}
 1001e44:	21000469 	.word	0x21000469
 1001e48:	01007579 	.word	0x01007579
 1001e4c:	01006eb0 	.word	0x01006eb0

01001e50 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
 1001e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001e54:	4d30      	ldr	r5, [pc, #192]	; (1001f18 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
 1001e56:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1001e58:	4606      	mov	r6, r0
 1001e5a:	f04f 0800 	mov.w	r8, #0
 1001e5e:	46ab      	mov	fp, r5
	MPU->RNR = index;
 1001e60:	4f2e      	ldr	r7, [pc, #184]	; (1001f1c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1001e62:	45d0      	cmp	r8, sl
 1001e64:	db02      	blt.n	1001e6c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
 1001e66:	b003      	add	sp, #12
 1001e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
 1001e6c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 1001e70:	f1b9 0f00 	cmp.w	r9, #0
 1001e74:	d04a      	beq.n	1001f0c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
 1001e76:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1001e78:	4608      	mov	r0, r1
 1001e7a:	9101      	str	r1, [sp, #4]
 1001e7c:	f004 fb31 	bl	10064e2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 1001e80:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1001e82:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 1001e84:	eb09 0001 	add.w	r0, r9, r1
 1001e88:	3801      	subs	r0, #1
 1001e8a:	f004 fb2a 	bl	10064e2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 1001e8e:	4284      	cmp	r4, r0
 1001e90:	f04f 0214 	mov.w	r2, #20
 1001e94:	4b22      	ldr	r3, [pc, #136]	; (1001f20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
 1001e96:	d013      	beq.n	1001ec0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
 1001e98:	f06f 0315 	mvn.w	r3, #21
 1001e9c:	fb02 f808 	mul.w	r8, r2, r8
 1001ea0:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
 1001ea4:	f240 1221 	movw	r2, #289	; 0x121
 1001ea8:	491e      	ldr	r1, [pc, #120]	; (1001f24 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
 1001eaa:	481f      	ldr	r0, [pc, #124]	; (1001f28 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
 1001eac:	f004 faeb 	bl	1006486 <assert_print>
 1001eb0:	f240 1121 	movw	r1, #289	; 0x121
 1001eb4:	481b      	ldr	r0, [pc, #108]	; (1001f24 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
 1001eb6:	b003      	add	sp, #12
 1001eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
 1001ebc:	f004 badc 	b.w	1006478 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
 1001ec0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
 1001ec4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
 1001ec6:	d0ed      	beq.n	1001ea4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
 1001ec8:	7819      	ldrb	r1, [r3, #0]
 1001eca:	42a1      	cmp	r1, r4
 1001ecc:	ddea      	ble.n	1001ea4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
 1001ece:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
 1001ed2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
 1001ed6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
 1001eda:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 1001ede:	f100 0108 	add.w	r1, r0, #8
 1001ee2:	7b00      	ldrb	r0, [r0, #12]
 1001ee4:	f364 0004 	bfi	r0, r4, #0, #5
 1001ee8:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
 1001eea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 1001eee:	790c      	ldrb	r4, [r1, #4]
 1001ef0:	0840      	lsrs	r0, r0, #1
 1001ef2:	f360 1447 	bfi	r4, r0, #5, #3
 1001ef6:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
 1001ef8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 1001efc:	f021 011f 	bic.w	r1, r1, #31
 1001f00:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
 1001f02:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 1001f06:	f021 011f 	bic.w	r1, r1, #31
 1001f0a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1001f0c:	f108 0801 	add.w	r8, r8, #1
 1001f10:	3514      	adds	r5, #20
 1001f12:	360c      	adds	r6, #12
 1001f14:	e7a5      	b.n	1001e62 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
 1001f16:	bf00      	nop
 1001f18:	21000220 	.word	0x21000220
 1001f1c:	e000ed00 	.word	0xe000ed00
 1001f20:	21000469 	.word	0x21000469
 1001f24:	01007579 	.word	0x01007579
 1001f28:	01006eb0 	.word	0x01006eb0

01001f2c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 1001f2c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 1001f2e:	4d1d      	ldr	r5, [pc, #116]	; (1001fa4 <z_arm_mpu_init+0x78>)
 1001f30:	682c      	ldr	r4, [r5, #0]
 1001f32:	2c08      	cmp	r4, #8
 1001f34:	d90d      	bls.n	1001f52 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
 1001f36:	f44f 72a4 	mov.w	r2, #328	; 0x148
 1001f3a:	491b      	ldr	r1, [pc, #108]	; (1001fa8 <z_arm_mpu_init+0x7c>)
 1001f3c:	481b      	ldr	r0, [pc, #108]	; (1001fac <z_arm_mpu_init+0x80>)
 1001f3e:	f004 faa2 	bl	1006486 <assert_print>
 1001f42:	4819      	ldr	r0, [pc, #100]	; (1001fa8 <z_arm_mpu_init+0x7c>)
 1001f44:	f44f 71a4 	mov.w	r1, #328	; 0x148
 1001f48:	f004 fa96 	bl	1006478 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
 1001f4c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
 1001f50:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1001f52:	2000      	movs	r0, #0
	arm_core_mpu_disable();
 1001f54:	f7ff ff56 	bl	1001e04 <arm_core_mpu_disable>
	MPU->MAIR0 =
 1001f58:	4b15      	ldr	r3, [pc, #84]	; (1001fb0 <z_arm_mpu_init+0x84>)
 1001f5a:	4a16      	ldr	r2, [pc, #88]	; (1001fb4 <z_arm_mpu_init+0x88>)
 1001f5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1001f60:	4284      	cmp	r4, r0
 1001f62:	d117      	bne.n	1001f94 <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
 1001f64:	4b14      	ldr	r3, [pc, #80]	; (1001fb8 <z_arm_mpu_init+0x8c>)
 1001f66:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
 1001f68:	f7ff ff40 	bl	1001dec <arm_core_mpu_enable>
	__ASSERT(
 1001f6c:	4b10      	ldr	r3, [pc, #64]	; (1001fb0 <z_arm_mpu_init+0x84>)
 1001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 1001f72:	f3c3 2307 	ubfx	r3, r3, #8, #8
 1001f76:	2b08      	cmp	r3, #8
 1001f78:	d00a      	beq.n	1001f90 <z_arm_mpu_init+0x64>
 1001f7a:	490b      	ldr	r1, [pc, #44]	; (1001fa8 <z_arm_mpu_init+0x7c>)
 1001f7c:	480b      	ldr	r0, [pc, #44]	; (1001fac <z_arm_mpu_init+0x80>)
 1001f7e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 1001f82:	f004 fa80 	bl	1006486 <assert_print>
 1001f86:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 1001f8a:	4807      	ldr	r0, [pc, #28]	; (1001fa8 <z_arm_mpu_init+0x7c>)
 1001f8c:	f004 fa74 	bl	1006478 <assert_post_action>
	return 0;
 1001f90:	2000      	movs	r0, #0
 1001f92:	e7dd      	b.n	1001f50 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 1001f94:	6869      	ldr	r1, [r5, #4]
 1001f96:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 1001f9a:	f7ff fe25 	bl	1001be8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1001f9e:	3001      	adds	r0, #1
 1001fa0:	e7de      	b.n	1001f60 <z_arm_mpu_init+0x34>
 1001fa2:	bf00      	nop
 1001fa4:	01006bf4 	.word	0x01006bf4
 1001fa8:	01007579 	.word	0x01007579
 1001fac:	01006eb0 	.word	0x01006eb0
 1001fb0:	e000ed00 	.word	0xe000ed00
 1001fb4:	0044ffaa 	.word	0x0044ffaa
 1001fb8:	21000469 	.word	0x21000469

01001fbc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 1001fbc:	4b01      	ldr	r3, [pc, #4]	; (1001fc4 <__stdout_hook_install+0x8>)
 1001fbe:	6018      	str	r0, [r3, #0]
}
 1001fc0:	4770      	bx	lr
 1001fc2:	bf00      	nop
 1001fc4:	21000004 	.word	0x21000004

01001fc8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
 1001fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001fca:	2340      	movs	r3, #64	; 0x40
{
 1001fcc:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
 1001fce:	490a      	ldr	r1, [pc, #40]	; (1001ff8 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001fd0:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
 1001fd2:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001fd4:	1149      	asrs	r1, r1, #5
{
 1001fd6:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 1001fd8:	4623      	mov	r3, r4
 1001fda:	4a08      	ldr	r2, [pc, #32]	; (1001ffc <onoff_start+0x34>)
 1001fdc:	4808      	ldr	r0, [pc, #32]	; (1002000 <onoff_start+0x38>)
 1001fde:	f004 fac3 	bl	1006568 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
 1001fe2:	1e01      	subs	r1, r0, #0
 1001fe4:	da05      	bge.n	1001ff2 <onoff_start+0x2a>
		notify(mgr, err);
 1001fe6:	4628      	mov	r0, r5
 1001fe8:	4623      	mov	r3, r4
	}
}
 1001fea:	b003      	add	sp, #12
 1001fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
 1001ff0:	4718      	bx	r3
}
 1001ff2:	b003      	add	sp, #12
 1001ff4:	bd30      	pop	{r4, r5, pc}
 1001ff6:	bf00      	nop
 1001ff8:	21000244 	.word	0x21000244
 1001ffc:	010065d7 	.word	0x010065d7
 1002000:	010069fc 	.word	0x010069fc

01002004 <get_status>:
{
 1002004:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
 1002006:	b2cc      	uxtb	r4, r1
 1002008:	2c01      	cmp	r4, #1
{
 100200a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
 100200c:	d908      	bls.n	1002020 <get_status+0x1c>
 100200e:	4908      	ldr	r1, [pc, #32]	; (1002030 <get_status+0x2c>)
 1002010:	4808      	ldr	r0, [pc, #32]	; (1002034 <get_status+0x30>)
 1002012:	2279      	movs	r2, #121	; 0x79
 1002014:	f004 fa37 	bl	1006486 <assert_print>
 1002018:	2179      	movs	r1, #121	; 0x79
 100201a:	4805      	ldr	r0, [pc, #20]	; (1002030 <get_status+0x2c>)
 100201c:	f004 fa2c 	bl	1006478 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
 1002020:	230c      	movs	r3, #12
 1002022:	6929      	ldr	r1, [r5, #16]
 1002024:	fb04 1403 	mla	r4, r4, r3, r1
 1002028:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
 100202a:	f000 0007 	and.w	r0, r0, #7
 100202e:	bd38      	pop	{r3, r4, r5, pc}
 1002030:	010075bf 	.word	0x010075bf
 1002034:	01006eb0 	.word	0x01006eb0

01002038 <stop>:
{
 1002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100203a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
 100203c:	2c01      	cmp	r4, #1
{
 100203e:	4605      	mov	r5, r0
 1002040:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
 1002042:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
 1002044:	d90a      	bls.n	100205c <stop+0x24>
 1002046:	4918      	ldr	r1, [pc, #96]	; (10020a8 <stop+0x70>)
 1002048:	4818      	ldr	r0, [pc, #96]	; (10020ac <stop+0x74>)
 100204a:	f240 124d 	movw	r2, #333	; 0x14d
 100204e:	f004 fa1a 	bl	1006486 <assert_print>
 1002052:	f240 114d 	movw	r1, #333	; 0x14d
 1002056:	4814      	ldr	r0, [pc, #80]	; (10020a8 <stop+0x70>)
 1002058:	f004 fa0e 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 100205c:	f04f 0320 	mov.w	r3, #32
 1002060:	f3ef 8111 	mrs	r1, BASEPRI
 1002064:	f383 8812 	msr	BASEPRI_MAX, r3
 1002068:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 100206c:	220c      	movs	r2, #12
 100206e:	fb02 6304 	mla	r3, r2, r4, r6
 1002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
 1002074:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 1002078:	d001      	beq.n	100207e <stop+0x46>
 100207a:	429f      	cmp	r7, r3
 100207c:	d111      	bne.n	10020a2 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
 100207e:	2301      	movs	r3, #1
	int err = 0;
 1002080:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
 1002082:	fb02 6604 	mla	r6, r2, r4, r6
 1002086:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
 1002088:	f381 8811 	msr	BASEPRI, r1
 100208c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
 1002090:	b930      	cbnz	r0, 10020a0 <stop+0x68>
	get_sub_config(dev, type)->stop();
 1002092:	230c      	movs	r3, #12
 1002094:	6869      	ldr	r1, [r5, #4]
 1002096:	fb03 1404 	mla	r4, r3, r4, r1
 100209a:	6863      	ldr	r3, [r4, #4]
 100209c:	4798      	blx	r3
	return 0;
 100209e:	2000      	movs	r0, #0
}
 10020a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
 10020a2:	f04f 30ff 	mov.w	r0, #4294967295
 10020a6:	e7ef      	b.n	1002088 <stop+0x50>
 10020a8:	010075bf 	.word	0x010075bf
 10020ac:	01006eb0 	.word	0x01006eb0

010020b0 <onoff_stop>:
{
 10020b0:	b570      	push	{r4, r5, r6, lr}
 10020b2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
 10020b4:	4906      	ldr	r1, [pc, #24]	; (10020d0 <onoff_stop+0x20>)
{
 10020b6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
 10020b8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10020ba:	1149      	asrs	r1, r1, #5
 10020bc:	2240      	movs	r2, #64	; 0x40
 10020be:	4805      	ldr	r0, [pc, #20]	; (10020d4 <onoff_stop+0x24>)
 10020c0:	f7ff ffba 	bl	1002038 <stop>
	notify(mgr, res);
 10020c4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10020c6:	4601      	mov	r1, r0
	notify(mgr, res);
 10020c8:	4620      	mov	r0, r4
}
 10020ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
 10020ce:	4718      	bx	r3
 10020d0:	21000244 	.word	0x21000244
 10020d4:	010069fc 	.word	0x010069fc

010020d8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
 10020d8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 10020da:	2200      	movs	r2, #0
 10020dc:	2101      	movs	r1, #1
{
 10020de:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 10020e0:	2005      	movs	r0, #5
 10020e2:	f7ff f9db 	bl	100149c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
 10020e6:	480f      	ldr	r0, [pc, #60]	; (1002124 <clk_init+0x4c>)
 10020e8:	f001 ffd4 	bl	1004094 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
 10020ec:	4b0e      	ldr	r3, [pc, #56]	; (1002128 <clk_init+0x50>)
 10020ee:	4298      	cmp	r0, r3
 10020f0:	d115      	bne.n	100211e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
 10020f2:	f001 fff1 	bl	10040d8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
 10020f6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
 10020f8:	490c      	ldr	r1, [pc, #48]	; (100212c <clk_init+0x54>)
 10020fa:	4630      	mov	r0, r6
 10020fc:	f004 f943 	bl	1006386 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
 1002100:	2800      	cmp	r0, #0
 1002102:	db0b      	blt.n	100211c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 1002104:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
 1002106:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
 1002108:	4908      	ldr	r1, [pc, #32]	; (100212c <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 100210a:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
 100210c:	f104 0020 	add.w	r0, r4, #32
 1002110:	f004 f939 	bl	1006386 <onoff_manager_init>
		if (err < 0) {
 1002114:	2800      	cmp	r0, #0
 1002116:	db01      	blt.n	100211c <clk_init+0x44>
	}

	return 0;
 1002118:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 100211a:	6565      	str	r5, [r4, #84]	; 0x54
}
 100211c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 100211e:	f06f 0004 	mvn.w	r0, #4
 1002122:	e7fb      	b.n	100211c <clk_init+0x44>
 1002124:	01002165 	.word	0x01002165
 1002128:	0bad0000 	.word	0x0bad0000
 100212c:	01006c4c 	.word	0x01006c4c

01002130 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
 1002130:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
 1002132:	230c      	movs	r3, #12
	sub_data->cb = NULL;
 1002134:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
 1002136:	434b      	muls	r3, r1
 1002138:	4808      	ldr	r0, [pc, #32]	; (100215c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
 100213a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
 100213c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
 100213e:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
 1002140:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
 1002144:	4418      	add	r0, r3
	sub_data->cb = NULL;
 1002146:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
 1002148:	f004 f9fb 	bl	1006542 <set_on_state>
	if (callback) {
 100214c:	b12d      	cbz	r5, 100215a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
 100214e:	4632      	mov	r2, r6
 1002150:	462b      	mov	r3, r5
}
 1002152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
 1002156:	4802      	ldr	r0, [pc, #8]	; (1002160 <clkstarted_handle.constprop.0+0x30>)
 1002158:	4718      	bx	r3
}
 100215a:	bd70      	pop	{r4, r5, r6, pc}
 100215c:	21000244 	.word	0x21000244
 1002160:	010069fc 	.word	0x010069fc

01002164 <clock_event_handler>:
	switch (event) {
 1002164:	2801      	cmp	r0, #1
{
 1002166:	b508      	push	{r3, lr}
	switch (event) {
 1002168:	d006      	beq.n	1002178 <clock_event_handler+0x14>
 100216a:	2803      	cmp	r0, #3
 100216c:	d008      	beq.n	1002180 <clock_event_handler+0x1c>
 100216e:	b9a0      	cbnz	r0, 100219a <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
 1002170:	4b0f      	ldr	r3, [pc, #60]	; (10021b0 <clock_event_handler+0x4c>)
 1002172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 1002174:	075b      	lsls	r3, r3, #29
 1002176:	d119      	bne.n	10021ac <clock_event_handler+0x48>
}
 1002178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
 100217c:	f7ff bfd8 	b.w	1002130 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
 1002180:	490c      	ldr	r1, [pc, #48]	; (10021b4 <clock_event_handler+0x50>)
 1002182:	f240 225e 	movw	r2, #606	; 0x25e
 1002186:	480c      	ldr	r0, [pc, #48]	; (10021b8 <clock_event_handler+0x54>)
 1002188:	f004 f97d 	bl	1006486 <assert_print>
 100218c:	f240 215e 	movw	r1, #606	; 0x25e
}
 1002190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
 1002194:	4807      	ldr	r0, [pc, #28]	; (10021b4 <clock_event_handler+0x50>)
 1002196:	f004 b96f 	b.w	1006478 <assert_post_action>
 100219a:	4906      	ldr	r1, [pc, #24]	; (10021b4 <clock_event_handler+0x50>)
 100219c:	f240 2262 	movw	r2, #610	; 0x262
 10021a0:	4805      	ldr	r0, [pc, #20]	; (10021b8 <clock_event_handler+0x54>)
 10021a2:	f004 f970 	bl	1006486 <assert_print>
 10021a6:	f240 2162 	movw	r1, #610	; 0x262
 10021aa:	e7f1      	b.n	1002190 <clock_event_handler+0x2c>
}
 10021ac:	bd08      	pop	{r3, pc}
 10021ae:	bf00      	nop
 10021b0:	21000244 	.word	0x21000244
 10021b4:	010075bf 	.word	0x010075bf
 10021b8:	01006eb0 	.word	0x01006eb0

010021bc <generic_hfclk_start>:
{
 10021bc:	b508      	push	{r3, lr}
	__asm__ volatile(
 10021be:	f04f 0320 	mov.w	r3, #32
 10021c2:	f3ef 8111 	mrs	r1, BASEPRI
 10021c6:	f383 8812 	msr	BASEPRI_MAX, r3
 10021ca:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
 10021ce:	4a11      	ldr	r2, [pc, #68]	; (1002214 <generic_hfclk_start+0x58>)
 10021d0:	6813      	ldr	r3, [r2, #0]
 10021d2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
 10021d6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
 10021da:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
 10021dc:	d00b      	beq.n	10021f6 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 10021de:	4a0e      	ldr	r2, [pc, #56]	; (1002218 <generic_hfclk_start+0x5c>)
 10021e0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 10021e4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
 10021e8:	f013 0301 	ands.w	r3, r3, #1
 10021ec:	d003      	beq.n	10021f6 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
 10021ee:	480b      	ldr	r0, [pc, #44]	; (100221c <generic_hfclk_start+0x60>)
 10021f0:	f004 f9a7 	bl	1006542 <set_on_state>
			already_started = true;
 10021f4:	2301      	movs	r3, #1
	__asm__ volatile(
 10021f6:	f381 8811 	msr	BASEPRI, r1
 10021fa:	f3bf 8f6f 	isb	sy
	if (already_started) {
 10021fe:	b123      	cbz	r3, 100220a <generic_hfclk_start+0x4e>
}
 1002200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
 1002204:	2000      	movs	r0, #0
 1002206:	f7ff bf93 	b.w	1002130 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
 100220a:	2001      	movs	r0, #1
}
 100220c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 1002210:	f001 bf88 	b.w	1004124 <nrfx_clock_start>
 1002214:	2100029c 	.word	0x2100029c
 1002218:	41005000 	.word	0x41005000
 100221c:	2100028c 	.word	0x2100028c

01002220 <api_blocking_start>:
{
 1002220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 1002222:	2200      	movs	r2, #0
 1002224:	2301      	movs	r3, #1
 1002226:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 100222a:	466b      	mov	r3, sp
 100222c:	4a08      	ldr	r2, [pc, #32]	; (1002250 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 100222e:	f8cd d000 	str.w	sp, [sp]
 1002232:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 1002236:	f004 f9c7 	bl	10065c8 <api_start>
	if (err < 0) {
 100223a:	2800      	cmp	r0, #0
 100223c:	db05      	blt.n	100224a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 100223e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 1002242:	2300      	movs	r3, #0
 1002244:	4668      	mov	r0, sp
 1002246:	f002 fea1 	bl	1004f8c <z_impl_k_sem_take>
}
 100224a:	b005      	add	sp, #20
 100224c:	f85d fb04 	ldr.w	pc, [sp], #4
 1002250:	010065f5 	.word	0x010065f5

01002254 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1002254:	4b07      	ldr	r3, [pc, #28]	; (1002274 <generic_hfclk_stop+0x20>)
 1002256:	e8d3 2fef 	ldaex	r2, [r3]
 100225a:	f022 0102 	bic.w	r1, r2, #2
 100225e:	e8c3 1fe0 	stlex	r0, r1, [r3]
 1002262:	2800      	cmp	r0, #0
 1002264:	d1f7      	bne.n	1002256 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
 1002266:	07d3      	lsls	r3, r2, #31
 1002268:	d402      	bmi.n	1002270 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
 100226a:	2001      	movs	r0, #1
 100226c:	f001 bfbc 	b.w	10041e8 <nrfx_clock_stop>
}
 1002270:	4770      	bx	lr
 1002272:	bf00      	nop
 1002274:	2100029c 	.word	0x2100029c

01002278 <z_nrf_clock_control_get_onoff>:
}
 1002278:	4b02      	ldr	r3, [pc, #8]	; (1002284 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
 100227a:	b2c0      	uxtb	r0, r0
}
 100227c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 1002280:	4770      	bx	lr
 1002282:	bf00      	nop
 1002284:	21000244 	.word	0x21000244

01002288 <z_nrf_clock_control_lf_on>:
{
 1002288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 100228c:	2201      	movs	r2, #1
 100228e:	4606      	mov	r6, r0
 1002290:	4942      	ldr	r1, [pc, #264]	; (100239c <z_nrf_clock_control_lf_on+0x114>)
 1002292:	e8d1 3fef 	ldaex	r3, [r1]
 1002296:	e8c1 2fe0 	stlex	r0, r2, [r1]
 100229a:	2800      	cmp	r0, #0
 100229c:	d1f9      	bne.n	1002292 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
 100229e:	b99b      	cbnz	r3, 10022c8 <z_nrf_clock_control_lf_on+0x40>
	*notify = (struct sys_notify){
 10022a0:	493f      	ldr	r1, [pc, #252]	; (10023a0 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
 10022a2:	4840      	ldr	r0, [pc, #256]	; (10023a4 <z_nrf_clock_control_lf_on+0x11c>)
 10022a4:	604b      	str	r3, [r1, #4]
 10022a6:	60cb      	str	r3, [r1, #12]
 10022a8:	608a      	str	r2, [r1, #8]
 10022aa:	f7fe fc15 	bl	1000ad8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
 10022ae:	2800      	cmp	r0, #0
 10022b0:	da0a      	bge.n	10022c8 <z_nrf_clock_control_lf_on+0x40>
 10022b2:	493d      	ldr	r1, [pc, #244]	; (10023a8 <z_nrf_clock_control_lf_on+0x120>)
 10022b4:	483d      	ldr	r0, [pc, #244]	; (10023ac <z_nrf_clock_control_lf_on+0x124>)
 10022b6:	f44f 7208 	mov.w	r2, #544	; 0x220
 10022ba:	f004 f8e4 	bl	1006486 <assert_print>
 10022be:	f44f 7108 	mov.w	r1, #544	; 0x220
 10022c2:	4839      	ldr	r0, [pc, #228]	; (10023a8 <z_nrf_clock_control_lf_on+0x120>)
 10022c4:	f004 f8d8 	bl	1006478 <assert_post_action>
	switch (start_mode) {
 10022c8:	b386      	cbz	r6, 100232c <z_nrf_clock_control_lf_on+0xa4>
 10022ca:	1e73      	subs	r3, r6, #1
 10022cc:	2b01      	cmp	r3, #1
 10022ce:	d852      	bhi.n	1002376 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
 10022d0:	2e01      	cmp	r6, #1
 10022d2:	d106      	bne.n	10022e2 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 10022d4:	4b36      	ldr	r3, [pc, #216]	; (10023b0 <z_nrf_clock_control_lf_on+0x128>)
 10022d6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
 10022da:	f003 0303 	and.w	r3, r3, #3
 10022de:	2b02      	cmp	r3, #2
 10022e0:	d024      	beq.n	100232c <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 10022e2:	f004 fb3c 	bl	100695e <k_is_in_isr>
 10022e6:	4604      	mov	r4, r0
 10022e8:	b918      	cbnz	r0, 10022f2 <z_nrf_clock_control_lf_on+0x6a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
 10022ea:	4b32      	ldr	r3, [pc, #200]	; (10023b4 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
 10022ec:	781b      	ldrb	r3, [r3, #0]
 10022ee:	2b00      	cmp	r3, #0
 10022f0:	d14e      	bne.n	1002390 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
 10022f2:	f04f 0320 	mov.w	r3, #32
 10022f6:	f3ef 8711 	mrs	r7, BASEPRI
 10022fa:	f383 8812 	msr	BASEPRI_MAX, r3
 10022fe:	f3bf 8f6f 	isb	sy
 1002302:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 1002304:	4d2a      	ldr	r5, [pc, #168]	; (10023b0 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1002306:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 10023b8 <z_nrf_clock_control_lf_on+0x130>
 100230a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 100230e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
 1002312:	03d2      	lsls	r2, r2, #15
 1002314:	d50c      	bpl.n	1002330 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
 1002316:	f003 0303 	and.w	r3, r3, #3
 100231a:	2b02      	cmp	r3, #2
 100231c:	d001      	beq.n	1002322 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
 100231e:	2e01      	cmp	r6, #1
 1002320:	d106      	bne.n	1002330 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
 1002322:	b324      	cbz	r4, 100236e <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
 1002324:	f387 8811 	msr	BASEPRI, r7
 1002328:	f3bf 8f6f 	isb	sy
}
 100232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
 1002330:	b1c4      	cbz	r4, 1002364 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
 1002332:	4638      	mov	r0, r7
 1002334:	f7ff f848 	bl	10013c8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
 1002338:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
 100233c:	b2db      	uxtb	r3, r3
 100233e:	2b01      	cmp	r3, #1
 1002340:	d1e3      	bne.n	100230a <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 1002342:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
 1002346:	2a00      	cmp	r2, #0
 1002348:	d0df      	beq.n	100230a <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100234a:	2200      	movs	r2, #0
 100234c:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
 1002350:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
 1002354:	2202      	movs	r2, #2
 1002356:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
 100235a:	2220      	movs	r2, #32
 100235c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002360:	60ab      	str	r3, [r5, #8]
}
 1002362:	e7d2      	b.n	100230a <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
 1002364:	2100      	movs	r1, #0
 1002366:	2021      	movs	r0, #33	; 0x21
 1002368:	f003 fc6e 	bl	1005c48 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 100236c:	e7e4      	b.n	1002338 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
 100236e:	2302      	movs	r3, #2
 1002370:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
 1002374:	e7da      	b.n	100232c <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
 1002376:	490c      	ldr	r1, [pc, #48]	; (10023a8 <z_nrf_clock_control_lf_on+0x120>)
 1002378:	480c      	ldr	r0, [pc, #48]	; (10023ac <z_nrf_clock_control_lf_on+0x124>)
 100237a:	f240 2232 	movw	r2, #562	; 0x232
 100237e:	f004 f882 	bl	1006486 <assert_print>
}
 1002382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
 1002386:	f240 2132 	movw	r1, #562	; 0x232
 100238a:	4807      	ldr	r0, [pc, #28]	; (10023a8 <z_nrf_clock_control_lf_on+0x120>)
 100238c:	f004 b874 	b.w	1006478 <assert_post_action>
    p_reg->INTENCLR = mask;
 1002390:	2202      	movs	r2, #2
 1002392:	4b07      	ldr	r3, [pc, #28]	; (10023b0 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
 1002394:	4607      	mov	r7, r0
 1002396:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
 100239a:	e7b3      	b.n	1002304 <z_nrf_clock_control_lf_on+0x7c>
 100239c:	210002a0 	.word	0x210002a0
 10023a0:	21000234 	.word	0x21000234
 10023a4:	21000264 	.word	0x21000264
 10023a8:	010075bf 	.word	0x010075bf
 10023ac:	01006eb0 	.word	0x01006eb0
 10023b0:	41005000 	.word	0x41005000
 10023b4:	2100070c 	.word	0x2100070c
 10023b8:	e000e100 	.word	0xe000e100

010023bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 10023bc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 10023be:	4808      	ldr	r0, [pc, #32]	; (10023e0 <uart_console_init+0x24>)
 10023c0:	4b08      	ldr	r3, [pc, #32]	; (10023e4 <uart_console_init+0x28>)
 10023c2:	6018      	str	r0, [r3, #0]
 10023c4:	f004 fabd 	bl	1006942 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 10023c8:	b138      	cbz	r0, 10023da <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 10023ca:	4807      	ldr	r0, [pc, #28]	; (10023e8 <uart_console_init+0x2c>)
 10023cc:	f7ff fdf6 	bl	1001fbc <__stdout_hook_install>
	__printk_hook_install(console_out);
 10023d0:	4805      	ldr	r0, [pc, #20]	; (10023e8 <uart_console_init+0x2c>)
 10023d2:	f7fe f98d 	bl	10006f0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 10023d6:	2000      	movs	r0, #0
}
 10023d8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 10023da:	f06f 0012 	mvn.w	r0, #18
 10023de:	e7fb      	b.n	10023d8 <uart_console_init+0x1c>
 10023e0:	01006a44 	.word	0x01006a44
 10023e4:	210002a4 	.word	0x210002a4
 10023e8:	010023ed 	.word	0x010023ed

010023ec <console_out>:
	if ('\n' == c) {
 10023ec:	280a      	cmp	r0, #10
{
 10023ee:	b538      	push	{r3, r4, r5, lr}
 10023f0:	4604      	mov	r4, r0
 10023f2:	4d07      	ldr	r5, [pc, #28]	; (1002410 <console_out+0x24>)
	if ('\n' == c) {
 10023f4:	d104      	bne.n	1002400 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 10023f6:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 10023f8:	6883      	ldr	r3, [r0, #8]
 10023fa:	210d      	movs	r1, #13
 10023fc:	685b      	ldr	r3, [r3, #4]
 10023fe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 1002400:	6828      	ldr	r0, [r5, #0]
 1002402:	6883      	ldr	r3, [r0, #8]
 1002404:	b2e1      	uxtb	r1, r4
 1002406:	685b      	ldr	r3, [r3, #4]
 1002408:	4798      	blx	r3
}
 100240a:	4620      	mov	r0, r4
 100240c:	bd38      	pop	{r3, r4, r5, pc}
 100240e:	bf00      	nop
 1002410:	210002a4 	.word	0x210002a4

01002414 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
 1002414:	b570      	push	{r4, r5, r6, lr}
 1002416:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
 1002418:	460c      	mov	r4, r1
	return port->data;
 100241a:	6905      	ldr	r5, [r0, #16]
 100241c:	b941      	cbnz	r1, 1002430 <gpio_nrfx_manage_callback+0x1c>
 100241e:	491e      	ldr	r1, [pc, #120]	; (1002498 <gpio_nrfx_manage_callback+0x84>)
 1002420:	481e      	ldr	r0, [pc, #120]	; (100249c <gpio_nrfx_manage_callback+0x88>)
 1002422:	2224      	movs	r2, #36	; 0x24
 1002424:	f004 f82f 	bl	1006486 <assert_print>
 1002428:	2124      	movs	r1, #36	; 0x24
 100242a:	481b      	ldr	r0, [pc, #108]	; (1002498 <gpio_nrfx_manage_callback+0x84>)
 100242c:	f004 f824 	bl	1006478 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
 1002430:	6863      	ldr	r3, [r4, #4]
 1002432:	b943      	cbnz	r3, 1002446 <gpio_nrfx_manage_callback+0x32>
 1002434:	4918      	ldr	r1, [pc, #96]	; (1002498 <gpio_nrfx_manage_callback+0x84>)
 1002436:	4819      	ldr	r0, [pc, #100]	; (100249c <gpio_nrfx_manage_callback+0x88>)
 1002438:	2225      	movs	r2, #37	; 0x25
 100243a:	f004 f824 	bl	1006486 <assert_print>
 100243e:	2125      	movs	r1, #37	; 0x25
 1002440:	4815      	ldr	r0, [pc, #84]	; (1002498 <gpio_nrfx_manage_callback+0x84>)
 1002442:	f004 f819 	bl	1006478 <assert_post_action>
	return list->head;
 1002446:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
 1002448:	b15b      	cbz	r3, 1002462 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 100244a:	2200      	movs	r2, #0
 100244c:	429c      	cmp	r4, r3
 100244e:	d112      	bne.n	1002476 <gpio_nrfx_manage_callback+0x62>
	return node->next;
 1002450:	6823      	ldr	r3, [r4, #0]
	return list->tail;
 1002452:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
 1002454:	b952      	cbnz	r2, 100246c <gpio_nrfx_manage_callback+0x58>
 1002456:	42a1      	cmp	r1, r4
	list->head = node;
 1002458:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
 100245a:	d100      	bne.n	100245e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
 100245c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
 100245e:	2300      	movs	r3, #0
 1002460:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 1002462:	b96e      	cbnz	r6, 1002480 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 1002464:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
 1002466:	bd70      	pop	{r4, r5, r6, pc}
 1002468:	460b      	mov	r3, r1
 100246a:	e7ef      	b.n	100244c <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
 100246c:	42a1      	cmp	r1, r4
	parent->next = child;
 100246e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 1002470:	bf08      	it	eq
 1002472:	60aa      	streq	r2, [r5, #8]
}
 1002474:	e7f3      	b.n	100245e <gpio_nrfx_manage_callback+0x4a>
	return node->next;
 1002476:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 1002478:	461a      	mov	r2, r3
 100247a:	2900      	cmp	r1, #0
 100247c:	d1f4      	bne.n	1002468 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
 100247e:	b13e      	cbz	r6, 1002490 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
 1002480:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
 1002482:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
 1002484:	6023      	str	r3, [r4, #0]
	list->head = node;
 1002486:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
 1002488:	2800      	cmp	r0, #0
 100248a:	d1eb      	bne.n	1002464 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
 100248c:	60ac      	str	r4, [r5, #8]
}
 100248e:	e7ea      	b.n	1002466 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
 1002490:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
 1002494:	e7e7      	b.n	1002466 <gpio_nrfx_manage_callback+0x52>
 1002496:	bf00      	nop
 1002498:	0100761c 	.word	0x0100761c
 100249c:	01006eb0 	.word	0x01006eb0

010024a0 <gpio_nrfx_pin_interrupt_configure>:
{
 10024a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
 10024a2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 10024a4:	f001 041f 	and.w	r4, r1, #31
 10024a8:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
 10024aa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 10024ae:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
 10024b2:	f04f 0500 	mov.w	r5, #0
 10024b6:	d104      	bne.n	10024c2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
 10024b8:	4620      	mov	r0, r4
 10024ba:	f002 f9b1 	bl	1004820 <nrfx_gpiote_trigger_disable>
	return 0;
 10024be:	2000      	movs	r0, #0
 10024c0:	e050      	b.n	1002564 <gpio_nrfx_pin_interrupt_configure+0xc4>
	if (mode == GPIO_INT_MODE_LEVEL) {
 10024c2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
 10024c6:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
 10024ca:	d14d      	bne.n	1002568 <gpio_nrfx_pin_interrupt_configure+0xc8>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
 10024cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 10024d0:	bf0c      	ite	eq
 10024d2:	2304      	moveq	r3, #4
 10024d4:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
 10024d6:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
 10024da:	6883      	ldr	r3, [r0, #8]
 10024dc:	fa23 f101 	lsr.w	r1, r3, r1
 10024e0:	f011 0101 	ands.w	r1, r1, #1
 10024e4:	d151      	bne.n	100258a <gpio_nrfx_pin_interrupt_configure+0xea>
 10024e6:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
 10024ea:	d14e      	bne.n	100258a <gpio_nrfx_pin_interrupt_configure+0xea>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
 10024ec:	0966      	lsrs	r6, r4, #5
 10024ee:	d046      	beq.n	100257e <gpio_nrfx_pin_interrupt_configure+0xde>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
 10024f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 10024f4:	2e01      	cmp	r6, #1
 10024f6:	bf08      	it	eq
 10024f8:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
 10024fa:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
 10024fe:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
 1002500:	07ca      	lsls	r2, r1, #31
 1002502:	d40a      	bmi.n	100251a <gpio_nrfx_pin_interrupt_configure+0x7a>
 1002504:	4929      	ldr	r1, [pc, #164]	; (10025ac <gpio_nrfx_pin_interrupt_configure+0x10c>)
 1002506:	482a      	ldr	r0, [pc, #168]	; (10025b0 <gpio_nrfx_pin_interrupt_configure+0x110>)
 1002508:	f240 2229 	movw	r2, #553	; 0x229
 100250c:	f003 ffbb 	bl	1006486 <assert_print>
 1002510:	f240 2129 	movw	r1, #553	; 0x229
 1002514:	4825      	ldr	r0, [pc, #148]	; (10025ac <gpio_nrfx_pin_interrupt_configure+0x10c>)
 1002516:	f003 ffaf 	bl	1006478 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
 100251a:	b166      	cbz	r6, 1002536 <gpio_nrfx_pin_interrupt_configure+0x96>
 100251c:	2e01      	cmp	r6, #1
 100251e:	d031      	beq.n	1002584 <gpio_nrfx_pin_interrupt_configure+0xe4>
            NRFX_ASSERT(0);
 1002520:	4922      	ldr	r1, [pc, #136]	; (10025ac <gpio_nrfx_pin_interrupt_configure+0x10c>)
 1002522:	4823      	ldr	r0, [pc, #140]	; (10025b0 <gpio_nrfx_pin_interrupt_configure+0x110>)
 1002524:	f240 222e 	movw	r2, #558	; 0x22e
 1002528:	f003 ffad 	bl	1006486 <assert_print>
 100252c:	f240 212e 	movw	r1, #558	; 0x22e
 1002530:	481e      	ldr	r0, [pc, #120]	; (10025ac <gpio_nrfx_pin_interrupt_configure+0x10c>)
 1002532:	f003 ffa1 	bl	1006478 <assert_post_action>
        case 0: return NRF_P0;
 1002536:	4b1f      	ldr	r3, [pc, #124]	; (10025b4 <gpio_nrfx_pin_interrupt_configure+0x114>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
 1002538:	3580      	adds	r5, #128	; 0x80
 100253a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
 100253e:	07db      	lsls	r3, r3, #31
 1002540:	d423      	bmi.n	100258a <gpio_nrfx_pin_interrupt_configure+0xea>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
 1002542:	f10d 0507 	add.w	r5, sp, #7
 1002546:	4629      	mov	r1, r5
 1002548:	4620      	mov	r0, r4
 100254a:	f002 f897 	bl	100467c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
 100254e:	4b1a      	ldr	r3, [pc, #104]	; (10025b8 <gpio_nrfx_pin_interrupt_configure+0x118>)
 1002550:	4298      	cmp	r0, r3
 1002552:	d119      	bne.n	1002588 <gpio_nrfx_pin_interrupt_configure+0xe8>
			err = nrfx_gpiote_channel_alloc(&ch);
 1002554:	4628      	mov	r0, r5
 1002556:	f002 f8f1 	bl	100473c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
 100255a:	4b18      	ldr	r3, [pc, #96]	; (10025bc <gpio_nrfx_pin_interrupt_configure+0x11c>)
 100255c:	4298      	cmp	r0, r3
 100255e:	d013      	beq.n	1002588 <gpio_nrfx_pin_interrupt_configure+0xe8>
				return -ENOMEM;
 1002560:	f06f 000b 	mvn.w	r0, #11
}
 1002564:	b004      	add	sp, #16
 1002566:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
 1002568:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 100256c:	d005      	beq.n	100257a <gpio_nrfx_pin_interrupt_configure+0xda>
 100256e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 1002572:	bf0c      	ite	eq
 1002574:	2302      	moveq	r3, #2
 1002576:	2301      	movne	r3, #1
 1002578:	e7ad      	b.n	10024d6 <gpio_nrfx_pin_interrupt_configure+0x36>
 100257a:	2303      	movs	r3, #3
 100257c:	e7ab      	b.n	10024d6 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
 100257e:	f04f 31ff 	mov.w	r1, #4294967295
 1002582:	e7ba      	b.n	10024fa <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
 1002584:	4b0e      	ldr	r3, [pc, #56]	; (10025c0 <gpio_nrfx_pin_interrupt_configure+0x120>)
 1002586:	e7d7      	b.n	1002538 <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
 1002588:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 100258a:	2300      	movs	r3, #0
 100258c:	4620      	mov	r0, r4
 100258e:	4619      	mov	r1, r3
 1002590:	aa02      	add	r2, sp, #8
 1002592:	f001 ff49 	bl	1004428 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
 1002596:	4b09      	ldr	r3, [pc, #36]	; (10025bc <gpio_nrfx_pin_interrupt_configure+0x11c>)
 1002598:	4298      	cmp	r0, r3
 100259a:	d104      	bne.n	10025a6 <gpio_nrfx_pin_interrupt_configure+0x106>
	nrfx_gpiote_trigger_enable(abs_pin, true);
 100259c:	2101      	movs	r1, #1
 100259e:	4620      	mov	r0, r4
 10025a0:	f002 f8d2 	bl	1004748 <nrfx_gpiote_trigger_enable>
 10025a4:	e78b      	b.n	10024be <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
 10025a6:	f06f 0004 	mvn.w	r0, #4
 10025aa:	e7db      	b.n	1002564 <gpio_nrfx_pin_interrupt_configure+0xc4>
 10025ac:	01007649 	.word	0x01007649
 10025b0:	01006eb0 	.word	0x01006eb0
 10025b4:	418c0500 	.word	0x418c0500
 10025b8:	0bad0004 	.word	0x0bad0004
 10025bc:	0bad0000 	.word	0x0bad0000
 10025c0:	418c0800 	.word	0x418c0800

010025c4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
 10025c4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
 10025c6:	f002 f8a9 	bl	100471c <nrfx_gpiote_is_init>
 10025ca:	4604      	mov	r4, r0
 10025cc:	b968      	cbnz	r0, 10025ea <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
 10025ce:	f002 f87d 	bl	10046cc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
 10025d2:	4b08      	ldr	r3, [pc, #32]	; (10025f4 <gpio_nrfx_init+0x30>)
 10025d4:	4298      	cmp	r0, r3
 10025d6:	d10a      	bne.n	10025ee <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
 10025d8:	4621      	mov	r1, r4
 10025da:	4807      	ldr	r0, [pc, #28]	; (10025f8 <gpio_nrfx_init+0x34>)
 10025dc:	f002 f848 	bl	1004670 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
 10025e0:	4622      	mov	r2, r4
 10025e2:	2105      	movs	r1, #5
 10025e4:	200a      	movs	r0, #10
 10025e6:	f7fe ff59 	bl	100149c <z_arm_irq_priority_set>
		return 0;
 10025ea:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
 10025ec:	bd10      	pop	{r4, pc}
		return -EIO;
 10025ee:	f06f 0004 	mvn.w	r0, #4
 10025f2:	e7fb      	b.n	10025ec <gpio_nrfx_init+0x28>
 10025f4:	0bad0000 	.word	0x0bad0000
 10025f8:	010025fd 	.word	0x010025fd

010025fc <nrfx_gpio_handler>:
{
 10025fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1002600:	0943      	lsrs	r3, r0, #5
 1002602:	d003      	beq.n	100260c <nrfx_gpio_handler+0x10>
 1002604:	2b01      	cmp	r3, #1
 1002606:	d028      	beq.n	100265a <nrfx_gpio_handler+0x5e>
}
 1002608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 100260c:	4f14      	ldr	r7, [pc, #80]	; (1002660 <nrfx_gpio_handler+0x64>)
	gpio_fire_callbacks(list, port, BIT(pin));
 100260e:	693b      	ldr	r3, [r7, #16]
 1002610:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 1002612:	2c00      	cmp	r4, #0
 1002614:	d0f8      	beq.n	1002608 <nrfx_gpio_handler+0xc>
 1002616:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
 1002618:	f000 001f 	and.w	r0, r0, #31
	return node->next;
 100261c:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
 100261e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1002664 <nrfx_gpio_handler+0x68>
 1002622:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1002668 <nrfx_gpio_handler+0x6c>
 1002626:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
 1002628:	68a3      	ldr	r3, [r4, #8]
 100262a:	421e      	tst	r6, r3
 100262c:	d010      	beq.n	1002650 <nrfx_gpio_handler+0x54>
			__ASSERT(cb->handler, "No callback handler!");
 100262e:	6863      	ldr	r3, [r4, #4]
 1002630:	b943      	cbnz	r3, 1002644 <nrfx_gpio_handler+0x48>
 1002632:	4641      	mov	r1, r8
 1002634:	4648      	mov	r0, r9
 1002636:	2245      	movs	r2, #69	; 0x45
 1002638:	f003 ff25 	bl	1006486 <assert_print>
 100263c:	2145      	movs	r1, #69	; 0x45
 100263e:	4640      	mov	r0, r8
 1002640:	f003 ff1a 	bl	1006478 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
 1002644:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 1002648:	4621      	mov	r1, r4
 100264a:	4638      	mov	r0, r7
 100264c:	4032      	ands	r2, r6
 100264e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 1002650:	2d00      	cmp	r5, #0
 1002652:	d0d9      	beq.n	1002608 <nrfx_gpio_handler+0xc>
 1002654:	462c      	mov	r4, r5
 1002656:	682d      	ldr	r5, [r5, #0]
 1002658:	e7e6      	b.n	1002628 <nrfx_gpio_handler+0x2c>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 100265a:	4f04      	ldr	r7, [pc, #16]	; (100266c <nrfx_gpio_handler+0x70>)
 100265c:	e7d7      	b.n	100260e <nrfx_gpio_handler+0x12>
 100265e:	bf00      	nop
 1002660:	01006a14 	.word	0x01006a14
 1002664:	0100761c 	.word	0x0100761c
 1002668:	01006eb0 	.word	0x01006eb0
 100266c:	01006a2c 	.word	0x01006a2c

01002670 <gpio_nrfx_pin_configure>:
{
 1002670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
 1002674:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 1002676:	f001 051f 	and.w	r5, r1, #31
 100267a:	7b3b      	ldrb	r3, [r7, #12]
{
 100267c:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
 100267e:	4614      	mov	r4, r2
{
 1002680:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 1002682:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
 1002686:	b9ca      	cbnz	r2, 10026bc <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
 1002688:	a902      	add	r1, sp, #8
 100268a:	4628      	mov	r0, r5
 100268c:	f001 fff6 	bl	100467c <nrfx_gpiote_channel_get>
 1002690:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
 1002692:	4628      	mov	r0, r5
 1002694:	f002 f8ee 	bl	1004874 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
 1002698:	4b49      	ldr	r3, [pc, #292]	; (10027c0 <gpio_nrfx_pin_configure+0x150>)
 100269a:	4298      	cmp	r0, r3
 100269c:	d004      	beq.n	10026a8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
 100269e:	f06f 0004 	mvn.w	r0, #4
}
 10026a2:	b005      	add	sp, #20
 10026a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
 10026a8:	4284      	cmp	r4, r0
 10026aa:	d105      	bne.n	10026b8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
 10026ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
 10026b0:	f002 f83e 	bl	1004730 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
 10026b4:	42a0      	cmp	r0, r4
 10026b6:	d1f2      	bne.n	100269e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
 10026b8:	2000      	movs	r0, #0
 10026ba:	e7f2      	b.n	10026a2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
 10026bc:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
 10026c0:	f10d 0103 	add.w	r1, sp, #3
 10026c4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
 10026c6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
 10026ca:	f001 ffd7 	bl	100467c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 10026ce:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
 10026d0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 10026d2:	4649      	mov	r1, r9
 10026d4:	4628      	mov	r0, r5
 10026d6:	aa02      	add	r2, sp, #8
 10026d8:	f001 fea6 	bl	1004428 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
 10026dc:	4b38      	ldr	r3, [pc, #224]	; (10027c0 <gpio_nrfx_pin_configure+0x150>)
 10026de:	4298      	cmp	r0, r3
 10026e0:	d002      	beq.n	10026e8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
 10026e2:	f06f 0015 	mvn.w	r0, #21
 10026e6:	e7dc      	b.n	10026a2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
 10026e8:	4580      	cmp	r8, r0
 10026ea:	d103      	bne.n	10026f4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
 10026ec:	f89d 0003 	ldrb.w	r0, [sp, #3]
 10026f0:	f002 f81e 	bl	1004730 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
 10026f4:	03a3      	lsls	r3, r4, #14
 10026f6:	d54f      	bpl.n	1002798 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
 10026f8:	f240 6306 	movw	r3, #1542	; 0x606
 10026fc:	f240 2206 	movw	r2, #518	; 0x206
 1002700:	4023      	ands	r3, r4
 1002702:	4293      	cmp	r3, r2
 1002704:	d03a      	beq.n	100277c <gpio_nrfx_pin_configure+0x10c>
 1002706:	d80c      	bhi.n	1002722 <gpio_nrfx_pin_configure+0xb2>
 1002708:	2b06      	cmp	r3, #6
 100270a:	d015      	beq.n	1002738 <gpio_nrfx_pin_configure+0xc8>
 100270c:	d804      	bhi.n	1002718 <gpio_nrfx_pin_configure+0xa8>
 100270e:	b19b      	cbz	r3, 1002738 <gpio_nrfx_pin_configure+0xc8>
 1002710:	2b02      	cmp	r3, #2
 1002712:	d1e6      	bne.n	10026e2 <gpio_nrfx_pin_configure+0x72>
 1002714:	2304      	movs	r3, #4
 1002716:	e00f      	b.n	1002738 <gpio_nrfx_pin_configure+0xc8>
 1002718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 100271c:	d1e1      	bne.n	10026e2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
 100271e:	2301      	movs	r3, #1
 1002720:	e00a      	b.n	1002738 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
 1002722:	f240 4202 	movw	r2, #1026	; 0x402
 1002726:	4293      	cmp	r3, r2
 1002728:	d02a      	beq.n	1002780 <gpio_nrfx_pin_configure+0x110>
 100272a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 100272e:	d029      	beq.n	1002784 <gpio_nrfx_pin_configure+0x114>
 1002730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 1002734:	d1d5      	bne.n	10026e2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
 1002736:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
 1002738:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
 100273c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
 1002740:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
 1002744:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
 1002746:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
 100274a:	bf4c      	ite	mi
 100274c:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
 100274e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
 1002752:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
 1002754:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
 1002758:	d516      	bpl.n	1002788 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
 100275a:	2101      	movs	r1, #1
 100275c:	687b      	ldr	r3, [r7, #4]
 100275e:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
 1002762:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
 1002764:	2200      	movs	r2, #0
 1002766:	4628      	mov	r0, r5
 1002768:	a901      	add	r1, sp, #4
 100276a:	f001 ff09 	bl	1004580 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
 100276e:	4b14      	ldr	r3, [pc, #80]	; (10027c0 <gpio_nrfx_pin_configure+0x150>)
 1002770:	4298      	cmp	r0, r3
 1002772:	bf14      	ite	ne
 1002774:	f06f 0015 	mvnne.w	r0, #21
 1002778:	2000      	moveq	r0, #0
 100277a:	e792      	b.n	10026a2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
 100277c:	2307      	movs	r3, #7
 100277e:	e7db      	b.n	1002738 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
 1002780:	2305      	movs	r3, #5
 1002782:	e7d9      	b.n	1002738 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
 1002784:	2303      	movs	r3, #3
 1002786:	e7d7      	b.n	1002738 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
 1002788:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
 100278a:	bf41      	itttt	mi
 100278c:	2101      	movmi	r1, #1
 100278e:	687b      	ldrmi	r3, [r7, #4]
 1002790:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
 1002794:	60de      	strmi	r6, [r3, #12]
}
 1002796:	e7e5      	b.n	1002764 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
 1002798:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 100279a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
 100279e:	bf4c      	ite	mi
 10027a0:	2403      	movmi	r4, #3
 10027a2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 10027a6:	461a      	mov	r2, r3
 10027a8:	4628      	mov	r0, r5
 10027aa:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
 10027ac:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 10027b0:	f001 fe3a 	bl	1004428 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
 10027b4:	4b02      	ldr	r3, [pc, #8]	; (10027c0 <gpio_nrfx_pin_configure+0x150>)
 10027b6:	4298      	cmp	r0, r3
 10027b8:	f43f af7e 	beq.w	10026b8 <gpio_nrfx_pin_configure+0x48>
 10027bc:	e791      	b.n	10026e2 <gpio_nrfx_pin_configure+0x72>
 10027be:	bf00      	nop
 10027c0:	0bad0000 	.word	0x0bad0000

010027c4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 10027c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
 10027c6:	794b      	ldrb	r3, [r1, #5]
 10027c8:	2b01      	cmp	r3, #1
 10027ca:	d028      	beq.n	100281e <uarte_nrfx_configure+0x5a>
 10027cc:	2b03      	cmp	r3, #3
 10027ce:	d123      	bne.n	1002818 <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
 10027d0:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
 10027d2:	798b      	ldrb	r3, [r1, #6]
 10027d4:	2b03      	cmp	r3, #3
 10027d6:	d11f      	bne.n	1002818 <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
 10027d8:	79cd      	ldrb	r5, [r1, #7]
 10027da:	b10d      	cbz	r5, 10027e0 <uarte_nrfx_configure+0x1c>
 10027dc:	2d01      	cmp	r5, #1
 10027de:	d11b      	bne.n	1002818 <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
 10027e0:	790a      	ldrb	r2, [r1, #4]
 10027e2:	2a01      	cmp	r2, #1
 10027e4:	d01d      	beq.n	1002822 <uarte_nrfx_configure+0x5e>
 10027e6:	2a02      	cmp	r2, #2
 10027e8:	d01f      	beq.n	100282a <uarte_nrfx_configure+0x66>
 10027ea:	b9aa      	cbnz	r2, 1002818 <uarte_nrfx_configure+0x54>
 10027ec:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
 10027ee:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
 10027f0:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
 10027f2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
 10027f6:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
 10027f8:	d06e      	beq.n	10028d8 <uarte_nrfx_configure+0x114>
 10027fa:	d833      	bhi.n	1002864 <uarte_nrfx_configure+0xa0>
 10027fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 1002800:	d06d      	beq.n	10028de <uarte_nrfx_configure+0x11a>
 1002802:	d81c      	bhi.n	100283e <uarte_nrfx_configure+0x7a>
 1002804:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 1002808:	d06b      	beq.n	10028e2 <uarte_nrfx_configure+0x11e>
 100280a:	d810      	bhi.n	100282e <uarte_nrfx_configure+0x6a>
 100280c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 1002810:	d06a      	beq.n	10028e8 <uarte_nrfx_configure+0x124>
 1002812:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 1002816:	d06a      	beq.n	10028ee <uarte_nrfx_configure+0x12a>
 1002818:	f06f 0085 	mvn.w	r0, #133	; 0x85
 100281c:	e05b      	b.n	10028d6 <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
 100281e:	2700      	movs	r7, #0
 1002820:	e7d7      	b.n	10027d2 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
 1002822:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
 1002826:	220e      	movs	r2, #14
 1002828:	e7e1      	b.n	10027ee <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
 100282a:	2400      	movs	r4, #0
 100282c:	e7fb      	b.n	1002826 <uarte_nrfx_configure+0x62>
	switch (baudrate) {
 100282e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 1002832:	d05f      	beq.n	10028f4 <uarte_nrfx_configure+0x130>
 1002834:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 1002838:	d1ee      	bne.n	1002818 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
 100283a:	4b39      	ldr	r3, [pc, #228]	; (1002920 <uarte_nrfx_configure+0x15c>)
 100283c:	e03e      	b.n	10028bc <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 100283e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
 1002842:	d05a      	beq.n	10028fa <uarte_nrfx_configure+0x136>
 1002844:	d807      	bhi.n	1002856 <uarte_nrfx_configure+0x92>
 1002846:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 100284a:	d058      	beq.n	10028fe <uarte_nrfx_configure+0x13a>
 100284c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 1002850:	d1e2      	bne.n	1002818 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
 1002852:	4b34      	ldr	r3, [pc, #208]	; (1002924 <uarte_nrfx_configure+0x160>)
 1002854:	e032      	b.n	10028bc <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1002856:	f647 2c12 	movw	ip, #31250	; 0x7a12
 100285a:	4563      	cmp	r3, ip
 100285c:	d1dc      	bne.n	1002818 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
 100285e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 1002862:	e02b      	b.n	10028bc <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1002864:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
 1002868:	d04b      	beq.n	1002902 <uarte_nrfx_configure+0x13e>
 100286a:	d813      	bhi.n	1002894 <uarte_nrfx_configure+0xd0>
 100286c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 1002870:	d04a      	beq.n	1002908 <uarte_nrfx_configure+0x144>
 1002872:	d809      	bhi.n	1002888 <uarte_nrfx_configure+0xc4>
 1002874:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
 1002878:	4563      	cmp	r3, ip
 100287a:	d047      	beq.n	100290c <uarte_nrfx_configure+0x148>
 100287c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 1002880:	d1ca      	bne.n	1002818 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
 1002882:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
 1002886:	e019      	b.n	10028bc <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1002888:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 100288c:	d1c4      	bne.n	1002818 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
 100288e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
 1002892:	e013      	b.n	10028bc <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 1002894:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
 1002898:	d03b      	beq.n	1002912 <uarte_nrfx_configure+0x14e>
 100289a:	d809      	bhi.n	10028b0 <uarte_nrfx_configure+0xec>
 100289c:	f8df c088 	ldr.w	ip, [pc, #136]	; 1002928 <uarte_nrfx_configure+0x164>
 10028a0:	4563      	cmp	r3, ip
 10028a2:	d039      	beq.n	1002918 <uarte_nrfx_configure+0x154>
 10028a4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
 10028a8:	d1b6      	bne.n	1002818 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
 10028aa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
 10028ae:	e005      	b.n	10028bc <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 10028b0:	f8df c078 	ldr.w	ip, [pc, #120]	; 100292c <uarte_nrfx_configure+0x168>
 10028b4:	4563      	cmp	r3, ip
 10028b6:	d1af      	bne.n	1002818 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
 10028b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
 10028bc:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
 10028be:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
 10028c0:	433a      	orrs	r2, r7
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
 10028c2:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
 10028c6:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
 10028c8:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
 10028ca:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
 10028ce:	c903      	ldmia	r1, {r0, r1}
 10028d0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
 10028d4:	2000      	movs	r0, #0
}
 10028d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
 10028d8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
 10028dc:	e7ee      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
 10028de:	4b14      	ldr	r3, [pc, #80]	; (1002930 <uarte_nrfx_configure+0x16c>)
 10028e0:	e7ec      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
 10028e2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
 10028e6:	e7e9      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
 10028e8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 10028ec:	e7e6      	b.n	10028bc <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
 10028ee:	f44f 331c 	mov.w	r3, #159744	; 0x27000
 10028f2:	e7e3      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
 10028f4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
 10028f8:	e7e0      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
 10028fa:	4b0e      	ldr	r3, [pc, #56]	; (1002934 <uarte_nrfx_configure+0x170>)
 10028fc:	e7de      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
 10028fe:	4b0e      	ldr	r3, [pc, #56]	; (1002938 <uarte_nrfx_configure+0x174>)
 1002900:	e7dc      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
 1002902:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
 1002906:	e7d9      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
 1002908:	4b0c      	ldr	r3, [pc, #48]	; (100293c <uarte_nrfx_configure+0x178>)
 100290a:	e7d7      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
 100290c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
 1002910:	e7d4      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
 1002912:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 1002916:	e7d1      	b.n	10028bc <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
 1002918:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 100291c:	e7ce      	b.n	10028bc <uarte_nrfx_configure+0xf8>
 100291e:	bf00      	nop
 1002920:	0013b000 	.word	0x0013b000
 1002924:	004ea000 	.word	0x004ea000
 1002928:	0003d090 	.word	0x0003d090
 100292c:	000f4240 	.word	0x000f4240
 1002930:	00275000 	.word	0x00275000
 1002934:	0075c000 	.word	0x0075c000
 1002938:	003af000 	.word	0x003af000
 100293c:	013a9000 	.word	0x013a9000

01002940 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
 1002940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 1002944:	4607      	mov	r7, r0
 1002946:	2200      	movs	r2, #0
 1002948:	2101      	movs	r1, #1
 100294a:	2013      	movs	r0, #19
 100294c:	f7fe fda6 	bl	100149c <z_arm_irq_priority_set>
 1002950:	2013      	movs	r0, #19
 1002952:	f7fe fd71 	bl	1001438 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
 1002956:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
 1002958:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
 100295c:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
 100295e:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
 1002962:	f8d8 900c 	ldr.w	r9, [r8, #12]
 1002966:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 100296a:	4648      	mov	r0, r9
	data->dev = dev;
 100296c:	6037      	str	r7, [r6, #0]
 100296e:	aa01      	add	r2, sp, #4
 1002970:	f003 fece 	bl	1006710 <pinctrl_lookup_state>
	if (ret < 0) {
 1002974:	1e05      	subs	r5, r0, #0
 1002976:	db1f      	blt.n	10029b8 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 1002978:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 100297a:	f8d9 2000 	ldr.w	r2, [r9]
 100297e:	7919      	ldrb	r1, [r3, #4]
 1002980:	6818      	ldr	r0, [r3, #0]
 1002982:	f003 ff02 	bl	100678a <pinctrl_configure_pins>
	if (err < 0) {
 1002986:	1e05      	subs	r5, r0, #0
 1002988:	db16      	blt.n	10029b8 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
 100298a:	4638      	mov	r0, r7
 100298c:	1d31      	adds	r1, r6, #4
 100298e:	f7ff ff19 	bl	10027c4 <uarte_nrfx_configure>
	if (err) {
 1002992:	4605      	mov	r5, r0
 1002994:	b980      	cbnz	r0, 10029b8 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
 1002996:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
 100299a:	0799      	lsls	r1, r3, #30
 100299c:	d52b      	bpl.n	10029f6 <uarte_0_init+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
 100299e:	f106 0012 	add.w	r0, r6, #18
 10029a2:	f001 fc71 	bl	1004288 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
 10029a6:	4b29      	ldr	r3, [pc, #164]	; (1002a4c <uarte_0_init+0x10c>)
 10029a8:	4298      	cmp	r0, r3
 10029aa:	d009      	beq.n	10029c0 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
 10029ac:	2145      	movs	r1, #69	; 0x45
 10029ae:	4828      	ldr	r0, [pc, #160]	; (1002a50 <uarte_0_init+0x110>)
 10029b0:	f003 fd77 	bl	10064a2 <z_log_minimal_printk>
		return -EIO;
 10029b4:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
 10029b8:	4628      	mov	r0, r5
 10029ba:	b003      	add	sp, #12
 10029bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
 10029c0:	7cb7      	ldrb	r7, [r6, #18]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
 10029c2:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
 10029c6:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 10029ca:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
 10029ce:	d10a      	bne.n	10029e6 <uarte_0_init+0xa6>
 10029d0:	4920      	ldr	r1, [pc, #128]	; (1002a54 <uarte_0_init+0x114>)
 10029d2:	4821      	ldr	r0, [pc, #132]	; (1002a58 <uarte_0_init+0x118>)
 10029d4:	f240 224e 	movw	r2, #590	; 0x24e
 10029d8:	f003 fd55 	bl	1006486 <assert_print>
 10029dc:	f240 214e 	movw	r1, #590	; 0x24e
 10029e0:	481c      	ldr	r0, [pc, #112]	; (1002a54 <uarte_0_init+0x114>)
 10029e2:	f003 fd49 	bl	1006478 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
 10029e6:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
 10029e8:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
 10029ec:	7cb2      	ldrb	r2, [r6, #18]
 10029ee:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
 10029f0:	4a1a      	ldr	r2, [pc, #104]	; (1002a5c <uarte_0_init+0x11c>)
 10029f2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
 10029f6:	2308      	movs	r3, #8
 10029f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
 10029fc:	f898 3008 	ldrb.w	r3, [r8, #8]
 1002a00:	b95b      	cbnz	r3, 1002a1a <uarte_0_init+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002a02:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 1002a06:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
 1002a0a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
 1002a0e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
 1002a12:	2301      	movs	r3, #1
 1002a14:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002a18:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
 1002a1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
 1002a1e:	3610      	adds	r6, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
 1002a20:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
 1002a22:	bf5c      	itt	pl
 1002a24:	f44f 7280 	movpl.w	r2, #256	; 0x100
 1002a28:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
 1002a2c:	06db      	lsls	r3, r3, #27
 1002a2e:	bf44      	itt	mi
 1002a30:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
 1002a34:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
 1002a38:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
 1002a3a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
 1002a3e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002a42:	2301      	movs	r3, #1
 1002a44:	60a3      	str	r3, [r4, #8]
 1002a46:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
 1002a48:	e7b6      	b.n	10029b8 <uarte_0_init+0x78>
 1002a4a:	bf00      	nop
 1002a4c:	0bad0000 	.word	0x0bad0000
 1002a50:	0100768a 	.word	0x0100768a
 1002a54:	010076ae 	.word	0x010076ae
 1002a58:	01006eb0 	.word	0x01006eb0
 1002a5c:	4100f000 	.word	0x4100f000

01002a60 <uarte_nrfx_poll_out>:
{
 1002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1002a62:	4605      	mov	r5, r0
 1002a64:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
 1002a66:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 1002a68:	f003 ff79 	bl	100695e <k_is_in_isr>
 1002a6c:	b910      	cbnz	r0, 1002a74 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
 1002a6e:	4b2c      	ldr	r3, [pc, #176]	; (1002b20 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
 1002a70:	781b      	ldrb	r3, [r3, #0]
 1002a72:	b983      	cbnz	r3, 1002a96 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
 1002a74:	f04f 0320 	mov.w	r3, #32
 1002a78:	f3ef 8411 	mrs	r4, BASEPRI
 1002a7c:	f383 8812 	msr	BASEPRI_MAX, r3
 1002a80:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
 1002a84:	6868      	ldr	r0, [r5, #4]
 1002a86:	f003 fdfa 	bl	100667e <is_tx_ready.isra.0>
 1002a8a:	bb28      	cbnz	r0, 1002ad8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
 1002a8c:	f384 8811 	msr	BASEPRI, r4
 1002a90:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 1002a94:	e7ee      	b.n	1002a74 <uarte_nrfx_poll_out+0x14>
{
 1002a96:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
 1002a98:	6868      	ldr	r0, [r5, #4]
 1002a9a:	f003 fdf0 	bl	100667e <is_tx_ready.isra.0>
 1002a9e:	b970      	cbnz	r0, 1002abe <uarte_nrfx_poll_out+0x5e>
 1002aa0:	2001      	movs	r0, #1
 1002aa2:	f003 fed1 	bl	1006848 <nrfx_busy_wait>
 1002aa6:	3c01      	subs	r4, #1
 1002aa8:	d1f6      	bne.n	1002a98 <uarte_nrfx_poll_out+0x38>
 1002aaa:	2100      	movs	r1, #0
 1002aac:	2021      	movs	r0, #33	; 0x21
 1002aae:	f003 f8cb 	bl	1005c48 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 1002ab2:	e7f0      	b.n	1002a96 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
 1002ab4:	f384 8811 	msr	BASEPRI, r4
 1002ab8:	f3bf 8f6f 	isb	sy
}
 1002abc:	e7f5      	b.n	1002aaa <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
 1002abe:	f04f 0320 	mov.w	r3, #32
 1002ac2:	f3ef 8411 	mrs	r4, BASEPRI
 1002ac6:	f383 8812 	msr	BASEPRI_MAX, r3
 1002aca:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
 1002ace:	6868      	ldr	r0, [r5, #4]
 1002ad0:	f003 fdd5 	bl	100667e <is_tx_ready.isra.0>
 1002ad4:	2800      	cmp	r0, #0
 1002ad6:	d0ed      	beq.n	1002ab4 <uarte_nrfx_poll_out+0x54>
    p_reg->TXD.MAXCNT = length;
 1002ad8:	2201      	movs	r2, #1
	data->char_out = c;
 1002ada:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
 1002ade:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
 1002ae0:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
 1002ae2:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
 1002ae6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1002aea:	2200      	movs	r2, #0
 1002aec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 1002af0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 1002af4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 1002af8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
 1002afc:	684a      	ldr	r2, [r1, #4]
 1002afe:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
 1002b00:	bf41      	itttt	mi
 1002b02:	2208      	movmi	r2, #8
 1002b04:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
 1002b08:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
 1002b0c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1002b10:	2201      	movs	r2, #1
 1002b12:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
 1002b14:	f384 8811 	msr	BASEPRI, r4
 1002b18:	f3bf 8f6f 	isb	sy
}
 1002b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1002b1e:	bf00      	nop
 1002b20:	2100070c 	.word	0x2100070c

01002b24 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1002b24:	2301      	movs	r3, #1
 1002b26:	4083      	lsls	r3, r0
{
 1002b28:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1002b2a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1002b2c:	4a0c      	ldr	r2, [pc, #48]	; (1002b60 <compare_int_lock+0x3c>)
 1002b2e:	e8d2 1fef 	ldaex	r1, [r2]
 1002b32:	ea01 0c04 	and.w	ip, r1, r4
 1002b36:	e8c2 cfee 	stlex	lr, ip, [r2]
 1002b3a:	f1be 0f00 	cmp.w	lr, #0
 1002b3e:	d1f6      	bne.n	1002b2e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1002b40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1002b44:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
 1002b48:	4a06      	ldr	r2, [pc, #24]	; (1002b64 <compare_int_lock+0x40>)
 1002b4a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
 1002b4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1002b52:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
 1002b56:	420b      	tst	r3, r1
}
 1002b58:	bf14      	ite	ne
 1002b5a:	2001      	movne	r0, #1
 1002b5c:	2000      	moveq	r0, #0
 1002b5e:	bd10      	pop	{r4, pc}
 1002b60:	210002c4 	.word	0x210002c4
 1002b64:	41016000 	.word	0x41016000

01002b68 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 1002b68:	4919      	ldr	r1, [pc, #100]	; (1002bd0 <sys_clock_timeout_handler+0x68>)
{
 1002b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1002b6c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
 1002b6e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 1002b72:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
 1002b74:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
 1002b78:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 1002b7c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
 1002b7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 1002b82:	d222      	bcs.n	1002bca <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
 1002b84:	4b13      	ldr	r3, [pc, #76]	; (1002bd4 <sys_clock_timeout_handler+0x6c>)
 1002b86:	681b      	ldr	r3, [r3, #0]
 1002b88:	0a1a      	lsrs	r2, r3, #8
 1002b8a:	061b      	lsls	r3, r3, #24
 1002b8c:	195e      	adds	r6, r3, r5
 1002b8e:	4b12      	ldr	r3, [pc, #72]	; (1002bd8 <sys_clock_timeout_handler+0x70>)
 1002b90:	f142 0700 	adc.w	r7, r2, #0
 1002b94:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
 1002b98:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
 1002b9a:	f003 faab 	bl	10060f4 <sys_clock_announce>
    return p_reg->CC[ch];
 1002b9e:	00a3      	lsls	r3, r4, #2
 1002ba0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1002ba4:	f503 33b0 	add.w	r3, r3, #90112	; 0x16000
 1002ba8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
 1002bac:	42aa      	cmp	r2, r5
 1002bae:	d10b      	bne.n	1002bc8 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
 1002bb0:	b91e      	cbnz	r6, 1002bba <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
 1002bb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 1002bb6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1002bba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
 1002bbe:	4b07      	ldr	r3, [pc, #28]	; (1002bdc <sys_clock_timeout_handler+0x74>)
 1002bc0:	fa00 f404 	lsl.w	r4, r0, r4
 1002bc4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
 1002bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
 1002bca:	2600      	movs	r6, #0
 1002bcc:	e7e5      	b.n	1002b9a <sys_clock_timeout_handler+0x32>
 1002bce:	bf00      	nop
 1002bd0:	21000110 	.word	0x21000110
 1002bd4:	210002c8 	.word	0x210002c8
 1002bd8:	210000f8 	.word	0x210000f8
 1002bdc:	41016000 	.word	0x41016000

01002be0 <compare_int_unlock>:
	if (key) {
 1002be0:	b1e1      	cbz	r1, 1002c1c <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
 1002be2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 1002be4:	4a0e      	ldr	r2, [pc, #56]	; (1002c20 <compare_int_unlock+0x40>)
 1002be6:	4083      	lsls	r3, r0
 1002be8:	e8d2 1fef 	ldaex	r1, [r2]
 1002bec:	4319      	orrs	r1, r3
 1002bee:	e8c2 1fec 	stlex	ip, r1, [r2]
 1002bf2:	f1bc 0f00 	cmp.w	ip, #0
 1002bf6:	d1f7      	bne.n	1002be8 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1002bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
 1002bfc:	4a09      	ldr	r2, [pc, #36]	; (1002c24 <compare_int_unlock+0x44>)
 1002bfe:	4083      	lsls	r3, r0
 1002c00:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 1002c04:	4b08      	ldr	r3, [pc, #32]	; (1002c28 <compare_int_unlock+0x48>)
 1002c06:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
 1002c0a:	fa23 f000 	lsr.w	r0, r3, r0
 1002c0e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1002c10:	bf42      	ittt	mi
 1002c12:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
 1002c16:	4b05      	ldrmi	r3, [pc, #20]	; (1002c2c <compare_int_unlock+0x4c>)
 1002c18:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
 1002c1c:	4770      	bx	lr
 1002c1e:	bf00      	nop
 1002c20:	210002c4 	.word	0x210002c4
 1002c24:	41016000 	.word	0x41016000
 1002c28:	210002c0 	.word	0x210002c0
 1002c2c:	e000e100 	.word	0xe000e100

01002c30 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
 1002c30:	4b0d      	ldr	r3, [pc, #52]	; (1002c68 <z_nrf_rtc_timer_read+0x38>)
 1002c32:	6818      	ldr	r0, [r3, #0]
 1002c34:	0a01      	lsrs	r1, r0, #8
 1002c36:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
 1002c38:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
 1002c3c:	4b0b      	ldr	r3, [pc, #44]	; (1002c6c <z_nrf_rtc_timer_read+0x3c>)
 1002c3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
 1002c42:	1818      	adds	r0, r3, r0
 1002c44:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
 1002c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 1002c4c:	d20a      	bcs.n	1002c64 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
 1002c4e:	4b08      	ldr	r3, [pc, #32]	; (1002c70 <z_nrf_rtc_timer_read+0x40>)
 1002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 1002c54:	4290      	cmp	r0, r2
 1002c56:	eb71 0303 	sbcs.w	r3, r1, r3
 1002c5a:	d203      	bcs.n	1002c64 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
 1002c5c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
 1002c60:	f141 0100 	adc.w	r1, r1, #0
}
 1002c64:	4770      	bx	lr
 1002c66:	bf00      	nop
 1002c68:	210002c8 	.word	0x210002c8
 1002c6c:	41016000 	.word	0x41016000
 1002c70:	210000f8 	.word	0x210000f8

01002c74 <compare_set>:
{
 1002c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1002c78:	b085      	sub	sp, #20
 1002c7a:	4616      	mov	r6, r2
 1002c7c:	4698      	mov	r8, r3
 1002c7e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
 1002c80:	f7ff ff50 	bl	1002b24 <compare_int_lock>
 1002c84:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
 1002c86:	f7ff ffd3 	bl	1002c30 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
 1002c8a:	42b0      	cmp	r0, r6
 1002c8c:	eb71 0308 	sbcs.w	r3, r1, r8
 1002c90:	d276      	bcs.n	1002d80 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
 1002c92:	4b43      	ldr	r3, [pc, #268]	; (1002da0 <compare_set+0x12c>)
 1002c94:	1a30      	subs	r0, r6, r0
 1002c96:	eb68 0101 	sbc.w	r1, r8, r1
 1002c9a:	4298      	cmp	r0, r3
 1002c9c:	f171 0300 	sbcs.w	r3, r1, #0
 1002ca0:	d27b      	bcs.n	1002d9a <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
 1002ca2:	4b40      	ldr	r3, [pc, #256]	; (1002da4 <compare_set+0x130>)
 1002ca4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 1002ca8:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 1002cac:	45d8      	cmp	r8, fp
 1002cae:	bf08      	it	eq
 1002cb0:	4556      	cmpeq	r6, sl
 1002cb2:	d050      	beq.n	1002d56 <compare_set+0xe2>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1002cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
 1002cb8:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
 1002cbc:	4614      	mov	r4, r2
 1002cbe:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
 1002cc2:	f105 0750 	add.w	r7, r5, #80	; 0x50
 1002cc6:	f109 4982 	add.w	r9, r9, #1090519040	; 0x41000000
 1002cca:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1002ccc:	40ab      	lsls	r3, r5
 1002cce:	f509 39b0 	add.w	r9, r9, #90112	; 0x16000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002cd2:	b2bf      	uxth	r7, r7
 1002cd4:	f107 4782 	add.w	r7, r7, #1090519040	; 0x41000000
 1002cd8:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
 1002cda:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
 1002cde:	4b32      	ldr	r3, [pc, #200]	; (1002da8 <compare_set+0x134>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002ce0:	f507 37b0 	add.w	r7, r7, #90112	; 0x16000
     return p_reg->COUNTER;
 1002ce4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
 1002ce8:	1a40      	subs	r0, r0, r1
 1002cea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 1002cee:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
 1002cf2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
 1002cf4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
 1002cf8:	d107      	bne.n	1002d0a <compare_set+0x96>
 1002cfa:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
 1002cfe:	2013      	movs	r0, #19
 1002d00:	f003 fe55 	bl	10069ae <z_impl_k_busy_wait>
 1002d04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 1002d08:	4b27      	ldr	r3, [pc, #156]	; (1002da8 <compare_set+0x134>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
 1002d0a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
 1002d0e:	eba4 000c 	sub.w	r0, r4, ip
 1002d12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
 1002d16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1002d1a:	bf88      	it	hi
 1002d1c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002d1e:	2000      	movs	r0, #0
 1002d20:	6038      	str	r0, [r7, #0]
 1002d22:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
 1002d24:	9801      	ldr	r0, [sp, #4]
 1002d26:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 1002d2a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
 1002d2e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
 1002d32:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
 1002d36:	4281      	cmp	r1, r0
 1002d38:	d006      	beq.n	1002d48 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
 1002d3a:	1a20      	subs	r0, r4, r0
 1002d3c:	3802      	subs	r0, #2
 1002d3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
 1002d42:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1002d46:	d819      	bhi.n	1002d7c <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
 1002d48:	1aa4      	subs	r4, r4, r2
 1002d4a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
 1002d4e:	eb14 0a06 	adds.w	sl, r4, r6
 1002d52:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
 1002d56:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
 1002d58:	4912      	ldr	r1, [pc, #72]	; (1002da4 <compare_set+0x130>)
	cc_data[chan].callback = handler;
 1002d5a:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
 1002d5c:	012b      	lsls	r3, r5, #4
 1002d5e:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
 1002d62:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
 1002d64:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
 1002d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 1002d6a:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
 1002d6c:	4628      	mov	r0, r5
 1002d6e:	9900      	ldr	r1, [sp, #0]
 1002d70:	f7ff ff36 	bl	1002be0 <compare_int_unlock>
}
 1002d74:	4620      	mov	r0, r4
 1002d76:	b005      	add	sp, #20
 1002d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1002d7c:	4620      	mov	r0, r4
 1002d7e:	e7b1      	b.n	1002ce4 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
 1002d80:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 1002d82:	4a0a      	ldr	r2, [pc, #40]	; (1002dac <compare_set+0x138>)
 1002d84:	40ab      	lsls	r3, r5
 1002d86:	e8d2 1fef 	ldaex	r1, [r2]
 1002d8a:	4319      	orrs	r1, r3
 1002d8c:	e8c2 1fe0 	stlex	r0, r1, [r2]
 1002d90:	2800      	cmp	r0, #0
 1002d92:	d1f8      	bne.n	1002d86 <compare_set+0x112>
 1002d94:	46b2      	mov	sl, r6
 1002d96:	46c3      	mov	fp, r8
 1002d98:	e7dd      	b.n	1002d56 <compare_set+0xe2>
			return -EINVAL;
 1002d9a:	f06f 0415 	mvn.w	r4, #21
 1002d9e:	e7e5      	b.n	1002d6c <compare_set+0xf8>
 1002da0:	01000001 	.word	0x01000001
 1002da4:	21000100 	.word	0x21000100
 1002da8:	41016000 	.word	0x41016000
 1002dac:	210002c0 	.word	0x210002c0

01002db0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
 1002db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
 1002db2:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
 1002db4:	f04f 30ff 	mov.w	r0, #4294967295
 1002db8:	f04f 31ff 	mov.w	r1, #4294967295
 1002dbc:	4d16      	ldr	r5, [pc, #88]	; (1002e18 <sys_clock_driver_init+0x68>)
 1002dbe:	4b17      	ldr	r3, [pc, #92]	; (1002e1c <sys_clock_driver_init+0x6c>)
 1002dc0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
 1002dc4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
 1002dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 1002dcc:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1002dce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 1002dd2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 1002dd6:	4b12      	ldr	r3, [pc, #72]	; (1002e20 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
 1002dd8:	2101      	movs	r1, #1
 1002dda:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
 1002dde:	2016      	movs	r0, #22
 1002de0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1002de4:	4622      	mov	r2, r4
 1002de6:	f7fe fb59 	bl	100149c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
 1002dea:	2016      	movs	r0, #22
 1002dec:	f7fe fb24 	bl	1001438 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
 1002df0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
 1002df2:	4a0c      	ldr	r2, [pc, #48]	; (1002e24 <sys_clock_driver_init+0x74>)
 1002df4:	60ab      	str	r3, [r5, #8]
 1002df6:	602b      	str	r3, [r5, #0]
 1002df8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
 1002dfa:	4b0b      	ldr	r3, [pc, #44]	; (1002e28 <sys_clock_driver_init+0x78>)
 1002dfc:	4a0b      	ldr	r2, [pc, #44]	; (1002e2c <sys_clock_driver_init+0x7c>)
 1002dfe:	9300      	str	r3, [sp, #0]
 1002e00:	4620      	mov	r0, r4
 1002e02:	2300      	movs	r3, #0
 1002e04:	9401      	str	r4, [sp, #4]
 1002e06:	f7ff ff35 	bl	1002c74 <compare_set>

	z_nrf_clock_control_lf_on(mode);
 1002e0a:	4630      	mov	r0, r6
 1002e0c:	f7ff fa3c 	bl	1002288 <z_nrf_clock_control_lf_on>

	return 0;
}
 1002e10:	4620      	mov	r0, r4
 1002e12:	b002      	add	sp, #8
 1002e14:	bd70      	pop	{r4, r5, r6, pc}
 1002e16:	bf00      	nop
 1002e18:	41016000 	.word	0x41016000
 1002e1c:	21000100 	.word	0x21000100
 1002e20:	e000e100 	.word	0xe000e100
 1002e24:	210002c4 	.word	0x210002c4
 1002e28:	01002b69 	.word	0x01002b69
 1002e2c:	007fffff 	.word	0x007fffff

01002e30 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
 1002e30:	4b35      	ldr	r3, [pc, #212]	; (1002f08 <rtc_nrf_isr+0xd8>)
{
 1002e32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 1002e36:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
 1002e3a:	0791      	lsls	r1, r2, #30
 1002e3c:	d50b      	bpl.n	1002e56 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1002e3e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 1002e42:	b142      	cbz	r2, 1002e56 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002e44:	2200      	movs	r2, #0
 1002e46:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
 1002e4a:	4a30      	ldr	r2, [pc, #192]	; (1002f0c <rtc_nrf_isr+0xdc>)
 1002e4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 1002e50:	6813      	ldr	r3, [r2, #0]
 1002e52:	3301      	adds	r3, #1
 1002e54:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
 1002e56:	f04f 0320 	mov.w	r3, #32
 1002e5a:	f3ef 8111 	mrs	r1, BASEPRI
 1002e5e:	f383 8812 	msr	BASEPRI_MAX, r3
 1002e62:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
 1002e66:	4b28      	ldr	r3, [pc, #160]	; (1002f08 <rtc_nrf_isr+0xd8>)
 1002e68:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
 1002e6c:	03d2      	lsls	r2, r2, #15
 1002e6e:	d50e      	bpl.n	1002e8e <rtc_nrf_isr+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1002e70:	4a27      	ldr	r2, [pc, #156]	; (1002f10 <rtc_nrf_isr+0xe0>)
 1002e72:	e8d2 0fef 	ldaex	r0, [r2]
 1002e76:	f020 0401 	bic.w	r4, r0, #1
 1002e7a:	e8c2 4fe5 	stlex	r5, r4, [r2]
 1002e7e:	2d00      	cmp	r5, #0
 1002e80:	d1f7      	bne.n	1002e72 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
 1002e82:	2800      	cmp	r0, #0
 1002e84:	d137      	bne.n	1002ef6 <rtc_nrf_isr+0xc6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1002e86:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
 1002e8a:	2a00      	cmp	r2, #0
 1002e8c:	d133      	bne.n	1002ef6 <rtc_nrf_isr+0xc6>
{
 1002e8e:	2300      	movs	r3, #0
	__asm__ volatile(
 1002e90:	f381 8811 	msr	BASEPRI, r1
 1002e94:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
 1002e98:	b353      	cbz	r3, 1002ef0 <rtc_nrf_isr+0xc0>
		curr_time = z_nrf_rtc_timer_read();
 1002e9a:	f7ff fec9 	bl	1002c30 <z_nrf_rtc_timer_read>
	__asm__ volatile(
 1002e9e:	f04f 0320 	mov.w	r3, #32
 1002ea2:	f3ef 8711 	mrs	r7, BASEPRI
 1002ea6:	f383 8812 	msr	BASEPRI_MAX, r3
 1002eaa:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
 1002eae:	4b19      	ldr	r3, [pc, #100]	; (1002f14 <rtc_nrf_isr+0xe4>)
 1002eb0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
 1002eb4:	42a0      	cmp	r0, r4
 1002eb6:	eb71 0205 	sbcs.w	r2, r1, r5
 1002eba:	f04f 0200 	mov.w	r2, #0
 1002ebe:	d321      	bcc.n	1002f04 <rtc_nrf_isr+0xd4>
			user_context = cc_data[chan].user_context;
 1002ec0:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 1002ec4:	f04f 38ff 	mov.w	r8, #4294967295
 1002ec8:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
 1002ecc:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
 1002ece:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 1002ed2:	e9c3 8902 	strd	r8, r9, [r3, #8]
 1002ed6:	4b0c      	ldr	r3, [pc, #48]	; (1002f08 <rtc_nrf_isr+0xd8>)
 1002ed8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
 1002edc:	f387 8811 	msr	BASEPRI, r7
 1002ee0:	f3bf 8f6f 	isb	sy
		if (handler) {
 1002ee4:	b121      	cbz	r1, 1002ef0 <rtc_nrf_isr+0xc0>
			handler(chan, expire_time, user_context);
 1002ee6:	4622      	mov	r2, r4
 1002ee8:	462b      	mov	r3, r5
 1002eea:	2000      	movs	r0, #0
 1002eec:	9600      	str	r6, [sp, #0]
 1002eee:	4788      	blx	r1
}
 1002ef0:	b003      	add	sp, #12
 1002ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1002ef6:	2200      	movs	r2, #0
 1002ef8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 1002efc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
 1002f00:	2301      	movs	r3, #1
}
 1002f02:	e7c5      	b.n	1002e90 <rtc_nrf_isr+0x60>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
 1002f04:	4611      	mov	r1, r2
 1002f06:	e7e9      	b.n	1002edc <rtc_nrf_isr+0xac>
 1002f08:	41016000 	.word	0x41016000
 1002f0c:	210002c8 	.word	0x210002c8
 1002f10:	210002c0 	.word	0x210002c0
 1002f14:	21000100 	.word	0x21000100

01002f18 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1002f18:	1c43      	adds	r3, r0, #1
{
 1002f1a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1002f1c:	d020      	beq.n	1002f60 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 1002f1e:	2801      	cmp	r0, #1
 1002f20:	dd20      	ble.n	1002f64 <sys_clock_set_timeout+0x4c>
 1002f22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1002f26:	da1f      	bge.n	1002f68 <sys_clock_set_timeout+0x50>
 1002f28:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
 1002f2a:	f7ff fe81 	bl	1002c30 <z_nrf_rtc_timer_read>
 1002f2e:	4b0f      	ldr	r3, [pc, #60]	; (1002f6c <sys_clock_set_timeout+0x54>)
 1002f30:	e9d3 1300 	ldrd	r1, r3, [r3]
 1002f34:	1a40      	subs	r0, r0, r1
		ticks = 0;
 1002f36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1002f3a:	bf28      	it	cs
 1002f3c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
 1002f3e:	3001      	adds	r0, #1
 1002f40:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
 1002f42:	480b      	ldr	r0, [pc, #44]	; (1002f70 <sys_clock_set_timeout+0x58>)
 1002f44:	4282      	cmp	r2, r0
 1002f46:	bf28      	it	cs
 1002f48:	4602      	movcs	r2, r0
 1002f4a:	2000      	movs	r0, #0
 1002f4c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
 1002f4e:	4909      	ldr	r1, [pc, #36]	; (1002f74 <sys_clock_set_timeout+0x5c>)
 1002f50:	9001      	str	r0, [sp, #4]
 1002f52:	9100      	str	r1, [sp, #0]
 1002f54:	f143 0300 	adc.w	r3, r3, #0
 1002f58:	f7ff fe8c 	bl	1002c74 <compare_set>
}
 1002f5c:	b002      	add	sp, #8
 1002f5e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1002f60:	4803      	ldr	r0, [pc, #12]	; (1002f70 <sys_clock_set_timeout+0x58>)
 1002f62:	e7e1      	b.n	1002f28 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 1002f64:	2400      	movs	r4, #0
 1002f66:	e7e0      	b.n	1002f2a <sys_clock_set_timeout+0x12>
 1002f68:	4c01      	ldr	r4, [pc, #4]	; (1002f70 <sys_clock_set_timeout+0x58>)
 1002f6a:	e7de      	b.n	1002f2a <sys_clock_set_timeout+0x12>
 1002f6c:	21000110 	.word	0x21000110
 1002f70:	007fffff 	.word	0x007fffff
 1002f74:	01002b69 	.word	0x01002b69

01002f78 <sys_clock_elapsed>:
{
 1002f78:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
 1002f7a:	f7ff fe59 	bl	1002c30 <z_nrf_rtc_timer_read>
 1002f7e:	4b02      	ldr	r3, [pc, #8]	; (1002f88 <sys_clock_elapsed+0x10>)
 1002f80:	681b      	ldr	r3, [r3, #0]
}
 1002f82:	1ac0      	subs	r0, r0, r3
 1002f84:	bd08      	pop	{r3, pc}
 1002f86:	bf00      	nop
 1002f88:	21000110 	.word	0x21000110

01002f8c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
 1002f8c:	6802      	ldr	r2, [r0, #0]
{
 1002f8e:	b510      	push	{r4, lr}
    switch (port)
 1002f90:	0953      	lsrs	r3, r2, #5
{
 1002f92:	4604      	mov	r4, r0
    switch (port)
 1002f94:	d029      	beq.n	1002fea <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
 1002f96:	2b01      	cmp	r3, #1
 1002f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 1002f9c:	bf18      	it	ne
 1002f9e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
 1002fa0:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
 1002fa4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
 1002fa6:	07db      	lsls	r3, r3, #31
 1002fa8:	d40a      	bmi.n	1002fc0 <nrf_gpio_pin_port_decode+0x34>
 1002faa:	4912      	ldr	r1, [pc, #72]	; (1002ff4 <nrf_gpio_pin_port_decode+0x68>)
 1002fac:	4812      	ldr	r0, [pc, #72]	; (1002ff8 <nrf_gpio_pin_port_decode+0x6c>)
 1002fae:	f240 2229 	movw	r2, #553	; 0x229
 1002fb2:	f003 fa68 	bl	1006486 <assert_print>
 1002fb6:	f240 2129 	movw	r1, #553	; 0x229
 1002fba:	480e      	ldr	r0, [pc, #56]	; (1002ff4 <nrf_gpio_pin_port_decode+0x68>)
 1002fbc:	f003 fa5c 	bl	1006478 <assert_post_action>
    uint32_t pin_number = *p_pin;
 1002fc0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
 1002fc2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
 1002fc6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
 1002fc8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
 1002fca:	d00c      	beq.n	1002fe6 <nrf_gpio_pin_port_decode+0x5a>
 1002fcc:	2b01      	cmp	r3, #1
 1002fce:	d00f      	beq.n	1002ff0 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
 1002fd0:	4908      	ldr	r1, [pc, #32]	; (1002ff4 <nrf_gpio_pin_port_decode+0x68>)
 1002fd2:	4809      	ldr	r0, [pc, #36]	; (1002ff8 <nrf_gpio_pin_port_decode+0x6c>)
 1002fd4:	f240 222e 	movw	r2, #558	; 0x22e
 1002fd8:	f003 fa55 	bl	1006486 <assert_print>
 1002fdc:	f240 212e 	movw	r1, #558	; 0x22e
 1002fe0:	4804      	ldr	r0, [pc, #16]	; (1002ff4 <nrf_gpio_pin_port_decode+0x68>)
 1002fe2:	f003 fa49 	bl	1006478 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
 1002fe6:	4805      	ldr	r0, [pc, #20]	; (1002ffc <nrf_gpio_pin_port_decode+0x70>)
}
 1002fe8:	bd10      	pop	{r4, pc}
    switch (port)
 1002fea:	f04f 33ff 	mov.w	r3, #4294967295
 1002fee:	e7d7      	b.n	1002fa0 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
 1002ff0:	4803      	ldr	r0, [pc, #12]	; (1003000 <nrf_gpio_pin_port_decode+0x74>)
 1002ff2:	e7f9      	b.n	1002fe8 <nrf_gpio_pin_port_decode+0x5c>
 1002ff4:	01007649 	.word	0x01007649
 1002ff8:	01006eb0 	.word	0x01006eb0
 1002ffc:	418c0500 	.word	0x418c0500
 1003000:	418c0800 	.word	0x418c0800

01003004 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
 1003004:	4803      	ldr	r0, [pc, #12]	; (1003014 <k_sys_fatal_error_handler+0x10>)
 1003006:	2145      	movs	r1, #69	; 0x45
{
 1003008:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
 100300a:	f003 fa4a 	bl	10064a2 <z_log_minimal_printk>
		sys_arch_reboot(0);
 100300e:	2000      	movs	r0, #0
 1003010:	f7fe fd70 	bl	1001af4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
 1003014:	010076fd 	.word	0x010076fd

01003018 <update_rf_payload_format_esb_dpl>:

static void update_rf_payload_format_esb_dpl(uint32_t payload_length)
{
#if (CONFIG_ESB_MAX_PAYLOAD_LENGTH <= 32)
	/* Using 6 bits for length */
	NRF_RADIO->PCNF0 = (0 << RADIO_PCNF0_S0LEN_Pos) |
 1003018:	4906      	ldr	r1, [pc, #24]	; (1003034 <update_rf_payload_format_esb_dpl+0x1c>)
 100301a:	4b07      	ldr	r3, [pc, #28]	; (1003038 <update_rf_payload_format_esb_dpl+0x20>)
 100301c:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
			   (3 << RADIO_PCNF0_S1LEN_Pos);
#endif
	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
 1003020:	4b06      	ldr	r3, [pc, #24]	; (100303c <update_rf_payload_format_esb_dpl+0x24>)
 1003022:	7c5b      	ldrb	r3, [r3, #17]
 1003024:	1e5a      	subs	r2, r3, #1
		(0 << RADIO_PCNF1_STATLEN_Pos) |
 1003026:	4b06      	ldr	r3, [pc, #24]	; (1003040 <update_rf_payload_format_esb_dpl+0x28>)
 1003028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	NRF_RADIO->PCNF1 =
 100302c:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
		(CONFIG_ESB_MAX_PAYLOAD_LENGTH << RADIO_PCNF1_MAXLEN_Pos);
}
 1003030:	4770      	bx	lr
 1003032:	bf00      	nop
 1003034:	41008000 	.word	0x41008000
 1003038:	00030006 	.word	0x00030006
 100303c:	2100001c 	.word	0x2100001c
 1003040:	01000020 	.word	0x01000020

01003044 <update_rf_payload_format_esb>:

static void update_rf_payload_format_esb(uint32_t payload_length)
{
	NRF_RADIO->PCNF0 = (1 << RADIO_PCNF0_S0LEN_Pos) |
 1003044:	4a07      	ldr	r2, [pc, #28]	; (1003064 <update_rf_payload_format_esb+0x20>)
 1003046:	4b08      	ldr	r3, [pc, #32]	; (1003068 <update_rf_payload_format_esb+0x24>)
 1003048:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   (1 << RADIO_PCNF0_S1LEN_Pos);

	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
 100304c:	4b07      	ldr	r3, [pc, #28]	; (100306c <update_rf_payload_format_esb+0x28>)
 100304e:	7c5b      	ldrb	r3, [r3, #17]
 1003050:	3b01      	subs	r3, #1
		(payload_length << RADIO_PCNF1_STATLEN_Pos) |
 1003052:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 1003056:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 100305a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
	NRF_RADIO->PCNF1 =
 100305e:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
		(payload_length << RADIO_PCNF1_MAXLEN_Pos);
}
 1003062:	4770      	bx	lr
 1003064:	41008000 	.word	0x41008000
 1003068:	00010100 	.word	0x00010100
 100306c:	2100001c 	.word	0x2100001c

01003070 <update_radio_bitrate>:
			     << RADIO_TXPOWER_TXPOWER_Pos;
}

static bool update_radio_bitrate(void)
{
	NRF_RADIO->MODE = esb_cfg.bitrate << RADIO_MODE_MODE_Pos;
 1003070:	4b0b      	ldr	r3, [pc, #44]	; (10030a0 <update_radio_bitrate+0x30>)
 1003072:	4a0c      	ldr	r2, [pc, #48]	; (10030a4 <update_radio_bitrate+0x34>)
 1003074:	7a1b      	ldrb	r3, [r3, #8]
 1003076:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
 100307a:	2b04      	cmp	r3, #4
 100307c:	d80d      	bhi.n	100309a <update_radio_bitrate+0x2a>
 100307e:	e8df f003 	tbb	[pc, r3]
 1003082:	0308      	.short	0x0308
 1003084:	080c      	.short	0x080c
 1003086:	03          	.byte	0x03
 1003087:	00          	.byte	0x00
	case ESB_BITRATE_2MBPS:
#if defined(CONFIG_SOC_SERIES_NRF52X) || defined(CONFIG_SOC_NRF5340_CPUNET)
	case ESB_BITRATE_2MBPS_BLE:
#endif
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
 1003088:	22a0      	movs	r2, #160	; 0xa0
 100308a:	4b07      	ldr	r3, [pc, #28]	; (10030a8 <update_radio_bitrate+0x38>)
	default:
		/* Should not be reached */
		return false;
	}

	return true;
 100308c:	2001      	movs	r0, #1
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
 100308e:	601a      	str	r2, [r3, #0]
		break;
 1003090:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
 1003092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 1003096:	4b04      	ldr	r3, [pc, #16]	; (10030a8 <update_radio_bitrate+0x38>)
 1003098:	e7f8      	b.n	100308c <update_radio_bitrate+0x1c>
	switch (esb_cfg.bitrate) {
 100309a:	2000      	movs	r0, #0
}
 100309c:	4770      	bx	lr
 100309e:	bf00      	nop
 10030a0:	21000350 	.word	0x21000350
 10030a4:	41008000 	.word	0x41008000
 10030a8:	210003d8 	.word	0x210003d8

010030ac <reset_fifos>:
	return params_valid;
}

static void reset_fifos(void)
{
	tx_fifo.back = 0;
 10030ac:	2300      	movs	r3, #0
 10030ae:	4a04      	ldr	r2, [pc, #16]	; (10030c0 <reset_fifos+0x14>)
	tx_fifo.front = 0;
 10030b0:	e9c2 3308 	strd	r3, r3, [r2, #32]
	tx_fifo.count = 0;
 10030b4:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
 10030b6:	4a03      	ldr	r2, [pc, #12]	; (10030c4 <reset_fifos+0x18>)
	rx_fifo.front = 0;
 10030b8:	e9c2 3308 	strd	r3, r3, [r2, #32]
	rx_fifo.count = 0;
 10030bc:	6293      	str	r3, [r2, #40]	; 0x28
}
 10030be:	4770      	bx	lr
 10030c0:	210003a8 	.word	0x210003a8
 10030c4:	2100037c 	.word	0x2100037c

010030c8 <on_radio_disabled_tx>:
		start_tx_transaction();
	}
}

static void on_radio_disabled_tx(void)
{
 10030c8:	b538      	push	{r3, r4, r5, lr}
	/* Remove the DISABLED -> RXEN shortcut, to make sure the radio stays
	 * disabled after the RX window
	 */
	NRF_RADIO->SHORTS = radio_shorts_common;
 10030ca:	f240 1313 	movw	r3, #275	; 0x113
 10030ce:	4c18      	ldr	r4, [pc, #96]	; (1003130 <on_radio_disabled_tx+0x68>)
	/* Make sure the timer is started the next time the radio is ready,
	 * and that it will disable the radio automatically if no packet is
	 * received by the time defined in wait_for_ack_timeout_us
	 */
	ESB_SYS_TIMER->CC[0] = wait_for_ack_timeout_us;
	ESB_SYS_TIMER->CC[1] = esb_cfg.retransmit_delay - 130;
 10030d0:	4818      	ldr	r0, [pc, #96]	; (1003134 <on_radio_disabled_tx+0x6c>)
	NRF_RADIO->SHORTS = radio_shorts_common;
 10030d2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	ESB_SYS_TIMER->CC[0] = wait_for_ack_timeout_us;
 10030d6:	4b18      	ldr	r3, [pc, #96]	; (1003138 <on_radio_disabled_tx+0x70>)
	ESB_SYS_TIMER->TASKS_CLEAR = 1;
	ESB_SYS_TIMER->EVENTS_COMPARE[0] = 0;
 10030d8:	2100      	movs	r1, #0
	ESB_SYS_TIMER->CC[0] = wait_for_ack_timeout_us;
 10030da:	681a      	ldr	r2, [r3, #0]
 10030dc:	4b17      	ldr	r3, [pc, #92]	; (100313c <on_radio_disabled_tx+0x74>)
 10030de:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	ESB_SYS_TIMER->CC[1] = esb_cfg.retransmit_delay - 130;
 10030e2:	8982      	ldrh	r2, [r0, #12]
 10030e4:	3a82      	subs	r2, #130	; 0x82
 10030e6:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
	ESB_SYS_TIMER->TASKS_CLEAR = 1;
 10030ea:	2201      	movs	r2, #1
 10030ec:	60da      	str	r2, [r3, #12]
	ESB_SYS_TIMER->EVENTS_COMPARE[0] = 0;
 10030ee:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
	ESB_SYS_TIMER->EVENTS_COMPARE[1] = 0;
 10030f2:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144

	/* Remove */
	ESB_SYS_TIMER->TASKS_START = 1;
 10030f6:	601a      	str	r2, [r3, #0]

	nrfx_gppi_channels_enable(ppi_all_channels_mask);
 10030f8:	4b11      	ldr	r3, [pc, #68]	; (1003140 <on_radio_disabled_tx+0x78>)
 10030fa:	681d      	ldr	r5, [r3, #0]
 10030fc:	4b11      	ldr	r3, [pc, #68]	; (1003144 <on_radio_disabled_tx+0x7c>)
 10030fe:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	nrfx_gppi_channels_disable(1 << ppi_ch_timer_compare1_radio_txen);
 1003102:	4d11      	ldr	r5, [pc, #68]	; (1003148 <on_radio_disabled_tx+0x80>)
 1003104:	782d      	ldrb	r5, [r5, #0]
 1003106:	40aa      	lsls	r2, r5
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
 1003108:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

	NRF_RADIO->EVENTS_END = 0;
 100310c:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c

	if (esb_cfg.protocol == ESB_PROTOCOL_ESB) {
 1003110:	7800      	ldrb	r0, [r0, #0]
 1003112:	b910      	cbnz	r0, 100311a <on_radio_disabled_tx+0x52>
		update_rf_payload_format(0);
 1003114:	4b0d      	ldr	r3, [pc, #52]	; (100314c <on_radio_disabled_tx+0x84>)
 1003116:	681b      	ldr	r3, [r3, #0]
 1003118:	4798      	blx	r3
	}

	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
 100311a:	4b0d      	ldr	r3, [pc, #52]	; (1003150 <on_radio_disabled_tx+0x88>)
	on_radio_disabled = on_radio_disabled_tx_wait_for_ack;
 100311c:	4a0d      	ldr	r2, [pc, #52]	; (1003154 <on_radio_disabled_tx+0x8c>)
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
 100311e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_tx_wait_for_ack;
 1003122:	4b0d      	ldr	r3, [pc, #52]	; (1003158 <on_radio_disabled_tx+0x90>)
 1003124:	601a      	str	r2, [r3, #0]
	esb_state = ESB_STATE_PTX_RX_ACK;
 1003126:	2203      	movs	r2, #3
 1003128:	4b0c      	ldr	r3, [pc, #48]	; (100315c <on_radio_disabled_tx+0x94>)
 100312a:	701a      	strb	r2, [r3, #0]
}
 100312c:	bd38      	pop	{r3, r4, r5, pc}
 100312e:	bf00      	nop
 1003130:	41008000 	.word	0x41008000
 1003134:	21000350 	.word	0x21000350
 1003138:	210003d8 	.word	0x210003d8
 100313c:	41019000 	.word	0x41019000
 1003140:	21000374 	.word	0x21000374
 1003144:	4100f000 	.word	0x4100f000
 1003148:	21000477 	.word	0x21000477
 100314c:	210003d4 	.word	0x210003d4
 1003150:	210005a0 	.word	0x210005a0
 1003154:	01003431 	.word	0x01003431
 1003158:	21000370 	.word	0x21000370
 100315c:	2100046b 	.word	0x2100046b

01003160 <clear_events_restart_rx>:
	}
}

static void clear_events_restart_rx(void)
{
	NRF_RADIO->SHORTS = radio_shorts_common;
 1003160:	f240 1313 	movw	r3, #275	; 0x113
{
 1003164:	b510      	push	{r4, lr}
	NRF_RADIO->SHORTS = radio_shorts_common;
 1003166:	4c0f      	ldr	r4, [pc, #60]	; (10031a4 <clear_events_restart_rx+0x44>)
	update_rf_payload_format(esb_cfg.payload_length);
 1003168:	4a0f      	ldr	r2, [pc, #60]	; (10031a8 <clear_events_restart_rx+0x48>)
	NRF_RADIO->SHORTS = radio_shorts_common;
 100316a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	update_rf_payload_format(esb_cfg.payload_length);
 100316e:	4b0f      	ldr	r3, [pc, #60]	; (10031ac <clear_events_restart_rx+0x4c>)
 1003170:	7c50      	ldrb	r0, [r2, #17]
 1003172:	681b      	ldr	r3, [r3, #0]
 1003174:	4798      	blx	r3
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
 1003176:	4b0e      	ldr	r3, [pc, #56]	; (10031b0 <clear_events_restart_rx+0x50>)
 1003178:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	NRF_RADIO->EVENTS_DISABLED = 0;
 100317c:	2300      	movs	r3, #0
 100317e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_DISABLE = 1;
 1003182:	2301      	movs	r3, #1
 1003184:	6123      	str	r3, [r4, #16]

	while (NRF_RADIO->EVENTS_DISABLED == 0) {
 1003186:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 100318a:	2b00      	cmp	r3, #0
 100318c:	d0fb      	beq.n	1003186 <clear_events_restart_rx+0x26>
		/* wait for register to settle */
	}

	NRF_RADIO->EVENTS_DISABLED = 0;
 100318e:	2300      	movs	r3, #0
 1003190:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->SHORTS = radio_shorts_common |
 1003194:	f240 1317 	movw	r3, #279	; 0x117
 1003198:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;

	NRF_RADIO->TASKS_RXEN = 1;
 100319c:	2301      	movs	r3, #1
 100319e:	6063      	str	r3, [r4, #4]
}
 10031a0:	bd10      	pop	{r4, pc}
 10031a2:	bf00      	nop
 10031a4:	41008000 	.word	0x41008000
 10031a8:	21000350 	.word	0x21000350
 10031ac:	210003d4 	.word	0x210003d4
 10031b0:	210005a0 	.word	0x210005a0

010031b4 <on_radio_disabled_rx_ack>:
	}
}

static void on_radio_disabled_rx_ack(void)
{
	NRF_RADIO->SHORTS = radio_shorts_common |
 10031b4:	f240 1317 	movw	r3, #279	; 0x117
{
 10031b8:	b510      	push	{r4, lr}
	NRF_RADIO->SHORTS = radio_shorts_common |
 10031ba:	4c09      	ldr	r4, [pc, #36]	; (10031e0 <on_radio_disabled_rx_ack+0x2c>)
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
	update_rf_payload_format(esb_cfg.payload_length);
 10031bc:	4a09      	ldr	r2, [pc, #36]	; (10031e4 <on_radio_disabled_rx_ack+0x30>)
	NRF_RADIO->SHORTS = radio_shorts_common |
 10031be:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	update_rf_payload_format(esb_cfg.payload_length);
 10031c2:	4b09      	ldr	r3, [pc, #36]	; (10031e8 <on_radio_disabled_rx_ack+0x34>)
 10031c4:	7c50      	ldrb	r0, [r2, #17]
 10031c6:	681b      	ldr	r3, [r3, #0]
 10031c8:	4798      	blx	r3

	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
 10031ca:	4b08      	ldr	r3, [pc, #32]	; (10031ec <on_radio_disabled_rx_ack+0x38>)
	on_radio_disabled = on_radio_disabled_rx;
 10031cc:	4a08      	ldr	r2, [pc, #32]	; (10031f0 <on_radio_disabled_rx_ack+0x3c>)
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
 10031ce:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_rx;
 10031d2:	4b08      	ldr	r3, [pc, #32]	; (10031f4 <on_radio_disabled_rx_ack+0x40>)
 10031d4:	601a      	str	r2, [r3, #0]

	esb_state = ESB_STATE_PRX;
 10031d6:	2204      	movs	r2, #4
 10031d8:	4b07      	ldr	r3, [pc, #28]	; (10031f8 <on_radio_disabled_rx_ack+0x44>)
 10031da:	701a      	strb	r2, [r3, #0]
}
 10031dc:	bd10      	pop	{r4, pc}
 10031de:	bf00      	nop
 10031e0:	41008000 	.word	0x41008000
 10031e4:	21000350 	.word	0x21000350
 10031e8:	210003d4 	.word	0x210003d4
 10031ec:	210005a0 	.word	0x210005a0
 10031f0:	010036c9 	.word	0x010036c9
 10031f4:	21000370 	.word	0x21000370
 10031f8:	2100046b 	.word	0x2100046b

010031fc <update_radio_addresses.part.0>:
static void update_radio_addresses(uint8_t update_mask)
 10031fc:	b510      	push	{r4, lr}
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
 10031fe:	4c07      	ldr	r4, [pc, #28]	; (100321c <update_radio_addresses.part.0+0x20>)
		NRF_RADIO->PREFIX0 =
 1003200:	4907      	ldr	r1, [pc, #28]	; (1003220 <update_radio_addresses.part.0+0x24>)
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
 1003202:	f104 0008 	add.w	r0, r4, #8
 1003206:	f003 fafc 	bl	1006802 <bytewise_bit_swap>
		NRF_RADIO->PREFIX0 =
 100320a:	f8c1 0524 	str.w	r0, [r1, #1316]	; 0x524
			bytewise_bit_swap(&esb_addr.pipe_prefixes[4]);
 100320e:	f104 000c 	add.w	r0, r4, #12
 1003212:	f003 faf6 	bl	1006802 <bytewise_bit_swap>
		NRF_RADIO->PREFIX1 =
 1003216:	f8c1 0528 	str.w	r0, [r1, #1320]	; 0x528
}
 100321a:	bd10      	pop	{r4, pc}
 100321c:	2100001c 	.word	0x2100001c
 1003220:	41008000 	.word	0x41008000

01003224 <tx_fifo_remove_last.part.0>:
	__asm__ volatile(
 1003224:	f04f 0320 	mov.w	r3, #32
 1003228:	f3ef 8111 	mrs	r1, BASEPRI
 100322c:	f383 8812 	msr	BASEPRI_MAX, r3
 1003230:	f3bf 8f6f 	isb	sy
	tx_fifo.count--;
 1003234:	4b07      	ldr	r3, [pc, #28]	; (1003254 <tx_fifo_remove_last.part.0+0x30>)
 1003236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1003238:	3a01      	subs	r2, #1
 100323a:	629a      	str	r2, [r3, #40]	; 0x28
	if (++tx_fifo.front >= CONFIG_ESB_TX_FIFO_SIZE) {
 100323c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 100323e:	3201      	adds	r2, #1
 1003240:	2a07      	cmp	r2, #7
		tx_fifo.front = 0;
 1003242:	bf88      	it	hi
 1003244:	2200      	movhi	r2, #0
 1003246:	625a      	str	r2, [r3, #36]	; 0x24
	__asm__ volatile(
 1003248:	f381 8811 	msr	BASEPRI, r1
 100324c:	f3bf 8f6f 	isb	sy
}
 1003250:	4770      	bx	lr
 1003252:	bf00      	nop
 1003254:	210003a8 	.word	0x210003a8

01003258 <rx_fifo_push_rfbuf.part.0>:
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
 1003258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
 100325c:	4b1f      	ldr	r3, [pc, #124]	; (10032dc <rx_fifo_push_rfbuf.part.0+0x84>)
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
 100325e:	4607      	mov	r7, r0
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
 1003260:	781a      	ldrb	r2, [r3, #0]
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
 1003262:	460e      	mov	r6, r1
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
 1003264:	2a01      	cmp	r2, #1
 1003266:	f8df 8078 	ldr.w	r8, [pc, #120]	; 10032e0 <rx_fifo_push_rfbuf.part.0+0x88>
 100326a:	d109      	bne.n	1003280 <rx_fifo_push_rfbuf.part.0+0x28>
		if (rx_payload_buffer[0] > CONFIG_ESB_MAX_PAYLOAD_LENGTH) {
 100326c:	f898 3000 	ldrb.w	r3, [r8]
 1003270:	2b20      	cmp	r3, #32
 1003272:	d831      	bhi.n	10032d8 <rx_fifo_push_rfbuf.part.0+0x80>
		rx_fifo.payload[rx_fifo.back]->length = rx_payload_buffer[0];
 1003274:	4a1b      	ldr	r2, [pc, #108]	; (10032e4 <rx_fifo_push_rfbuf.part.0+0x8c>)
 1003276:	6a11      	ldr	r1, [r2, #32]
 1003278:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
 100327c:	7013      	strb	r3, [r2, #0]
 100327e:	e006      	b.n	100328e <rx_fifo_push_rfbuf.part.0+0x36>
		rx_fifo.payload[rx_fifo.back]->length = rx_payload_buffer[0];
 1003280:	4a18      	ldr	r2, [pc, #96]	; (10032e4 <rx_fifo_push_rfbuf.part.0+0x8c>)
 1003282:	6a11      	ldr	r1, [r2, #32]
 1003284:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
	} else if (esb_cfg.mode == ESB_MODE_PTX) {
 1003288:	7859      	ldrb	r1, [r3, #1]
 100328a:	bb19      	cbnz	r1, 10032d4 <rx_fifo_push_rfbuf.part.0+0x7c>
		rx_fifo.payload[rx_fifo.back]->length = 0;
 100328c:	7011      	strb	r1, [r2, #0]
	memcpy(rx_fifo.payload[rx_fifo.back]->data, &rx_payload_buffer[2],
 100328e:	4c15      	ldr	r4, [pc, #84]	; (10032e4 <rx_fifo_push_rfbuf.part.0+0x8c>)
 1003290:	4915      	ldr	r1, [pc, #84]	; (10032e8 <rx_fifo_push_rfbuf.part.0+0x90>)
 1003292:	6a23      	ldr	r3, [r4, #32]
 1003294:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 1003298:	f810 2b05 	ldrb.w	r2, [r0], #5
 100329c:	f003 f93a 	bl	1006514 <memcpy>
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
 10032a0:	6a23      	ldr	r3, [r4, #32]
	rx_fifo.payload[rx_fifo.back]->rssi = NRF_RADIO->RSSISAMPLE;
 10032a2:	4a12      	ldr	r2, [pc, #72]	; (10032ec <rx_fifo_push_rfbuf.part.0+0x94>)
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
 10032a4:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	if (++rx_fifo.back >= CONFIG_ESB_RX_FIFO_SIZE) {
 10032a8:	3301      	adds	r3, #1
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
 10032aa:	706f      	strb	r7, [r5, #1]
	rx_fifo.payload[rx_fifo.back]->rssi = NRF_RADIO->RSSISAMPLE;
 10032ac:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
	if (++rx_fifo.back >= CONFIG_ESB_RX_FIFO_SIZE) {
 10032b0:	2b07      	cmp	r3, #7
		rx_fifo.back = 0;
 10032b2:	bf88      	it	hi
 10032b4:	2300      	movhi	r3, #0
	rx_fifo.payload[rx_fifo.back]->rssi = NRF_RADIO->RSSISAMPLE;
 10032b6:	70aa      	strb	r2, [r5, #2]
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
 10032b8:	f898 2001 	ldrb.w	r2, [r8, #1]
	return true;
 10032bc:	2001      	movs	r0, #1
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
 10032be:	43d2      	mvns	r2, r2
		rx_fifo.back = 0;
 10032c0:	6223      	str	r3, [r4, #32]
	rx_fifo.count++;
 10032c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
 10032c4:	f002 0201 	and.w	r2, r2, #1
	rx_fifo.count++;
 10032c8:	3301      	adds	r3, #1
	rx_fifo.payload[rx_fifo.back]->pid = pid;
 10032ca:	712e      	strb	r6, [r5, #4]
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
 10032cc:	70ea      	strb	r2, [r5, #3]
	rx_fifo.count++;
 10032ce:	62a3      	str	r3, [r4, #40]	; 0x28
}
 10032d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
 10032d4:	7c5b      	ldrb	r3, [r3, #17]
 10032d6:	e7d1      	b.n	100327c <rx_fifo_push_rfbuf.part.0+0x24>
			return false;
 10032d8:	2000      	movs	r0, #0
 10032da:	e7f9      	b.n	10032d0 <rx_fifo_push_rfbuf.part.0+0x78>
 10032dc:	21000350 	.word	0x21000350
 10032e0:	210005a0 	.word	0x210005a0
 10032e4:	2100037c 	.word	0x2100037c
 10032e8:	210005a2 	.word	0x210005a2
 10032ec:	41008000 	.word	0x41008000

010032f0 <start_tx_transaction>:
	last_tx_attempts = 1;
 10032f0:	2201      	movs	r2, #1
{
 10032f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	last_tx_attempts = 1;
 10032f4:	4b3f      	ldr	r3, [pc, #252]	; (10033f4 <start_tx_transaction+0x104>)
	switch (esb_cfg.protocol) {
 10032f6:	4f40      	ldr	r7, [pc, #256]	; (10033f8 <start_tx_transaction+0x108>)
	last_tx_attempts = 1;
 10032f8:	601a      	str	r2, [r3, #0]
	current_payload = tx_fifo.payload[tx_fifo.front];
 10032fa:	4b40      	ldr	r3, [pc, #256]	; (10033fc <start_tx_transaction+0x10c>)
 10032fc:	4e40      	ldr	r6, [pc, #256]	; (1003400 <start_tx_transaction+0x110>)
 10032fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	switch (esb_cfg.protocol) {
 1003300:	783c      	ldrb	r4, [r7, #0]
	current_payload = tx_fifo.payload[tx_fifo.front];
 1003302:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 1003306:	4d3f      	ldr	r5, [pc, #252]	; (1003404 <start_tx_transaction+0x114>)
 1003308:	6031      	str	r1, [r6, #0]
	switch (esb_cfg.protocol) {
 100330a:	b314      	cbz	r4, 1003352 <start_tx_transaction+0x62>
 100330c:	2c01      	cmp	r4, #1
 100330e:	d03f      	beq.n	1003390 <start_tx_transaction+0xa0>
	NRF_RADIO->TXADDRESS = current_payload->pipe;
 1003310:	6833      	ldr	r3, [r6, #0]
	NRF_RADIO->RXADDRESSES = 1 << current_payload->pipe;
 1003312:	2601      	movs	r6, #1
 1003314:	f44f 7280 	mov.w	r2, #256	; 0x100
	NRF_RADIO->TXADDRESS = current_payload->pipe;
 1003318:	4c3b      	ldr	r4, [pc, #236]	; (1003408 <start_tx_transaction+0x118>)
 100331a:	785b      	ldrb	r3, [r3, #1]
	irq_enable(RADIO_IRQn);
 100331c:	2008      	movs	r0, #8
	NRF_RADIO->TXADDRESS = current_payload->pipe;
 100331e:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES = 1 << current_payload->pipe;
 1003322:	fa06 f303 	lsl.w	r3, r6, r3
 1003326:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
 100332a:	4b38      	ldr	r3, [pc, #224]	; (100340c <start_tx_transaction+0x11c>)
 100332c:	7cdb      	ldrb	r3, [r3, #19]
 100332e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
 1003332:	4b37      	ldr	r3, [pc, #220]	; (1003410 <start_tx_transaction+0x120>)
	NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
 1003334:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
 1003338:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
 100333c:	f7fe f87c 	bl	1001438 <arch_irq_enable>
	NRF_RADIO->EVENTS_ADDRESS = 0;
 1003340:	2300      	movs	r3, #0
 1003342:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
 1003346:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	NRF_RADIO->EVENTS_DISABLED = 0;
 100334a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_TXEN = 1;
 100334e:	6026      	str	r6, [r4, #0]
}
 1003350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		update_rf_payload_format(current_payload->length);
 1003352:	4b30      	ldr	r3, [pc, #192]	; (1003414 <start_tx_transaction+0x124>)
 1003354:	7808      	ldrb	r0, [r1, #0]
 1003356:	681b      	ldr	r3, [r3, #0]
 1003358:	4798      	blx	r3
		tx_payload_buffer[0] = current_payload->pid;
 100335a:	6831      	ldr	r1, [r6, #0]
		tx_payload_buffer[1] = 0;
 100335c:	706c      	strb	r4, [r5, #1]
		tx_payload_buffer[0] = current_payload->pid;
 100335e:	790b      	ldrb	r3, [r1, #4]
		memcpy(&tx_payload_buffer[2], current_payload->data,
 1003360:	1ca8      	adds	r0, r5, #2
		tx_payload_buffer[0] = current_payload->pid;
 1003362:	702b      	strb	r3, [r5, #0]
		memcpy(&tx_payload_buffer[2], current_payload->data,
 1003364:	f811 2b05 	ldrb.w	r2, [r1], #5
 1003368:	f003 f8d4 	bl	1006514 <memcpy>
		NRF_RADIO->SHORTS = radio_shorts_common |
 100336c:	f240 121b 	movw	r2, #283	; 0x11b
 1003370:	4b25      	ldr	r3, [pc, #148]	; (1003408 <start_tx_transaction+0x118>)
 1003372:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk |
 1003376:	2211      	movs	r2, #17
 1003378:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		retransmits_remaining = esb_cfg.retransmit_count;
 100337c:	89fa      	ldrh	r2, [r7, #14]
 100337e:	4b26      	ldr	r3, [pc, #152]	; (1003418 <start_tx_transaction+0x128>)
 1003380:	601a      	str	r2, [r3, #0]
		on_radio_disabled = on_radio_disabled_tx;
 1003382:	4b26      	ldr	r3, [pc, #152]	; (100341c <start_tx_transaction+0x12c>)
 1003384:	4a26      	ldr	r2, [pc, #152]	; (1003420 <start_tx_transaction+0x130>)
 1003386:	601a      	str	r2, [r3, #0]
		esb_state = ESB_STATE_PTX_TX_ACK;
 1003388:	2202      	movs	r2, #2
 100338a:	4b26      	ldr	r3, [pc, #152]	; (1003424 <start_tx_transaction+0x134>)
 100338c:	701a      	strb	r2, [r3, #0]
		break;
 100338e:	e7bf      	b.n	1003310 <start_tx_transaction+0x20>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
 1003390:	78cb      	ldrb	r3, [r1, #3]
 1003392:	b113      	cbz	r3, 100339a <start_tx_transaction+0xaa>
 1003394:	7cbc      	ldrb	r4, [r7, #18]
 1003396:	f084 0401 	eor.w	r4, r4, #1
		tx_payload_buffer[1] |= current_payload->noack ? 0x00 : 0x01;
 100339a:	fab3 f383 	clz	r3, r3
		tx_payload_buffer[0] = current_payload->length;
 100339e:	780a      	ldrb	r2, [r1, #0]
		tx_payload_buffer[1] |= current_payload->noack ? 0x00 : 0x01;
 10033a0:	095b      	lsrs	r3, r3, #5
		tx_payload_buffer[0] = current_payload->length;
 10033a2:	702a      	strb	r2, [r5, #0]
		tx_payload_buffer[1] = current_payload->pid << 1;
 10033a4:	790a      	ldrb	r2, [r1, #4]
		memcpy(&tx_payload_buffer[2], current_payload->data,
 10033a6:	4820      	ldr	r0, [pc, #128]	; (1003428 <start_tx_transaction+0x138>)
		tx_payload_buffer[1] |= current_payload->noack ? 0x00 : 0x01;
 10033a8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 10033ac:	706b      	strb	r3, [r5, #1]
		memcpy(&tx_payload_buffer[2], current_payload->data,
 10033ae:	f811 2b05 	ldrb.w	r2, [r1], #5
 10033b2:	f003 f8af 	bl	1006514 <memcpy>
		if (ack) {
 10033b6:	4b14      	ldr	r3, [pc, #80]	; (1003408 <start_tx_transaction+0x118>)
 10033b8:	4918      	ldr	r1, [pc, #96]	; (100341c <start_tx_transaction+0x12c>)
 10033ba:	4a1a      	ldr	r2, [pc, #104]	; (1003424 <start_tx_transaction+0x134>)
 10033bc:	b174      	cbz	r4, 10033dc <start_tx_transaction+0xec>
			NRF_RADIO->SHORTS = radio_shorts_common |
 10033be:	f240 101b 	movw	r0, #283	; 0x11b
 10033c2:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk |
 10033c6:	2011      	movs	r0, #17
 10033c8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
			retransmits_remaining = esb_cfg.retransmit_count;
 10033cc:	4b12      	ldr	r3, [pc, #72]	; (1003418 <start_tx_transaction+0x128>)
 10033ce:	89f8      	ldrh	r0, [r7, #14]
 10033d0:	6018      	str	r0, [r3, #0]
			on_radio_disabled = on_radio_disabled_tx;
 10033d2:	4b13      	ldr	r3, [pc, #76]	; (1003420 <start_tx_transaction+0x130>)
 10033d4:	600b      	str	r3, [r1, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
 10033d6:	2302      	movs	r3, #2
			esb_state = ESB_STATE_PTX_TX;
 10033d8:	7013      	strb	r3, [r2, #0]
 10033da:	e799      	b.n	1003310 <start_tx_transaction+0x20>
			NRF_RADIO->SHORTS = radio_shorts_common;
 10033dc:	f240 1013 	movw	r0, #275	; 0x113
 10033e0:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
 10033e4:	2010      	movs	r0, #16
 10033e6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
			on_radio_disabled = on_radio_disabled_tx_noack;
 10033ea:	4b10      	ldr	r3, [pc, #64]	; (100342c <start_tx_transaction+0x13c>)
 10033ec:	600b      	str	r3, [r1, #0]
			esb_state = ESB_STATE_PTX_TX;
 10033ee:	2301      	movs	r3, #1
 10033f0:	e7f2      	b.n	10033d8 <start_tx_transaction+0xe8>
 10033f2:	bf00      	nop
 10033f4:	2100036c 	.word	0x2100036c
 10033f8:	21000350 	.word	0x21000350
 10033fc:	210003a8 	.word	0x210003a8
 1003400:	2100034c 	.word	0x2100034c
 1003404:	210006ea 	.word	0x210006ea
 1003408:	41008000 	.word	0x41008000
 100340c:	2100001c 	.word	0x2100001c
 1003410:	e000e100 	.word	0xe000e100
 1003414:	210003d4 	.word	0x210003d4
 1003418:	21000378 	.word	0x21000378
 100341c:	21000370 	.word	0x21000370
 1003420:	010030c9 	.word	0x010030c9
 1003424:	2100046b 	.word	0x2100046b
 1003428:	210006ec 	.word	0x210006ec
 100342c:	01003679 	.word	0x01003679

01003430 <on_radio_disabled_tx_wait_for_ack>:
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
 1003430:	4b43      	ldr	r3, [pc, #268]	; (1003540 <on_radio_disabled_tx_wait_for_ack+0x110>)
{
 1003432:	b570      	push	{r4, r5, r6, lr}
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
 1003434:	681a      	ldr	r2, [r3, #0]
 1003436:	4b43      	ldr	r3, [pc, #268]	; (1003544 <on_radio_disabled_tx_wait_for_ack+0x114>)
 1003438:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	if (NRF_RADIO->EVENTS_END && NRF_RADIO->CRCSTATUS != 0) {
 100343c:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 1003440:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 1003444:	4a40      	ldr	r2, [pc, #256]	; (1003548 <on_radio_disabled_tx_wait_for_ack+0x118>)
 1003446:	2900      	cmp	r1, #0
 1003448:	d042      	beq.n	10034d0 <on_radio_disabled_tx_wait_for_ack+0xa0>
 100344a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 100344e:	2b00      	cmp	r3, #0
 1003450:	d03e      	beq.n	10034d0 <on_radio_disabled_tx_wait_for_ack+0xa0>
		ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
 1003452:	2101      	movs	r1, #1
 1003454:	4b3d      	ldr	r3, [pc, #244]	; (100354c <on_radio_disabled_tx_wait_for_ack+0x11c>)
		interrupt_flags |= INT_TX_SUCCESS_MSK;
 1003456:	4c3e      	ldr	r4, [pc, #248]	; (1003550 <on_radio_disabled_tx_wait_for_ack+0x120>)
		ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
 1003458:	6119      	str	r1, [r3, #16]
		interrupt_flags |= INT_TX_SUCCESS_MSK;
 100345a:	6823      	ldr	r3, [r4, #0]
		last_tx_attempts = esb_cfg.retransmit_count -
 100345c:	4d3d      	ldr	r5, [pc, #244]	; (1003554 <on_radio_disabled_tx_wait_for_ack+0x124>)
		interrupt_flags |= INT_TX_SUCCESS_MSK;
 100345e:	430b      	orrs	r3, r1
 1003460:	6023      	str	r3, [r4, #0]
		last_tx_attempts = esb_cfg.retransmit_count -
 1003462:	6812      	ldr	r2, [r2, #0]
 1003464:	89eb      	ldrh	r3, [r5, #14]
	if (tx_fifo.count == 0) {
 1003466:	4e3c      	ldr	r6, [pc, #240]	; (1003558 <on_radio_disabled_tx_wait_for_ack+0x128>)
		last_tx_attempts = esb_cfg.retransmit_count -
 1003468:	1a9b      	subs	r3, r3, r2
 100346a:	4a3c      	ldr	r2, [pc, #240]	; (100355c <on_radio_disabled_tx_wait_for_ack+0x12c>)
				   retransmits_remaining + 1;
 100346c:	440b      	add	r3, r1
		last_tx_attempts = esb_cfg.retransmit_count -
 100346e:	6013      	str	r3, [r2, #0]
	if (tx_fifo.count == 0) {
 1003470:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 1003472:	b10b      	cbz	r3, 1003478 <on_radio_disabled_tx_wait_for_ack+0x48>
 1003474:	f7ff fed6 	bl	1003224 <tx_fifo_remove_last.part.0>
		if (esb_cfg.protocol != ESB_PROTOCOL_ESB &&
 1003478:	782b      	ldrb	r3, [r5, #0]
 100347a:	b19b      	cbz	r3, 10034a4 <on_radio_disabled_tx_wait_for_ack+0x74>
		    rx_payload_buffer[0] > 0) {
 100347c:	4b38      	ldr	r3, [pc, #224]	; (1003560 <on_radio_disabled_tx_wait_for_ack+0x130>)
		if (esb_cfg.protocol != ESB_PROTOCOL_ESB &&
 100347e:	781a      	ldrb	r2, [r3, #0]
 1003480:	b182      	cbz	r2, 10034a4 <on_radio_disabled_tx_wait_for_ack+0x74>
			if (rx_fifo_push_rfbuf((uint8_t)NRF_RADIO->TXADDRESS,
 1003482:	4a38      	ldr	r2, [pc, #224]	; (1003564 <on_radio_disabled_tx_wait_for_ack+0x134>)
 1003484:	f8d2 052c 	ldr.w	r0, [r2, #1324]	; 0x52c
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
 1003488:	4a37      	ldr	r2, [pc, #220]	; (1003568 <on_radio_disabled_tx_wait_for_ack+0x138>)
 100348a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 100348c:	2a07      	cmp	r2, #7
 100348e:	d809      	bhi.n	10034a4 <on_radio_disabled_tx_wait_for_ack+0x74>
			if (rx_fifo_push_rfbuf((uint8_t)NRF_RADIO->TXADDRESS,
 1003490:	7859      	ldrb	r1, [r3, #1]
 1003492:	b2c0      	uxtb	r0, r0
 1003494:	0849      	lsrs	r1, r1, #1
 1003496:	f7ff fedf 	bl	1003258 <rx_fifo_push_rfbuf.part.0>
 100349a:	b118      	cbz	r0, 10034a4 <on_radio_disabled_tx_wait_for_ack+0x74>
				interrupt_flags |=
 100349c:	6823      	ldr	r3, [r4, #0]
 100349e:	f043 0304 	orr.w	r3, r3, #4
 10034a2:	6023      	str	r3, [r4, #0]
		if ((tx_fifo.count == 0) ||
 10034a4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 10034a6:	4b31      	ldr	r3, [pc, #196]	; (100356c <on_radio_disabled_tx_wait_for_ack+0x13c>)
 10034a8:	b112      	cbz	r2, 10034b0 <on_radio_disabled_tx_wait_for_ack+0x80>
 10034aa:	7c2a      	ldrb	r2, [r5, #16]
 10034ac:	2a01      	cmp	r2, #1
 10034ae:	d107      	bne.n	10034c0 <on_radio_disabled_tx_wait_for_ack+0x90>
			esb_state = ESB_STATE_IDLE;
 10034b0:	2100      	movs	r1, #0
 10034b2:	4a2f      	ldr	r2, [pc, #188]	; (1003570 <on_radio_disabled_tx_wait_for_ack+0x140>)
 10034b4:	7011      	strb	r1, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 10034b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 10034ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 10034be:	bd70      	pop	{r4, r5, r6, pc}
 10034c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 10034c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 10034c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			start_tx_transaction();
 10034cc:	f7ff bf10 	b.w	10032f0 <start_tx_transaction>
		if (retransmits_remaining-- == 0) {
 10034d0:	6813      	ldr	r3, [r2, #0]
 10034d2:	4d27      	ldr	r5, [pc, #156]	; (1003570 <on_radio_disabled_tx_wait_for_ack+0x140>)
 10034d4:	1e59      	subs	r1, r3, #1
 10034d6:	6011      	str	r1, [r2, #0]
 10034d8:	b97b      	cbnz	r3, 10034fa <on_radio_disabled_tx_wait_for_ack+0xca>
			ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
 10034da:	2101      	movs	r1, #1
 10034dc:	4a1b      	ldr	r2, [pc, #108]	; (100354c <on_radio_disabled_tx_wait_for_ack+0x11c>)
 10034de:	6111      	str	r1, [r2, #16]
			last_tx_attempts = esb_cfg.retransmit_count + 1;
 10034e0:	4a1c      	ldr	r2, [pc, #112]	; (1003554 <on_radio_disabled_tx_wait_for_ack+0x124>)
 10034e2:	89d2      	ldrh	r2, [r2, #14]
 10034e4:	440a      	add	r2, r1
 10034e6:	491d      	ldr	r1, [pc, #116]	; (100355c <on_radio_disabled_tx_wait_for_ack+0x12c>)
 10034e8:	600a      	str	r2, [r1, #0]
			interrupt_flags |= INT_TX_FAILED_MSK;
 10034ea:	4919      	ldr	r1, [pc, #100]	; (1003550 <on_radio_disabled_tx_wait_for_ack+0x120>)
 10034ec:	680a      	ldr	r2, [r1, #0]
 10034ee:	f042 0202 	orr.w	r2, r2, #2
 10034f2:	600a      	str	r2, [r1, #0]
			esb_state = ESB_STATE_IDLE;
 10034f4:	702b      	strb	r3, [r5, #0]
 10034f6:	4b1d      	ldr	r3, [pc, #116]	; (100356c <on_radio_disabled_tx_wait_for_ack+0x13c>)
 10034f8:	e7dd      	b.n	10034b6 <on_radio_disabled_tx_wait_for_ack+0x86>
			NRF_RADIO->SHORTS = radio_shorts_common |
 10034fa:	f240 131b 	movw	r3, #283	; 0x11b
 10034fe:	4c19      	ldr	r4, [pc, #100]	; (1003564 <on_radio_disabled_tx_wait_for_ack+0x134>)
 1003500:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			update_rf_payload_format(current_payload->length);
 1003504:	4b1b      	ldr	r3, [pc, #108]	; (1003574 <on_radio_disabled_tx_wait_for_ack+0x144>)
 1003506:	681a      	ldr	r2, [r3, #0]
 1003508:	4b1b      	ldr	r3, [pc, #108]	; (1003578 <on_radio_disabled_tx_wait_for_ack+0x148>)
 100350a:	7810      	ldrb	r0, [r2, #0]
 100350c:	681b      	ldr	r3, [r3, #0]
 100350e:	4798      	blx	r3
			NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
 1003510:	4b1a      	ldr	r3, [pc, #104]	; (100357c <on_radio_disabled_tx_wait_for_ack+0x14c>)
			on_radio_disabled = on_radio_disabled_tx;
 1003512:	4a1b      	ldr	r2, [pc, #108]	; (1003580 <on_radio_disabled_tx_wait_for_ack+0x150>)
			NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
 1003514:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
			on_radio_disabled = on_radio_disabled_tx;
 1003518:	4b1a      	ldr	r3, [pc, #104]	; (1003584 <on_radio_disabled_tx_wait_for_ack+0x154>)
			ESB_SYS_TIMER->TASKS_START = 1;
 100351a:	490c      	ldr	r1, [pc, #48]	; (100354c <on_radio_disabled_tx_wait_for_ack+0x11c>)
			on_radio_disabled = on_radio_disabled_tx;
 100351c:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
 100351e:	2302      	movs	r3, #2
 1003520:	702b      	strb	r3, [r5, #0]
			ESB_SYS_TIMER->TASKS_START = 1;
 1003522:	2301      	movs	r3, #1
			nrfx_gppi_channels_enable(1 << ppi_ch_timer_compare1_radio_txen);
 1003524:	4a18      	ldr	r2, [pc, #96]	; (1003588 <on_radio_disabled_tx_wait_for_ack+0x158>)
			ESB_SYS_TIMER->TASKS_START = 1;
 1003526:	600b      	str	r3, [r1, #0]
			nrfx_gppi_channels_enable(1 << ppi_ch_timer_compare1_radio_txen);
 1003528:	7812      	ldrb	r2, [r2, #0]
    p_reg->CHENSET = mask;
 100352a:	4806      	ldr	r0, [pc, #24]	; (1003544 <on_radio_disabled_tx_wait_for_ack+0x114>)
 100352c:	fa03 f202 	lsl.w	r2, r3, r2
 1003530:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
			if (ESB_SYS_TIMER->EVENTS_COMPARE[1]) {
 1003534:	f8d1 2144 	ldr.w	r2, [r1, #324]	; 0x144
 1003538:	2a00      	cmp	r2, #0
 100353a:	d0c0      	beq.n	10034be <on_radio_disabled_tx_wait_for_ack+0x8e>
				NRF_RADIO->TASKS_TXEN = 1;
 100353c:	6023      	str	r3, [r4, #0]
}
 100353e:	e7be      	b.n	10034be <on_radio_disabled_tx_wait_for_ack+0x8e>
 1003540:	21000374 	.word	0x21000374
 1003544:	4100f000 	.word	0x4100f000
 1003548:	21000378 	.word	0x21000378
 100354c:	41019000 	.word	0x41019000
 1003550:	21000368 	.word	0x21000368
 1003554:	21000350 	.word	0x21000350
 1003558:	210003a8 	.word	0x210003a8
 100355c:	2100036c 	.word	0x2100036c
 1003560:	210005a0 	.word	0x210005a0
 1003564:	41008000 	.word	0x41008000
 1003568:	2100037c 	.word	0x2100037c
 100356c:	e000e100 	.word	0xe000e100
 1003570:	2100046b 	.word	0x2100046b
 1003574:	2100034c 	.word	0x2100034c
 1003578:	210003d4 	.word	0x210003d4
 100357c:	210006ea 	.word	0x210006ea
 1003580:	010030c9 	.word	0x010030c9
 1003584:	21000370 	.word	0x21000370
 1003588:	21000477 	.word	0x21000477

0100358c <RADIO_IRQHandler>:
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
 100358c:	4668      	mov	r0, sp
 100358e:	f020 0107 	bic.w	r1, r0, #7
 1003592:	468d      	mov	sp, r1
	if (NRF_RADIO->EVENTS_READY &&
 1003594:	4b16      	ldr	r3, [pc, #88]	; (10035f0 <RADIO_IRQHandler+0x64>)
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
 1003596:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
 1003598:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 100359c:	b14a      	cbz	r2, 10035b2 <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
 100359e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
 10035a2:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
 10035a4:	bf41      	itttt	mi
 10035a6:	2200      	movmi	r2, #0
 10035a8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
 10035ac:	f503 3388 	addmi.w	r3, r3, #69632	; 0x11000
 10035b0:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
 10035b2:	4b0f      	ldr	r3, [pc, #60]	; (10035f0 <RADIO_IRQHandler+0x64>)
 10035b4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 10035b8:	b132      	cbz	r2, 10035c8 <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
 10035ba:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
 10035be:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
 10035c0:	bf44      	itt	mi
 10035c2:	2200      	movmi	r2, #0
 10035c4:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
 10035c8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 10035cc:	b152      	cbz	r2, 10035e4 <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
 10035ce:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
 10035d2:	06d2      	lsls	r2, r2, #27
 10035d4:	d506      	bpl.n	10035e4 <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
 10035d6:	2200      	movs	r2, #0
 10035d8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
 10035dc:	4b05      	ldr	r3, [pc, #20]	; (10035f4 <RADIO_IRQHandler+0x68>)
 10035de:	681b      	ldr	r3, [r3, #0]
 10035e0:	b103      	cbz	r3, 10035e4 <RADIO_IRQHandler+0x58>
			on_radio_disabled();
 10035e2:	4798      	blx	r3
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
 10035e4:	f7fe f834 	bl	1001650 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
 10035e8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 10035ec:	4685      	mov	sp, r0
 10035ee:	4770      	bx	lr
 10035f0:	41008000 	.word	0x41008000
 10035f4:	21000370 	.word	0x21000370

010035f8 <EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
 10035f8:	4668      	mov	r0, sp
 10035fa:	f020 0107 	bic.w	r1, r0, #7
 10035fe:	468d      	mov	sp, r1
 1003600:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
 1003602:	4b1a      	ldr	r3, [pc, #104]	; (100366c <EGU0_IRQHandler+0x74>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
 1003604:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
 1003606:	681b      	ldr	r3, [r3, #0]
 1003608:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
 100360a:	f04f 0320 	mov.w	r3, #32
 100360e:	f3ef 8111 	mrs	r1, BASEPRI
 1003612:	f383 8812 	msr	BASEPRI_MAX, r3
 1003616:	f3bf 8f6f 	isb	sy
	interrupt_flags = 0;
 100361a:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
 100361c:	4b14      	ldr	r3, [pc, #80]	; (1003670 <EGU0_IRQHandler+0x78>)
 100361e:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
 1003620:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
 1003622:	f381 8811 	msr	BASEPRI, r1
 1003626:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
 100362a:	4c12      	ldr	r4, [pc, #72]	; (1003674 <EGU0_IRQHandler+0x7c>)
 100362c:	6823      	ldr	r3, [r4, #0]
 100362e:	b1ab      	cbz	r3, 100365c <EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
 1003630:	07e9      	lsls	r1, r5, #31
 1003632:	d503      	bpl.n	100363c <EGU0_IRQHandler+0x44>
			event_handler(&event);
 1003634:	4668      	mov	r0, sp
			event.evt_id = ESB_EVENT_TX_SUCCESS;
 1003636:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
 100363a:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
 100363c:	07aa      	lsls	r2, r5, #30
 100363e:	d505      	bpl.n	100364c <EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
 1003640:	2301      	movs	r3, #1
			event_handler(&event);
 1003642:	4668      	mov	r0, sp
			event.evt_id = ESB_EVENT_TX_FAILED;
 1003644:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
 1003648:	6823      	ldr	r3, [r4, #0]
 100364a:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
 100364c:	076b      	lsls	r3, r5, #29
 100364e:	d505      	bpl.n	100365c <EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
 1003650:	2302      	movs	r3, #2
			event_handler(&event);
 1003652:	4668      	mov	r0, sp
			event.evt_id = ESB_EVENT_RX_RECEIVED;
 1003654:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
 1003658:	6823      	ldr	r3, [r4, #0]
 100365a:	4798      	blx	r3
 100365c:	f7fd fff8 	bl	1001650 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
 1003660:	b002      	add	sp, #8
 1003662:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
 1003666:	4685      	mov	sp, r0
 1003668:	4770      	bx	lr
 100366a:	bf00      	nop
 100366c:	2100036c 	.word	0x2100036c
 1003670:	21000368 	.word	0x21000368
 1003674:	21000364 	.word	0x21000364

01003678 <on_radio_disabled_tx_noack>:
	interrupt_flags |= INT_TX_SUCCESS_MSK;
 1003678:	4a0f      	ldr	r2, [pc, #60]	; (10036b8 <on_radio_disabled_tx_noack+0x40>)
{
 100367a:	b510      	push	{r4, lr}
	interrupt_flags |= INT_TX_SUCCESS_MSK;
 100367c:	6813      	ldr	r3, [r2, #0]
	if (tx_fifo.count == 0) {
 100367e:	4c0f      	ldr	r4, [pc, #60]	; (10036bc <on_radio_disabled_tx_noack+0x44>)
	interrupt_flags |= INT_TX_SUCCESS_MSK;
 1003680:	f043 0301 	orr.w	r3, r3, #1
 1003684:	6013      	str	r3, [r2, #0]
	if (tx_fifo.count == 0) {
 1003686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1003688:	480d      	ldr	r0, [pc, #52]	; (10036c0 <on_radio_disabled_tx_noack+0x48>)
 100368a:	b93b      	cbnz	r3, 100369c <on_radio_disabled_tx_noack+0x24>
		esb_state = ESB_STATE_IDLE;
 100368c:	2200      	movs	r2, #0
 100368e:	4b0d      	ldr	r3, [pc, #52]	; (10036c4 <on_radio_disabled_tx_noack+0x4c>)
 1003690:	701a      	strb	r2, [r3, #0]
 1003692:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 1003696:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
}
 100369a:	bd10      	pop	{r4, pc}
 100369c:	f7ff fdc2 	bl	1003224 <tx_fifo_remove_last.part.0>
	if (tx_fifo.count == 0) {
 10036a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10036a2:	2b00      	cmp	r3, #0
 10036a4:	d0f2      	beq.n	100368c <on_radio_disabled_tx_noack+0x14>
}
 10036a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 10036aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 10036ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
		start_tx_transaction();
 10036b2:	f7ff be1d 	b.w	10032f0 <start_tx_transaction>
 10036b6:	bf00      	nop
 10036b8:	21000368 	.word	0x21000368
 10036bc:	210003a8 	.word	0x210003a8
 10036c0:	e000e100 	.word	0xe000e100
 10036c4:	2100046b 	.word	0x2100046b

010036c8 <on_radio_disabled_rx>:
	if (NRF_RADIO->CRCSTATUS == 0) {
 10036c8:	4b68      	ldr	r3, [pc, #416]	; (100386c <on_radio_disabled_rx+0x1a4>)
{
 10036ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (NRF_RADIO->CRCSTATUS == 0) {
 10036ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 10036d2:	b922      	cbnz	r2, 10036de <on_radio_disabled_rx+0x16>
}
 10036d4:	b003      	add	sp, #12
 10036d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_events_restart_rx();
 10036da:	f7ff bd41 	b.w	1003160 <clear_events_restart_rx>
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
 10036de:	f8df 9190 	ldr.w	r9, [pc, #400]	; 1003870 <on_radio_disabled_rx+0x1a8>
 10036e2:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 10036e6:	2a07      	cmp	r2, #7
 10036e8:	d8f4      	bhi.n	10036d4 <on_radio_disabled_rx+0xc>
	pipe_info = &rx_pipe_info[NRF_RADIO->RXMATCH];
 10036ea:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
 10036ee:	4c61      	ldr	r4, [pc, #388]	; (1003874 <on_radio_disabled_rx+0x1ac>)
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
 10036f0:	f8df 8184 	ldr.w	r8, [pc, #388]	; 1003878 <on_radio_disabled_rx+0x1b0>
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
 10036f4:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
 10036f8:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
 10036fc:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
 1003700:	4295      	cmp	r5, r2
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
 1003702:	ea4f 0350 	mov.w	r3, r0, lsr #1
 1003706:	ea4f 0581 	mov.w	r5, r1, lsl #2
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
 100370a:	f040 808d 	bne.w	1003828 <on_radio_disabled_rx+0x160>
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
 100370e:	1962      	adds	r2, r4, r5
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
 1003710:	7892      	ldrb	r2, [r2, #2]
	bool send_rx_event = true;
 1003712:	429a      	cmp	r2, r3
 1003714:	bf0c      	ite	eq
 1003716:	2200      	moveq	r2, #0
 1003718:	2201      	movne	r2, #1
 100371a:	9201      	str	r2, [sp, #4]
 100371c:	bf0c      	ite	eq
 100371e:	2201      	moveq	r2, #1
 1003720:	2200      	movne	r2, #0
	pipe_info->pid = rx_payload_buffer[1] >> 1;
 1003722:	1966      	adds	r6, r4, r5
 1003724:	70b3      	strb	r3, [r6, #2]
	pipe_info->crc = NRF_RADIO->RXCRC;
 1003726:	4b51      	ldr	r3, [pc, #324]	; (100386c <on_radio_disabled_rx+0x1a4>)
 1003728:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 100372c:	f824 6021 	strh.w	r6, [r4, r1, lsl #2]
	if ((esb_cfg.selective_auto_ack == false) ||
 1003730:	4952      	ldr	r1, [pc, #328]	; (100387c <on_radio_disabled_rx+0x1b4>)
 1003732:	7c8e      	ldrb	r6, [r1, #18]
 1003734:	b116      	cbz	r6, 100373c <on_radio_disabled_rx+0x74>
 1003736:	07c0      	lsls	r0, r0, #31
 1003738:	f140 8095 	bpl.w	1003866 <on_radio_disabled_rx+0x19e>
		NRF_RADIO->SHORTS = radio_shorts_common |
 100373c:	f240 101b 	movw	r0, #283	; 0x11b
 1003740:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
		switch (esb_cfg.protocol) {
 1003744:	780f      	ldrb	r7, [r1, #0]
 1003746:	4e4e      	ldr	r6, [pc, #312]	; (1003880 <on_radio_disabled_rx+0x1b8>)
 1003748:	2f00      	cmp	r7, #0
 100374a:	f000 8083 	beq.w	1003854 <on_radio_disabled_rx+0x18c>
 100374e:	2f01      	cmp	r7, #1
 1003750:	d141      	bne.n	10037d6 <on_radio_disabled_rx+0x10e>
	if (tx_fifo.count > 0 && ack_pl_wrap_pipe[pipe] != 0) {
 1003752:	484c      	ldr	r0, [pc, #304]	; (1003884 <on_radio_disabled_rx+0x1bc>)
	uint32_t pipe = NRF_RADIO->RXMATCH;
 1003754:	f8d3 a408 	ldr.w	sl, [r3, #1032]	; 0x408
	if (tx_fifo.count > 0 && ack_pl_wrap_pipe[pipe] != 0) {
 1003758:	6a83      	ldr	r3, [r0, #40]	; 0x28
 100375a:	f8df c12c 	ldr.w	ip, [pc, #300]	; 1003888 <on_radio_disabled_rx+0x1c0>
 100375e:	2b00      	cmp	r3, #0
 1003760:	d06f      	beq.n	1003842 <on_radio_disabled_rx+0x17a>
 1003762:	f8df e128 	ldr.w	lr, [pc, #296]	; 100388c <on_radio_disabled_rx+0x1c4>
 1003766:	f85e 102a 	ldr.w	r1, [lr, sl, lsl #2]
 100376a:	2900      	cmp	r1, #0
 100376c:	d069      	beq.n	1003842 <on_radio_disabled_rx+0x17a>
		current_payload = ack_pl_wrap_pipe[pipe]->p_payload;
 100376e:	f8d1 b000 	ldr.w	fp, [r1]
 1003772:	4f47      	ldr	r7, [pc, #284]	; (1003890 <on_radio_disabled_rx+0x1c8>)
 1003774:	f8c7 b000 	str.w	fp, [r7]
		if (pipe_info->ack_payload == true && !retransmit_payload) {
 1003778:	eb04 0b05 	add.w	fp, r4, r5
 100377c:	f89b b003 	ldrb.w	fp, [fp, #3]
 1003780:	f1bb 0f00 	cmp.w	fp, #0
 1003784:	d010      	beq.n	10037a8 <on_radio_disabled_rx+0xe0>
 1003786:	b97a      	cbnz	r2, 10037a8 <on_radio_disabled_rx+0xe0>
			ack_pl_wrap_pipe[pipe]->in_use = false;
 1003788:	710a      	strb	r2, [r1, #4]
			ack_pl_wrap_pipe[pipe] = ack_pl_wrap_pipe[pipe]->p_next;
 100378a:	6889      	ldr	r1, [r1, #8]
			tx_fifo.count--;
 100378c:	3b01      	subs	r3, #1
			ack_pl_wrap_pipe[pipe] = ack_pl_wrap_pipe[pipe]->p_next;
 100378e:	f84e 102a 	str.w	r1, [lr, sl, lsl #2]
			tx_fifo.count--;
 1003792:	6283      	str	r3, [r0, #40]	; 0x28
			if (tx_fifo.count > 0 && ack_pl_wrap_pipe[pipe] != 0) {
 1003794:	2b00      	cmp	r3, #0
 1003796:	d04b      	beq.n	1003830 <on_radio_disabled_rx+0x168>
 1003798:	b101      	cbz	r1, 100379c <on_radio_disabled_rx+0xd4>
				current_payload = ack_pl_wrap_pipe[pipe]->p_payload;
 100379a:	6809      	ldr	r1, [r1, #0]
			interrupt_flags |= INT_TX_SUCCESS_MSK;
 100379c:	4a3d      	ldr	r2, [pc, #244]	; (1003894 <on_radio_disabled_rx+0x1cc>)
 100379e:	6039      	str	r1, [r7, #0]
 10037a0:	6813      	ldr	r3, [r2, #0]
 10037a2:	f043 0301 	orr.w	r3, r3, #1
 10037a6:	6013      	str	r3, [r2, #0]
		if (current_payload != 0) {
 10037a8:	f8d7 a000 	ldr.w	sl, [r7]
			update_rf_payload_format(current_payload->length);
 10037ac:	f8dc 2000 	ldr.w	r2, [ip]
			pipe_info->ack_payload = true;
 10037b0:	1963      	adds	r3, r4, r5
		if (current_payload != 0) {
 10037b2:	f1ba 0f00 	cmp.w	sl, #0
 10037b6:	d03d      	beq.n	1003834 <on_radio_disabled_rx+0x16c>
			pipe_info->ack_payload = true;
 10037b8:	2101      	movs	r1, #1
 10037ba:	70d9      	strb	r1, [r3, #3]
			update_rf_payload_format(current_payload->length);
 10037bc:	f89a 0000 	ldrb.w	r0, [sl]
 10037c0:	4790      	blx	r2
			tx_payload_buffer[0] = current_payload->length;
 10037c2:	6839      	ldr	r1, [r7, #0]
			memcpy(&tx_payload_buffer[2],
 10037c4:	4834      	ldr	r0, [pc, #208]	; (1003898 <on_radio_disabled_rx+0x1d0>)
			tx_payload_buffer[0] = current_payload->length;
 10037c6:	f811 2b05 	ldrb.w	r2, [r1], #5
 10037ca:	7032      	strb	r2, [r6, #0]
			memcpy(&tx_payload_buffer[2],
 10037cc:	f002 fea2 	bl	1006514 <memcpy>
	tx_payload_buffer[1] = rx_payload_buffer[1];
 10037d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 10037d4:	7073      	strb	r3, [r6, #1]
		esb_state = ESB_STATE_PRX_SEND_ACK;
 10037d6:	2205      	movs	r2, #5
 10037d8:	4b30      	ldr	r3, [pc, #192]	; (100389c <on_radio_disabled_rx+0x1d4>)
 10037da:	701a      	strb	r2, [r3, #0]
		NRF_RADIO->TXADDRESS = NRF_RADIO->RXMATCH;
 10037dc:	4b23      	ldr	r3, [pc, #140]	; (100386c <on_radio_disabled_rx+0x1a4>)
 10037de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 10037e2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		on_radio_disabled = on_radio_disabled_rx_ack;
 10037e6:	4a2e      	ldr	r2, [pc, #184]	; (10038a0 <on_radio_disabled_rx+0x1d8>)
		NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
 10037e8:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
		on_radio_disabled = on_radio_disabled_rx_ack;
 10037ec:	4b2d      	ldr	r3, [pc, #180]	; (10038a4 <on_radio_disabled_rx+0x1dc>)
 10037ee:	601a      	str	r2, [r3, #0]
	if (send_rx_event) {
 10037f0:	9b01      	ldr	r3, [sp, #4]
 10037f2:	b1b3      	cbz	r3, 1003822 <on_radio_disabled_rx+0x15a>
		if (rx_fifo_push_rfbuf(NRF_RADIO->RXMATCH, pipe_info->pid)) {
 10037f4:	4b1d      	ldr	r3, [pc, #116]	; (100386c <on_radio_disabled_rx+0x1a4>)
 10037f6:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
 10037fa:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 10037fe:	2b07      	cmp	r3, #7
 1003800:	d80f      	bhi.n	1003822 <on_radio_disabled_rx+0x15a>
		if (rx_fifo_push_rfbuf(NRF_RADIO->RXMATCH, pipe_info->pid)) {
 1003802:	442c      	add	r4, r5
 1003804:	78a1      	ldrb	r1, [r4, #2]
 1003806:	b2c0      	uxtb	r0, r0
 1003808:	f7ff fd26 	bl	1003258 <rx_fifo_push_rfbuf.part.0>
 100380c:	b148      	cbz	r0, 1003822 <on_radio_disabled_rx+0x15a>
			interrupt_flags |= INT_RX_DATA_RECEIVED_MSK;
 100380e:	4a21      	ldr	r2, [pc, #132]	; (1003894 <on_radio_disabled_rx+0x1cc>)
 1003810:	6813      	ldr	r3, [r2, #0]
 1003812:	f043 0304 	orr.w	r3, r3, #4
 1003816:	6013      	str	r3, [r2, #0]
 1003818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 100381c:	4b22      	ldr	r3, [pc, #136]	; (10038a8 <on_radio_disabled_rx+0x1e0>)
 100381e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 1003822:	b003      	add	sp, #12
 1003824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool send_rx_event = true;
 1003828:	2201      	movs	r2, #1
 100382a:	9201      	str	r2, [sp, #4]
	bool retransmit_payload = false;
 100382c:	2200      	movs	r2, #0
 100382e:	e778      	b.n	1003722 <on_radio_disabled_rx+0x5a>
				current_payload = 0;
 1003830:	4611      	mov	r1, r2
 1003832:	e7b3      	b.n	100379c <on_radio_disabled_rx+0xd4>
			update_rf_payload_format(0);
 1003834:	4650      	mov	r0, sl
			pipe_info->ack_payload = false;
 1003836:	f883 a003 	strb.w	sl, [r3, #3]
			update_rf_payload_format(0);
 100383a:	4790      	blx	r2
			tx_payload_buffer[0] = 0;
 100383c:	f886 a000 	strb.w	sl, [r6]
 1003840:	e7c6      	b.n	10037d0 <on_radio_disabled_rx+0x108>
		pipe_info->ack_payload = false;
 1003842:	2700      	movs	r7, #0
 1003844:	1963      	adds	r3, r4, r5
 1003846:	70df      	strb	r7, [r3, #3]
		update_rf_payload_format(0);
 1003848:	4638      	mov	r0, r7
 100384a:	f8dc 3000 	ldr.w	r3, [ip]
 100384e:	4798      	blx	r3
		tx_payload_buffer[0] = 0;
 1003850:	7037      	strb	r7, [r6, #0]
 1003852:	e7bd      	b.n	10037d0 <on_radio_disabled_rx+0x108>
			update_rf_payload_format(0);
 1003854:	4b0c      	ldr	r3, [pc, #48]	; (1003888 <on_radio_disabled_rx+0x1c0>)
 1003856:	4638      	mov	r0, r7
 1003858:	681b      	ldr	r3, [r3, #0]
 100385a:	4798      	blx	r3
			tx_payload_buffer[0] = rx_payload_buffer[0];
 100385c:	f898 3000 	ldrb.w	r3, [r8]
			tx_payload_buffer[1] = 0;
 1003860:	7077      	strb	r7, [r6, #1]
			tx_payload_buffer[0] = rx_payload_buffer[0];
 1003862:	7033      	strb	r3, [r6, #0]
			break;
 1003864:	e7b7      	b.n	10037d6 <on_radio_disabled_rx+0x10e>
		clear_events_restart_rx();
 1003866:	f7ff fc7b 	bl	1003160 <clear_events_restart_rx>
 100386a:	e7c1      	b.n	10037f0 <on_radio_disabled_rx+0x128>
 100386c:	41008000 	.word	0x41008000
 1003870:	2100037c 	.word	0x2100037c
 1003874:	21000424 	.word	0x21000424
 1003878:	210005a0 	.word	0x210005a0
 100387c:	21000350 	.word	0x21000350
 1003880:	210006ea 	.word	0x210006ea
 1003884:	210003a8 	.word	0x210003a8
 1003888:	210003d4 	.word	0x210003d4
 100388c:	2100032c 	.word	0x2100032c
 1003890:	2100034c 	.word	0x2100034c
 1003894:	21000368 	.word	0x21000368
 1003898:	210006ec 	.word	0x210006ec
 100389c:	2100046b 	.word	0x2100046b
 10038a0:	010031b5 	.word	0x010031b5
 10038a4:	21000370 	.word	0x21000370
 10038a8:	e000e100 	.word	0xe000e100

010038ac <esb_disable>:

	return 0;
}

void esb_disable(void)
{
 10038ac:	b510      	push	{r4, lr}
	/*  Clear PPI */
	nrfx_gppi_channels_disable(ppi_all_channels_mask);

	esb_state = ESB_STATE_IDLE;
 10038ae:	2400      	movs	r4, #0
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
 10038b0:	4b11      	ldr	r3, [pc, #68]	; (10038f8 <esb_disable+0x4c>)
	esb_initialized = false;

	reset_fifos();

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
 10038b2:	4621      	mov	r1, r4
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
 10038b4:	681a      	ldr	r2, [r3, #0]
    p_reg->CHENCLR = mask;
 10038b6:	4b11      	ldr	r3, [pc, #68]	; (10038fc <esb_disable+0x50>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
 10038b8:	4811      	ldr	r0, [pc, #68]	; (1003900 <esb_disable+0x54>)
 10038ba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	esb_state = ESB_STATE_IDLE;
 10038be:	4b11      	ldr	r3, [pc, #68]	; (1003904 <esb_disable+0x58>)
 10038c0:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
 10038c2:	4b11      	ldr	r3, [pc, #68]	; (1003908 <esb_disable+0x5c>)
 10038c4:	701c      	strb	r4, [r3, #0]
	reset_fifos();
 10038c6:	f7ff fbf1 	bl	10030ac <reset_fifos>
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
 10038ca:	2220      	movs	r2, #32
 10038cc:	f002 fe2d 	bl	100652a <memset>
	memset(pids, 0, sizeof(pids));
 10038d0:	2208      	movs	r2, #8
 10038d2:	4621      	mov	r1, r4
 10038d4:	480d      	ldr	r0, [pc, #52]	; (100390c <esb_disable+0x60>)
 10038d6:	f002 fe28 	bl	100652a <memset>

	/*  Disable the interrupts used by ESB */
	irq_disable(RADIO_IRQn);
 10038da:	2008      	movs	r0, #8
 10038dc:	f7fd fdbc 	bl	1001458 <arch_irq_disable>
	irq_disable(ESB_SYS_TIMER_IRQn);
 10038e0:	2019      	movs	r0, #25
 10038e2:	f7fd fdb9 	bl	1001458 <arch_irq_disable>
	irq_disable(ESB_EVT_IRQ);
 10038e6:	2014      	movs	r0, #20
 10038e8:	f7fd fdb6 	bl	1001458 <arch_irq_disable>

	NRF_RADIO->SHORTS =
 10038ec:	2203      	movs	r2, #3
 10038ee:	4b08      	ldr	r3, [pc, #32]	; (1003910 <esb_disable+0x64>)
 10038f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    RADIO_SHORTS_READY_START_Enabled << RADIO_SHORTS_READY_START_Pos |
	    RADIO_SHORTS_END_DISABLE_Enabled << RADIO_SHORTS_END_DISABLE_Pos;
}
 10038f4:	bd10      	pop	{r4, pc}
 10038f6:	bf00      	nop
 10038f8:	21000374 	.word	0x21000374
 10038fc:	4100f000 	.word	0x4100f000
 1003900:	21000424 	.word	0x21000424
 1003904:	2100046b 	.word	0x2100046b
 1003908:	2100046a 	.word	0x2100046a
 100390c:	2100046c 	.word	0x2100046c
 1003910:	41008000 	.word	0x41008000

01003914 <esb_init>:
{
 1003914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (config == NULL) {
 1003918:	4606      	mov	r6, r0
 100391a:	2800      	cmp	r0, #0
 100391c:	f000 80f8 	beq.w	1003b10 <esb_init+0x1fc>
	if (esb_initialized) {
 1003920:	4d7d      	ldr	r5, [pc, #500]	; (1003b18 <esb_init+0x204>)
 1003922:	782b      	ldrb	r3, [r5, #0]
 1003924:	b10b      	cbz	r3, 100392a <esb_init+0x16>
		esb_disable();
 1003926:	f7ff ffc1 	bl	10038ac <esb_disable>
	event_handler = config->event_handler;
 100392a:	6872      	ldr	r2, [r6, #4]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
 100392c:	4631      	mov	r1, r6
	interrupt_flags = 0;
 100392e:	2600      	movs	r6, #0
	event_handler = config->event_handler;
 1003930:	4b7a      	ldr	r3, [pc, #488]	; (1003b1c <esb_init+0x208>)
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
 1003932:	4c7b      	ldr	r4, [pc, #492]	; (1003b20 <esb_init+0x20c>)
	event_handler = config->event_handler;
 1003934:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
 1003936:	4620      	mov	r0, r4
 1003938:	2214      	movs	r2, #20
 100393a:	f002 fdeb 	bl	1006514 <memcpy>
	interrupt_flags = 0;
 100393e:	4b79      	ldr	r3, [pc, #484]	; (1003b24 <esb_init+0x210>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
 1003940:	2220      	movs	r2, #32
 1003942:	4631      	mov	r1, r6
 1003944:	4878      	ldr	r0, [pc, #480]	; (1003b28 <esb_init+0x214>)
	interrupt_flags = 0;
 1003946:	601e      	str	r6, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
 1003948:	f002 fdef 	bl	100652a <memset>
	memset(pids, 0, sizeof(pids));
 100394c:	2208      	movs	r2, #8
 100394e:	4631      	mov	r1, r6
 1003950:	4876      	ldr	r0, [pc, #472]	; (1003b2c <esb_init+0x218>)
 1003952:	f002 fdea 	bl	100652a <memset>
			     << RADIO_TXPOWER_TXPOWER_Pos;
 1003956:	7aa2      	ldrb	r2, [r4, #10]
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
 1003958:	4b75      	ldr	r3, [pc, #468]	; (1003b30 <esb_init+0x21c>)
 100395a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	params_valid &= update_radio_bitrate();
 100395e:	f7ff fb87 	bl	1003070 <update_radio_bitrate>
	switch (esb_cfg.protocol) {
 1003962:	7823      	ldrb	r3, [r4, #0]
 1003964:	4a73      	ldr	r2, [pc, #460]	; (1003b34 <esb_init+0x220>)
 1003966:	2b00      	cmp	r3, #0
 1003968:	f000 80c2 	beq.w	1003af0 <esb_init+0x1dc>
 100396c:	2b01      	cmp	r3, #1
 100396e:	d101      	bne.n	1003974 <esb_init+0x60>
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
 1003970:	4b71      	ldr	r3, [pc, #452]	; (1003b38 <esb_init+0x224>)
		update_rf_payload_format = update_rf_payload_format_esb;
 1003972:	6013      	str	r3, [r2, #0]
	switch (esb_cfg.crc) {
 1003974:	7a61      	ldrb	r1, [r4, #9]
 1003976:	4b6e      	ldr	r3, [pc, #440]	; (1003b30 <esb_init+0x21c>)
 1003978:	2901      	cmp	r1, #1
 100397a:	f000 80c3 	beq.w	1003b04 <esb_init+0x1f0>
 100397e:	2902      	cmp	r1, #2
 1003980:	f000 80b8 	beq.w	1003af4 <esb_init+0x1e0>
 1003984:	b949      	cbnz	r1, 100399a <esb_init+0x86>
	NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
 1003986:	f64f 71ff 	movw	r1, #65535	; 0xffff
 100398a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
	NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
 100398e:	496b      	ldr	r1, [pc, #428]	; (1003b3c <esb_init+0x228>)
 1003990:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
	NRF_RADIO->CRCCNF = ESB_CRC_16BIT << RADIO_CRCCNF_LEN_Pos;
 1003994:	2102      	movs	r1, #2
 1003996:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
	update_rf_payload_format(esb_cfg.payload_length);
 100399a:	6813      	ldr	r3, [r2, #0]
 100399c:	7c60      	ldrb	r0, [r4, #17]
 100399e:	4798      	blx	r3
	NRF_RADIO->BASE0 = 0xE7E7E7E7;
 10039a0:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
 10039a4:	4b62      	ldr	r3, [pc, #392]	; (1003b30 <esb_init+0x21c>)
 10039a6:	4866      	ldr	r0, [pc, #408]	; (1003b40 <esb_init+0x22c>)
 10039a8:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
	NRF_RADIO->BASE1 = 0x43434343;
 10039ac:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
 10039b0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_RADIO->PREFIX0 = 0x23C343E7;
 10039b4:	4a63      	ldr	r2, [pc, #396]	; (1003b44 <esb_init+0x230>)
 10039b6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_RADIO->PREFIX1 = 0x13E363A3;
 10039ba:	4a63      	ldr	r2, [pc, #396]	; (1003b48 <esb_init+0x234>)
 10039bc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	reset_fifos();
 10039c0:	f7ff fb74 	bl	10030ac <reset_fifos>
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
 10039c4:	4a61      	ldr	r2, [pc, #388]	; (1003b4c <esb_init+0x238>)
 10039c6:	2300      	movs	r3, #0
	reset_fifos();
 10039c8:	4611      	mov	r1, r2
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
 10039ca:	3301      	adds	r3, #1
 10039cc:	2b08      	cmp	r3, #8
		tx_fifo.payload[i] = &tx_payload[i];
 10039ce:	f840 1b04 	str.w	r1, [r0], #4
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
 10039d2:	f101 0125 	add.w	r1, r1, #37	; 0x25
 10039d6:	d1f8      	bne.n	10039ca <esb_init+0xb6>
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
 10039d8:	2300      	movs	r3, #0
 10039da:	495d      	ldr	r1, [pc, #372]	; (1003b50 <esb_init+0x23c>)
 10039dc:	485d      	ldr	r0, [pc, #372]	; (1003b54 <esb_init+0x240>)
 10039de:	3301      	adds	r3, #1
 10039e0:	2b08      	cmp	r3, #8
		rx_fifo.payload[i] = &rx_payload[i];
 10039e2:	f840 1b04 	str.w	r1, [r0], #4
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
 10039e6:	f101 0125 	add.w	r1, r1, #37	; 0x25
 10039ea:	d1f8      	bne.n	10039de <esb_init+0xca>
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
 10039ec:	2600      	movs	r6, #0
		ack_pl_wrap[i].in_use = false;
 10039ee:	4634      	mov	r4, r6
 10039f0:	4b59      	ldr	r3, [pc, #356]	; (1003b58 <esb_init+0x244>)
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
 10039f2:	3601      	adds	r6, #1
 10039f4:	2e08      	cmp	r6, #8
		ack_pl_wrap[i].p_payload = &tx_payload[i];
 10039f6:	601a      	str	r2, [r3, #0]
		ack_pl_wrap[i].in_use = false;
 10039f8:	711c      	strb	r4, [r3, #4]
		ack_pl_wrap[i].p_next = 0;
 10039fa:	609c      	str	r4, [r3, #8]
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
 10039fc:	f102 0225 	add.w	r2, r2, #37	; 0x25
 1003a00:	f103 030c 	add.w	r3, r3, #12
 1003a04:	d1f5      	bne.n	10039f2 <esb_init+0xde>
		ack_pl_wrap_pipe[i] = 0;
 1003a06:	4b55      	ldr	r3, [pc, #340]	; (1003b5c <esb_init+0x248>)
	ESB_SYS_TIMER->PRESCALER = 4;
 1003a08:	4f55      	ldr	r7, [pc, #340]	; (1003b60 <esb_init+0x24c>)
		ack_pl_wrap_pipe[i] = 0;
 1003a0a:	e9c3 4400 	strd	r4, r4, [r3]
 1003a0e:	e9c3 4402 	strd	r4, r4, [r3, #8]
 1003a12:	e9c3 4404 	strd	r4, r4, [r3, #16]
 1003a16:	e9c3 4406 	strd	r4, r4, [r3, #24]
	ESB_SYS_TIMER->PRESCALER = 4;
 1003a1a:	2304      	movs	r3, #4
 1003a1c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
 1003a20:	f04f 1302 	mov.w	r3, #131074	; 0x20002
	nrfx_dppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
 1003a24:	f8df b13c 	ldr.w	fp, [pc, #316]	; 1003b64 <esb_init+0x250>
	nrfx_dppi_channel_alloc(&ppi_ch_radio_address_timer_stop);
 1003a28:	f8df a13c 	ldr.w	sl, [pc, #316]	; 1003b68 <esb_init+0x254>
	ESB_SYS_TIMER->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
 1003a2c:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
	nrfx_dppi_channel_alloc(&ppi_ch_timer_compare0_radio_disable);
 1003a30:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1003b6c <esb_init+0x258>
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
 1003a34:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	nrfx_dppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
 1003a38:	4658      	mov	r0, fp
 1003a3a:	f000 fc25 	bl	1004288 <nrfx_dppi_channel_alloc>
	nrfx_dppi_channel_alloc(&ppi_ch_timer_compare1_radio_txen);
 1003a3e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1003b70 <esb_init+0x25c>
	nrfx_dppi_channel_alloc(&ppi_ch_radio_address_timer_stop);
 1003a42:	4650      	mov	r0, sl
 1003a44:	f000 fc20 	bl	1004288 <nrfx_dppi_channel_alloc>
	nrfx_dppi_channel_alloc(&ppi_ch_timer_compare0_radio_disable);
 1003a48:	4648      	mov	r0, r9
 1003a4a:	f000 fc1d 	bl	1004288 <nrfx_dppi_channel_alloc>
	nrfx_dppi_channel_alloc(&ppi_ch_timer_compare1_radio_txen);
 1003a4e:	4640      	mov	r0, r8
 1003a50:	f000 fc1a 	bl	1004288 <nrfx_dppi_channel_alloc>
	NRF_RADIO->PUBLISH_READY          = DPPIC_SUBSCRIBE_CHG_EN_EN_Msk | ppi_ch_radio_ready_timer_start;
 1003a54:	f89b 3000 	ldrb.w	r3, [fp]
 1003a58:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 1003b30 <esb_init+0x21c>
 1003a5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 1003a60:	f8cc 2180 	str.w	r2, [ip, #384]	; 0x180
	ESB_SYS_TIMER->SUBSCRIBE_START    = DPPIC_SUBSCRIBE_CHG_EN_EN_Msk | ppi_ch_radio_ready_timer_start;
 1003a64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
	NRF_RADIO->PUBLISH_ADDRESS        = DPPIC_SUBSCRIBE_CHG_EN_EN_Msk | ppi_ch_radio_address_timer_stop;
 1003a68:	f89a 0000 	ldrb.w	r0, [sl]
 1003a6c:	f040 4200 	orr.w	r2, r0, #2147483648	; 0x80000000
 1003a70:	f8cc 2184 	str.w	r2, [ip, #388]	; 0x184
	ESB_SYS_TIMER->SUBSCRIBE_SHUTDOWN = DPPIC_SUBSCRIBE_CHG_EN_EN_Msk | ppi_ch_radio_address_timer_stop;
 1003a74:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
	ESB_SYS_TIMER->PUBLISH_COMPARE[0] = DPPIC_SUBSCRIBE_CHG_EN_EN_Msk | ppi_ch_timer_compare0_radio_disable;
 1003a78:	f899 1000 	ldrb.w	r1, [r9]
 1003a7c:	f041 4200 	orr.w	r2, r1, #2147483648	; 0x80000000
 1003a80:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
	NRF_RADIO->SUBSCRIBE_DISABLE      = DPPIC_SUBSCRIBE_CHG_EN_EN_Msk | ppi_ch_timer_compare0_radio_disable;
 1003a84:	f8cc 2090 	str.w	r2, [ip, #144]	; 0x90
	ESB_SYS_TIMER->PUBLISH_COMPARE[1] = DPPIC_SUBSCRIBE_CHG_EN_EN_Msk | ppi_ch_timer_compare1_radio_txen;
 1003a88:	f898 2000 	ldrb.w	r2, [r8]
 1003a8c:	f042 4e00 	orr.w	lr, r2, #2147483648	; 0x80000000
 1003a90:	f8c7 e1c4 	str.w	lr, [r7, #452]	; 0x1c4
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
 1003a94:	2701      	movs	r7, #1
 1003a96:	fa07 f000 	lsl.w	r0, r7, r0
 1003a9a:	fa07 f303 	lsl.w	r3, r7, r3
 1003a9e:	4303      	orrs	r3, r0
							(1 << ppi_ch_timer_compare0_radio_disable) | (1 << ppi_ch_timer_compare1_radio_txen);
 1003aa0:	fa07 f101 	lsl.w	r1, r7, r1
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
 1003aa4:	430b      	orrs	r3, r1
							(1 << ppi_ch_timer_compare0_radio_disable) | (1 << ppi_ch_timer_compare1_radio_txen);
 1003aa6:	fa07 f202 	lsl.w	r2, r7, r2
 1003aaa:	4313      	orrs	r3, r2
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
 1003aac:	4a31      	ldr	r2, [pc, #196]	; (1003b74 <esb_init+0x260>)
	NRF_RADIO->SUBSCRIBE_TXEN         = DPPIC_SUBSCRIBE_CHG_EN_EN_Msk | ppi_ch_timer_compare1_radio_txen;
 1003aae:	f8cc e080 	str.w	lr, [ip, #128]	; 0x80
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
 1003ab2:	4639      	mov	r1, r7
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
 1003ab4:	6013      	str	r3, [r2, #0]
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
 1003ab6:	4630      	mov	r0, r6
 1003ab8:	2200      	movs	r2, #0
 1003aba:	f7fd fcef 	bl	100149c <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_EVT_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
 1003abe:	2200      	movs	r2, #0
 1003ac0:	2102      	movs	r1, #2
 1003ac2:	2014      	movs	r0, #20
 1003ac4:	f7fd fcea 	bl	100149c <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_SYS_TIMER_IRQn, CONFIG_ESB_EVENT_IRQ_PRIORITY,
 1003ac8:	2200      	movs	r2, #0
 1003aca:	2102      	movs	r1, #2
 1003acc:	2019      	movs	r0, #25
 1003ace:	f7fd fce5 	bl	100149c <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
 1003ad2:	4630      	mov	r0, r6
 1003ad4:	f7fd fcb0 	bl	1001438 <arch_irq_enable>
	irq_enable(ESB_EVT_IRQ);
 1003ad8:	2014      	movs	r0, #20
 1003ada:	f7fd fcad 	bl	1001438 <arch_irq_enable>
	irq_enable(ESB_SYS_TIMER_IRQn);
 1003ade:	2019      	movs	r0, #25
 1003ae0:	f7fd fcaa 	bl	1001438 <arch_irq_enable>
	return 0;
 1003ae4:	2000      	movs	r0, #0
	esb_state = ESB_STATE_IDLE;
 1003ae6:	4b24      	ldr	r3, [pc, #144]	; (1003b78 <esb_init+0x264>)
	esb_initialized = true;
 1003ae8:	702f      	strb	r7, [r5, #0]
	esb_state = ESB_STATE_IDLE;
 1003aea:	701c      	strb	r4, [r3, #0]
}
 1003aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		update_rf_payload_format = update_rf_payload_format_esb;
 1003af0:	4b22      	ldr	r3, [pc, #136]	; (1003b7c <esb_init+0x268>)
 1003af2:	e73e      	b.n	1003972 <esb_init+0x5e>
		NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
 1003af4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 1003af8:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
 1003afc:	490f      	ldr	r1, [pc, #60]	; (1003b3c <esb_init+0x228>)
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
 1003afe:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
		break;
 1003b02:	e740      	b.n	1003986 <esb_init+0x72>
		NRF_RADIO->CRCINIT = 0xFFUL;  /* Initial value */
 1003b04:	21ff      	movs	r1, #255	; 0xff
 1003b06:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
 1003b0a:	f240 1107 	movw	r1, #263	; 0x107
 1003b0e:	e7f6      	b.n	1003afe <esb_init+0x1ea>
		return -EINVAL;
 1003b10:	f06f 0015 	mvn.w	r0, #21
 1003b14:	e7ea      	b.n	1003aec <esb_init+0x1d8>
 1003b16:	bf00      	nop
 1003b18:	2100046a 	.word	0x2100046a
 1003b1c:	21000364 	.word	0x21000364
 1003b20:	21000350 	.word	0x21000350
 1003b24:	21000368 	.word	0x21000368
 1003b28:	21000424 	.word	0x21000424
 1003b2c:	2100046c 	.word	0x2100046c
 1003b30:	41008000 	.word	0x41008000
 1003b34:	210003d4 	.word	0x210003d4
 1003b38:	01003019 	.word	0x01003019
 1003b3c:	00011021 	.word	0x00011021
 1003b40:	210003a8 	.word	0x210003a8
 1003b44:	23c343e7 	.word	0x23c343e7
 1003b48:	13e363a3 	.word	0x13e363a3
 1003b4c:	210005c2 	.word	0x210005c2
 1003b50:	21000478 	.word	0x21000478
 1003b54:	2100037c 	.word	0x2100037c
 1003b58:	210002cc 	.word	0x210002cc
 1003b5c:	2100032c 	.word	0x2100032c
 1003b60:	41019000 	.word	0x41019000
 1003b64:	21000475 	.word	0x21000475
 1003b68:	21000474 	.word	0x21000474
 1003b6c:	21000476 	.word	0x21000476
 1003b70:	21000477 	.word	0x21000477
 1003b74:	21000374 	.word	0x21000374
 1003b78:	2100046b 	.word	0x2100046b
 1003b7c:	01003045 	.word	0x01003045

01003b80 <esb_write_payload>:
	return 0;
}

int esb_write_payload(const struct esb_payload *payload)
{
	if (!esb_initialized) {
 1003b80:	4b48      	ldr	r3, [pc, #288]	; (1003ca4 <esb_write_payload+0x124>)
{
 1003b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!esb_initialized) {
 1003b86:	781b      	ldrb	r3, [r3, #0]
{
 1003b88:	4604      	mov	r4, r0
	if (!esb_initialized) {
 1003b8a:	2b00      	cmp	r3, #0
 1003b8c:	d07c      	beq.n	1003c88 <esb_write_payload+0x108>
		return -EACCES;
	}
	if (payload == NULL) {
 1003b8e:	2800      	cmp	r0, #0
 1003b90:	f000 8084 	beq.w	1003c9c <esb_write_payload+0x11c>
		return -EINVAL;
	}
	if (payload->length == 0 ||
 1003b94:	7803      	ldrb	r3, [r0, #0]
 1003b96:	1e5a      	subs	r2, r3, #1
 1003b98:	2a1f      	cmp	r2, #31
 1003b9a:	d879      	bhi.n	1003c90 <esb_write_payload+0x110>
	    payload->length > CONFIG_ESB_MAX_PAYLOAD_LENGTH ||
	    (esb_cfg.protocol == ESB_PROTOCOL_ESB &&
 1003b9c:	4f42      	ldr	r7, [pc, #264]	; (1003ca8 <esb_write_payload+0x128>)
	    payload->length > CONFIG_ESB_MAX_PAYLOAD_LENGTH ||
 1003b9e:	783a      	ldrb	r2, [r7, #0]
 1003ba0:	b912      	cbnz	r2, 1003ba8 <esb_write_payload+0x28>
	    (esb_cfg.protocol == ESB_PROTOCOL_ESB &&
 1003ba2:	7c7a      	ldrb	r2, [r7, #17]
 1003ba4:	429a      	cmp	r2, r3
 1003ba6:	d373      	bcc.n	1003c90 <esb_write_payload+0x110>
	     payload->length > esb_cfg.payload_length)) {
		return -EMSGSIZE;
	}
	if (tx_fifo.count >= CONFIG_ESB_TX_FIFO_SIZE) {
 1003ba8:	4d40      	ldr	r5, [pc, #256]	; (1003cac <esb_write_payload+0x12c>)
 1003baa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 1003bac:	2b07      	cmp	r3, #7
 1003bae:	d872      	bhi.n	1003c96 <esb_write_payload+0x116>
		return -ENOMEM;
	}
	if (payload->pipe >= CONFIG_ESB_PIPE_COUNT) {
 1003bb0:	7863      	ldrb	r3, [r4, #1]
 1003bb2:	2b07      	cmp	r3, #7
 1003bb4:	d872      	bhi.n	1003c9c <esb_write_payload+0x11c>
	__asm__ volatile(
 1003bb6:	f04f 0320 	mov.w	r3, #32
 1003bba:	f3ef 8811 	mrs	r8, BASEPRI
 1003bbe:	f383 8812 	msr	BASEPRI_MAX, r3
 1003bc2:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	uint32_t key = irq_lock();

	if (esb_cfg.mode == ESB_MODE_PTX) {
 1003bc6:	787e      	ldrb	r6, [r7, #1]
 1003bc8:	b9e6      	cbnz	r6, 1003c04 <esb_write_payload+0x84>
		memcpy(tx_fifo.payload[tx_fifo.back], payload,
 1003bca:	6a2b      	ldr	r3, [r5, #32]
 1003bcc:	2225      	movs	r2, #37	; 0x25
 1003bce:	4621      	mov	r1, r4
 1003bd0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 1003bd4:	f002 fc9e 	bl	1006514 <memcpy>
			sizeof(struct esb_payload));

		pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
 1003bd8:	7861      	ldrb	r1, [r4, #1]
 1003bda:	4a35      	ldr	r2, [pc, #212]	; (1003cb0 <esb_write_payload+0x130>)
 1003bdc:	5c53      	ldrb	r3, [r2, r1]
 1003bde:	3301      	adds	r3, #1
 1003be0:	f003 0303 	and.w	r3, r3, #3
 1003be4:	5453      	strb	r3, [r2, r1]
		tx_fifo.payload[tx_fifo.back]->pid = pids[payload->pipe];
 1003be6:	7861      	ldrb	r1, [r4, #1]
 1003be8:	6a2b      	ldr	r3, [r5, #32]
 1003bea:	5c51      	ldrb	r1, [r2, r1]
 1003bec:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]

		if (++tx_fifo.back >= CONFIG_ESB_TX_FIFO_SIZE) {
 1003bf0:	3301      	adds	r3, #1
 1003bf2:	2b07      	cmp	r3, #7
 1003bf4:	bf98      	it	ls
 1003bf6:	461e      	movls	r6, r3
		tx_fifo.payload[tx_fifo.back]->pid = pids[payload->pipe];
 1003bf8:	7111      	strb	r1, [r2, #4]
		if (++tx_fifo.back >= CONFIG_ESB_TX_FIFO_SIZE) {
 1003bfa:	622e      	str	r6, [r5, #32]
				while (pl->p_next != 0) {
					pl = (struct payload_wrap *)pl->p_next;
				}
				pl->p_next = (struct payload_wrap *)new_ack_payload;
			}
			tx_fifo.count++;
 1003bfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 1003bfe:	3301      	adds	r3, #1
 1003c00:	62ab      	str	r3, [r5, #40]	; 0x28
 1003c02:	e02b      	b.n	1003c5c <esb_write_payload+0xdc>
 1003c04:	4a2b      	ldr	r2, [pc, #172]	; (1003cb4 <esb_write_payload+0x134>)
	for (int i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
 1003c06:	2300      	movs	r3, #0
 1003c08:	4692      	mov	sl, r2
		if (!ack_pl_wrap[i].in_use)
 1003c0a:	7911      	ldrb	r1, [r2, #4]
 1003c0c:	bb09      	cbnz	r1, 1003c52 <esb_write_payload+0xd2>
			return &ack_pl_wrap[i];
 1003c0e:	260c      	movs	r6, #12
 1003c10:	435e      	muls	r6, r3
			new_ack_payload->in_use = true;
 1003c12:	2301      	movs	r3, #1
			return &ack_pl_wrap[i];
 1003c14:	eb0a 0906 	add.w	r9, sl, r6
			memcpy(new_ack_payload->p_payload, payload, sizeof(struct esb_payload));
 1003c18:	2225      	movs	r2, #37	; 0x25
			new_ack_payload->in_use = true;
 1003c1a:	f889 3004 	strb.w	r3, [r9, #4]
			new_ack_payload->p_next = 0;
 1003c1e:	f8c9 1008 	str.w	r1, [r9, #8]
			memcpy(new_ack_payload->p_payload, payload, sizeof(struct esb_payload));
 1003c22:	f85a 0006 	ldr.w	r0, [sl, r6]
 1003c26:	4621      	mov	r1, r4
 1003c28:	f002 fc74 	bl	1006514 <memcpy>
			pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
 1003c2c:	7862      	ldrb	r2, [r4, #1]
 1003c2e:	4920      	ldr	r1, [pc, #128]	; (1003cb0 <esb_write_payload+0x130>)
 1003c30:	5c8b      	ldrb	r3, [r1, r2]
 1003c32:	3301      	adds	r3, #1
 1003c34:	f003 0303 	and.w	r3, r3, #3
 1003c38:	548b      	strb	r3, [r1, r2]
			new_ack_payload->p_payload->pid = pids[payload->pipe];
 1003c3a:	7862      	ldrb	r2, [r4, #1]
 1003c3c:	f85a 3006 	ldr.w	r3, [sl, r6]
 1003c40:	5c89      	ldrb	r1, [r1, r2]
 1003c42:	7119      	strb	r1, [r3, #4]
			if (ack_pl_wrap_pipe[payload->pipe] == 0) {
 1003c44:	491c      	ldr	r1, [pc, #112]	; (1003cb8 <esb_write_payload+0x138>)
 1003c46:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 1003c4a:	b9b3      	cbnz	r3, 1003c7a <esb_write_payload+0xfa>
				ack_pl_wrap_pipe[payload->pipe] = new_ack_payload;
 1003c4c:	f841 9022 	str.w	r9, [r1, r2, lsl #2]
 1003c50:	e7d4      	b.n	1003bfc <esb_write_payload+0x7c>
	for (int i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
 1003c52:	3301      	adds	r3, #1
 1003c54:	2b08      	cmp	r3, #8
 1003c56:	f102 020c 	add.w	r2, r2, #12
 1003c5a:	d1d6      	bne.n	1003c0a <esb_write_payload+0x8a>
	__asm__ volatile(
 1003c5c:	f388 8811 	msr	BASEPRI, r8
 1003c60:	f3bf 8f6f 	isb	sy
		}
	}

	irq_unlock(key);

	if (esb_cfg.mode == ESB_MODE_PTX &&
 1003c64:	7878      	ldrb	r0, [r7, #1]
 1003c66:	7c3b      	ldrb	r3, [r7, #16]
 1003c68:	4318      	orrs	r0, r3
 1003c6a:	d104      	bne.n	1003c76 <esb_write_payload+0xf6>
	    esb_cfg.tx_mode == ESB_TXMODE_AUTO &&
	    esb_state == ESB_STATE_IDLE) {
 1003c6c:	4b13      	ldr	r3, [pc, #76]	; (1003cbc <esb_write_payload+0x13c>)
 1003c6e:	781b      	ldrb	r3, [r3, #0]
	    esb_cfg.tx_mode == ESB_TXMODE_AUTO &&
 1003c70:	b963      	cbnz	r3, 1003c8c <esb_write_payload+0x10c>
		start_tx_transaction();
 1003c72:	f7ff fb3d 	bl	10032f0 <start_tx_transaction>
	}

	return 0;
 1003c76:	2000      	movs	r0, #0
 1003c78:	e008      	b.n	1003c8c <esb_write_payload+0x10c>
				while (pl->p_next != 0) {
 1003c7a:	461a      	mov	r2, r3
 1003c7c:	689b      	ldr	r3, [r3, #8]
 1003c7e:	2b00      	cmp	r3, #0
 1003c80:	d1fb      	bne.n	1003c7a <esb_write_payload+0xfa>
				pl->p_next = (struct payload_wrap *)new_ack_payload;
 1003c82:	f8c2 9008 	str.w	r9, [r2, #8]
 1003c86:	e7b9      	b.n	1003bfc <esb_write_payload+0x7c>
		return -EACCES;
 1003c88:	f06f 000c 	mvn.w	r0, #12
}
 1003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EMSGSIZE;
 1003c90:	f06f 0079 	mvn.w	r0, #121	; 0x79
 1003c94:	e7fa      	b.n	1003c8c <esb_write_payload+0x10c>
		return -ENOMEM;
 1003c96:	f06f 000b 	mvn.w	r0, #11
 1003c9a:	e7f7      	b.n	1003c8c <esb_write_payload+0x10c>
		return -EINVAL;
 1003c9c:	f06f 0015 	mvn.w	r0, #21
 1003ca0:	e7f4      	b.n	1003c8c <esb_write_payload+0x10c>
 1003ca2:	bf00      	nop
 1003ca4:	2100046a 	.word	0x2100046a
 1003ca8:	21000350 	.word	0x21000350
 1003cac:	210003a8 	.word	0x210003a8
 1003cb0:	2100046c 	.word	0x2100046c
 1003cb4:	210002cc 	.word	0x210002cc
 1003cb8:	2100032c 	.word	0x2100032c
 1003cbc:	2100046b 	.word	0x2100046b

01003cc0 <esb_read_rx_payload>:

int esb_read_rx_payload(struct esb_payload *payload)
{
 1003cc0:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
 1003cc2:	4b22      	ldr	r3, [pc, #136]	; (1003d4c <esb_read_rx_payload+0x8c>)
 1003cc4:	781b      	ldrb	r3, [r3, #0]
 1003cc6:	2b00      	cmp	r3, #0
 1003cc8:	d036      	beq.n	1003d38 <esb_read_rx_payload+0x78>
		return -EACCES;
	}
	if (payload == NULL) {
 1003cca:	2800      	cmp	r0, #0
 1003ccc:	d037      	beq.n	1003d3e <esb_read_rx_payload+0x7e>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
 1003cce:	4c20      	ldr	r4, [pc, #128]	; (1003d50 <esb_read_rx_payload+0x90>)
 1003cd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1003cd2:	2b00      	cmp	r3, #0
 1003cd4:	d036      	beq.n	1003d44 <esb_read_rx_payload+0x84>
	__asm__ volatile(
 1003cd6:	f04f 0320 	mov.w	r3, #32
 1003cda:	f3ef 8511 	mrs	r5, BASEPRI
 1003cde:	f383 8812 	msr	BASEPRI_MAX, r3
 1003ce2:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	uint32_t key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
 1003ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
 1003ce8:	3005      	adds	r0, #5
	payload->length = rx_fifo.payload[rx_fifo.front]->length;
 1003cea:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 1003cee:	780a      	ldrb	r2, [r1, #0]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
 1003cf0:	3105      	adds	r1, #5
	payload->length = rx_fifo.payload[rx_fifo.front]->length;
 1003cf2:	f800 2c05 	strb.w	r2, [r0, #-5]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
 1003cf6:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 1003cfa:	f800 3c04 	strb.w	r3, [r0, #-4]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
 1003cfe:	f911 3c03 	ldrsb.w	r3, [r1, #-3]
 1003d02:	f800 3c03 	strb.w	r3, [r0, #-3]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
 1003d06:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 1003d0a:	f800 3c01 	strb.w	r3, [r0, #-1]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
 1003d0e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 1003d12:	f800 3c02 	strb.w	r3, [r0, #-2]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
 1003d16:	f002 fbfd 	bl	1006514 <memcpy>
	       payload->length);

	if (++rx_fifo.front >= CONFIG_ESB_RX_FIFO_SIZE) {
 1003d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1003d1c:	3301      	adds	r3, #1
 1003d1e:	2b07      	cmp	r3, #7
		rx_fifo.front = 0;
 1003d20:	bf88      	it	hi
 1003d22:	2300      	movhi	r3, #0
 1003d24:	6263      	str	r3, [r4, #36]	; 0x24
	}

	rx_fifo.count--;
 1003d26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1003d28:	3b01      	subs	r3, #1
 1003d2a:	62a3      	str	r3, [r4, #40]	; 0x28
	__asm__ volatile(
 1003d2c:	f385 8811 	msr	BASEPRI, r5
 1003d30:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
 1003d34:	2000      	movs	r0, #0
}
 1003d36:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
 1003d38:	f06f 000c 	mvn.w	r0, #12
 1003d3c:	e7fb      	b.n	1003d36 <esb_read_rx_payload+0x76>
		return -EINVAL;
 1003d3e:	f06f 0015 	mvn.w	r0, #21
 1003d42:	e7f8      	b.n	1003d36 <esb_read_rx_payload+0x76>
		return -ENODATA;
 1003d44:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 1003d48:	e7f5      	b.n	1003d36 <esb_read_rx_payload+0x76>
 1003d4a:	bf00      	nop
 1003d4c:	2100046a 	.word	0x2100046a
 1003d50:	2100037c 	.word	0x2100037c

01003d54 <esb_start_rx>:

	return 0;
}

int esb_start_rx(void)
{
 1003d54:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
 1003d56:	4b1b      	ldr	r3, [pc, #108]	; (1003dc4 <esb_start_rx+0x70>)
 1003d58:	781a      	ldrb	r2, [r3, #0]
 1003d5a:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 1003d5e:	bb72      	cbnz	r2, 1003dbe <esb_start_rx+0x6a>
		return -EBUSY;
	}

	NRF_RADIO->INTENCLR = 0xFFFFFFFF;
 1003d60:	f04f 32ff 	mov.w	r2, #4294967295
 1003d64:	4c18      	ldr	r4, [pc, #96]	; (1003dc8 <esb_start_rx+0x74>)
	NRF_RADIO->EVENTS_DISABLED = 0;
	on_radio_disabled = on_radio_disabled_rx;
 1003d66:	4919      	ldr	r1, [pc, #100]	; (1003dcc <esb_start_rx+0x78>)
	NRF_RADIO->INTENCLR = 0xFFFFFFFF;
 1003d68:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	on_radio_disabled = on_radio_disabled_rx;
 1003d6c:	4a18      	ldr	r2, [pc, #96]	; (1003dd0 <esb_start_rx+0x7c>)
	NRF_RADIO->EVENTS_DISABLED = 0;
 1003d6e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
	on_radio_disabled = on_radio_disabled_rx;
 1003d72:	6011      	str	r1, [r2, #0]

	NRF_RADIO->SHORTS = radio_shorts_common |
 1003d74:	f240 1217 	movw	r2, #279	; 0x117
 1003d78:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
	NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
 1003d7c:	2210      	movs	r2, #16
 1003d7e:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
	esb_state = ESB_STATE_PRX;
 1003d82:	2204      	movs	r2, #4
 1003d84:	701a      	strb	r2, [r3, #0]

	NRF_RADIO->RXADDRESSES = esb_addr.rx_pipes_enabled;
 1003d86:	4b13      	ldr	r3, [pc, #76]	; (1003dd4 <esb_start_rx+0x80>)
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
 1003d88:	2008      	movs	r0, #8
	NRF_RADIO->RXADDRESSES = esb_addr.rx_pipes_enabled;
 1003d8a:	7c9a      	ldrb	r2, [r3, #18]
 1003d8c:	f8c4 2530 	str.w	r2, [r4, #1328]	; 0x530
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1003d90:	f44f 7280 	mov.w	r2, #256	; 0x100
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
 1003d94:	7cdb      	ldrb	r3, [r3, #19]
 1003d96:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
 1003d9a:	4b0f      	ldr	r3, [pc, #60]	; (1003dd8 <esb_start_rx+0x84>)
 1003d9c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
 1003da0:	4b0e      	ldr	r3, [pc, #56]	; (1003ddc <esb_start_rx+0x88>)
 1003da2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
 1003da6:	f7fd fb47 	bl	1001438 <arch_irq_enable>

	NRF_RADIO->EVENTS_ADDRESS = 0;
	NRF_RADIO->EVENTS_PAYLOAD = 0;
	NRF_RADIO->EVENTS_DISABLED = 0;

	NRF_RADIO->TASKS_RXEN = 1;
 1003daa:	2301      	movs	r3, #1

	return 0;
 1003dac:	4628      	mov	r0, r5
	NRF_RADIO->EVENTS_ADDRESS = 0;
 1003dae:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
 1003db2:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NRF_RADIO->EVENTS_DISABLED = 0;
 1003db6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_RXEN = 1;
 1003dba:	6063      	str	r3, [r4, #4]
}
 1003dbc:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
 1003dbe:	f06f 000f 	mvn.w	r0, #15
 1003dc2:	e7fb      	b.n	1003dbc <esb_start_rx+0x68>
 1003dc4:	2100046b 	.word	0x2100046b
 1003dc8:	41008000 	.word	0x41008000
 1003dcc:	010036c9 	.word	0x010036c9
 1003dd0:	21000370 	.word	0x21000370
 1003dd4:	2100001c 	.word	0x2100001c
 1003dd8:	210005a0 	.word	0x210005a0
 1003ddc:	e000e100 	.word	0xe000e100

01003de0 <esb_set_base_address_0>:

	return 0;
}

int esb_set_base_address_0(const uint8_t *addr)
{
 1003de0:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
 1003de2:	4b0d      	ldr	r3, [pc, #52]	; (1003e18 <esb_set_base_address_0+0x38>)
{
 1003de4:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
 1003de6:	781b      	ldrb	r3, [r3, #0]
 1003de8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 1003dec:	b96b      	cbnz	r3, 1003e0a <esb_set_base_address_0+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
 1003dee:	b178      	cbz	r0, 1003e10 <esb_set_base_address_0+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
 1003df0:	2204      	movs	r2, #4
 1003df2:	480a      	ldr	r0, [pc, #40]	; (1003e1c <esb_set_base_address_0+0x3c>)
 1003df4:	f002 fb8e 	bl	1006514 <memcpy>
	return __REV(bytewise_bit_swap(addr));
 1003df8:	4808      	ldr	r0, [pc, #32]	; (1003e1c <esb_set_base_address_0+0x3c>)
 1003dfa:	f002 fd02 	bl	1006802 <bytewise_bit_swap>
		NRF_RADIO->BASE0 = addr_conv(esb_addr.base_addr_p0);
 1003dfe:	4b08      	ldr	r3, [pc, #32]	; (1003e20 <esb_set_base_address_0+0x40>)
  return __builtin_bswap32(value);
 1003e00:	ba00      	rev	r0, r0
 1003e02:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);

	return 0;
 1003e06:	4620      	mov	r0, r4
}
 1003e08:	bd10      	pop	{r4, pc}
		return -EBUSY;
 1003e0a:	f06f 000f 	mvn.w	r0, #15
 1003e0e:	e7fb      	b.n	1003e08 <esb_set_base_address_0+0x28>
		return -EINVAL;
 1003e10:	f06f 0015 	mvn.w	r0, #21
 1003e14:	e7f8      	b.n	1003e08 <esb_set_base_address_0+0x28>
 1003e16:	bf00      	nop
 1003e18:	2100046b 	.word	0x2100046b
 1003e1c:	2100001c 	.word	0x2100001c
 1003e20:	41008000 	.word	0x41008000

01003e24 <esb_set_base_address_1>:

int esb_set_base_address_1(const uint8_t *addr)
{
 1003e24:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
 1003e26:	4b0d      	ldr	r3, [pc, #52]	; (1003e5c <esb_set_base_address_1+0x38>)
{
 1003e28:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
 1003e2a:	781b      	ldrb	r3, [r3, #0]
 1003e2c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 1003e30:	b96b      	cbnz	r3, 1003e4e <esb_set_base_address_1+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
 1003e32:	b178      	cbz	r0, 1003e54 <esb_set_base_address_1+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
 1003e34:	2204      	movs	r2, #4
 1003e36:	480a      	ldr	r0, [pc, #40]	; (1003e60 <esb_set_base_address_1+0x3c>)
 1003e38:	f002 fb6c 	bl	1006514 <memcpy>
	return __REV(bytewise_bit_swap(addr));
 1003e3c:	4808      	ldr	r0, [pc, #32]	; (1003e60 <esb_set_base_address_1+0x3c>)
 1003e3e:	f002 fce0 	bl	1006802 <bytewise_bit_swap>
		NRF_RADIO->BASE1 = addr_conv(esb_addr.base_addr_p1);
 1003e42:	4b08      	ldr	r3, [pc, #32]	; (1003e64 <esb_set_base_address_1+0x40>)
 1003e44:	ba00      	rev	r0, r0
 1003e46:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);

	return 0;
 1003e4a:	4620      	mov	r0, r4
}
 1003e4c:	bd10      	pop	{r4, pc}
		return -EBUSY;
 1003e4e:	f06f 000f 	mvn.w	r0, #15
 1003e52:	e7fb      	b.n	1003e4c <esb_set_base_address_1+0x28>
		return -EINVAL;
 1003e54:	f06f 0015 	mvn.w	r0, #21
 1003e58:	e7f8      	b.n	1003e4c <esb_set_base_address_1+0x28>
 1003e5a:	bf00      	nop
 1003e5c:	2100046b 	.word	0x2100046b
 1003e60:	21000020 	.word	0x21000020
 1003e64:	41008000 	.word	0x41008000

01003e68 <esb_set_prefixes>:

int esb_set_prefixes(const uint8_t *prefixes, uint8_t num_pipes)
{
 1003e68:	b570      	push	{r4, r5, r6, lr}
	if (esb_state != ESB_STATE_IDLE) {
 1003e6a:	4b10      	ldr	r3, [pc, #64]	; (1003eac <esb_set_prefixes+0x44>)
{
 1003e6c:	460c      	mov	r4, r1
	if (esb_state != ESB_STATE_IDLE) {
 1003e6e:	781b      	ldrb	r3, [r3, #0]
 1003e70:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 1003e74:	b9a3      	cbnz	r3, 1003ea0 <esb_set_prefixes+0x38>
		return -EBUSY;
	}
	if (prefixes == NULL) {
 1003e76:	b1b0      	cbz	r0, 1003ea6 <esb_set_prefixes+0x3e>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_ESB_PIPE_COUNT)) {
 1003e78:	2908      	cmp	r1, #8
 1003e7a:	d814      	bhi.n	1003ea6 <esb_set_prefixes+0x3e>
		return -EINVAL;
	}

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
 1003e7c:	4e0c      	ldr	r6, [pc, #48]	; (1003eb0 <esb_set_prefixes+0x48>)
 1003e7e:	460a      	mov	r2, r1
 1003e80:	4601      	mov	r1, r0
 1003e82:	f106 0008 	add.w	r0, r6, #8
 1003e86:	f002 fb45 	bl	1006514 <memcpy>
	esb_addr.num_pipes = num_pipes;
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
 1003e8a:	22ff      	movs	r2, #255	; 0xff
	esb_addr.num_pipes = num_pipes;
 1003e8c:	7434      	strb	r4, [r6, #16]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
 1003e8e:	f1c4 0408 	rsb	r4, r4, #8
 1003e92:	fa42 f404 	asr.w	r4, r2, r4
 1003e96:	74b4      	strb	r4, [r6, #18]
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
 1003e98:	f7ff f9b0 	bl	10031fc <update_radio_addresses.part.0>

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);

	return 0;
 1003e9c:	4628      	mov	r0, r5
}
 1003e9e:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 1003ea0:	f06f 000f 	mvn.w	r0, #15
 1003ea4:	e7fb      	b.n	1003e9e <esb_set_prefixes+0x36>
		return -EINVAL;
 1003ea6:	f06f 0015 	mvn.w	r0, #21
 1003eaa:	e7f8      	b.n	1003e9e <esb_set_prefixes+0x36>
 1003eac:	2100046b 	.word	0x2100046b
 1003eb0:	2100001c 	.word	0x2100001c

01003eb4 <SystemInit>:
void SystemInit(void)
{
    /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
     until one ADDR is not initialized. */
    uint32_t index = 0;
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1003eb4:	2200      	movs	r2, #0
 1003eb6:	00d3      	lsls	r3, r2, #3
 1003eb8:	f103 73ff 	add.w	r3, r3, #33423360	; 0x1fe0000
 1003ebc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 1003ec0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 1003ec4:	3101      	adds	r1, #1
 1003ec6:	d007      	beq.n	1003ed8 <SystemInit+0x24>
        #if defined ( __ICCARM__ )
            /* IAR will complain about the order of volatile pointer accesses. */
            #pragma diag_suppress=Pa082
        #endif
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1003ec8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1003ecc:	3201      	adds	r2, #1
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1003ece:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1003ed2:	2a20      	cmp	r2, #32
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1003ed4:	600b      	str	r3, [r1, #0]
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1003ed6:	d1ee      	bne.n	1003eb6 <SystemInit+0x2>
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
                #endif
            #elif defined(NRF_NETWORK)
                uint32_t var1 = *(uint32_t *)0x01FF0130ul;
 1003ed8:	4b14      	ldr	r3, [pc, #80]	; (1003f2c <SystemInit+0x78>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 1003eda:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 1003ede:	2a07      	cmp	r2, #7
 1003ee0:	d11a      	bne.n	1003f18 <SystemInit+0x64>
                {
                    switch(var2)
 1003ee2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 1003ee6:	3b02      	subs	r3, #2
 1003ee8:	2b03      	cmp	r3, #3
 1003eea:	d80c      	bhi.n	1003f06 <SystemInit+0x52>
        #endif
    }

    /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_49())
 1003eec:	4a10      	ldr	r2, [pc, #64]	; (1003f30 <SystemInit+0x7c>)
 1003eee:	5cd3      	ldrb	r3, [r2, r3]
 1003ef0:	b14b      	cbz	r3, 1003f06 <SystemInit+0x52>
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
 1003ef2:	4b10      	ldr	r3, [pc, #64]	; (1003f34 <SystemInit+0x80>)
 1003ef4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 1003ef8:	07d1      	lsls	r1, r2, #31
        {
            NRF_POWER_NS->EVENTS_SLEEPENTER = 0;
 1003efa:	bf42      	ittt	mi
 1003efc:	2200      	movmi	r2, #0
 1003efe:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
            NRF_POWER_NS->EVENTS_SLEEPEXIT = 0;
 1003f02:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118

    /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_55())
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
 1003f06:	4b0b      	ldr	r3, [pc, #44]	; (1003f34 <SystemInit+0x80>)
 1003f08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 1003f0c:	07d2      	lsls	r2, r2, #31
            NRF_RESET_NS->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
 1003f0e:	bf44      	itt	mi
 1003f10:	f06f 0201 	mvnmi.w	r2, #1
 1003f14:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_NS->APPROTECT.DISABLE = NRF_UICR_NS->APPROTECT;
 1003f18:	4b07      	ldr	r3, [pc, #28]	; (1003f38 <SystemInit+0x84>)
 1003f1a:	681a      	ldr	r2, [r3, #0]
 1003f1c:	4b07      	ldr	r3, [pc, #28]	; (1003f3c <SystemInit+0x88>)
 1003f1e:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    SystemCoreClock = __SYSTEM_CLOCK;
 1003f22:	4b07      	ldr	r3, [pc, #28]	; (1003f40 <SystemInit+0x8c>)
 1003f24:	4a07      	ldr	r2, [pc, #28]	; (1003f44 <SystemInit+0x90>)
 1003f26:	601a      	str	r2, [r3, #0]

    /* Handle fw-branch APPROTECT setup. */
    nrf53_handle_approtect();

    SystemCoreClockUpdate();
}
 1003f28:	4770      	bx	lr
 1003f2a:	bf00      	nop
 1003f2c:	01ff0000 	.word	0x01ff0000
 1003f30:	0100771f 	.word	0x0100771f
 1003f34:	41005000 	.word	0x41005000
 1003f38:	01ff8000 	.word	0x01ff8000
 1003f3c:	41006000 	.word	0x41006000
 1003f40:	21000030 	.word	0x21000030
 1003f44:	03d09000 	.word	0x03d09000

01003f48 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
 1003f48:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
 1003f4a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
 1003f4c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
 1003f4e:	fab2 f382 	clz	r3, r2
 1003f52:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
 1003f56:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
 1003f58:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
 1003f5a:	d010      	beq.n	1003f7e <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
 1003f5c:	fa05 f303 	lsl.w	r3, r5, r3
 1003f60:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 1003f64:	e8d0 6fef 	ldaex	r6, [r0]
 1003f68:	4296      	cmp	r6, r2
 1003f6a:	d104      	bne.n	1003f76 <nrfx_flag32_alloc+0x2e>
 1003f6c:	e8c0 3fec 	stlex	ip, r3, [r0]
 1003f70:	f1bc 0f00 	cmp.w	ip, #0
 1003f74:	d1f6      	bne.n	1003f64 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
 1003f76:	d1e9      	bne.n	1003f4c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
 1003f78:	4802      	ldr	r0, [pc, #8]	; (1003f84 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
 1003f7a:	700c      	strb	r4, [r1, #0]
}
 1003f7c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
 1003f7e:	4802      	ldr	r0, [pc, #8]	; (1003f88 <nrfx_flag32_alloc+0x40>)
 1003f80:	e7fc      	b.n	1003f7c <nrfx_flag32_alloc+0x34>
 1003f82:	bf00      	nop
 1003f84:	0bad0000 	.word	0x0bad0000
 1003f88:	0bad0002 	.word	0x0bad0002

01003f8c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
 1003f8c:	6803      	ldr	r3, [r0, #0]
{
 1003f8e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
 1003f90:	40cb      	lsrs	r3, r1
 1003f92:	07db      	lsls	r3, r3, #31
 1003f94:	d411      	bmi.n	1003fba <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
 1003f96:	2301      	movs	r3, #1
 1003f98:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
 1003f9c:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
 1003f9e:	ea41 0203 	orr.w	r2, r1, r3
 1003fa2:	e8d0 4fef 	ldaex	r4, [r0]
 1003fa6:	429c      	cmp	r4, r3
 1003fa8:	d104      	bne.n	1003fb4 <nrfx_flag32_free+0x28>
 1003faa:	e8c0 2fec 	stlex	ip, r2, [r0]
 1003fae:	f1bc 0f00 	cmp.w	ip, #0
 1003fb2:	d1f6      	bne.n	1003fa2 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
 1003fb4:	d1f2      	bne.n	1003f9c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
 1003fb6:	4802      	ldr	r0, [pc, #8]	; (1003fc0 <nrfx_flag32_free+0x34>)
}
 1003fb8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
 1003fba:	4802      	ldr	r0, [pc, #8]	; (1003fc4 <nrfx_flag32_free+0x38>)
 1003fbc:	e7fc      	b.n	1003fb8 <nrfx_flag32_free+0x2c>
 1003fbe:	bf00      	nop
 1003fc0:	0bad0000 	.word	0x0bad0000
 1003fc4:	0bad0004 	.word	0x0bad0004

01003fc8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
 1003fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
 1003fca:	4604      	mov	r4, r0
 1003fcc:	b168      	cbz	r0, 1003fea <clock_stop+0x22>
 1003fce:	2801      	cmp	r0, #1
 1003fd0:	d02e      	beq.n	1004030 <clock_stop+0x68>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
 1003fd2:	492c      	ldr	r1, [pc, #176]	; (1004084 <clock_stop+0xbc>)
 1003fd4:	482c      	ldr	r0, [pc, #176]	; (1004088 <clock_stop+0xc0>)
 1003fd6:	22d8      	movs	r2, #216	; 0xd8
 1003fd8:	f002 fa55 	bl	1006486 <assert_print>
 1003fdc:	21d8      	movs	r1, #216	; 0xd8
 1003fde:	4829      	ldr	r0, [pc, #164]	; (1004084 <clock_stop+0xbc>)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
 1003fe0:	b003      	add	sp, #12
 1003fe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
 1003fe6:	f002 ba47 	b.w	1006478 <assert_post_action>
    p_reg->INTENCLR = mask;
 1003fea:	2202      	movs	r2, #2
 1003fec:	4b27      	ldr	r3, [pc, #156]	; (100408c <clock_stop+0xc4>)
 1003fee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1003ff2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
 1003ff6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1003ffa:	2201      	movs	r2, #1
 1003ffc:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
 1003ffe:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
 1004000:	429c      	cmp	r4, r3
 1004002:	bf18      	it	ne
 1004004:	2500      	movne	r5, #0
 1004006:	f242 7710 	movw	r7, #10000	; 0x2710
 100400a:	4e20      	ldr	r6, [pc, #128]	; (100408c <clock_stop+0xc4>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
 100400c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
 1004010:	bf08      	it	eq
 1004012:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
 1004016:	b1ac      	cbz	r4, 1004044 <clock_stop+0x7c>
 1004018:	2c01      	cmp	r4, #1
 100401a:	d029      	beq.n	1004070 <clock_stop+0xa8>
            NRFX_ASSERT(0);
 100401c:	491c      	ldr	r1, [pc, #112]	; (1004090 <clock_stop+0xc8>)
 100401e:	481a      	ldr	r0, [pc, #104]	; (1004088 <clock_stop+0xc0>)
 1004020:	f44f 724f 	mov.w	r2, #828	; 0x33c
 1004024:	f002 fa2f 	bl	1006486 <assert_print>
 1004028:	f44f 714f 	mov.w	r1, #828	; 0x33c
 100402c:	4818      	ldr	r0, [pc, #96]	; (1004090 <clock_stop+0xc8>)
 100402e:	e7d7      	b.n	1003fe0 <clock_stop+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004030:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
 1004032:	4b16      	ldr	r3, [pc, #88]	; (100408c <clock_stop+0xc4>)
 1004034:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004038:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 100403c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1004040:	6058      	str	r0, [r3, #4]
}
 1004042:	e7dc      	b.n	1003ffe <clock_stop+0x36>
            if (p_clk_src != NULL)
 1004044:	b125      	cbz	r5, 1004050 <clock_stop+0x88>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 1004046:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
 100404a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
 100404e:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1004050:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 1004054:	03db      	lsls	r3, r3, #15
 1004056:	d509      	bpl.n	100406c <clock_stop+0xa4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
 1004058:	b11d      	cbz	r5, 1004062 <clock_stop+0x9a>
 100405a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 100405e:	2b01      	cmp	r3, #1
 1004060:	d104      	bne.n	100406c <clock_stop+0xa4>
 1004062:	2001      	movs	r0, #1
 1004064:	f002 fbf0 	bl	1006848 <nrfx_busy_wait>
 1004068:	3f01      	subs	r7, #1
 100406a:	d1d4      	bne.n	1004016 <clock_stop+0x4e>
}
 100406c:	b003      	add	sp, #12
 100406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
 1004070:	b125      	cbz	r5, 100407c <clock_stop+0xb4>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 1004072:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 1004076:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
 100407a:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 100407c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 1004080:	e7e8      	b.n	1004054 <clock_stop+0x8c>
 1004082:	bf00      	nop
 1004084:	01007723 	.word	0x01007723
 1004088:	01006eb0 	.word	0x01006eb0
 100408c:	41005000 	.word	0x41005000
 1004090:	01007760 	.word	0x01007760

01004094 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
 1004094:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
 1004096:	4604      	mov	r4, r0
 1004098:	b950      	cbnz	r0, 10040b0 <nrfx_clock_init+0x1c>
 100409a:	490a      	ldr	r1, [pc, #40]	; (10040c4 <nrfx_clock_init+0x30>)
 100409c:	480a      	ldr	r0, [pc, #40]	; (10040c8 <nrfx_clock_init+0x34>)
 100409e:	f240 1215 	movw	r2, #277	; 0x115
 10040a2:	f002 f9f0 	bl	1006486 <assert_print>
 10040a6:	f240 1115 	movw	r1, #277	; 0x115
 10040aa:	4806      	ldr	r0, [pc, #24]	; (10040c4 <nrfx_clock_init+0x30>)
 10040ac:	f002 f9e4 	bl	1006478 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
 10040b0:	4b06      	ldr	r3, [pc, #24]	; (10040cc <nrfx_clock_init+0x38>)
 10040b2:	791a      	ldrb	r2, [r3, #4]
 10040b4:	b922      	cbnz	r2, 10040c0 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
 10040b6:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
 10040b8:	4805      	ldr	r0, [pc, #20]	; (10040d0 <nrfx_clock_init+0x3c>)
        m_clock_cb.event_handler = event_handler;
 10040ba:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
 10040bc:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
 10040be:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
 10040c0:	4804      	ldr	r0, [pc, #16]	; (10040d4 <nrfx_clock_init+0x40>)
    return err_code;
 10040c2:	e7fc      	b.n	10040be <nrfx_clock_init+0x2a>
 10040c4:	01007723 	.word	0x01007723
 10040c8:	01006eb0 	.word	0x01006eb0
 10040cc:	210003dc 	.word	0x210003dc
 10040d0:	0bad0000 	.word	0x0bad0000
 10040d4:	0bad000c 	.word	0x0bad000c

010040d8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
 10040d8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
 10040da:	4b0e      	ldr	r3, [pc, #56]	; (1004114 <nrfx_clock_enable+0x3c>)
 10040dc:	791b      	ldrb	r3, [r3, #4]
 10040de:	b953      	cbnz	r3, 10040f6 <nrfx_clock_enable+0x1e>
 10040e0:	490d      	ldr	r1, [pc, #52]	; (1004118 <nrfx_clock_enable+0x40>)
 10040e2:	480e      	ldr	r0, [pc, #56]	; (100411c <nrfx_clock_enable+0x44>)
 10040e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 10040e8:	f002 f9cd 	bl	1006486 <assert_print>
 10040ec:	f44f 7197 	mov.w	r1, #302	; 0x12e
 10040f0:	4809      	ldr	r0, [pc, #36]	; (1004118 <nrfx_clock_enable+0x40>)
 10040f2:	f002 f9c1 	bl	1006478 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
 10040f6:	2005      	movs	r0, #5
 10040f8:	f7fd f9c2 	bl	1001480 <arch_irq_is_enabled>
 10040fc:	b910      	cbnz	r0, 1004104 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
 10040fe:	2005      	movs	r0, #5
 1004100:	f7fd f99a 	bl	1001438 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
 1004104:	2201      	movs	r2, #1
 1004106:	4b06      	ldr	r3, [pc, #24]	; (1004120 <nrfx_clock_enable+0x48>)
 1004108:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
 100410c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
 1004110:	bd08      	pop	{r3, pc}
 1004112:	bf00      	nop
 1004114:	210003dc 	.word	0x210003dc
 1004118:	01007723 	.word	0x01007723
 100411c:	01006eb0 	.word	0x01006eb0
 1004120:	41005000 	.word	0x41005000

01004124 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
 1004124:	4b2c      	ldr	r3, [pc, #176]	; (10041d8 <nrfx_clock_start+0xb4>)
{
 1004126:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
 1004128:	791b      	ldrb	r3, [r3, #4]
{
 100412a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
 100412c:	b953      	cbnz	r3, 1004144 <nrfx_clock_start+0x20>
 100412e:	492b      	ldr	r1, [pc, #172]	; (10041dc <nrfx_clock_start+0xb8>)
 1004130:	482b      	ldr	r0, [pc, #172]	; (10041e0 <nrfx_clock_start+0xbc>)
 1004132:	f44f 72b4 	mov.w	r2, #360	; 0x168
 1004136:	f002 f9a6 	bl	1006486 <assert_print>
 100413a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 100413e:	4827      	ldr	r0, [pc, #156]	; (10041dc <nrfx_clock_start+0xb8>)
 1004140:	f002 f99a 	bl	1006478 <assert_post_action>
    switch (domain)
 1004144:	b174      	cbz	r4, 1004164 <nrfx_clock_start+0x40>
 1004146:	2c01      	cmp	r4, #1
 1004148:	d03b      	beq.n	10041c2 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
 100414a:	4924      	ldr	r1, [pc, #144]	; (10041dc <nrfx_clock_start+0xb8>)
 100414c:	4824      	ldr	r0, [pc, #144]	; (10041e0 <nrfx_clock_start+0xbc>)
 100414e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 1004152:	f002 f998 	bl	1006486 <assert_print>
            break;
    }
}
 1004156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
 100415a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 100415e:	481f      	ldr	r0, [pc, #124]	; (10041dc <nrfx_clock_start+0xb8>)
 1004160:	f002 b98a 	b.w	1006478 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 1004164:	4a1f      	ldr	r2, [pc, #124]	; (10041e4 <nrfx_clock_start+0xc0>)
 1004166:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 100416a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
 100416e:	03c9      	lsls	r1, r1, #15
 1004170:	d412      	bmi.n	1004198 <nrfx_clock_start+0x74>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
 1004172:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
 1004176:	07db      	lsls	r3, r3, #31
 1004178:	d418      	bmi.n	10041ac <nrfx_clock_start+0x88>
        *p_lfclksrc = clock_initial_lfclksrc_get();
 100417a:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
 100417c:	4a19      	ldr	r2, [pc, #100]	; (10041e4 <nrfx_clock_start+0xc0>)
 100417e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004182:	2300      	movs	r3, #0
 1004184:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 1004188:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
 100418c:	2302      	movs	r3, #2
 100418e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1004192:	2301      	movs	r3, #1
 1004194:	6093      	str	r3, [r2, #8]
}
 1004196:	bd10      	pop	{r4, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 1004198:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
 100419c:	2b02      	cmp	r3, #2
 100419e:	d0ed      	beq.n	100417c <nrfx_clock_start+0x58>
    if (!is_correct_clk)
 10041a0:	2b01      	cmp	r3, #1
 10041a2:	d0eb      	beq.n	100417c <nrfx_clock_start+0x58>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 10041a4:	2000      	movs	r0, #0
 10041a6:	f7ff ff0f 	bl	1003fc8 <clock_stop>
 10041aa:	e7e6      	b.n	100417a <nrfx_clock_start+0x56>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 10041ac:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 10041b0:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
 10041b4:	3b01      	subs	r3, #1
 10041b6:	2b01      	cmp	r3, #1
 10041b8:	d8f4      	bhi.n	10041a4 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
 10041ba:	2302      	movs	r3, #2
 10041bc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
 10041c0:	e7e9      	b.n	1004196 <nrfx_clock_start+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10041c2:	2200      	movs	r2, #0
 10041c4:	4b07      	ldr	r3, [pc, #28]	; (10041e4 <nrfx_clock_start+0xc0>)
 10041c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 10041ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
 10041ce:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10041d2:	601c      	str	r4, [r3, #0]
}
 10041d4:	e7df      	b.n	1004196 <nrfx_clock_start+0x72>
 10041d6:	bf00      	nop
 10041d8:	210003dc 	.word	0x210003dc
 10041dc:	01007723 	.word	0x01007723
 10041e0:	01006eb0 	.word	0x01006eb0
 10041e4:	41005000 	.word	0x41005000

010041e8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
 10041e8:	4b0a      	ldr	r3, [pc, #40]	; (1004214 <nrfx_clock_stop+0x2c>)
{
 10041ea:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
 10041ec:	791b      	ldrb	r3, [r3, #4]
{
 10041ee:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
 10041f0:	b953      	cbnz	r3, 1004208 <nrfx_clock_stop+0x20>
 10041f2:	4909      	ldr	r1, [pc, #36]	; (1004218 <nrfx_clock_stop+0x30>)
 10041f4:	4809      	ldr	r0, [pc, #36]	; (100421c <nrfx_clock_stop+0x34>)
 10041f6:	f240 12ad 	movw	r2, #429	; 0x1ad
 10041fa:	f002 f944 	bl	1006486 <assert_print>
 10041fe:	f240 11ad 	movw	r1, #429	; 0x1ad
 1004202:	4805      	ldr	r0, [pc, #20]	; (1004218 <nrfx_clock_stop+0x30>)
 1004204:	f002 f938 	bl	1006478 <assert_post_action>
    clock_stop(domain);
 1004208:	4620      	mov	r0, r4
}
 100420a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
 100420e:	f7ff bedb 	b.w	1003fc8 <clock_stop>
 1004212:	bf00      	nop
 1004214:	210003dc 	.word	0x210003dc
 1004218:	01007723 	.word	0x01007723
 100421c:	01006eb0 	.word	0x01006eb0

01004220 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 1004220:	4b17      	ldr	r3, [pc, #92]	; (1004280 <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
 1004222:	b510      	push	{r4, lr}
 1004224:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
 1004228:	b152      	cbz	r2, 1004240 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100422a:	2000      	movs	r0, #0
 100422c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 1004230:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
 1004234:	2201      	movs	r2, #1
 1004236:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
 100423a:	4b12      	ldr	r3, [pc, #72]	; (1004284 <nrfx_power_clock_irq_handler+0x64>)
 100423c:	681b      	ldr	r3, [r3, #0]
 100423e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 1004240:	4b0f      	ldr	r3, [pc, #60]	; (1004280 <nrfx_power_clock_irq_handler+0x60>)
 1004242:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
 1004246:	b18a      	cbz	r2, 100426c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004248:	2200      	movs	r2, #0
 100424a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 100424e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 1004252:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1004256:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
 100425a:	f002 0203 	and.w	r2, r2, #3
 100425e:	2a01      	cmp	r2, #1
 1004260:	f04f 0102 	mov.w	r1, #2
 1004264:	d103      	bne.n	100426e <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
 1004266:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100426a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
 100426c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
 100426e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 1004272:	4b04      	ldr	r3, [pc, #16]	; (1004284 <nrfx_power_clock_irq_handler+0x64>)
 1004274:	2001      	movs	r0, #1
}
 1004276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 100427a:	681b      	ldr	r3, [r3, #0]
 100427c:	4718      	bx	r3
 100427e:	bf00      	nop
 1004280:	41005000 	.word	0x41005000
 1004284:	210003dc 	.word	0x210003dc

01004288 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
 1004288:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
 100428a:	4801      	ldr	r0, [pc, #4]	; (1004290 <nrfx_dppi_channel_alloc+0x8>)
 100428c:	f7ff be5c 	b.w	1003f48 <nrfx_flag32_alloc>
 1004290:	21000034 	.word	0x21000034

01004294 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
 1004294:	4b03      	ldr	r3, [pc, #12]	; (10042a4 <pin_in_use_by_te+0x10>)
 1004296:	3008      	adds	r0, #8
 1004298:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 100429c:	f3c0 1040 	ubfx	r0, r0, #5, #1
 10042a0:	4770      	bx	lr
 10042a2:	bf00      	nop
 10042a4:	21000038 	.word	0x21000038

010042a8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
 10042a8:	4b04      	ldr	r3, [pc, #16]	; (10042bc <pin_has_trigger+0x14>)
 10042aa:	3008      	adds	r0, #8
 10042ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 10042b0:	f010 001c 	ands.w	r0, r0, #28
 10042b4:	bf18      	it	ne
 10042b6:	2001      	movne	r0, #1
 10042b8:	4770      	bx	lr
 10042ba:	bf00      	nop
 10042bc:	21000038 	.word	0x21000038

010042c0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 10042c0:	4b03      	ldr	r3, [pc, #12]	; (10042d0 <pin_is_output+0x10>)
 10042c2:	3008      	adds	r0, #8
 10042c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 10042c8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 10042cc:	4770      	bx	lr
 10042ce:	bf00      	nop
 10042d0:	21000038 	.word	0x21000038

010042d4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
 10042d4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10042d6:	4c0d      	ldr	r4, [pc, #52]	; (100430c <call_handler+0x38>)
 10042d8:	f100 0308 	add.w	r3, r0, #8
 10042dc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
 10042e0:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10042e2:	05da      	lsls	r2, r3, #23
{
 10042e4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10042e6:	d507      	bpl.n	10042f8 <call_handler+0x24>
 10042e8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
 10042ec:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 10042f0:	6852      	ldr	r2, [r2, #4]
 10042f2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 10042f6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
 10042f8:	68a3      	ldr	r3, [r4, #8]
 10042fa:	b12b      	cbz	r3, 1004308 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
 10042fc:	4631      	mov	r1, r6
 10042fe:	4628      	mov	r0, r5
 1004300:	68e2      	ldr	r2, [r4, #12]
    }
}
 1004302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
 1004306:	4718      	bx	r3
}
 1004308:	bd70      	pop	{r4, r5, r6, pc}
 100430a:	bf00      	nop
 100430c:	21000038 	.word	0x21000038

01004310 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 1004310:	4a19      	ldr	r2, [pc, #100]	; (1004378 <release_handler+0x68>)
 1004312:	3008      	adds	r0, #8
 1004314:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
 1004318:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 100431a:	05d9      	lsls	r1, r3, #23
 100431c:	d51d      	bpl.n	100435a <release_handler+0x4a>
 100431e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
 1004322:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 1004326:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
 100432a:	2000      	movs	r0, #0
 100432c:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
 1004330:	f834 3b02 	ldrh.w	r3, [r4], #2
 1004334:	f413 7f80 	tst.w	r3, #256	; 0x100
 1004338:	d003      	beq.n	1004342 <release_handler+0x32>
 100433a:	f3c3 2343 	ubfx	r3, r3, #9, #4
 100433e:	4299      	cmp	r1, r3
 1004340:	d00b      	beq.n	100435a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
 1004342:	3001      	adds	r0, #1
 1004344:	2830      	cmp	r0, #48	; 0x30
 1004346:	d1f3      	bne.n	1004330 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
 1004348:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
 100434a:	480c      	ldr	r0, [pc, #48]	; (100437c <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
 100434c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
 1004350:	f7ff fe1c 	bl	1003f8c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
 1004354:	4b0a      	ldr	r3, [pc, #40]	; (1004380 <release_handler+0x70>)
 1004356:	4298      	cmp	r0, r3
 1004358:	d100      	bne.n	100435c <release_handler+0x4c>
}
 100435a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
 100435c:	4909      	ldr	r1, [pc, #36]	; (1004384 <release_handler+0x74>)
 100435e:	480a      	ldr	r0, [pc, #40]	; (1004388 <release_handler+0x78>)
 1004360:	f44f 7299 	mov.w	r2, #306	; 0x132
 1004364:	f002 f88f 	bl	1006486 <assert_print>
}
 1004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
 100436c:	f44f 7199 	mov.w	r1, #306	; 0x132
 1004370:	4804      	ldr	r0, [pc, #16]	; (1004384 <release_handler+0x74>)
 1004372:	f002 b881 	b.w	1006478 <assert_post_action>
 1004376:	bf00      	nop
 1004378:	21000038 	.word	0x21000038
 100437c:	210000ac 	.word	0x210000ac
 1004380:	0bad0000 	.word	0x0bad0000
 1004384:	01007794 	.word	0x01007794
 1004388:	01006eb0 	.word	0x01006eb0

0100438c <pin_handler_trigger_uninit>:
{
 100438c:	b538      	push	{r3, r4, r5, lr}
 100438e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
 1004390:	f7ff ff80 	bl	1004294 <pin_in_use_by_te>
 1004394:	4c0b      	ldr	r4, [pc, #44]	; (10043c4 <pin_handler_trigger_uninit+0x38>)
 1004396:	f102 0508 	add.w	r5, r2, #8
 100439a:	b160      	cbz	r0, 10043b6 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
 100439c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 100439e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
 10043a2:	0b5b      	lsrs	r3, r3, #13
 10043a4:	009b      	lsls	r3, r3, #2
 10043a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 10043aa:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 10043ae:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
 10043b2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
 10043b6:	4610      	mov	r0, r2
 10043b8:	f7ff ffaa 	bl	1004310 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
 10043bc:	2300      	movs	r3, #0
 10043be:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
 10043c2:	bd38      	pop	{r3, r4, r5, pc}
 10043c4:	21000038 	.word	0x21000038

010043c8 <nrf_gpio_pin_port_decode>:
{
 10043c8:	b510      	push	{r4, lr}
 10043ca:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
 10043cc:	6800      	ldr	r0, [r0, #0]
 10043ce:	f002 fa3d 	bl	100684c <nrf_gpio_pin_present_check>
 10043d2:	b950      	cbnz	r0, 10043ea <nrf_gpio_pin_port_decode+0x22>
 10043d4:	4910      	ldr	r1, [pc, #64]	; (1004418 <nrf_gpio_pin_port_decode+0x50>)
 10043d6:	4811      	ldr	r0, [pc, #68]	; (100441c <nrf_gpio_pin_port_decode+0x54>)
 10043d8:	f240 2229 	movw	r2, #553	; 0x229
 10043dc:	f002 f853 	bl	1006486 <assert_print>
 10043e0:	f240 2129 	movw	r1, #553	; 0x229
 10043e4:	480c      	ldr	r0, [pc, #48]	; (1004418 <nrf_gpio_pin_port_decode+0x50>)
 10043e6:	f002 f847 	bl	1006478 <assert_post_action>
    uint32_t pin_number = *p_pin;
 10043ea:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
 10043ec:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
 10043f0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
 10043f2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
 10043f4:	d00c      	beq.n	1004410 <nrf_gpio_pin_port_decode+0x48>
 10043f6:	2b01      	cmp	r3, #1
 10043f8:	d00c      	beq.n	1004414 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
 10043fa:	4907      	ldr	r1, [pc, #28]	; (1004418 <nrf_gpio_pin_port_decode+0x50>)
 10043fc:	4807      	ldr	r0, [pc, #28]	; (100441c <nrf_gpio_pin_port_decode+0x54>)
 10043fe:	f240 222e 	movw	r2, #558	; 0x22e
 1004402:	f002 f840 	bl	1006486 <assert_print>
 1004406:	f240 212e 	movw	r1, #558	; 0x22e
 100440a:	4803      	ldr	r0, [pc, #12]	; (1004418 <nrf_gpio_pin_port_decode+0x50>)
 100440c:	f002 f834 	bl	1006478 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
 1004410:	4803      	ldr	r0, [pc, #12]	; (1004420 <nrf_gpio_pin_port_decode+0x58>)
}
 1004412:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
 1004414:	4803      	ldr	r0, [pc, #12]	; (1004424 <nrf_gpio_pin_port_decode+0x5c>)
 1004416:	e7fc      	b.n	1004412 <nrf_gpio_pin_port_decode+0x4a>
 1004418:	01007649 	.word	0x01007649
 100441c:	01006eb0 	.word	0x01006eb0
 1004420:	418c0500 	.word	0x418c0500
 1004424:	418c0800 	.word	0x418c0800

01004428 <nrfx_gpiote_input_configure>:
{
 1004428:	b5f0      	push	{r4, r5, r6, r7, lr}
 100442a:	4604      	mov	r4, r0
 100442c:	4617      	mov	r7, r2
 100442e:	461d      	mov	r5, r3
 1004430:	b085      	sub	sp, #20
    if (p_input_config)
 1004432:	b1f1      	cbz	r1, 1004472 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
 1004434:	f002 fa1b 	bl	100686e <pin_is_task_output>
 1004438:	b110      	cbz	r0, 1004440 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
 100443a:	484d      	ldr	r0, [pc, #308]	; (1004570 <nrfx_gpiote_input_configure+0x148>)
}
 100443c:	b005      	add	sp, #20
 100443e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
 1004440:	460b      	mov	r3, r1
 1004442:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
 1004446:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
 100444a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
 100444e:	f10d 020f 	add.w	r2, sp, #15
 1004452:	f10d 010e 	add.w	r1, sp, #14
 1004456:	4620      	mov	r0, r4
 1004458:	f002 fa18 	bl	100688c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
 100445c:	4a45      	ldr	r2, [pc, #276]	; (1004574 <nrfx_gpiote_input_configure+0x14c>)
 100445e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
 1004462:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 1004466:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
 100446a:	f043 0301 	orr.w	r3, r3, #1
 100446e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
 1004472:	b197      	cbz	r7, 100449a <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
 1004474:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
 1004476:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
 1004478:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
 100447a:	f7ff ff21 	bl	10042c0 <pin_is_output>
 100447e:	b180      	cbz	r0, 10044a2 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
 1004480:	2a00      	cmp	r2, #0
 1004482:	d1da      	bne.n	100443a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
 1004484:	4a3b      	ldr	r2, [pc, #236]	; (1004574 <nrfx_gpiote_input_configure+0x14c>)
 1004486:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
 100448a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 100448e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
 1004492:	ea43 0686 	orr.w	r6, r3, r6, lsl #2
 1004496:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
    if (p_handler_config)
 100449a:	2d00      	cmp	r5, #0
 100449c:	d13e      	bne.n	100451c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
 100449e:	4836      	ldr	r0, [pc, #216]	; (1004578 <nrfx_gpiote_input_configure+0x150>)
 10044a0:	e7cc      	b.n	100443c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
 10044a2:	4834      	ldr	r0, [pc, #208]	; (1004574 <nrfx_gpiote_input_configure+0x14c>)
 10044a4:	f104 0708 	add.w	r7, r4, #8
 10044a8:	f830 1017 	ldrh.w	r1, [r0, r7, lsl #1]
 10044ac:	f021 0120 	bic.w	r1, r1, #32
 10044b0:	04c9      	lsls	r1, r1, #19
 10044b2:	0cc9      	lsrs	r1, r1, #19
 10044b4:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
            if (use_evt)
 10044b8:	2a00      	cmp	r2, #0
 10044ba:	d0e3      	beq.n	1004484 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
 10044bc:	2e03      	cmp	r6, #3
 10044be:	d8bc      	bhi.n	100443a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
 10044c0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
 10044c4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 10044c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
 10044cc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 10044d0:	b926      	cbnz	r6, 10044dc <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
 10044d2:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
 10044d6:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
#endif
}
 10044da:	e7d3      	b.n	1004484 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
 10044dc:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
 10044e0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
 10044e4:	f023 0303 	bic.w	r3, r3, #3
 10044e8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
 10044ec:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
 10044f0:	f041 0120 	orr.w	r1, r1, #32
 10044f4:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
 10044f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 10044fc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1004500:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
 1004504:	0223      	lsls	r3, r4, #8
 1004506:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 100450a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
 100450e:	ea43 030e 	orr.w	r3, r3, lr
 1004512:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
 1004516:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
 100451a:	e7b3      	b.n	1004484 <nrfx_gpiote_input_configure+0x5c>
    release_handler(pin);
 100451c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
 100451e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
 1004522:	f7ff fef5 	bl	1004310 <release_handler>
    if (!handler)
 1004526:	2e00      	cmp	r6, #0
 1004528:	d0b9      	beq.n	100449e <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
 100452a:	4d12      	ldr	r5, [pc, #72]	; (1004574 <nrfx_gpiote_input_configure+0x14c>)
 100452c:	682b      	ldr	r3, [r5, #0]
 100452e:	429e      	cmp	r6, r3
 1004530:	d104      	bne.n	100453c <nrfx_gpiote_input_configure+0x114>
 1004532:	686b      	ldr	r3, [r5, #4]
 1004534:	429f      	cmp	r7, r3
 1004536:	d101      	bne.n	100453c <nrfx_gpiote_input_configure+0x114>
 1004538:	2200      	movs	r2, #0
 100453a:	e00a      	b.n	1004552 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
 100453c:	480f      	ldr	r0, [pc, #60]	; (100457c <nrfx_gpiote_input_configure+0x154>)
 100453e:	f10d 010f 	add.w	r1, sp, #15
 1004542:	f7ff fd01 	bl	1003f48 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
 1004546:	4b0c      	ldr	r3, [pc, #48]	; (1004578 <nrfx_gpiote_input_configure+0x150>)
 1004548:	4298      	cmp	r0, r3
 100454a:	f47f af77 	bne.w	100443c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
 100454e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
 1004552:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 1004556:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
 1004558:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 100455a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
 100455e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 1004562:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 1004566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 100456a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 100456e:	e796      	b.n	100449e <nrfx_gpiote_input_configure+0x76>
 1004570:	0bad0004 	.word	0x0bad0004
 1004574:	21000038 	.word	0x21000038
 1004578:	0bad0000 	.word	0x0bad0000
 100457c:	210000ac 	.word	0x210000ac

01004580 <nrfx_gpiote_output_configure>:
{
 1004580:	b5f0      	push	{r4, r5, r6, r7, lr}
 1004582:	4604      	mov	r4, r0
 1004584:	4616      	mov	r6, r2
 1004586:	b085      	sub	sp, #20
    if (p_config)
 1004588:	b321      	cbz	r1, 10045d4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
 100458a:	f7ff fe99 	bl	10042c0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
 100458e:	b920      	cbnz	r0, 100459a <nrfx_gpiote_output_configure+0x1a>
 1004590:	4620      	mov	r0, r4
 1004592:	f7ff fe7f 	bl	1004294 <pin_in_use_by_te>
 1004596:	2800      	cmp	r0, #0
 1004598:	d161      	bne.n	100465e <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
 100459a:	4620      	mov	r0, r4
 100459c:	f7ff fe84 	bl	10042a8 <pin_has_trigger>
 10045a0:	b110      	cbz	r0, 10045a8 <nrfx_gpiote_output_configure+0x28>
 10045a2:	784b      	ldrb	r3, [r1, #1]
 10045a4:	2b01      	cmp	r3, #1
 10045a6:	d05a      	beq.n	100465e <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
 10045a8:	2301      	movs	r3, #1
 10045aa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
 10045ae:	2300      	movs	r3, #0
 10045b0:	1c4a      	adds	r2, r1, #1
 10045b2:	e9cd 1300 	strd	r1, r3, [sp]
 10045b6:	4620      	mov	r0, r4
 10045b8:	1c8b      	adds	r3, r1, #2
 10045ba:	f10d 010f 	add.w	r1, sp, #15
 10045be:	f002 f965 	bl	100688c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
 10045c2:	4a28      	ldr	r2, [pc, #160]	; (1004664 <nrfx_gpiote_output_configure+0xe4>)
 10045c4:	f104 0108 	add.w	r1, r4, #8
 10045c8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 10045cc:	f043 0303 	orr.w	r3, r3, #3
 10045d0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
 10045d4:	b916      	cbnz	r6, 10045dc <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
 10045d6:	4824      	ldr	r0, [pc, #144]	; (1004668 <nrfx_gpiote_output_configure+0xe8>)
}
 10045d8:	b005      	add	sp, #20
 10045da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
 10045dc:	4620      	mov	r0, r4
 10045de:	f7ff fe6f 	bl	10042c0 <pin_is_output>
        if (pin_is_input(pin))
 10045e2:	2800      	cmp	r0, #0
 10045e4:	d03b      	beq.n	100465e <nrfx_gpiote_output_configure+0xde>
    p_reg->CONFIG[idx] = 0;
 10045e6:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
 10045e8:	4a1e      	ldr	r2, [pc, #120]	; (1004664 <nrfx_gpiote_output_configure+0xe4>)
 10045ea:	f104 0708 	add.w	r7, r4, #8
        uint32_t ch = p_task_config->task_ch;
 10045ee:	f896 c000 	ldrb.w	ip, [r6]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
 10045f2:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 10045f6:	ea4f 018c 	mov.w	r1, ip, lsl #2
 10045fa:	f020 0020 	bic.w	r0, r0, #32
 10045fe:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
 1004602:	04c0      	lsls	r0, r0, #19
 1004604:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
 1004608:	0cc0      	lsrs	r0, r0, #19
 100460a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
 100460e:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
 1004612:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
 1004616:	7875      	ldrb	r5, [r6, #1]
 1004618:	2d00      	cmp	r5, #0
 100461a:	d0dc      	beq.n	10045d6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
 100461c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
 1004620:	78b6      	ldrb	r6, [r6, #2]
 1004622:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
 1004626:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 100462a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100462e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
 1004632:	0223      	lsls	r3, r4, #8
 1004634:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
 1004638:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100463a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
 100463e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
 1004642:	0534      	lsls	r4, r6, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1004644:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
 1004646:	f404 1480 	and.w	r4, r4, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
 100464a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100464e:	4323      	orrs	r3, r4
 1004650:	f040 0020 	orr.w	r0, r0, #32
 1004654:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
 1004658:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
 100465c:	e7bb      	b.n	10045d6 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
 100465e:	4803      	ldr	r0, [pc, #12]	; (100466c <nrfx_gpiote_output_configure+0xec>)
 1004660:	e7ba      	b.n	10045d8 <nrfx_gpiote_output_configure+0x58>
 1004662:	bf00      	nop
 1004664:	21000038 	.word	0x21000038
 1004668:	0bad0000 	.word	0x0bad0000
 100466c:	0bad0004 	.word	0x0bad0004

01004670 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
 1004670:	4b01      	ldr	r3, [pc, #4]	; (1004678 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
 1004672:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
 1004676:	4770      	bx	lr
 1004678:	21000038 	.word	0x21000038

0100467c <nrfx_gpiote_channel_get>:
{
 100467c:	b538      	push	{r3, r4, r5, lr}
 100467e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
 1004680:	460d      	mov	r5, r1
 1004682:	b951      	cbnz	r1, 100469a <nrfx_gpiote_channel_get+0x1e>
 1004684:	490c      	ldr	r1, [pc, #48]	; (10046b8 <nrfx_gpiote_channel_get+0x3c>)
 1004686:	480d      	ldr	r0, [pc, #52]	; (10046bc <nrfx_gpiote_channel_get+0x40>)
 1004688:	f240 2235 	movw	r2, #565	; 0x235
 100468c:	f001 fefb 	bl	1006486 <assert_print>
 1004690:	f240 2135 	movw	r1, #565	; 0x235
 1004694:	4808      	ldr	r0, [pc, #32]	; (10046b8 <nrfx_gpiote_channel_get+0x3c>)
 1004696:	f001 feef 	bl	1006478 <assert_post_action>
    if (pin_in_use_by_te(pin))
 100469a:	4620      	mov	r0, r4
 100469c:	f7ff fdfa 	bl	1004294 <pin_in_use_by_te>
 10046a0:	b138      	cbz	r0, 10046b2 <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 10046a2:	4b07      	ldr	r3, [pc, #28]	; (10046c0 <nrfx_gpiote_channel_get+0x44>)
 10046a4:	3408      	adds	r4, #8
 10046a6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
        return NRFX_SUCCESS;
 10046aa:	4806      	ldr	r0, [pc, #24]	; (10046c4 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 10046ac:	0b5b      	lsrs	r3, r3, #13
 10046ae:	702b      	strb	r3, [r5, #0]
}
 10046b0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
 10046b2:	4805      	ldr	r0, [pc, #20]	; (10046c8 <nrfx_gpiote_channel_get+0x4c>)
 10046b4:	e7fc      	b.n	10046b0 <nrfx_gpiote_channel_get+0x34>
 10046b6:	bf00      	nop
 10046b8:	01007794 	.word	0x01007794
 10046bc:	01006eb0 	.word	0x01006eb0
 10046c0:	21000038 	.word	0x21000038
 10046c4:	0bad0000 	.word	0x0bad0000
 10046c8:	0bad0004 	.word	0x0bad0004

010046cc <nrfx_gpiote_init>:
{
 10046cc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 10046ce:	4c0f      	ldr	r4, [pc, #60]	; (100470c <nrfx_gpiote_init+0x40>)
 10046d0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 10046d4:	b9bd      	cbnz	r5, 1004706 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
 10046d6:	2260      	movs	r2, #96	; 0x60
 10046d8:	4629      	mov	r1, r5
 10046da:	f104 0010 	add.w	r0, r4, #16
 10046de:	f001 ff24 	bl	100652a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
 10046e2:	200a      	movs	r0, #10
 10046e4:	f7fc fea8 	bl	1001438 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 10046e8:	4b09      	ldr	r3, [pc, #36]	; (1004710 <nrfx_gpiote_init+0x44>)
    return err_code;
 10046ea:	480a      	ldr	r0, [pc, #40]	; (1004714 <nrfx_gpiote_init+0x48>)
 10046ec:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
 10046f0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
 10046f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 10046f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
 10046fc:	2301      	movs	r3, #1
 10046fe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
 1004702:	6763      	str	r3, [r4, #116]	; 0x74
}
 1004704:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
 1004706:	4804      	ldr	r0, [pc, #16]	; (1004718 <nrfx_gpiote_init+0x4c>)
 1004708:	e7fc      	b.n	1004704 <nrfx_gpiote_init+0x38>
 100470a:	bf00      	nop
 100470c:	21000038 	.word	0x21000038
 1004710:	4100a000 	.word	0x4100a000
 1004714:	0bad0000 	.word	0x0bad0000
 1004718:	0bad0005 	.word	0x0bad0005

0100471c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
 100471c:	4b03      	ldr	r3, [pc, #12]	; (100472c <nrfx_gpiote_is_init+0x10>)
 100471e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
 1004722:	3800      	subs	r0, #0
 1004724:	bf18      	it	ne
 1004726:	2001      	movne	r0, #1
 1004728:	4770      	bx	lr
 100472a:	bf00      	nop
 100472c:	21000038 	.word	0x21000038

01004730 <nrfx_gpiote_channel_free>:
{
 1004730:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
 1004732:	4801      	ldr	r0, [pc, #4]	; (1004738 <nrfx_gpiote_channel_free+0x8>)
 1004734:	f7ff bc2a 	b.w	1003f8c <nrfx_flag32_free>
 1004738:	210000a8 	.word	0x210000a8

0100473c <nrfx_gpiote_channel_alloc>:
{
 100473c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
 100473e:	4801      	ldr	r0, [pc, #4]	; (1004744 <nrfx_gpiote_channel_alloc+0x8>)
 1004740:	f7ff bc02 	b.w	1003f48 <nrfx_flag32_alloc>
 1004744:	210000a8 	.word	0x210000a8

01004748 <nrfx_gpiote_trigger_enable>:
{
 1004748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 100474a:	4604      	mov	r4, r0
 100474c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
 100474e:	f7ff fdab 	bl	10042a8 <pin_has_trigger>
 1004752:	b950      	cbnz	r0, 100476a <nrfx_gpiote_trigger_enable+0x22>
 1004754:	492e      	ldr	r1, [pc, #184]	; (1004810 <nrfx_gpiote_trigger_enable+0xc8>)
 1004756:	482f      	ldr	r0, [pc, #188]	; (1004814 <nrfx_gpiote_trigger_enable+0xcc>)
 1004758:	f240 32df 	movw	r2, #991	; 0x3df
 100475c:	f001 fe93 	bl	1006486 <assert_print>
 1004760:	f240 31df 	movw	r1, #991	; 0x3df
 1004764:	482a      	ldr	r0, [pc, #168]	; (1004810 <nrfx_gpiote_trigger_enable+0xc8>)
 1004766:	f001 fe87 	bl	1006478 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 100476a:	4620      	mov	r0, r4
 100476c:	f7ff fd92 	bl	1004294 <pin_in_use_by_te>
 1004770:	4e29      	ldr	r6, [pc, #164]	; (1004818 <nrfx_gpiote_trigger_enable+0xd0>)
 1004772:	f104 0708 	add.w	r7, r4, #8
 1004776:	b318      	cbz	r0, 10047c0 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
 1004778:	4620      	mov	r0, r4
 100477a:	f7ff fda1 	bl	10042c0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 100477e:	4602      	mov	r2, r0
 1004780:	b9f0      	cbnz	r0, 10047c0 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1004782:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
 1004786:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
 1004788:	4608      	mov	r0, r1
 100478a:	f002 f87b 	bl	1006884 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
 100478e:	f100 4382 	add.w	r3, r0, #1090519040	; 0x41000000
 1004792:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1004796:	601a      	str	r2, [r3, #0]
 1004798:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
 100479a:	008b      	lsls	r3, r1, #2
 100479c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 10047a0:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 10047a4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 10047a8:	f042 0201 	orr.w	r2, r2, #1
 10047ac:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
 10047b0:	b125      	cbz	r5, 10047bc <nrfx_gpiote_trigger_enable+0x74>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
 10047b2:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
 10047b4:	4a19      	ldr	r2, [pc, #100]	; (100481c <nrfx_gpiote_trigger_enable+0xd4>)
 10047b6:	408b      	lsls	r3, r1
 10047b8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 10047bc:	b003      	add	sp, #12
 10047be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
 10047c0:	b955      	cbnz	r5, 10047d8 <nrfx_gpiote_trigger_enable+0x90>
 10047c2:	4913      	ldr	r1, [pc, #76]	; (1004810 <nrfx_gpiote_trigger_enable+0xc8>)
 10047c4:	4813      	ldr	r0, [pc, #76]	; (1004814 <nrfx_gpiote_trigger_enable+0xcc>)
 10047c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 10047ca:	f001 fe5c 	bl	1006486 <assert_print>
 10047ce:	f240 31ee 	movw	r1, #1006	; 0x3ee
 10047d2:	480f      	ldr	r0, [pc, #60]	; (1004810 <nrfx_gpiote_trigger_enable+0xc8>)
 10047d4:	f001 fe50 	bl	1006478 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 10047d8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
 10047dc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
 10047e0:	2b04      	cmp	r3, #4
 10047e2:	d011      	beq.n	1004808 <nrfx_gpiote_trigger_enable+0xc0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
 10047e4:	2b05      	cmp	r3, #5
 10047e6:	d011      	beq.n	100480c <nrfx_gpiote_trigger_enable+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 10047e8:	a801      	add	r0, sp, #4
 10047ea:	9401      	str	r4, [sp, #4]
 10047ec:	f7ff fdec 	bl	10043c8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
 10047f0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
 10047f2:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
 10047f4:	40d9      	lsrs	r1, r3
 10047f6:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
 10047fa:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
 10047fc:	4620      	mov	r0, r4
}
 10047fe:	b003      	add	sp, #12
 1004800:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
 1004804:	f002 b88d 	b.w	1006922 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
 1004808:	2103      	movs	r1, #3
 100480a:	e7f7      	b.n	10047fc <nrfx_gpiote_trigger_enable+0xb4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
 100480c:	2102      	movs	r1, #2
 100480e:	e7f5      	b.n	10047fc <nrfx_gpiote_trigger_enable+0xb4>
 1004810:	01007794 	.word	0x01007794
 1004814:	01006eb0 	.word	0x01006eb0
 1004818:	21000038 	.word	0x21000038
 100481c:	4100a000 	.word	0x4100a000

01004820 <nrfx_gpiote_trigger_disable>:
{
 1004820:	b508      	push	{r3, lr}
 1004822:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 1004824:	f7ff fd36 	bl	1004294 <pin_in_use_by_te>
 1004828:	b1c8      	cbz	r0, 100485e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
 100482a:	4610      	mov	r0, r2
 100482c:	f7ff fd48 	bl	10042c0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 1004830:	b9a8      	cbnz	r0, 100485e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1004832:	4b0e      	ldr	r3, [pc, #56]	; (100486c <nrfx_gpiote_trigger_disable+0x4c>)
 1004834:	3208      	adds	r2, #8
 1004836:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
 100483a:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 100483c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
 100483e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
 1004840:	490b      	ldr	r1, [pc, #44]	; (1004870 <nrfx_gpiote_trigger_disable+0x50>)
 1004842:	009b      	lsls	r3, r3, #2
 1004844:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1004848:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
 100484c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1004850:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 1004854:	f022 0203 	bic.w	r2, r2, #3
 1004858:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
 100485c:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 100485e:	2100      	movs	r1, #0
}
 1004860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 1004864:	4610      	mov	r0, r2
 1004866:	f002 b85c 	b.w	1006922 <nrf_gpio_cfg_sense_set>
 100486a:	bf00      	nop
 100486c:	21000038 	.word	0x21000038
 1004870:	4100a000 	.word	0x4100a000

01004874 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
 1004874:	4b10      	ldr	r3, [pc, #64]	; (10048b8 <nrfx_gpiote_pin_uninit+0x44>)
 1004876:	f100 0208 	add.w	r2, r0, #8
 100487a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
 100487e:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
 1004880:	07db      	lsls	r3, r3, #31
{
 1004882:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
 1004884:	d516      	bpl.n	10048b4 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
 1004886:	f7ff ffcb 	bl	1004820 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
 100488a:	4620      	mov	r0, r4
 100488c:	f7ff fd7e 	bl	100438c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1004890:	a801      	add	r0, sp, #4
 1004892:	9401      	str	r4, [sp, #4]
 1004894:	f7ff fd98 	bl	10043c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 1004898:	9b01      	ldr	r3, [sp, #4]
 100489a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 100489e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 10048a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 10048a6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
 10048aa:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
 10048ae:	4803      	ldr	r0, [pc, #12]	; (10048bc <nrfx_gpiote_pin_uninit+0x48>)
}
 10048b0:	b002      	add	sp, #8
 10048b2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
 10048b4:	4802      	ldr	r0, [pc, #8]	; (10048c0 <nrfx_gpiote_pin_uninit+0x4c>)
 10048b6:	e7fb      	b.n	10048b0 <nrfx_gpiote_pin_uninit+0x3c>
 10048b8:	21000038 	.word	0x21000038
 10048bc:	0bad0000 	.word	0x0bad0000
 10048c0:	0bad0004 	.word	0x0bad0004

010048c4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
 10048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
 10048c8:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
 10048ca:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 10048cc:	462c      	mov	r4, r5
{
 10048ce:	4b63      	ldr	r3, [pc, #396]	; (1004a5c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
 10048d0:	4863      	ldr	r0, [pc, #396]	; (1004a60 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 10048d2:	4964      	ldr	r1, [pc, #400]	; (1004a64 <nrfx_gpiote_irq_handler+0x1a0>)
{
 10048d4:	b089      	sub	sp, #36	; 0x24
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10048d6:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
 10048d8:	b136      	cbz	r6, 10048e8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
 10048da:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
 10048de:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 10048e0:	bf1e      	ittt	ne
 10048e2:	601c      	strne	r4, [r3, #0]
 10048e4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
 10048e6:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 10048e8:	3304      	adds	r3, #4
 10048ea:	428b      	cmp	r3, r1
        }
        mask <<= 1;
 10048ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 10048f0:	d1f1      	bne.n	10048d6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10048f2:	4b5b      	ldr	r3, [pc, #364]	; (1004a60 <nrfx_gpiote_irq_handler+0x19c>)
 10048f4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
 10048f8:	2b00      	cmp	r3, #0
 10048fa:	f000 8092 	beq.w	1004a22 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
 10048fe:	4f5a      	ldr	r7, [pc, #360]	; (1004a68 <nrfx_gpiote_irq_handler+0x1a4>)
 1004900:	4e5a      	ldr	r6, [pc, #360]	; (1004a6c <nrfx_gpiote_irq_handler+0x1a8>)
 1004902:	6a3b      	ldr	r3, [r7, #32]
 1004904:	9306      	str	r3, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
 1004906:	623b      	str	r3, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
 1004908:	6a33      	ldr	r3, [r6, #32]
 100490a:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
 100490c:	6233      	str	r3, [r6, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
 100490e:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
 1004912:	f10d 0a18 	add.w	sl, sp, #24
 1004916:	ea4f 1348 	mov.w	r3, r8, lsl #5
 100491a:	9302      	str	r3, [sp, #8]
 100491c:	e050      	b.n	10049c0 <nrfx_gpiote_irq_handler+0xfc>
                uint32_t pin = NRF_CTZ(latch[i]);
 100491e:	fa93 f3a3 	rbit	r3, r3
 1004922:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
 1004926:	9a02      	ldr	r2, [sp, #8]
 1004928:	eb03 0b02 	add.w	fp, r3, r2
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 100492c:	4b50      	ldr	r3, [pc, #320]	; (1004a70 <nrfx_gpiote_irq_handler+0x1ac>)
 100492e:	f10b 0208 	add.w	r2, fp, #8
 1004932:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
 1004936:	ea4f 04db 	mov.w	r4, fp, lsr #3
 100493a:	f3c2 0382 	ubfx	r3, r2, #2, #3
 100493e:	9301      	str	r3, [sp, #4]
 1004940:	4699      	mov	r9, r3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
 1004942:	2301      	movs	r3, #1
    bit = BITMASK_RELBIT_GET(bit);
 1004944:	f00b 0007 	and.w	r0, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
 1004948:	fa03 fc00 	lsl.w	ip, r3, r0
 100494c:	f81a 0004 	ldrb.w	r0, [sl, r4]
 1004950:	0891      	lsrs	r1, r2, #2
 1004952:	ea20 000c 	bic.w	r0, r0, ip
 1004956:	f80a 0004 	strb.w	r0, [sl, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100495a:	a805      	add	r0, sp, #20
 100495c:	9103      	str	r1, [sp, #12]
 100495e:	f8cd b014 	str.w	fp, [sp, #20]
 1004962:	f7ff fd31 	bl	10043c8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 1004966:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
 1004968:	9903      	ldr	r1, [sp, #12]
 100496a:	3480      	adds	r4, #128	; 0x80
 100496c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 1004970:	074b      	lsls	r3, r1, #29
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
 1004972:	f3c4 4401 	ubfx	r4, r4, #16, #2
 1004976:	d52d      	bpl.n	10049d4 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
 1004978:	4649      	mov	r1, r9
 100497a:	4658      	mov	r0, fp
 100497c:	f7ff fcaa 	bl	10042d4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1004980:	a805      	add	r0, sp, #20
 1004982:	f8cd b014 	str.w	fp, [sp, #20]
 1004986:	f7ff fd1f 	bl	10043c8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 100498a:	9a05      	ldr	r2, [sp, #20]
 100498c:	b2e4      	uxtb	r4, r4
 100498e:	3280      	adds	r2, #128	; 0x80
 1004990:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
 1004994:	f3c2 4201 	ubfx	r2, r2, #16, #2
 1004998:	4294      	cmp	r4, r2
 100499a:	d107      	bne.n	10049ac <nrfx_gpiote_irq_handler+0xe8>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 100499c:	2100      	movs	r1, #0
 100499e:	4658      	mov	r0, fp
 10049a0:	f001 ffbf 	bl	1006922 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
 10049a4:	4621      	mov	r1, r4
 10049a6:	4658      	mov	r0, fp
 10049a8:	f001 ffbb 	bl	1006922 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 10049ac:	a805      	add	r0, sp, #20
 10049ae:	f8cd b014 	str.w	fp, [sp, #20]
 10049b2:	f7ff fd09 	bl	10043c8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
 10049b6:	2201      	movs	r2, #1
 10049b8:	9b05      	ldr	r3, [sp, #20]
 10049ba:	fa02 f303 	lsl.w	r3, r2, r3
 10049be:	6203      	str	r3, [r0, #32]
            while (latch[i])
 10049c0:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 10049c4:	2b00      	cmp	r3, #0
 10049c6:	d1aa      	bne.n	100491e <nrfx_gpiote_irq_handler+0x5a>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
 10049c8:	f1b8 0f00 	cmp.w	r8, #0
 10049cc:	d11b      	bne.n	1004a06 <nrfx_gpiote_irq_handler+0x142>
 10049ce:	f04f 0801 	mov.w	r8, #1
 10049d2:	e7a0      	b.n	1004916 <nrfx_gpiote_irq_handler+0x52>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
 10049d4:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
 10049d6:	bf0c      	ite	eq
 10049d8:	2103      	moveq	r1, #3
 10049da:	2102      	movne	r1, #2
 10049dc:	4658      	mov	r0, fp
 10049de:	f001 ffa0 	bl	1006922 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
 10049e2:	9b01      	ldr	r3, [sp, #4]
 10049e4:	2b03      	cmp	r3, #3
 10049e6:	d004      	beq.n	10049f2 <nrfx_gpiote_irq_handler+0x12e>
 10049e8:	2c02      	cmp	r4, #2
 10049ea:	d107      	bne.n	10049fc <nrfx_gpiote_irq_handler+0x138>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
 10049ec:	f1b9 0f01 	cmp.w	r9, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
 10049f0:	d1dc      	bne.n	10049ac <nrfx_gpiote_irq_handler+0xe8>
            call_handler(pin, trigger);
 10049f2:	4649      	mov	r1, r9
 10049f4:	4658      	mov	r0, fp
 10049f6:	f7ff fc6d 	bl	10042d4 <call_handler>
 10049fa:	e7d7      	b.n	10049ac <nrfx_gpiote_irq_handler+0xe8>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
 10049fc:	2c03      	cmp	r4, #3
 10049fe:	d1d5      	bne.n	10049ac <nrfx_gpiote_irq_handler+0xe8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
 1004a00:	f1b9 0f02 	cmp.w	r9, #2
 1004a04:	e7f4      	b.n	10049f0 <nrfx_gpiote_irq_handler+0x12c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1004a06:	4a16      	ldr	r2, [pc, #88]	; (1004a60 <nrfx_gpiote_irq_handler+0x19c>)
 1004a08:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
 1004a0c:	f8d2 317c 	ldr.w	r3, [r2, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
 1004a10:	6a3a      	ldr	r2, [r7, #32]
 1004a12:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
 1004a14:	623a      	str	r2, [r7, #32]
        *p_masks = gpio_regs[i]->LATCH;
 1004a16:	6a33      	ldr	r3, [r6, #32]
 1004a18:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
 1004a1a:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
 1004a1c:	4313      	orrs	r3, r2
 1004a1e:	f47f af76 	bne.w	100490e <nrfx_gpiote_irq_handler+0x4a>
        mask &= ~NRFX_BIT(ch);
 1004a22:	2401      	movs	r4, #1
    while (mask)
 1004a24:	b915      	cbnz	r5, 1004a2c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
 1004a26:	b009      	add	sp, #36	; 0x24
 1004a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
 1004a2c:	fa95 f3a5 	rbit	r3, r5
 1004a30:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
 1004a34:	fa04 f203 	lsl.w	r2, r4, r3
 1004a38:	009b      	lsls	r3, r3, #2
 1004a3a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1004a3e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
 1004a42:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
 1004a46:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
 1004a4a:	f3c0 2005 	ubfx	r0, r0, #8, #6
 1004a4e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
 1004a52:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
 1004a56:	f7ff fc3d 	bl	10042d4 <call_handler>
 1004a5a:	e7e3      	b.n	1004a24 <nrfx_gpiote_irq_handler+0x160>
 1004a5c:	4100a100 	.word	0x4100a100
 1004a60:	4100a000 	.word	0x4100a000
 1004a64:	4100a120 	.word	0x4100a120
 1004a68:	418c0500 	.word	0x418c0500
 1004a6c:	418c0800 	.word	0x418c0800
 1004a70:	21000038 	.word	0x21000038

01004a74 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1004a74:	4b0e      	ldr	r3, [pc, #56]	; (1004ab0 <z_sys_init_run_level+0x3c>)
{
 1004a76:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1004a78:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 1004a7c:	3001      	adds	r0, #1
 1004a7e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 1004a82:	42a6      	cmp	r6, r4
 1004a84:	d800      	bhi.n	1004a88 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 1004a86:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 1004a88:	e9d4 3500 	ldrd	r3, r5, [r4]
 1004a8c:	4628      	mov	r0, r5
 1004a8e:	4798      	blx	r3
		if (dev != NULL) {
 1004a90:	b165      	cbz	r5, 1004aac <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 1004a92:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 1004a94:	b130      	cbz	r0, 1004aa4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 1004a96:	2800      	cmp	r0, #0
 1004a98:	bfb8      	it	lt
 1004a9a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 1004a9c:	28ff      	cmp	r0, #255	; 0xff
 1004a9e:	bfa8      	it	ge
 1004aa0:	20ff      	movge	r0, #255	; 0xff
 1004aa2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 1004aa4:	785a      	ldrb	r2, [r3, #1]
 1004aa6:	f042 0201 	orr.w	r2, r2, #1
 1004aaa:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1004aac:	3408      	adds	r4, #8
 1004aae:	e7e8      	b.n	1004a82 <z_sys_init_run_level+0xe>
 1004ab0:	01006ce4 	.word	0x01006ce4

01004ab4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 1004ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1004ab6:	4604      	mov	r4, r0
 1004ab8:	460e      	mov	r6, r1
	__asm__ volatile(
 1004aba:	f04f 0320 	mov.w	r3, #32
 1004abe:	f3ef 8711 	mrs	r7, BASEPRI
 1004ac2:	f383 8812 	msr	BASEPRI_MAX, r3
 1004ac6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 1004aca:	f001 f8ed 	bl	1005ca8 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 1004ace:	2200      	movs	r2, #0
 1004ad0:	2c04      	cmp	r4, #4
 1004ad2:	bf98      	it	ls
 1004ad4:	4b1d      	ldrls	r3, [pc, #116]	; (1004b4c <z_fatal_error+0x98>)
 1004ad6:	4605      	mov	r5, r0
	switch (reason) {
 1004ad8:	bf94      	ite	ls
 1004ada:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
 1004ade:	4b1c      	ldrhi	r3, [pc, #112]	; (1004b50 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 1004ae0:	9200      	str	r2, [sp, #0]
 1004ae2:	2145      	movs	r1, #69	; 0x45
 1004ae4:	4622      	mov	r2, r4
 1004ae6:	481b      	ldr	r0, [pc, #108]	; (1004b54 <z_fatal_error+0xa0>)
 1004ae8:	f001 fcdb 	bl	10064a2 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 1004aec:	b13e      	cbz	r6, 1004afe <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 1004aee:	69f3      	ldr	r3, [r6, #28]
 1004af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 1004af4:	b11b      	cbz	r3, 1004afe <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
 1004af6:	2145      	movs	r1, #69	; 0x45
 1004af8:	4817      	ldr	r0, [pc, #92]	; (1004b58 <z_fatal_error+0xa4>)
 1004afa:	f001 fcd2 	bl	10064a2 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 1004afe:	b135      	cbz	r5, 1004b0e <z_fatal_error+0x5a>
 1004b00:	4628      	mov	r0, r5
 1004b02:	f001 ff32 	bl	100696a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 1004b06:	4603      	mov	r3, r0
 1004b08:	b108      	cbz	r0, 1004b0e <z_fatal_error+0x5a>
 1004b0a:	7802      	ldrb	r2, [r0, #0]
 1004b0c:	b902      	cbnz	r2, 1004b10 <z_fatal_error+0x5c>
		thread_name = "unknown";
 1004b0e:	4b13      	ldr	r3, [pc, #76]	; (1004b5c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 1004b10:	462a      	mov	r2, r5
 1004b12:	2145      	movs	r1, #69	; 0x45
 1004b14:	4812      	ldr	r0, [pc, #72]	; (1004b60 <z_fatal_error+0xac>)
 1004b16:	f001 fcc4 	bl	10064a2 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 1004b1a:	4631      	mov	r1, r6
 1004b1c:	4620      	mov	r0, r4
 1004b1e:	f7fe fa71 	bl	1003004 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
 1004b22:	2c04      	cmp	r4, #4
 1004b24:	d108      	bne.n	1004b38 <z_fatal_error+0x84>
 1004b26:	490f      	ldr	r1, [pc, #60]	; (1004b64 <z_fatal_error+0xb0>)
 1004b28:	480f      	ldr	r0, [pc, #60]	; (1004b68 <z_fatal_error+0xb4>)
 1004b2a:	228f      	movs	r2, #143	; 0x8f
 1004b2c:	f001 fcab 	bl	1006486 <assert_print>
 1004b30:	218f      	movs	r1, #143	; 0x8f
 1004b32:	480c      	ldr	r0, [pc, #48]	; (1004b64 <z_fatal_error+0xb0>)
 1004b34:	f001 fca0 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1004b38:	f387 8811 	msr	BASEPRI, r7
 1004b3c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 1004b40:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 1004b42:	b003      	add	sp, #12
 1004b44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 1004b48:	f7fd b81c 	b.w	1001b84 <z_impl_k_thread_abort>
 1004b4c:	01006cfc 	.word	0x01006cfc
 1004b50:	010077d2 	.word	0x010077d2
 1004b54:	010077e8 	.word	0x010077e8
 1004b58:	01007815 	.word	0x01007815
 1004b5c:	010077e0 	.word	0x010077e0
 1004b60:	0100783b 	.word	0x0100783b
 1004b64:	01007858 	.word	0x01007858
 1004b68:	01006eb0 	.word	0x01006eb0

01004b6c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 1004b6c:	2201      	movs	r2, #1
{
 1004b6e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 1004b70:	4b09      	ldr	r3, [pc, #36]	; (1004b98 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 1004b72:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 1004b74:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 1004b76:	f7ff ff7d 	bl	1004a74 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 1004b7a:	f001 fb97 	bl	10062ac <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 1004b7e:	2003      	movs	r0, #3
 1004b80:	f7ff ff78 	bl	1004a74 <z_sys_init_run_level>

	z_init_static_threads();
 1004b84:	f000 f90a 	bl	1004d9c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 1004b88:	f7fb fcd2 	bl	1000530 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 1004b8c:	4a03      	ldr	r2, [pc, #12]	; (1004b9c <bg_thread_main+0x30>)
 1004b8e:	7b13      	ldrb	r3, [r2, #12]
 1004b90:	f023 0301 	bic.w	r3, r3, #1
 1004b94:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 1004b96:	bd08      	pop	{r3, pc}
 1004b98:	2100070c 	.word	0x2100070c
 1004b9c:	21000198 	.word	0x21000198

01004ba0 <z_bss_zero>:
{
 1004ba0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 1004ba2:	4803      	ldr	r0, [pc, #12]	; (1004bb0 <z_bss_zero+0x10>)
 1004ba4:	4a03      	ldr	r2, [pc, #12]	; (1004bb4 <z_bss_zero+0x14>)
 1004ba6:	2100      	movs	r1, #0
 1004ba8:	1a12      	subs	r2, r2, r0
 1004baa:	f001 fed4 	bl	1006956 <z_early_memset>
}
 1004bae:	bd08      	pop	{r3, pc}
 1004bb0:	210000f8 	.word	0x210000f8
 1004bb4:	21000710 	.word	0x21000710

01004bb8 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 1004bb8:	2300      	movs	r3, #0
 1004bba:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 1004bbc:	b570      	push	{r4, r5, r6, lr}
 1004bbe:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 1004bc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 1004bc4:	220f      	movs	r2, #15
 1004bc6:	9301      	str	r3, [sp, #4]
 1004bc8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 1004bcc:	2318      	movs	r3, #24
 1004bce:	4d0f      	ldr	r5, [pc, #60]	; (1004c0c <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
 1004bd0:	4e0f      	ldr	r6, [pc, #60]	; (1004c10 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 1004bd2:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 1004bd6:	490f      	ldr	r1, [pc, #60]	; (1004c14 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
 1004bd8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 1004bdc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 1004bde:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 1004be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 1004be6:	4630      	mov	r0, r6
 1004be8:	4b0b      	ldr	r3, [pc, #44]	; (1004c18 <z_init_cpu+0x60>)
 1004bea:	9500      	str	r5, [sp, #0]
 1004bec:	f000 f882 	bl	1004cf4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 1004bf0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 1004bf2:	480a      	ldr	r0, [pc, #40]	; (1004c1c <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
 1004bf4:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 1004bf6:	3401      	adds	r4, #1
 1004bf8:	f023 0304 	bic.w	r3, r3, #4
 1004bfc:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
 1004c00:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 1004c02:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 1004c04:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 1004c06:	b006      	add	sp, #24
 1004c08:	bd70      	pop	{r4, r5, r6, pc}
 1004c0a:	bf00      	nop
 1004c0c:	210003e4 	.word	0x210003e4
 1004c10:	21000118 	.word	0x21000118
 1004c14:	21000b10 	.word	0x21000b10
 1004c18:	01004edd 	.word	0x01004edd
 1004c1c:	21000c10 	.word	0x21000c10

01004c20 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 1004c20:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
 1004c22:	4b2d      	ldr	r3, [pc, #180]	; (1004cd8 <z_cstart+0xb8>)
 1004c24:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
 1004c26:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 1004c2a:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 1004c2e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1004c32:	2400      	movs	r4, #0
 1004c34:	23e0      	movs	r3, #224	; 0xe0
 1004c36:	4d29      	ldr	r5, [pc, #164]	; (1004cdc <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 1004c38:	4e29      	ldr	r6, [pc, #164]	; (1004ce0 <z_cstart+0xc0>)
 1004c3a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 1004c3e:	77ec      	strb	r4, [r5, #31]
 1004c40:	762c      	strb	r4, [r5, #24]
 1004c42:	766c      	strb	r4, [r5, #25]
 1004c44:	76ac      	strb	r4, [r5, #26]
 1004c46:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 1004c4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1004c4c:	4f25      	ldr	r7, [pc, #148]	; (1004ce4 <z_cstart+0xc4>)
 1004c4e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 1004c52:	626b      	str	r3, [r5, #36]	; 0x24
 1004c54:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 1004c58:	f7fc fefa 	bl	1001a50 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 1004c5c:	f7fc fba0 	bl	10013a0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 1004c60:	f04f 33ff 	mov.w	r3, #4294967295
 1004c64:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 1004c66:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 1004c68:	f7fd f960 	bl	1001f2c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 1004c6c:	f7fc ffa0 	bl	1001bb0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 1004c70:	f240 1301 	movw	r3, #257	; 0x101
 1004c74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 1004c78:	ab06      	add	r3, sp, #24
 1004c7a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 1004c7c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 1004c80:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 1004c82:	f001 fe5d 	bl	1006940 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 1004c86:	4620      	mov	r0, r4
 1004c88:	f7ff fef4 	bl	1004a74 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 1004c8c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 1004c8e:	4d16      	ldr	r5, [pc, #88]	; (1004ce8 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 1004c90:	f7ff fef0 	bl	1004a74 <z_sys_init_run_level>
	z_sched_init();
 1004c94:	f000 febe 	bl	1005a14 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1004c98:	4b14      	ldr	r3, [pc, #80]	; (1004cec <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
 1004c9a:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1004c9c:	9305      	str	r3, [sp, #20]
 1004c9e:	2301      	movs	r3, #1
 1004ca0:	4913      	ldr	r1, [pc, #76]	; (1004cf0 <z_cstart+0xd0>)
 1004ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 1004ca6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 1004caa:	4628      	mov	r0, r5
 1004cac:	463b      	mov	r3, r7
 1004cae:	e9cd 4401 	strd	r4, r4, [sp, #4]
 1004cb2:	9400      	str	r4, [sp, #0]
 1004cb4:	f000 f81e 	bl	1004cf4 <z_setup_new_thread>
 1004cb8:	4606      	mov	r6, r0
 1004cba:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
 1004cbc:	4628      	mov	r0, r5
 1004cbe:	f022 0204 	bic.w	r2, r2, #4
 1004cc2:	736a      	strb	r2, [r5, #13]
 1004cc4:	f000 fc2a 	bl	100551c <z_ready_thread>
	z_init_cpu(0);
 1004cc8:	4620      	mov	r0, r4
 1004cca:	f7ff ff75 	bl	1004bb8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 1004cce:	463a      	mov	r2, r7
 1004cd0:	4631      	mov	r1, r6
 1004cd2:	4628      	mov	r0, r5
 1004cd4:	f7fc fc94 	bl	1001600 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 1004cd8:	21000c10 	.word	0x21000c10
 1004cdc:	e000ed00 	.word	0xe000ed00
 1004ce0:	210003e4 	.word	0x210003e4
 1004ce4:	01004b6d 	.word	0x01004b6d
 1004ce8:	21000198 	.word	0x21000198
 1004cec:	010078c4 	.word	0x010078c4
 1004cf0:	21000710 	.word	0x21000710

01004cf4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 1004cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1004cf8:	b085      	sub	sp, #20
 1004cfa:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 1004cfe:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
 1004d00:	f1b9 0f0f 	cmp.w	r9, #15
{
 1004d04:	460f      	mov	r7, r1
 1004d06:	4615      	mov	r5, r2
 1004d08:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
 1004d0a:	d12e      	bne.n	1004d6a <z_setup_new_thread+0x76>
 1004d0c:	4b1f      	ldr	r3, [pc, #124]	; (1004d8c <z_setup_new_thread+0x98>)
 1004d0e:	4598      	cmp	r8, r3
 1004d10:	d12f      	bne.n	1004d72 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 1004d12:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 1004d16:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 1004d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
 1004d1c:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
 1004d1e:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 1004d20:	2304      	movs	r3, #4
 1004d22:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1004d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 1004d26:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1004d28:	9302      	str	r3, [sp, #8]
 1004d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 1004d2c:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1004d30:	9301      	str	r3, [sp, #4]
 1004d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
 1004d34:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
 1004d36:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1004d3a:	9300      	str	r3, [sp, #0]
 1004d3c:	462a      	mov	r2, r5
 1004d3e:	4643      	mov	r3, r8
 1004d40:	4639      	mov	r1, r7
 1004d42:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 1004d44:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
 1004d48:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
 1004d4a:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
 1004d4e:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
 1004d50:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1004d52:	f7fc fc39 	bl	10015c8 <arch_new_thread>
	if (!_current) {
 1004d56:	4b0e      	ldr	r3, [pc, #56]	; (1004d90 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
 1004d58:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 1004d5a:	689b      	ldr	r3, [r3, #8]
 1004d5c:	b103      	cbz	r3, 1004d60 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
 1004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 1004d60:	4628      	mov	r0, r5
 1004d62:	6723      	str	r3, [r4, #112]	; 0x70
 1004d64:	b005      	add	sp, #20
 1004d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
 1004d6a:	f109 0310 	add.w	r3, r9, #16
 1004d6e:	2b1e      	cmp	r3, #30
 1004d70:	d9cf      	bls.n	1004d12 <z_setup_new_thread+0x1e>
 1004d72:	f240 12ff 	movw	r2, #511	; 0x1ff
 1004d76:	4907      	ldr	r1, [pc, #28]	; (1004d94 <z_setup_new_thread+0xa0>)
 1004d78:	4807      	ldr	r0, [pc, #28]	; (1004d98 <z_setup_new_thread+0xa4>)
 1004d7a:	f001 fb84 	bl	1006486 <assert_print>
 1004d7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 1004d82:	4804      	ldr	r0, [pc, #16]	; (1004d94 <z_setup_new_thread+0xa0>)
 1004d84:	f001 fb78 	bl	1006478 <assert_post_action>
 1004d88:	e7c3      	b.n	1004d12 <z_setup_new_thread+0x1e>
 1004d8a:	bf00      	nop
 1004d8c:	01004edd 	.word	0x01004edd
 1004d90:	210003e4 	.word	0x210003e4
 1004d94:	010078cc 	.word	0x010078cc
 1004d98:	01006eb0 	.word	0x01006eb0

01004d9c <z_init_static_threads>:
{
 1004d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1004da0:	4c37      	ldr	r4, [pc, #220]	; (1004e80 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
 1004da2:	4d38      	ldr	r5, [pc, #224]	; (1004e84 <z_init_static_threads+0xe8>)
 1004da4:	4f38      	ldr	r7, [pc, #224]	; (1004e88 <z_init_static_threads+0xec>)
{
 1004da6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 1004da8:	42ac      	cmp	r4, r5
 1004daa:	4626      	mov	r6, r4
 1004dac:	d90a      	bls.n	1004dc4 <z_init_static_threads+0x28>
 1004dae:	4639      	mov	r1, r7
 1004db0:	4836      	ldr	r0, [pc, #216]	; (1004e8c <z_init_static_threads+0xf0>)
 1004db2:	f240 22d5 	movw	r2, #725	; 0x2d5
 1004db6:	f001 fb66 	bl	1006486 <assert_print>
 1004dba:	f240 21d5 	movw	r1, #725	; 0x2d5
 1004dbe:	4638      	mov	r0, r7
 1004dc0:	f001 fb5a 	bl	1006478 <assert_post_action>
 1004dc4:	42ae      	cmp	r6, r5
 1004dc6:	f104 0430 	add.w	r4, r4, #48	; 0x30
 1004dca:	d31b      	bcc.n	1004e04 <z_init_static_threads+0x68>
	k_sched_lock();
 1004dcc:	f000 f9e6 	bl	100519c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 1004dd0:	4c2b      	ldr	r4, [pc, #172]	; (1004e80 <z_init_static_threads+0xe4>)
 1004dd2:	4e2d      	ldr	r6, [pc, #180]	; (1004e88 <z_init_static_threads+0xec>)
 1004dd4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1004e8c <z_init_static_threads+0xf0>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 1004dd8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1004e90 <z_init_static_threads+0xf4>
 1004ddc:	42ac      	cmp	r4, r5
 1004dde:	d90a      	bls.n	1004df6 <z_init_static_threads+0x5a>
 1004de0:	4631      	mov	r1, r6
 1004de2:	4640      	mov	r0, r8
 1004de4:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 1004de8:	f001 fb4d 	bl	1006486 <assert_print>
 1004dec:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 1004df0:	4630      	mov	r0, r6
 1004df2:	f001 fb41 	bl	1006478 <assert_post_action>
 1004df6:	42ac      	cmp	r4, r5
 1004df8:	d320      	bcc.n	1004e3c <z_init_static_threads+0xa0>
}
 1004dfa:	b007      	add	sp, #28
 1004dfc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
 1004e00:	f000 bd6e 	b.w	10058e0 <k_sched_unlock>
		z_setup_new_thread(
 1004e04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 1004e08:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 1004e0c:	9305      	str	r3, [sp, #20]
 1004e0e:	f854 3c10 	ldr.w	r3, [r4, #-16]
 1004e12:	9304      	str	r3, [sp, #16]
 1004e14:	f854 3c14 	ldr.w	r3, [r4, #-20]
 1004e18:	9303      	str	r3, [sp, #12]
 1004e1a:	f854 3c18 	ldr.w	r3, [r4, #-24]
 1004e1e:	9302      	str	r3, [sp, #8]
 1004e20:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 1004e24:	9301      	str	r3, [sp, #4]
 1004e26:	f854 3c20 	ldr.w	r3, [r4, #-32]
 1004e2a:	9300      	str	r3, [sp, #0]
 1004e2c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 1004e30:	f7ff ff60 	bl	1004cf4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 1004e34:	f854 3c30 	ldr.w	r3, [r4, #-48]
 1004e38:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 1004e3a:	e7b5      	b.n	1004da8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 1004e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1004e3e:	1c5a      	adds	r2, r3, #1
 1004e40:	d00f      	beq.n	1004e62 <z_init_static_threads+0xc6>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
 1004e42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 1004e46:	f240 30e7 	movw	r0, #999	; 0x3e7
 1004e4a:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
 1004e4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1004e50:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1004e54:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
 1004e58:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1004e5a:	d104      	bne.n	1004e66 <z_init_static_threads+0xca>
	z_sched_start(thread);
 1004e5c:	4638      	mov	r0, r7
 1004e5e:	f000 fb93 	bl	1005588 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 1004e62:	3430      	adds	r4, #48	; 0x30
 1004e64:	e7ba      	b.n	1004ddc <z_init_static_threads+0x40>
 1004e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 1004e6a:	2300      	movs	r3, #0
 1004e6c:	f7fb f924 	bl	10000b8 <__aeabi_uldivmod>
 1004e70:	4602      	mov	r2, r0
 1004e72:	460b      	mov	r3, r1
 1004e74:	f107 0018 	add.w	r0, r7, #24
 1004e78:	4649      	mov	r1, r9
 1004e7a:	f001 f813 	bl	1005ea4 <z_add_timeout>
 1004e7e:	e7f0      	b.n	1004e62 <z_init_static_threads+0xc6>
 1004e80:	210000f4 	.word	0x210000f4
 1004e84:	210000f4 	.word	0x210000f4
 1004e88:	010078cc 	.word	0x010078cc
 1004e8c:	01006eb0 	.word	0x01006eb0
 1004e90:	0100560d 	.word	0x0100560d

01004e94 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
 1004e94:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
 1004e96:	b138      	cbz	r0, 1004ea8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
 1004e98:	4b04      	ldr	r3, [pc, #16]	; (1004eac <z_spin_lock_valid+0x18>)
 1004e9a:	f000 0003 	and.w	r0, r0, #3
 1004e9e:	7d1b      	ldrb	r3, [r3, #20]
 1004ea0:	1ac0      	subs	r0, r0, r3
 1004ea2:	bf18      	it	ne
 1004ea4:	2001      	movne	r0, #1
 1004ea6:	4770      	bx	lr
			return false;
		}
	}
	return true;
 1004ea8:	2001      	movs	r0, #1
}
 1004eaa:	4770      	bx	lr
 1004eac:	210003e4 	.word	0x210003e4

01004eb0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
 1004eb0:	4905      	ldr	r1, [pc, #20]	; (1004ec8 <z_spin_unlock_valid+0x18>)
{
 1004eb2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
 1004eb4:	688a      	ldr	r2, [r1, #8]
 1004eb6:	7d08      	ldrb	r0, [r1, #20]
 1004eb8:	6819      	ldr	r1, [r3, #0]
 1004eba:	4302      	orrs	r2, r0
 1004ebc:	2000      	movs	r0, #0
 1004ebe:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
 1004ec0:	bf04      	itt	eq
 1004ec2:	6018      	streq	r0, [r3, #0]
	return true;
 1004ec4:	2001      	moveq	r0, #1
}
 1004ec6:	4770      	bx	lr
 1004ec8:	210003e4 	.word	0x210003e4

01004ecc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
 1004ecc:	4a02      	ldr	r2, [pc, #8]	; (1004ed8 <z_spin_lock_set_owner+0xc>)
 1004ece:	7d11      	ldrb	r1, [r2, #20]
 1004ed0:	6893      	ldr	r3, [r2, #8]
 1004ed2:	430b      	orrs	r3, r1
 1004ed4:	6003      	str	r3, [r0, #0]
}
 1004ed6:	4770      	bx	lr
 1004ed8:	210003e4 	.word	0x210003e4

01004edc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 1004edc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
 1004ede:	4b0d      	ldr	r3, [pc, #52]	; (1004f14 <idle+0x38>)
 1004ee0:	689b      	ldr	r3, [r3, #8]
 1004ee2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 1004ee6:	2b00      	cmp	r3, #0
 1004ee8:	da08      	bge.n	1004efc <idle+0x20>
 1004eea:	490b      	ldr	r1, [pc, #44]	; (1004f18 <idle+0x3c>)
 1004eec:	480b      	ldr	r0, [pc, #44]	; (1004f1c <idle+0x40>)
 1004eee:	2227      	movs	r2, #39	; 0x27
 1004ef0:	f001 fac9 	bl	1006486 <assert_print>
 1004ef4:	2127      	movs	r1, #39	; 0x27
 1004ef6:	4808      	ldr	r0, [pc, #32]	; (1004f18 <idle+0x3c>)
 1004ef8:	f001 fabe 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1004efc:	f04f 0220 	mov.w	r2, #32
 1004f00:	f3ef 8311 	mrs	r3, BASEPRI
 1004f04:	f382 8812 	msr	BASEPRI_MAX, r2
 1004f08:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
 1004f0c:	f7fc fa4e 	bl	10013ac <arch_cpu_idle>
 1004f10:	e7f4      	b.n	1004efc <idle+0x20>
 1004f12:	bf00      	nop
 1004f14:	210003e4 	.word	0x210003e4
 1004f18:	010078ef 	.word	0x010078ef
 1004f1c:	01006eb0 	.word	0x01006eb0

01004f20 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 1004f20:	b538      	push	{r3, r4, r5, lr}
 1004f22:	4604      	mov	r4, r0
 1004f24:	f04f 0320 	mov.w	r3, #32
 1004f28:	f3ef 8511 	mrs	r5, BASEPRI
 1004f2c:	f383 8812 	msr	BASEPRI_MAX, r3
 1004f30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1004f34:	4812      	ldr	r0, [pc, #72]	; (1004f80 <z_impl_k_sem_give+0x60>)
 1004f36:	f7ff ffad 	bl	1004e94 <z_spin_lock_valid>
 1004f3a:	b940      	cbnz	r0, 1004f4e <z_impl_k_sem_give+0x2e>
 1004f3c:	4911      	ldr	r1, [pc, #68]	; (1004f84 <z_impl_k_sem_give+0x64>)
 1004f3e:	4812      	ldr	r0, [pc, #72]	; (1004f88 <z_impl_k_sem_give+0x68>)
 1004f40:	228e      	movs	r2, #142	; 0x8e
 1004f42:	f001 faa0 	bl	1006486 <assert_print>
 1004f46:	218e      	movs	r1, #142	; 0x8e
 1004f48:	480e      	ldr	r0, [pc, #56]	; (1004f84 <z_impl_k_sem_give+0x64>)
 1004f4a:	f001 fa95 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1004f4e:	480c      	ldr	r0, [pc, #48]	; (1004f80 <z_impl_k_sem_give+0x60>)
 1004f50:	f7ff ffbc 	bl	1004ecc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 1004f54:	4620      	mov	r0, r4
 1004f56:	f000 fd1f 	bl	1005998 <z_unpend_first_thread>

	if (thread != NULL) {
 1004f5a:	b148      	cbz	r0, 1004f70 <z_impl_k_sem_give+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 1004f5c:	2200      	movs	r2, #0
 1004f5e:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 1004f60:	f000 fadc 	bl	100551c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 1004f64:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 1004f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 1004f6a:	4805      	ldr	r0, [pc, #20]	; (1004f80 <z_impl_k_sem_give+0x60>)
 1004f6c:	f000 b8e0 	b.w	1005130 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 1004f70:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 1004f74:	429a      	cmp	r2, r3
 1004f76:	bf18      	it	ne
 1004f78:	3301      	addne	r3, #1
 1004f7a:	60a3      	str	r3, [r4, #8]
}
 1004f7c:	e7f2      	b.n	1004f64 <z_impl_k_sem_give+0x44>
 1004f7e:	bf00      	nop
 1004f80:	21000408 	.word	0x21000408
 1004f84:	01006fdf 	.word	0x01006fdf
 1004f88:	01006eb0 	.word	0x01006eb0

01004f8c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 1004f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1004f8e:	4604      	mov	r4, r0
 1004f90:	4616      	mov	r6, r2
 1004f92:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1004f94:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
 1004f98:	b15b      	cbz	r3, 1004fb2 <z_impl_k_sem_take+0x26>
 1004f9a:	ea52 0305 	orrs.w	r3, r2, r5
 1004f9e:	d008      	beq.n	1004fb2 <z_impl_k_sem_take+0x26>
 1004fa0:	492b      	ldr	r1, [pc, #172]	; (1005050 <z_impl_k_sem_take+0xc4>)
 1004fa2:	482c      	ldr	r0, [pc, #176]	; (1005054 <z_impl_k_sem_take+0xc8>)
 1004fa4:	2279      	movs	r2, #121	; 0x79
 1004fa6:	f001 fa6e 	bl	1006486 <assert_print>
 1004faa:	2179      	movs	r1, #121	; 0x79
 1004fac:	4828      	ldr	r0, [pc, #160]	; (1005050 <z_impl_k_sem_take+0xc4>)
 1004fae:	f001 fa63 	bl	1006478 <assert_post_action>
 1004fb2:	f04f 0320 	mov.w	r3, #32
 1004fb6:	f3ef 8711 	mrs	r7, BASEPRI
 1004fba:	f383 8812 	msr	BASEPRI_MAX, r3
 1004fbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1004fc2:	4825      	ldr	r0, [pc, #148]	; (1005058 <z_impl_k_sem_take+0xcc>)
 1004fc4:	f7ff ff66 	bl	1004e94 <z_spin_lock_valid>
 1004fc8:	b940      	cbnz	r0, 1004fdc <z_impl_k_sem_take+0x50>
 1004fca:	4924      	ldr	r1, [pc, #144]	; (100505c <z_impl_k_sem_take+0xd0>)
 1004fcc:	4821      	ldr	r0, [pc, #132]	; (1005054 <z_impl_k_sem_take+0xc8>)
 1004fce:	228e      	movs	r2, #142	; 0x8e
 1004fd0:	f001 fa59 	bl	1006486 <assert_print>
 1004fd4:	218e      	movs	r1, #142	; 0x8e
 1004fd6:	4821      	ldr	r0, [pc, #132]	; (100505c <z_impl_k_sem_take+0xd0>)
 1004fd8:	f001 fa4e 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1004fdc:	481e      	ldr	r0, [pc, #120]	; (1005058 <z_impl_k_sem_take+0xcc>)
 1004fde:	f7ff ff75 	bl	1004ecc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 1004fe2:	68a3      	ldr	r3, [r4, #8]
 1004fe4:	b1ab      	cbz	r3, 1005012 <z_impl_k_sem_take+0x86>
		sem->count--;
 1004fe6:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1004fe8:	481b      	ldr	r0, [pc, #108]	; (1005058 <z_impl_k_sem_take+0xcc>)
 1004fea:	60a3      	str	r3, [r4, #8]
 1004fec:	f7ff ff60 	bl	1004eb0 <z_spin_unlock_valid>
 1004ff0:	b940      	cbnz	r0, 1005004 <z_impl_k_sem_take+0x78>
 1004ff2:	491a      	ldr	r1, [pc, #104]	; (100505c <z_impl_k_sem_take+0xd0>)
 1004ff4:	4817      	ldr	r0, [pc, #92]	; (1005054 <z_impl_k_sem_take+0xc8>)
 1004ff6:	22b9      	movs	r2, #185	; 0xb9
 1004ff8:	f001 fa45 	bl	1006486 <assert_print>
 1004ffc:	21b9      	movs	r1, #185	; 0xb9
 1004ffe:	4817      	ldr	r0, [pc, #92]	; (100505c <z_impl_k_sem_take+0xd0>)
 1005000:	f001 fa3a 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005004:	f387 8811 	msr	BASEPRI, r7
 1005008:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 100500c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 100500e:	b003      	add	sp, #12
 1005010:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 1005012:	ea56 0305 	orrs.w	r3, r6, r5
 1005016:	d113      	bne.n	1005040 <z_impl_k_sem_take+0xb4>
 1005018:	480f      	ldr	r0, [pc, #60]	; (1005058 <z_impl_k_sem_take+0xcc>)
 100501a:	f7ff ff49 	bl	1004eb0 <z_spin_unlock_valid>
 100501e:	b940      	cbnz	r0, 1005032 <z_impl_k_sem_take+0xa6>
 1005020:	490e      	ldr	r1, [pc, #56]	; (100505c <z_impl_k_sem_take+0xd0>)
 1005022:	480c      	ldr	r0, [pc, #48]	; (1005054 <z_impl_k_sem_take+0xc8>)
 1005024:	22b9      	movs	r2, #185	; 0xb9
 1005026:	f001 fa2e 	bl	1006486 <assert_print>
 100502a:	21b9      	movs	r1, #185	; 0xb9
 100502c:	480b      	ldr	r0, [pc, #44]	; (100505c <z_impl_k_sem_take+0xd0>)
 100502e:	f001 fa23 	bl	1006478 <assert_post_action>
 1005032:	f387 8811 	msr	BASEPRI, r7
 1005036:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 100503a:	f06f 000f 	mvn.w	r0, #15
 100503e:	e7e6      	b.n	100500e <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 1005040:	4622      	mov	r2, r4
 1005042:	4639      	mov	r1, r7
 1005044:	e9cd 6500 	strd	r6, r5, [sp]
 1005048:	4803      	ldr	r0, [pc, #12]	; (1005058 <z_impl_k_sem_take+0xcc>)
 100504a:	f000 fbcb 	bl	10057e4 <z_pend_curr>
	return ret;
 100504e:	e7de      	b.n	100500e <z_impl_k_sem_take+0x82>
 1005050:	01007910 	.word	0x01007910
 1005054:	01006eb0 	.word	0x01006eb0
 1005058:	21000408 	.word	0x21000408
 100505c:	01006fdf 	.word	0x01006fdf

01005060 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 1005060:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 1005062:	4d07      	ldr	r5, [pc, #28]	; (1005080 <z_reset_time_slice+0x20>)
 1005064:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 1005066:	b154      	cbz	r4, 100507e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 1005068:	f7fd ff86 	bl	1002f78 <sys_clock_elapsed>
 100506c:	4b05      	ldr	r3, [pc, #20]	; (1005084 <z_reset_time_slice+0x24>)
 100506e:	4404      	add	r4, r0
 1005070:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 1005072:	6828      	ldr	r0, [r5, #0]
 1005074:	2100      	movs	r1, #0
	}
}
 1005076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 100507a:	f000 bffd 	b.w	1006078 <z_set_timeout_expiry>
}
 100507e:	bd38      	pop	{r3, r4, r5, pc}
 1005080:	21000418 	.word	0x21000418
 1005084:	210003e4 	.word	0x210003e4

01005088 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 1005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100508a:	4604      	mov	r4, r0
 100508c:	460d      	mov	r5, r1
	__asm__ volatile(
 100508e:	f04f 0320 	mov.w	r3, #32
 1005092:	f3ef 8711 	mrs	r7, BASEPRI
 1005096:	f383 8812 	msr	BASEPRI_MAX, r3
 100509a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 100509e:	481e      	ldr	r0, [pc, #120]	; (1005118 <k_sched_time_slice_set+0x90>)
 10050a0:	f7ff fef8 	bl	1004e94 <z_spin_lock_valid>
 10050a4:	b940      	cbnz	r0, 10050b8 <k_sched_time_slice_set+0x30>
 10050a6:	491d      	ldr	r1, [pc, #116]	; (100511c <k_sched_time_slice_set+0x94>)
 10050a8:	481d      	ldr	r0, [pc, #116]	; (1005120 <k_sched_time_slice_set+0x98>)
 10050aa:	228e      	movs	r2, #142	; 0x8e
 10050ac:	f001 f9eb 	bl	1006486 <assert_print>
 10050b0:	218e      	movs	r1, #142	; 0x8e
 10050b2:	481a      	ldr	r0, [pc, #104]	; (100511c <k_sched_time_slice_set+0x94>)
 10050b4:	f001 f9e0 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 10050b8:	4817      	ldr	r0, [pc, #92]	; (1005118 <k_sched_time_slice_set+0x90>)
 10050ba:	f7ff ff07 	bl	1004ecc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 10050be:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
 10050c0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 10050c4:	f240 30e7 	movw	r0, #999	; 0x3e7
 10050c8:	4e16      	ldr	r6, [pc, #88]	; (1005124 <k_sched_time_slice_set+0x9c>)
 10050ca:	2300      	movs	r3, #0
 10050cc:	6131      	str	r1, [r6, #16]
 10050ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 10050d2:	fbe4 010c 	umlal	r0, r1, r4, ip
 10050d6:	f7fa ffef 	bl	10000b8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 10050da:	2c00      	cmp	r4, #0
 10050dc:	4b12      	ldr	r3, [pc, #72]	; (1005128 <k_sched_time_slice_set+0xa0>)
 10050de:	dc17      	bgt.n	1005110 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 10050e0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
 10050e2:	4b12      	ldr	r3, [pc, #72]	; (100512c <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
 10050e4:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
 10050e6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
 10050e8:	f7ff ffba 	bl	1005060 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 10050ec:	480a      	ldr	r0, [pc, #40]	; (1005118 <k_sched_time_slice_set+0x90>)
 10050ee:	f7ff fedf 	bl	1004eb0 <z_spin_unlock_valid>
 10050f2:	b940      	cbnz	r0, 1005106 <k_sched_time_slice_set+0x7e>
 10050f4:	4909      	ldr	r1, [pc, #36]	; (100511c <k_sched_time_slice_set+0x94>)
 10050f6:	480a      	ldr	r0, [pc, #40]	; (1005120 <k_sched_time_slice_set+0x98>)
 10050f8:	22b9      	movs	r2, #185	; 0xb9
 10050fa:	f001 f9c4 	bl	1006486 <assert_print>
 10050fe:	21b9      	movs	r1, #185	; 0xb9
 1005100:	4806      	ldr	r0, [pc, #24]	; (100511c <k_sched_time_slice_set+0x94>)
 1005102:	f001 f9b9 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005106:	f387 8811 	msr	BASEPRI, r7
 100510a:	f3bf 8f6f 	isb	sy
	}
}
 100510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
 1005110:	2802      	cmp	r0, #2
 1005112:	bfb8      	it	lt
 1005114:	2002      	movlt	r0, #2
 1005116:	e7e3      	b.n	10050e0 <k_sched_time_slice_set+0x58>
 1005118:	21000410 	.word	0x21000410
 100511c:	01006fdf 	.word	0x01006fdf
 1005120:	01006eb0 	.word	0x01006eb0
 1005124:	210003e4 	.word	0x210003e4
 1005128:	21000418 	.word	0x21000418
 100512c:	21000414 	.word	0x21000414

01005130 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 1005130:	b510      	push	{r4, lr}
 1005132:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 1005134:	460c      	mov	r4, r1
 1005136:	b9c1      	cbnz	r1, 100516a <z_reschedule+0x3a>
 1005138:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
 100513c:	b9aa      	cbnz	r2, 100516a <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
 100513e:	4a14      	ldr	r2, [pc, #80]	; (1005190 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
 1005140:	6991      	ldr	r1, [r2, #24]
 1005142:	6892      	ldr	r2, [r2, #8]
 1005144:	4291      	cmp	r1, r2
 1005146:	d010      	beq.n	100516a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005148:	f7ff feb2 	bl	1004eb0 <z_spin_unlock_valid>
 100514c:	b940      	cbnz	r0, 1005160 <z_reschedule+0x30>
 100514e:	4911      	ldr	r1, [pc, #68]	; (1005194 <z_reschedule+0x64>)
 1005150:	4811      	ldr	r0, [pc, #68]	; (1005198 <z_reschedule+0x68>)
 1005152:	22d0      	movs	r2, #208	; 0xd0
 1005154:	f001 f997 	bl	1006486 <assert_print>
 1005158:	21d0      	movs	r1, #208	; 0xd0
 100515a:	480e      	ldr	r0, [pc, #56]	; (1005194 <z_reschedule+0x64>)
 100515c:	f001 f98c 	bl	1006478 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 1005160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
 1005164:	2000      	movs	r0, #0
 1005166:	f7fc b9d9 	b.w	100151c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 100516a:	4618      	mov	r0, r3
 100516c:	f7ff fea0 	bl	1004eb0 <z_spin_unlock_valid>
 1005170:	b940      	cbnz	r0, 1005184 <z_reschedule+0x54>
 1005172:	4908      	ldr	r1, [pc, #32]	; (1005194 <z_reschedule+0x64>)
 1005174:	4808      	ldr	r0, [pc, #32]	; (1005198 <z_reschedule+0x68>)
 1005176:	22b9      	movs	r2, #185	; 0xb9
 1005178:	f001 f985 	bl	1006486 <assert_print>
 100517c:	21b9      	movs	r1, #185	; 0xb9
 100517e:	4805      	ldr	r0, [pc, #20]	; (1005194 <z_reschedule+0x64>)
 1005180:	f001 f97a 	bl	1006478 <assert_post_action>
 1005184:	f384 8811 	msr	BASEPRI, r4
 1005188:	f3bf 8f6f 	isb	sy
 100518c:	bd10      	pop	{r4, pc}
 100518e:	bf00      	nop
 1005190:	210003e4 	.word	0x210003e4
 1005194:	01006fdf 	.word	0x01006fdf
 1005198:	01006eb0 	.word	0x01006eb0

0100519c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
 100519c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 100519e:	f04f 0320 	mov.w	r3, #32
 10051a2:	f3ef 8511 	mrs	r5, BASEPRI
 10051a6:	f383 8812 	msr	BASEPRI_MAX, r3
 10051aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 10051ae:	4820      	ldr	r0, [pc, #128]	; (1005230 <k_sched_lock+0x94>)
 10051b0:	f7ff fe70 	bl	1004e94 <z_spin_lock_valid>
 10051b4:	b940      	cbnz	r0, 10051c8 <k_sched_lock+0x2c>
 10051b6:	491f      	ldr	r1, [pc, #124]	; (1005234 <k_sched_lock+0x98>)
 10051b8:	481f      	ldr	r0, [pc, #124]	; (1005238 <k_sched_lock+0x9c>)
 10051ba:	228e      	movs	r2, #142	; 0x8e
 10051bc:	f001 f963 	bl	1006486 <assert_print>
 10051c0:	218e      	movs	r1, #142	; 0x8e
 10051c2:	481c      	ldr	r0, [pc, #112]	; (1005234 <k_sched_lock+0x98>)
 10051c4:	f001 f958 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 10051c8:	4819      	ldr	r0, [pc, #100]	; (1005230 <k_sched_lock+0x94>)
 10051ca:	f7ff fe7f 	bl	1004ecc <z_spin_lock_set_owner>
 10051ce:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
 10051d2:	b143      	cbz	r3, 10051e6 <k_sched_lock+0x4a>
 10051d4:	4919      	ldr	r1, [pc, #100]	; (100523c <k_sched_lock+0xa0>)
 10051d6:	4818      	ldr	r0, [pc, #96]	; (1005238 <k_sched_lock+0x9c>)
 10051d8:	22fd      	movs	r2, #253	; 0xfd
 10051da:	f001 f954 	bl	1006486 <assert_print>
 10051de:	21fd      	movs	r1, #253	; 0xfd
 10051e0:	4816      	ldr	r0, [pc, #88]	; (100523c <k_sched_lock+0xa0>)
 10051e2:	f001 f949 	bl	1006478 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
 10051e6:	4c16      	ldr	r4, [pc, #88]	; (1005240 <k_sched_lock+0xa4>)
 10051e8:	68a3      	ldr	r3, [r4, #8]
 10051ea:	7bdb      	ldrb	r3, [r3, #15]
 10051ec:	2b01      	cmp	r3, #1
 10051ee:	d108      	bne.n	1005202 <k_sched_lock+0x66>
 10051f0:	4912      	ldr	r1, [pc, #72]	; (100523c <k_sched_lock+0xa0>)
 10051f2:	4811      	ldr	r0, [pc, #68]	; (1005238 <k_sched_lock+0x9c>)
 10051f4:	22fe      	movs	r2, #254	; 0xfe
 10051f6:	f001 f946 	bl	1006486 <assert_print>
 10051fa:	21fe      	movs	r1, #254	; 0xfe
 10051fc:	480f      	ldr	r0, [pc, #60]	; (100523c <k_sched_lock+0xa0>)
 10051fe:	f001 f93b 	bl	1006478 <assert_post_action>

	--_current->base.sched_locked;
 1005202:	68a2      	ldr	r2, [r4, #8]
 1005204:	7bd3      	ldrb	r3, [r2, #15]
 1005206:	3b01      	subs	r3, #1
 1005208:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 100520a:	4809      	ldr	r0, [pc, #36]	; (1005230 <k_sched_lock+0x94>)
 100520c:	f7ff fe50 	bl	1004eb0 <z_spin_unlock_valid>
 1005210:	b940      	cbnz	r0, 1005224 <k_sched_lock+0x88>
 1005212:	4908      	ldr	r1, [pc, #32]	; (1005234 <k_sched_lock+0x98>)
 1005214:	4808      	ldr	r0, [pc, #32]	; (1005238 <k_sched_lock+0x9c>)
 1005216:	22b9      	movs	r2, #185	; 0xb9
 1005218:	f001 f935 	bl	1006486 <assert_print>
 100521c:	21b9      	movs	r1, #185	; 0xb9
 100521e:	4805      	ldr	r0, [pc, #20]	; (1005234 <k_sched_lock+0x98>)
 1005220:	f001 f92a 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005224:	f385 8811 	msr	BASEPRI, r5
 1005228:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 100522c:	bd38      	pop	{r3, r4, r5, pc}
 100522e:	bf00      	nop
 1005230:	21000410 	.word	0x21000410
 1005234:	01006fdf 	.word	0x01006fdf
 1005238:	01006eb0 	.word	0x01006eb0
 100523c:	01007930 	.word	0x01007930
 1005240:	210003e4 	.word	0x210003e4

01005244 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 1005244:	4b0b      	ldr	r3, [pc, #44]	; (1005274 <z_priq_dumb_remove+0x30>)
{
 1005246:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 1005248:	4299      	cmp	r1, r3
{
 100524a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 100524c:	d10a      	bne.n	1005264 <z_priq_dumb_remove+0x20>
 100524e:	490a      	ldr	r1, [pc, #40]	; (1005278 <z_priq_dumb_remove+0x34>)
 1005250:	480a      	ldr	r0, [pc, #40]	; (100527c <z_priq_dumb_remove+0x38>)
 1005252:	f240 423d 	movw	r2, #1085	; 0x43d
 1005256:	f001 f916 	bl	1006486 <assert_print>
 100525a:	f240 413d 	movw	r1, #1085	; 0x43d
 100525e:	4806      	ldr	r0, [pc, #24]	; (1005278 <z_priq_dumb_remove+0x34>)
 1005260:	f001 f90a 	bl	1006478 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 1005264:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
 1005268:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 100526a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 100526c:	2300      	movs	r3, #0
	node->prev = NULL;
 100526e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 1005272:	bd10      	pop	{r4, pc}
 1005274:	21000118 	.word	0x21000118
 1005278:	0100795b 	.word	0x0100795b
 100527c:	01006eb0 	.word	0x01006eb0

01005280 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
 1005280:	6883      	ldr	r3, [r0, #8]
{
 1005282:	b510      	push	{r4, lr}
 1005284:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
 1005286:	b953      	cbnz	r3, 100529e <unpend_thread_no_timeout+0x1e>
 1005288:	490a      	ldr	r1, [pc, #40]	; (10052b4 <unpend_thread_no_timeout+0x34>)
 100528a:	480b      	ldr	r0, [pc, #44]	; (10052b8 <unpend_thread_no_timeout+0x38>)
 100528c:	f240 22b9 	movw	r2, #697	; 0x2b9
 1005290:	f001 f8f9 	bl	1006486 <assert_print>
 1005294:	f240 21b9 	movw	r1, #697	; 0x2b9
 1005298:	4806      	ldr	r0, [pc, #24]	; (10052b4 <unpend_thread_no_timeout+0x34>)
 100529a:	f001 f8ed 	bl	1006478 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 100529e:	4621      	mov	r1, r4
 10052a0:	68a0      	ldr	r0, [r4, #8]
 10052a2:	f7ff ffcf 	bl	1005244 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 10052a6:	7b63      	ldrb	r3, [r4, #13]
 10052a8:	f023 0302 	bic.w	r3, r3, #2
 10052ac:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 10052ae:	2300      	movs	r3, #0
 10052b0:	60a3      	str	r3, [r4, #8]
}
 10052b2:	bd10      	pop	{r4, pc}
 10052b4:	0100795b 	.word	0x0100795b
 10052b8:	01006eb0 	.word	0x01006eb0

010052bc <update_cache>:
{
 10052bc:	b538      	push	{r3, r4, r5, lr}
 10052be:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 10052c0:	4812      	ldr	r0, [pc, #72]	; (100530c <update_cache+0x50>)
 10052c2:	f001 fb6a 	bl	100699a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 10052c6:	4d12      	ldr	r5, [pc, #72]	; (1005310 <update_cache+0x54>)
 10052c8:	4604      	mov	r4, r0
 10052ca:	b900      	cbnz	r0, 10052ce <update_cache+0x12>
 10052cc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
 10052ce:	b9aa      	cbnz	r2, 10052fc <update_cache+0x40>
	__ASSERT(_current != NULL, "");
 10052d0:	68ab      	ldr	r3, [r5, #8]
 10052d2:	b943      	cbnz	r3, 10052e6 <update_cache+0x2a>
 10052d4:	490f      	ldr	r1, [pc, #60]	; (1005314 <update_cache+0x58>)
 10052d6:	4810      	ldr	r0, [pc, #64]	; (1005318 <update_cache+0x5c>)
 10052d8:	2289      	movs	r2, #137	; 0x89
 10052da:	f001 f8d4 	bl	1006486 <assert_print>
 10052de:	2189      	movs	r1, #137	; 0x89
 10052e0:	480c      	ldr	r0, [pc, #48]	; (1005314 <update_cache+0x58>)
 10052e2:	f001 f8c9 	bl	1006478 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
 10052e6:	68ab      	ldr	r3, [r5, #8]
 10052e8:	7b5a      	ldrb	r2, [r3, #13]
 10052ea:	06d2      	lsls	r2, r2, #27
 10052ec:	d106      	bne.n	10052fc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 10052ee:	69a2      	ldr	r2, [r4, #24]
 10052f0:	b922      	cbnz	r2, 10052fc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
 10052f2:	89da      	ldrh	r2, [r3, #14]
 10052f4:	2a7f      	cmp	r2, #127	; 0x7f
 10052f6:	d901      	bls.n	10052fc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
 10052f8:	61ab      	str	r3, [r5, #24]
}
 10052fa:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 10052fc:	68ab      	ldr	r3, [r5, #8]
 10052fe:	42a3      	cmp	r3, r4
 1005300:	d002      	beq.n	1005308 <update_cache+0x4c>
			z_reset_time_slice(thread);
 1005302:	4620      	mov	r0, r4
 1005304:	f7ff feac 	bl	1005060 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 1005308:	61ac      	str	r4, [r5, #24]
}
 100530a:	e7f6      	b.n	10052fa <update_cache+0x3e>
 100530c:	21000400 	.word	0x21000400
 1005310:	210003e4 	.word	0x210003e4
 1005314:	0100795b 	.word	0x0100795b
 1005318:	01006eb0 	.word	0x01006eb0

0100531c <move_thread_to_end_of_prio_q>:
{
 100531c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 100531e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 1005322:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 1005324:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 1005326:	7b43      	ldrb	r3, [r0, #13]
 1005328:	da06      	bge.n	1005338 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100532a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
 100532e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1005330:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 1005332:	481d      	ldr	r0, [pc, #116]	; (10053a8 <move_thread_to_end_of_prio_q+0x8c>)
 1005334:	f7ff ff86 	bl	1005244 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 1005338:	7b63      	ldrb	r3, [r4, #13]
 100533a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 100533e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 1005340:	4b1a      	ldr	r3, [pc, #104]	; (10053ac <move_thread_to_end_of_prio_q+0x90>)
 1005342:	429c      	cmp	r4, r3
 1005344:	d108      	bne.n	1005358 <move_thread_to_end_of_prio_q+0x3c>
 1005346:	491a      	ldr	r1, [pc, #104]	; (10053b0 <move_thread_to_end_of_prio_q+0x94>)
 1005348:	481a      	ldr	r0, [pc, #104]	; (10053b4 <move_thread_to_end_of_prio_q+0x98>)
 100534a:	22ba      	movs	r2, #186	; 0xba
 100534c:	f001 f89b 	bl	1006486 <assert_print>
 1005350:	21ba      	movs	r1, #186	; 0xba
 1005352:	4817      	ldr	r0, [pc, #92]	; (10053b0 <move_thread_to_end_of_prio_q+0x94>)
 1005354:	f001 f890 	bl	1006478 <assert_post_action>
	return list->head == list;
 1005358:	4a17      	ldr	r2, [pc, #92]	; (10053b8 <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100535a:	f102 051c 	add.w	r5, r2, #28
	return (node == list->tail) ? NULL : node->next;
 100535e:	e9d2 3007 	ldrd	r3, r0, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005362:	42ab      	cmp	r3, r5
 1005364:	d01b      	beq.n	100539e <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1005366:	b1d3      	cbz	r3, 100539e <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
 1005368:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 100536c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 1005370:	428e      	cmp	r6, r1
 1005372:	d00f      	beq.n	1005394 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
 1005374:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 1005376:	2900      	cmp	r1, #0
 1005378:	dd0c      	ble.n	1005394 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
 100537a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 100537c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
 1005380:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 1005382:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
 1005384:	6890      	ldr	r0, [r2, #8]
 1005386:	1b03      	subs	r3, r0, r4
 1005388:	4258      	negs	r0, r3
 100538a:	4158      	adcs	r0, r3
}
 100538c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 1005390:	f7ff bf94 	b.w	10052bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 1005394:	4283      	cmp	r3, r0
 1005396:	d002      	beq.n	100539e <move_thread_to_end_of_prio_q+0x82>
 1005398:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100539a:	2b00      	cmp	r3, #0
 100539c:	d1e6      	bne.n	100536c <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
 100539e:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
 10053a2:	6004      	str	r4, [r0, #0]
	list->tail = node;
 10053a4:	6214      	str	r4, [r2, #32]
}
 10053a6:	e7ed      	b.n	1005384 <move_thread_to_end_of_prio_q+0x68>
 10053a8:	21000400 	.word	0x21000400
 10053ac:	21000118 	.word	0x21000118
 10053b0:	0100795b 	.word	0x0100795b
 10053b4:	01006eb0 	.word	0x01006eb0
 10053b8:	210003e4 	.word	0x210003e4

010053bc <z_time_slice>:
{
 10053bc:	b570      	push	{r4, r5, r6, lr}
 10053be:	4605      	mov	r5, r0
	__asm__ volatile(
 10053c0:	f04f 0320 	mov.w	r3, #32
 10053c4:	f3ef 8611 	mrs	r6, BASEPRI
 10053c8:	f383 8812 	msr	BASEPRI_MAX, r3
 10053cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 10053d0:	4825      	ldr	r0, [pc, #148]	; (1005468 <z_time_slice+0xac>)
 10053d2:	f7ff fd5f 	bl	1004e94 <z_spin_lock_valid>
 10053d6:	b940      	cbnz	r0, 10053ea <z_time_slice+0x2e>
 10053d8:	4924      	ldr	r1, [pc, #144]	; (100546c <z_time_slice+0xb0>)
 10053da:	4825      	ldr	r0, [pc, #148]	; (1005470 <z_time_slice+0xb4>)
 10053dc:	228e      	movs	r2, #142	; 0x8e
 10053de:	f001 f852 	bl	1006486 <assert_print>
 10053e2:	218e      	movs	r1, #142	; 0x8e
 10053e4:	4821      	ldr	r0, [pc, #132]	; (100546c <z_time_slice+0xb0>)
 10053e6:	f001 f847 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 10053ea:	481f      	ldr	r0, [pc, #124]	; (1005468 <z_time_slice+0xac>)
 10053ec:	f7ff fd6e 	bl	1004ecc <z_spin_lock_set_owner>
	if (pending_current == _current) {
 10053f0:	4b20      	ldr	r3, [pc, #128]	; (1005474 <z_time_slice+0xb8>)
 10053f2:	4a21      	ldr	r2, [pc, #132]	; (1005478 <z_time_slice+0xbc>)
 10053f4:	689c      	ldr	r4, [r3, #8]
 10053f6:	6811      	ldr	r1, [r2, #0]
 10053f8:	428c      	cmp	r4, r1
 10053fa:	d114      	bne.n	1005426 <z_time_slice+0x6a>
	z_reset_time_slice(curr);
 10053fc:	4620      	mov	r0, r4
 10053fe:	f7ff fe2f 	bl	1005060 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005402:	4819      	ldr	r0, [pc, #100]	; (1005468 <z_time_slice+0xac>)
 1005404:	f7ff fd54 	bl	1004eb0 <z_spin_unlock_valid>
 1005408:	b940      	cbnz	r0, 100541c <z_time_slice+0x60>
 100540a:	4918      	ldr	r1, [pc, #96]	; (100546c <z_time_slice+0xb0>)
 100540c:	4818      	ldr	r0, [pc, #96]	; (1005470 <z_time_slice+0xb4>)
 100540e:	22b9      	movs	r2, #185	; 0xb9
 1005410:	f001 f839 	bl	1006486 <assert_print>
 1005414:	21b9      	movs	r1, #185	; 0xb9
 1005416:	4815      	ldr	r0, [pc, #84]	; (100546c <z_time_slice+0xb0>)
 1005418:	f001 f82e 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 100541c:	f386 8811 	msr	BASEPRI, r6
 1005420:	f3bf 8f6f 	isb	sy
}
 1005424:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
 1005426:	2100      	movs	r1, #0
 1005428:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 100542a:	4a14      	ldr	r2, [pc, #80]	; (100547c <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
 100542c:	6812      	ldr	r2, [r2, #0]
 100542e:	b1c2      	cbz	r2, 1005462 <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
 1005430:	89e2      	ldrh	r2, [r4, #14]
 1005432:	2a7f      	cmp	r2, #127	; 0x7f
 1005434:	d815      	bhi.n	1005462 <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
 1005436:	7b62      	ldrb	r2, [r4, #13]
 1005438:	06d2      	lsls	r2, r2, #27
 100543a:	d112      	bne.n	1005462 <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 100543c:	4a10      	ldr	r2, [pc, #64]	; (1005480 <z_time_slice+0xc4>)
 100543e:	f994 100e 	ldrsb.w	r1, [r4, #14]
 1005442:	6812      	ldr	r2, [r2, #0]
 1005444:	4291      	cmp	r1, r2
 1005446:	db0c      	blt.n	1005462 <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
 1005448:	4a0e      	ldr	r2, [pc, #56]	; (1005484 <z_time_slice+0xc8>)
 100544a:	4294      	cmp	r4, r2
 100544c:	d009      	beq.n	1005462 <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
 100544e:	691a      	ldr	r2, [r3, #16]
 1005450:	42aa      	cmp	r2, r5
 1005452:	dc03      	bgt.n	100545c <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
 1005454:	4620      	mov	r0, r4
 1005456:	f7ff ff61 	bl	100531c <move_thread_to_end_of_prio_q>
 100545a:	e7cf      	b.n	10053fc <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
 100545c:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
 100545e:	611a      	str	r2, [r3, #16]
 1005460:	e7cf      	b.n	1005402 <z_time_slice+0x46>
 1005462:	2200      	movs	r2, #0
 1005464:	e7fb      	b.n	100545e <z_time_slice+0xa2>
 1005466:	bf00      	nop
 1005468:	21000410 	.word	0x21000410
 100546c:	01006fdf 	.word	0x01006fdf
 1005470:	01006eb0 	.word	0x01006eb0
 1005474:	210003e4 	.word	0x210003e4
 1005478:	2100040c 	.word	0x2100040c
 100547c:	21000418 	.word	0x21000418
 1005480:	21000414 	.word	0x21000414
 1005484:	21000118 	.word	0x21000118

01005488 <ready_thread>:
{
 1005488:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 100548a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 100548e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 1005490:	2a00      	cmp	r2, #0
 1005492:	7b43      	ldrb	r3, [r0, #13]
 1005494:	db38      	blt.n	1005508 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 1005496:	06da      	lsls	r2, r3, #27
 1005498:	d136      	bne.n	1005508 <ready_thread+0x80>
 100549a:	6982      	ldr	r2, [r0, #24]
 100549c:	2a00      	cmp	r2, #0
 100549e:	d133      	bne.n	1005508 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
 10054a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 10054a4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 10054a6:	4b19      	ldr	r3, [pc, #100]	; (100550c <ready_thread+0x84>)
 10054a8:	4298      	cmp	r0, r3
 10054aa:	d108      	bne.n	10054be <ready_thread+0x36>
 10054ac:	4918      	ldr	r1, [pc, #96]	; (1005510 <ready_thread+0x88>)
 10054ae:	4819      	ldr	r0, [pc, #100]	; (1005514 <ready_thread+0x8c>)
 10054b0:	22ba      	movs	r2, #186	; 0xba
 10054b2:	f000 ffe8 	bl	1006486 <assert_print>
 10054b6:	21ba      	movs	r1, #186	; 0xba
 10054b8:	4815      	ldr	r0, [pc, #84]	; (1005510 <ready_thread+0x88>)
 10054ba:	f000 ffdd 	bl	1006478 <assert_post_action>
	return list->head == list;
 10054be:	4a16      	ldr	r2, [pc, #88]	; (1005518 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10054c0:	f102 051c 	add.w	r5, r2, #28
	return (node == list->tail) ? NULL : node->next;
 10054c4:	e9d2 3007 	ldrd	r3, r0, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10054c8:	42ab      	cmp	r3, r5
 10054ca:	d018      	beq.n	10054fe <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 10054cc:	b1bb      	cbz	r3, 10054fe <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
 10054ce:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 10054d2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 10054d6:	428e      	cmp	r6, r1
 10054d8:	d00c      	beq.n	10054f4 <ready_thread+0x6c>
		return b2 - b1;
 10054da:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 10054dc:	2900      	cmp	r1, #0
 10054de:	dd09      	ble.n	10054f4 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
 10054e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 10054e2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 10054e6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 10054e8:	605c      	str	r4, [r3, #4]
		update_cache(0);
 10054ea:	2000      	movs	r0, #0
}
 10054ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
 10054f0:	f7ff bee4 	b.w	10052bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 10054f4:	4298      	cmp	r0, r3
 10054f6:	d002      	beq.n	10054fe <ready_thread+0x76>
 10054f8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 10054fa:	2b00      	cmp	r3, #0
 10054fc:	d1e9      	bne.n	10054d2 <ready_thread+0x4a>
	node->prev = tail;
 10054fe:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
 1005502:	6004      	str	r4, [r0, #0]
	list->tail = node;
 1005504:	6214      	str	r4, [r2, #32]
}
 1005506:	e7f0      	b.n	10054ea <ready_thread+0x62>
}
 1005508:	bd70      	pop	{r4, r5, r6, pc}
 100550a:	bf00      	nop
 100550c:	21000118 	.word	0x21000118
 1005510:	0100795b 	.word	0x0100795b
 1005514:	01006eb0 	.word	0x01006eb0
 1005518:	210003e4 	.word	0x210003e4

0100551c <z_ready_thread>:
{
 100551c:	b538      	push	{r3, r4, r5, lr}
 100551e:	4604      	mov	r4, r0
	__asm__ volatile(
 1005520:	f04f 0320 	mov.w	r3, #32
 1005524:	f3ef 8511 	mrs	r5, BASEPRI
 1005528:	f383 8812 	msr	BASEPRI_MAX, r3
 100552c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1005530:	4812      	ldr	r0, [pc, #72]	; (100557c <z_ready_thread+0x60>)
 1005532:	f7ff fcaf 	bl	1004e94 <z_spin_lock_valid>
 1005536:	b940      	cbnz	r0, 100554a <z_ready_thread+0x2e>
 1005538:	4911      	ldr	r1, [pc, #68]	; (1005580 <z_ready_thread+0x64>)
 100553a:	4812      	ldr	r0, [pc, #72]	; (1005584 <z_ready_thread+0x68>)
 100553c:	228e      	movs	r2, #142	; 0x8e
 100553e:	f000 ffa2 	bl	1006486 <assert_print>
 1005542:	218e      	movs	r1, #142	; 0x8e
 1005544:	480e      	ldr	r0, [pc, #56]	; (1005580 <z_ready_thread+0x64>)
 1005546:	f000 ff97 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 100554a:	480c      	ldr	r0, [pc, #48]	; (100557c <z_ready_thread+0x60>)
 100554c:	f7ff fcbe 	bl	1004ecc <z_spin_lock_set_owner>
			ready_thread(thread);
 1005550:	4620      	mov	r0, r4
 1005552:	f7ff ff99 	bl	1005488 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005556:	4809      	ldr	r0, [pc, #36]	; (100557c <z_ready_thread+0x60>)
 1005558:	f7ff fcaa 	bl	1004eb0 <z_spin_unlock_valid>
 100555c:	b940      	cbnz	r0, 1005570 <z_ready_thread+0x54>
 100555e:	4908      	ldr	r1, [pc, #32]	; (1005580 <z_ready_thread+0x64>)
 1005560:	4808      	ldr	r0, [pc, #32]	; (1005584 <z_ready_thread+0x68>)
 1005562:	22b9      	movs	r2, #185	; 0xb9
 1005564:	f000 ff8f 	bl	1006486 <assert_print>
 1005568:	21b9      	movs	r1, #185	; 0xb9
 100556a:	4805      	ldr	r0, [pc, #20]	; (1005580 <z_ready_thread+0x64>)
 100556c:	f000 ff84 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005570:	f385 8811 	msr	BASEPRI, r5
 1005574:	f3bf 8f6f 	isb	sy
}
 1005578:	bd38      	pop	{r3, r4, r5, pc}
 100557a:	bf00      	nop
 100557c:	21000410 	.word	0x21000410
 1005580:	01006fdf 	.word	0x01006fdf
 1005584:	01006eb0 	.word	0x01006eb0

01005588 <z_sched_start>:
{
 1005588:	b538      	push	{r3, r4, r5, lr}
 100558a:	4604      	mov	r4, r0
	__asm__ volatile(
 100558c:	f04f 0320 	mov.w	r3, #32
 1005590:	f3ef 8511 	mrs	r5, BASEPRI
 1005594:	f383 8812 	msr	BASEPRI_MAX, r3
 1005598:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 100559c:	4818      	ldr	r0, [pc, #96]	; (1005600 <z_sched_start+0x78>)
 100559e:	f7ff fc79 	bl	1004e94 <z_spin_lock_valid>
 10055a2:	b940      	cbnz	r0, 10055b6 <z_sched_start+0x2e>
 10055a4:	4917      	ldr	r1, [pc, #92]	; (1005604 <z_sched_start+0x7c>)
 10055a6:	4818      	ldr	r0, [pc, #96]	; (1005608 <z_sched_start+0x80>)
 10055a8:	228e      	movs	r2, #142	; 0x8e
 10055aa:	f000 ff6c 	bl	1006486 <assert_print>
 10055ae:	218e      	movs	r1, #142	; 0x8e
 10055b0:	4814      	ldr	r0, [pc, #80]	; (1005604 <z_sched_start+0x7c>)
 10055b2:	f000 ff61 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 10055b6:	4812      	ldr	r0, [pc, #72]	; (1005600 <z_sched_start+0x78>)
 10055b8:	f7ff fc88 	bl	1004ecc <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 10055bc:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
 10055be:	075a      	lsls	r2, r3, #29
 10055c0:	d411      	bmi.n	10055e6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 10055c2:	480f      	ldr	r0, [pc, #60]	; (1005600 <z_sched_start+0x78>)
 10055c4:	f7ff fc74 	bl	1004eb0 <z_spin_unlock_valid>
 10055c8:	b940      	cbnz	r0, 10055dc <z_sched_start+0x54>
 10055ca:	490e      	ldr	r1, [pc, #56]	; (1005604 <z_sched_start+0x7c>)
 10055cc:	480e      	ldr	r0, [pc, #56]	; (1005608 <z_sched_start+0x80>)
 10055ce:	22b9      	movs	r2, #185	; 0xb9
 10055d0:	f000 ff59 	bl	1006486 <assert_print>
 10055d4:	21b9      	movs	r1, #185	; 0xb9
 10055d6:	480b      	ldr	r0, [pc, #44]	; (1005604 <z_sched_start+0x7c>)
 10055d8:	f000 ff4e 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 10055dc:	f385 8811 	msr	BASEPRI, r5
 10055e0:	f3bf 8f6f 	isb	sy
}
 10055e4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 10055e6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
 10055ea:	4620      	mov	r0, r4
 10055ec:	7363      	strb	r3, [r4, #13]
 10055ee:	f7ff ff4b 	bl	1005488 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 10055f2:	4629      	mov	r1, r5
}
 10055f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
 10055f8:	4801      	ldr	r0, [pc, #4]	; (1005600 <z_sched_start+0x78>)
 10055fa:	f7ff bd99 	b.w	1005130 <z_reschedule>
 10055fe:	bf00      	nop
 1005600:	21000410 	.word	0x21000410
 1005604:	01006fdf 	.word	0x01006fdf
 1005608:	01006eb0 	.word	0x01006eb0

0100560c <z_thread_timeout>:
{
 100560c:	b570      	push	{r4, r5, r6, lr}
 100560e:	4604      	mov	r4, r0
	__asm__ volatile(
 1005610:	f04f 0320 	mov.w	r3, #32
 1005614:	f3ef 8611 	mrs	r6, BASEPRI
 1005618:	f383 8812 	msr	BASEPRI_MAX, r3
 100561c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1005620:	481b      	ldr	r0, [pc, #108]	; (1005690 <z_thread_timeout+0x84>)
 1005622:	f7ff fc37 	bl	1004e94 <z_spin_lock_valid>
 1005626:	b940      	cbnz	r0, 100563a <z_thread_timeout+0x2e>
 1005628:	491a      	ldr	r1, [pc, #104]	; (1005694 <z_thread_timeout+0x88>)
 100562a:	481b      	ldr	r0, [pc, #108]	; (1005698 <z_thread_timeout+0x8c>)
 100562c:	228e      	movs	r2, #142	; 0x8e
 100562e:	f000 ff2a 	bl	1006486 <assert_print>
 1005632:	218e      	movs	r1, #142	; 0x8e
 1005634:	4817      	ldr	r0, [pc, #92]	; (1005694 <z_thread_timeout+0x88>)
 1005636:	f000 ff1f 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 100563a:	4815      	ldr	r0, [pc, #84]	; (1005690 <z_thread_timeout+0x84>)
 100563c:	f7ff fc46 	bl	1004ecc <z_spin_lock_set_owner>
		if (!killed) {
 1005640:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 1005644:	f013 0f28 	tst.w	r3, #40	; 0x28
 1005648:	d110      	bne.n	100566c <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
 100564a:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 100564e:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
 1005652:	b113      	cbz	r3, 100565a <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
 1005654:	4628      	mov	r0, r5
 1005656:	f7ff fe13 	bl	1005280 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 100565a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
 100565e:	4628      	mov	r0, r5
 1005660:	f023 0314 	bic.w	r3, r3, #20
 1005664:	f804 3c0b 	strb.w	r3, [r4, #-11]
 1005668:	f7ff ff0e 	bl	1005488 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 100566c:	4808      	ldr	r0, [pc, #32]	; (1005690 <z_thread_timeout+0x84>)
 100566e:	f7ff fc1f 	bl	1004eb0 <z_spin_unlock_valid>
 1005672:	b940      	cbnz	r0, 1005686 <z_thread_timeout+0x7a>
 1005674:	4907      	ldr	r1, [pc, #28]	; (1005694 <z_thread_timeout+0x88>)
 1005676:	4808      	ldr	r0, [pc, #32]	; (1005698 <z_thread_timeout+0x8c>)
 1005678:	22b9      	movs	r2, #185	; 0xb9
 100567a:	f000 ff04 	bl	1006486 <assert_print>
 100567e:	21b9      	movs	r1, #185	; 0xb9
 1005680:	4804      	ldr	r0, [pc, #16]	; (1005694 <z_thread_timeout+0x88>)
 1005682:	f000 fef9 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005686:	f386 8811 	msr	BASEPRI, r6
 100568a:	f3bf 8f6f 	isb	sy
}
 100568e:	bd70      	pop	{r4, r5, r6, pc}
 1005690:	21000410 	.word	0x21000410
 1005694:	01006fdf 	.word	0x01006fdf
 1005698:	01006eb0 	.word	0x01006eb0

0100569c <unready_thread>:
{
 100569c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
 100569e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 10056a2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 10056a4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 10056a6:	7b43      	ldrb	r3, [r0, #13]
 10056a8:	da06      	bge.n	10056b8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 10056aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
 10056ae:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
 10056b0:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 10056b2:	4806      	ldr	r0, [pc, #24]	; (10056cc <unready_thread+0x30>)
 10056b4:	f7ff fdc6 	bl	1005244 <z_priq_dumb_remove>
	update_cache(thread == _current);
 10056b8:	4b05      	ldr	r3, [pc, #20]	; (10056d0 <unready_thread+0x34>)
 10056ba:	6898      	ldr	r0, [r3, #8]
 10056bc:	1b03      	subs	r3, r0, r4
 10056be:	4258      	negs	r0, r3
 10056c0:	4158      	adcs	r0, r3
}
 10056c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
 10056c6:	f7ff bdf9 	b.w	10052bc <update_cache>
 10056ca:	bf00      	nop
 10056cc:	21000400 	.word	0x21000400
 10056d0:	210003e4 	.word	0x210003e4

010056d4 <add_to_waitq_locked>:
{
 10056d4:	b538      	push	{r3, r4, r5, lr}
 10056d6:	4604      	mov	r4, r0
 10056d8:	460d      	mov	r5, r1
	unready_thread(thread);
 10056da:	f7ff ffdf 	bl	100569c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 10056de:	7b63      	ldrb	r3, [r4, #13]
 10056e0:	f043 0302 	orr.w	r3, r3, #2
 10056e4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 10056e6:	b1f5      	cbz	r5, 1005726 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 10056e8:	4b15      	ldr	r3, [pc, #84]	; (1005740 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
 10056ea:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 10056ec:	429c      	cmp	r4, r3
 10056ee:	d108      	bne.n	1005702 <add_to_waitq_locked+0x2e>
 10056f0:	4914      	ldr	r1, [pc, #80]	; (1005744 <add_to_waitq_locked+0x70>)
 10056f2:	4815      	ldr	r0, [pc, #84]	; (1005748 <add_to_waitq_locked+0x74>)
 10056f4:	22ba      	movs	r2, #186	; 0xba
 10056f6:	f000 fec6 	bl	1006486 <assert_print>
 10056fa:	21ba      	movs	r1, #186	; 0xba
 10056fc:	4811      	ldr	r0, [pc, #68]	; (1005744 <add_to_waitq_locked+0x70>)
 10056fe:	f000 febb 	bl	1006478 <assert_post_action>
	return list->head == list;
 1005702:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005704:	429d      	cmp	r5, r3
 1005706:	d015      	beq.n	1005734 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1005708:	b1a3      	cbz	r3, 1005734 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
 100570a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 100570e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 1005712:	4291      	cmp	r1, r2
 1005714:	d008      	beq.n	1005728 <add_to_waitq_locked+0x54>
		return b2 - b1;
 1005716:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 1005718:	2a00      	cmp	r2, #0
 100571a:	dd05      	ble.n	1005728 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
 100571c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 100571e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 1005722:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 1005724:	605c      	str	r4, [r3, #4]
}
 1005726:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 1005728:	686a      	ldr	r2, [r5, #4]
 100572a:	4293      	cmp	r3, r2
 100572c:	d002      	beq.n	1005734 <add_to_waitq_locked+0x60>
 100572e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1005730:	2b00      	cmp	r3, #0
 1005732:	d1ec      	bne.n	100570e <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
 1005734:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 1005736:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 100573a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 100573c:	606c      	str	r4, [r5, #4]
}
 100573e:	e7f2      	b.n	1005726 <add_to_waitq_locked+0x52>
 1005740:	21000118 	.word	0x21000118
 1005744:	0100795b 	.word	0x0100795b
 1005748:	01006eb0 	.word	0x01006eb0

0100574c <pend>:
{
 100574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1005750:	4604      	mov	r4, r0
 1005752:	4688      	mov	r8, r1
 1005754:	4616      	mov	r6, r2
 1005756:	461d      	mov	r5, r3
	__asm__ volatile(
 1005758:	f04f 0320 	mov.w	r3, #32
 100575c:	f3ef 8711 	mrs	r7, BASEPRI
 1005760:	f383 8812 	msr	BASEPRI_MAX, r3
 1005764:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1005768:	481a      	ldr	r0, [pc, #104]	; (10057d4 <pend+0x88>)
 100576a:	f7ff fb93 	bl	1004e94 <z_spin_lock_valid>
 100576e:	b940      	cbnz	r0, 1005782 <pend+0x36>
 1005770:	4919      	ldr	r1, [pc, #100]	; (10057d8 <pend+0x8c>)
 1005772:	481a      	ldr	r0, [pc, #104]	; (10057dc <pend+0x90>)
 1005774:	228e      	movs	r2, #142	; 0x8e
 1005776:	f000 fe86 	bl	1006486 <assert_print>
 100577a:	218e      	movs	r1, #142	; 0x8e
 100577c:	4816      	ldr	r0, [pc, #88]	; (10057d8 <pend+0x8c>)
 100577e:	f000 fe7b 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1005782:	4814      	ldr	r0, [pc, #80]	; (10057d4 <pend+0x88>)
 1005784:	f7ff fba2 	bl	1004ecc <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
 1005788:	4620      	mov	r0, r4
 100578a:	4641      	mov	r1, r8
 100578c:	f7ff ffa2 	bl	10056d4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005790:	4810      	ldr	r0, [pc, #64]	; (10057d4 <pend+0x88>)
 1005792:	f7ff fb8d 	bl	1004eb0 <z_spin_unlock_valid>
 1005796:	b940      	cbnz	r0, 10057aa <pend+0x5e>
 1005798:	490f      	ldr	r1, [pc, #60]	; (10057d8 <pend+0x8c>)
 100579a:	4810      	ldr	r0, [pc, #64]	; (10057dc <pend+0x90>)
 100579c:	22b9      	movs	r2, #185	; 0xb9
 100579e:	f000 fe72 	bl	1006486 <assert_print>
 10057a2:	21b9      	movs	r1, #185	; 0xb9
 10057a4:	480c      	ldr	r0, [pc, #48]	; (10057d8 <pend+0x8c>)
 10057a6:	f000 fe67 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 10057aa:	f387 8811 	msr	BASEPRI, r7
 10057ae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 10057b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 10057b6:	bf08      	it	eq
 10057b8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 10057bc:	d008      	beq.n	10057d0 <pend+0x84>
 10057be:	4632      	mov	r2, r6
 10057c0:	462b      	mov	r3, r5
 10057c2:	f104 0018 	add.w	r0, r4, #24
 10057c6:	4906      	ldr	r1, [pc, #24]	; (10057e0 <pend+0x94>)
}
 10057c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 10057cc:	f000 bb6a 	b.w	1005ea4 <z_add_timeout>
 10057d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 10057d4:	21000410 	.word	0x21000410
 10057d8:	01006fdf 	.word	0x01006fdf
 10057dc:	01006eb0 	.word	0x01006eb0
 10057e0:	0100560d 	.word	0x0100560d

010057e4 <z_pend_curr>:
{
 10057e4:	b538      	push	{r3, r4, r5, lr}
 10057e6:	4605      	mov	r5, r0
	pending_current = _current;
 10057e8:	4b0d      	ldr	r3, [pc, #52]	; (1005820 <z_pend_curr+0x3c>)
{
 10057ea:	460c      	mov	r4, r1
	pending_current = _current;
 10057ec:	6898      	ldr	r0, [r3, #8]
 10057ee:	4b0d      	ldr	r3, [pc, #52]	; (1005824 <z_pend_curr+0x40>)
{
 10057f0:	4611      	mov	r1, r2
	pending_current = _current;
 10057f2:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 10057f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 10057f8:	f7ff ffa8 	bl	100574c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 10057fc:	4628      	mov	r0, r5
 10057fe:	f7ff fb57 	bl	1004eb0 <z_spin_unlock_valid>
 1005802:	b940      	cbnz	r0, 1005816 <z_pend_curr+0x32>
 1005804:	4908      	ldr	r1, [pc, #32]	; (1005828 <z_pend_curr+0x44>)
 1005806:	4809      	ldr	r0, [pc, #36]	; (100582c <z_pend_curr+0x48>)
 1005808:	22d0      	movs	r2, #208	; 0xd0
 100580a:	f000 fe3c 	bl	1006486 <assert_print>
 100580e:	21d0      	movs	r1, #208	; 0xd0
 1005810:	4805      	ldr	r0, [pc, #20]	; (1005828 <z_pend_curr+0x44>)
 1005812:	f000 fe31 	bl	1006478 <assert_post_action>
 1005816:	4620      	mov	r0, r4
}
 1005818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 100581c:	f7fb be7e 	b.w	100151c <arch_swap>
 1005820:	210003e4 	.word	0x210003e4
 1005824:	2100040c 	.word	0x2100040c
 1005828:	01006fdf 	.word	0x01006fdf
 100582c:	01006eb0 	.word	0x01006eb0

01005830 <z_impl_k_thread_suspend>:
{
 1005830:	b570      	push	{r4, r5, r6, lr}
 1005832:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 1005834:	3018      	adds	r0, #24
 1005836:	f000 fbe3 	bl	1006000 <z_abort_timeout>
	__asm__ volatile(
 100583a:	f04f 0320 	mov.w	r3, #32
 100583e:	f3ef 8611 	mrs	r6, BASEPRI
 1005842:	f383 8812 	msr	BASEPRI_MAX, r3
 1005846:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 100584a:	4820      	ldr	r0, [pc, #128]	; (10058cc <z_impl_k_thread_suspend+0x9c>)
 100584c:	f7ff fb22 	bl	1004e94 <z_spin_lock_valid>
 1005850:	b940      	cbnz	r0, 1005864 <z_impl_k_thread_suspend+0x34>
 1005852:	491f      	ldr	r1, [pc, #124]	; (10058d0 <z_impl_k_thread_suspend+0xa0>)
 1005854:	481f      	ldr	r0, [pc, #124]	; (10058d4 <z_impl_k_thread_suspend+0xa4>)
 1005856:	228e      	movs	r2, #142	; 0x8e
 1005858:	f000 fe15 	bl	1006486 <assert_print>
 100585c:	218e      	movs	r1, #142	; 0x8e
 100585e:	481c      	ldr	r0, [pc, #112]	; (10058d0 <z_impl_k_thread_suspend+0xa0>)
 1005860:	f000 fe0a 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1005864:	4819      	ldr	r0, [pc, #100]	; (10058cc <z_impl_k_thread_suspend+0x9c>)
 1005866:	f7ff fb31 	bl	1004ecc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
 100586a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 100586e:	7b63      	ldrb	r3, [r4, #13]
 1005870:	2a00      	cmp	r2, #0
 1005872:	da06      	bge.n	1005882 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1005874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
 1005878:	4621      	mov	r1, r4
 100587a:	4817      	ldr	r0, [pc, #92]	; (10058d8 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100587c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 100587e:	f7ff fce1 	bl	1005244 <z_priq_dumb_remove>
		update_cache(thread == _current);
 1005882:	4d16      	ldr	r5, [pc, #88]	; (10058dc <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 1005884:	7b63      	ldrb	r3, [r4, #13]
 1005886:	68a8      	ldr	r0, [r5, #8]
 1005888:	f043 0310 	orr.w	r3, r3, #16
 100588c:	7363      	strb	r3, [r4, #13]
 100588e:	1b03      	subs	r3, r0, r4
 1005890:	4258      	negs	r0, r3
 1005892:	4158      	adcs	r0, r3
 1005894:	f7ff fd12 	bl	10052bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005898:	480c      	ldr	r0, [pc, #48]	; (10058cc <z_impl_k_thread_suspend+0x9c>)
 100589a:	f7ff fb09 	bl	1004eb0 <z_spin_unlock_valid>
 100589e:	b940      	cbnz	r0, 10058b2 <z_impl_k_thread_suspend+0x82>
 10058a0:	490b      	ldr	r1, [pc, #44]	; (10058d0 <z_impl_k_thread_suspend+0xa0>)
 10058a2:	480c      	ldr	r0, [pc, #48]	; (10058d4 <z_impl_k_thread_suspend+0xa4>)
 10058a4:	22b9      	movs	r2, #185	; 0xb9
 10058a6:	f000 fdee 	bl	1006486 <assert_print>
 10058aa:	21b9      	movs	r1, #185	; 0xb9
 10058ac:	4808      	ldr	r0, [pc, #32]	; (10058d0 <z_impl_k_thread_suspend+0xa0>)
 10058ae:	f000 fde3 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 10058b2:	f386 8811 	msr	BASEPRI, r6
 10058b6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 10058ba:	68ab      	ldr	r3, [r5, #8]
 10058bc:	42a3      	cmp	r3, r4
 10058be:	d103      	bne.n	10058c8 <z_impl_k_thread_suspend+0x98>
}
 10058c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 10058c4:	f001 b85f 	b.w	1006986 <z_reschedule_unlocked>
}
 10058c8:	bd70      	pop	{r4, r5, r6, pc}
 10058ca:	bf00      	nop
 10058cc:	21000410 	.word	0x21000410
 10058d0:	01006fdf 	.word	0x01006fdf
 10058d4:	01006eb0 	.word	0x01006eb0
 10058d8:	21000400 	.word	0x21000400
 10058dc:	210003e4 	.word	0x210003e4

010058e0 <k_sched_unlock>:
{
 10058e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 10058e2:	f04f 0320 	mov.w	r3, #32
 10058e6:	f3ef 8511 	mrs	r5, BASEPRI
 10058ea:	f383 8812 	msr	BASEPRI_MAX, r3
 10058ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 10058f2:	4824      	ldr	r0, [pc, #144]	; (1005984 <k_sched_unlock+0xa4>)
 10058f4:	f7ff face 	bl	1004e94 <z_spin_lock_valid>
 10058f8:	b940      	cbnz	r0, 100590c <k_sched_unlock+0x2c>
 10058fa:	4923      	ldr	r1, [pc, #140]	; (1005988 <k_sched_unlock+0xa8>)
 10058fc:	4823      	ldr	r0, [pc, #140]	; (100598c <k_sched_unlock+0xac>)
 10058fe:	228e      	movs	r2, #142	; 0x8e
 1005900:	f000 fdc1 	bl	1006486 <assert_print>
 1005904:	218e      	movs	r1, #142	; 0x8e
 1005906:	4820      	ldr	r0, [pc, #128]	; (1005988 <k_sched_unlock+0xa8>)
 1005908:	f000 fdb6 	bl	1006478 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
 100590c:	4c20      	ldr	r4, [pc, #128]	; (1005990 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
 100590e:	481d      	ldr	r0, [pc, #116]	; (1005984 <k_sched_unlock+0xa4>)
 1005910:	f7ff fadc 	bl	1004ecc <z_spin_lock_set_owner>
 1005914:	68a3      	ldr	r3, [r4, #8]
 1005916:	7bdb      	ldrb	r3, [r3, #15]
 1005918:	b953      	cbnz	r3, 1005930 <k_sched_unlock+0x50>
 100591a:	491e      	ldr	r1, [pc, #120]	; (1005994 <k_sched_unlock+0xb4>)
 100591c:	481b      	ldr	r0, [pc, #108]	; (100598c <k_sched_unlock+0xac>)
 100591e:	f240 32bb 	movw	r2, #955	; 0x3bb
 1005922:	f000 fdb0 	bl	1006486 <assert_print>
 1005926:	f240 31bb 	movw	r1, #955	; 0x3bb
 100592a:	481a      	ldr	r0, [pc, #104]	; (1005994 <k_sched_unlock+0xb4>)
 100592c:	f000 fda4 	bl	1006478 <assert_post_action>
 1005930:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
 1005934:	b153      	cbz	r3, 100594c <k_sched_unlock+0x6c>
 1005936:	4917      	ldr	r1, [pc, #92]	; (1005994 <k_sched_unlock+0xb4>)
 1005938:	4814      	ldr	r0, [pc, #80]	; (100598c <k_sched_unlock+0xac>)
 100593a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 100593e:	f000 fda2 	bl	1006486 <assert_print>
 1005942:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 1005946:	4813      	ldr	r0, [pc, #76]	; (1005994 <k_sched_unlock+0xb4>)
 1005948:	f000 fd96 	bl	1006478 <assert_post_action>
		++_current->base.sched_locked;
 100594c:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
 100594e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 1005950:	7bd3      	ldrb	r3, [r2, #15]
 1005952:	3301      	adds	r3, #1
 1005954:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 1005956:	f7ff fcb1 	bl	10052bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 100595a:	480a      	ldr	r0, [pc, #40]	; (1005984 <k_sched_unlock+0xa4>)
 100595c:	f7ff faa8 	bl	1004eb0 <z_spin_unlock_valid>
 1005960:	b940      	cbnz	r0, 1005974 <k_sched_unlock+0x94>
 1005962:	4909      	ldr	r1, [pc, #36]	; (1005988 <k_sched_unlock+0xa8>)
 1005964:	4809      	ldr	r0, [pc, #36]	; (100598c <k_sched_unlock+0xac>)
 1005966:	22b9      	movs	r2, #185	; 0xb9
 1005968:	f000 fd8d 	bl	1006486 <assert_print>
 100596c:	21b9      	movs	r1, #185	; 0xb9
 100596e:	4806      	ldr	r0, [pc, #24]	; (1005988 <k_sched_unlock+0xa8>)
 1005970:	f000 fd82 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005974:	f385 8811 	msr	BASEPRI, r5
 1005978:	f3bf 8f6f 	isb	sy
}
 100597c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
 1005980:	f001 b801 	b.w	1006986 <z_reschedule_unlocked>
 1005984:	21000410 	.word	0x21000410
 1005988:	01006fdf 	.word	0x01006fdf
 100598c:	01006eb0 	.word	0x01006eb0
 1005990:	210003e4 	.word	0x210003e4
 1005994:	0100795b 	.word	0x0100795b

01005998 <z_unpend_first_thread>:
{
 1005998:	b538      	push	{r3, r4, r5, lr}
 100599a:	4604      	mov	r4, r0
	__asm__ volatile(
 100599c:	f04f 0320 	mov.w	r3, #32
 10059a0:	f3ef 8511 	mrs	r5, BASEPRI
 10059a4:	f383 8812 	msr	BASEPRI_MAX, r3
 10059a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 10059ac:	4816      	ldr	r0, [pc, #88]	; (1005a08 <z_unpend_first_thread+0x70>)
 10059ae:	f7ff fa71 	bl	1004e94 <z_spin_lock_valid>
 10059b2:	b940      	cbnz	r0, 10059c6 <z_unpend_first_thread+0x2e>
 10059b4:	4915      	ldr	r1, [pc, #84]	; (1005a0c <z_unpend_first_thread+0x74>)
 10059b6:	4816      	ldr	r0, [pc, #88]	; (1005a10 <z_unpend_first_thread+0x78>)
 10059b8:	228e      	movs	r2, #142	; 0x8e
 10059ba:	f000 fd64 	bl	1006486 <assert_print>
 10059be:	218e      	movs	r1, #142	; 0x8e
 10059c0:	4812      	ldr	r0, [pc, #72]	; (1005a0c <z_unpend_first_thread+0x74>)
 10059c2:	f000 fd59 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 10059c6:	4810      	ldr	r0, [pc, #64]	; (1005a08 <z_unpend_first_thread+0x70>)
 10059c8:	f7ff fa80 	bl	1004ecc <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
 10059cc:	4620      	mov	r0, r4
 10059ce:	f000 ffe4 	bl	100699a <z_priq_dumb_best>
		if (thread != NULL) {
 10059d2:	4604      	mov	r4, r0
 10059d4:	b128      	cbz	r0, 10059e2 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
 10059d6:	f7ff fc53 	bl	1005280 <unpend_thread_no_timeout>
 10059da:	f104 0018 	add.w	r0, r4, #24
 10059de:	f000 fb0f 	bl	1006000 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 10059e2:	4809      	ldr	r0, [pc, #36]	; (1005a08 <z_unpend_first_thread+0x70>)
 10059e4:	f7ff fa64 	bl	1004eb0 <z_spin_unlock_valid>
 10059e8:	b940      	cbnz	r0, 10059fc <z_unpend_first_thread+0x64>
 10059ea:	4908      	ldr	r1, [pc, #32]	; (1005a0c <z_unpend_first_thread+0x74>)
 10059ec:	4808      	ldr	r0, [pc, #32]	; (1005a10 <z_unpend_first_thread+0x78>)
 10059ee:	22b9      	movs	r2, #185	; 0xb9
 10059f0:	f000 fd49 	bl	1006486 <assert_print>
 10059f4:	21b9      	movs	r1, #185	; 0xb9
 10059f6:	4805      	ldr	r0, [pc, #20]	; (1005a0c <z_unpend_first_thread+0x74>)
 10059f8:	f000 fd3e 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 10059fc:	f385 8811 	msr	BASEPRI, r5
 1005a00:	f3bf 8f6f 	isb	sy
}
 1005a04:	4620      	mov	r0, r4
 1005a06:	bd38      	pop	{r3, r4, r5, pc}
 1005a08:	21000410 	.word	0x21000410
 1005a0c:	01006fdf 	.word	0x01006fdf
 1005a10:	01006eb0 	.word	0x01006eb0

01005a14 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 1005a14:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
 1005a16:	4b04      	ldr	r3, [pc, #16]	; (1005a28 <z_sched_init+0x14>)
 1005a18:	4608      	mov	r0, r1
 1005a1a:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 1005a1e:	e9c3 2207 	strd	r2, r2, [r3, #28]
 1005a22:	f7ff bb31 	b.w	1005088 <k_sched_time_slice_set>
 1005a26:	bf00      	nop
 1005a28:	210003e4 	.word	0x210003e4

01005a2c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 1005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1005a2e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
 1005a32:	b153      	cbz	r3, 1005a4a <z_impl_k_yield+0x1e>
 1005a34:	4938      	ldr	r1, [pc, #224]	; (1005b18 <z_impl_k_yield+0xec>)
 1005a36:	4839      	ldr	r0, [pc, #228]	; (1005b1c <z_impl_k_yield+0xf0>)
 1005a38:	f240 5232 	movw	r2, #1330	; 0x532
 1005a3c:	f000 fd23 	bl	1006486 <assert_print>
 1005a40:	f240 5132 	movw	r1, #1330	; 0x532
 1005a44:	4834      	ldr	r0, [pc, #208]	; (1005b18 <z_impl_k_yield+0xec>)
 1005a46:	f000 fd17 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005a4a:	f04f 0320 	mov.w	r3, #32
 1005a4e:	f3ef 8611 	mrs	r6, BASEPRI
 1005a52:	f383 8812 	msr	BASEPRI_MAX, r3
 1005a56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1005a5a:	4831      	ldr	r0, [pc, #196]	; (1005b20 <z_impl_k_yield+0xf4>)
 1005a5c:	f7ff fa1a 	bl	1004e94 <z_spin_lock_valid>
 1005a60:	b940      	cbnz	r0, 1005a74 <z_impl_k_yield+0x48>
 1005a62:	4930      	ldr	r1, [pc, #192]	; (1005b24 <z_impl_k_yield+0xf8>)
 1005a64:	482d      	ldr	r0, [pc, #180]	; (1005b1c <z_impl_k_yield+0xf0>)
 1005a66:	228e      	movs	r2, #142	; 0x8e
 1005a68:	f000 fd0d 	bl	1006486 <assert_print>
 1005a6c:	218e      	movs	r1, #142	; 0x8e
 1005a6e:	482d      	ldr	r0, [pc, #180]	; (1005b24 <z_impl_k_yield+0xf8>)
 1005a70:	f000 fd02 	bl	1006478 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 1005a74:	4d2c      	ldr	r5, [pc, #176]	; (1005b28 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
 1005a76:	482a      	ldr	r0, [pc, #168]	; (1005b20 <z_impl_k_yield+0xf4>)
 1005a78:	f7ff fa28 	bl	1004ecc <z_spin_lock_set_owner>
 1005a7c:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
 1005a7e:	f105 001c 	add.w	r0, r5, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1005a82:	7b4b      	ldrb	r3, [r1, #13]
 1005a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1005a88:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 1005a8a:	f7ff fbdb 	bl	1005244 <z_priq_dumb_remove>
	}
	queue_thread(_current);
 1005a8e:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 1005a90:	7b63      	ldrb	r3, [r4, #13]
 1005a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 1005a96:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 1005a98:	4b24      	ldr	r3, [pc, #144]	; (1005b2c <z_impl_k_yield+0x100>)
 1005a9a:	429c      	cmp	r4, r3
 1005a9c:	d108      	bne.n	1005ab0 <z_impl_k_yield+0x84>
 1005a9e:	491e      	ldr	r1, [pc, #120]	; (1005b18 <z_impl_k_yield+0xec>)
 1005aa0:	481e      	ldr	r0, [pc, #120]	; (1005b1c <z_impl_k_yield+0xf0>)
 1005aa2:	22ba      	movs	r2, #186	; 0xba
 1005aa4:	f000 fcef 	bl	1006486 <assert_print>
 1005aa8:	21ba      	movs	r1, #186	; 0xba
 1005aaa:	481b      	ldr	r0, [pc, #108]	; (1005b18 <z_impl_k_yield+0xec>)
 1005aac:	f000 fce4 	bl	1006478 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
 1005ab0:	e9d5 3107 	ldrd	r3, r1, [r5, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005ab4:	481e      	ldr	r0, [pc, #120]	; (1005b30 <z_impl_k_yield+0x104>)
 1005ab6:	4283      	cmp	r3, r0
 1005ab8:	d028      	beq.n	1005b0c <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1005aba:	b33b      	cbz	r3, 1005b0c <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
 1005abc:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 1005ac0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 1005ac4:	4297      	cmp	r7, r2
 1005ac6:	d01c      	beq.n	1005b02 <z_impl_k_yield+0xd6>
		return b2 - b1;
 1005ac8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
 1005aca:	2a00      	cmp	r2, #0
 1005acc:	dd19      	ble.n	1005b02 <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
 1005ace:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 1005ad0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 1005ad4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 1005ad6:	605c      	str	r4, [r3, #4]
	update_cache(1);
 1005ad8:	2001      	movs	r0, #1
 1005ada:	f7ff fbef 	bl	10052bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005ade:	4810      	ldr	r0, [pc, #64]	; (1005b20 <z_impl_k_yield+0xf4>)
 1005ae0:	f7ff f9e6 	bl	1004eb0 <z_spin_unlock_valid>
 1005ae4:	b940      	cbnz	r0, 1005af8 <z_impl_k_yield+0xcc>
 1005ae6:	490f      	ldr	r1, [pc, #60]	; (1005b24 <z_impl_k_yield+0xf8>)
 1005ae8:	480c      	ldr	r0, [pc, #48]	; (1005b1c <z_impl_k_yield+0xf0>)
 1005aea:	22d0      	movs	r2, #208	; 0xd0
 1005aec:	f000 fccb 	bl	1006486 <assert_print>
 1005af0:	21d0      	movs	r1, #208	; 0xd0
 1005af2:	480c      	ldr	r0, [pc, #48]	; (1005b24 <z_impl_k_yield+0xf8>)
 1005af4:	f000 fcc0 	bl	1006478 <assert_post_action>
 1005af8:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
 1005afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1005afe:	f7fb bd0d 	b.w	100151c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 1005b02:	428b      	cmp	r3, r1
 1005b04:	d002      	beq.n	1005b0c <z_impl_k_yield+0xe0>
 1005b06:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1005b08:	2b00      	cmp	r3, #0
 1005b0a:	d1d9      	bne.n	1005ac0 <z_impl_k_yield+0x94>
	node->prev = tail;
 1005b0c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
 1005b10:	600c      	str	r4, [r1, #0]
	list->tail = node;
 1005b12:	622c      	str	r4, [r5, #32]
}
 1005b14:	e7e0      	b.n	1005ad8 <z_impl_k_yield+0xac>
 1005b16:	bf00      	nop
 1005b18:	0100795b 	.word	0x0100795b
 1005b1c:	01006eb0 	.word	0x01006eb0
 1005b20:	21000410 	.word	0x21000410
 1005b24:	01006fdf 	.word	0x01006fdf
 1005b28:	210003e4 	.word	0x210003e4
 1005b2c:	21000118 	.word	0x21000118
 1005b30:	21000400 	.word	0x21000400

01005b34 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
 1005b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1005b38:	4605      	mov	r5, r0
 1005b3a:	460e      	mov	r6, r1
 1005b3c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
 1005b40:	b153      	cbz	r3, 1005b58 <z_tick_sleep+0x24>
 1005b42:	493a      	ldr	r1, [pc, #232]	; (1005c2c <z_tick_sleep+0xf8>)
 1005b44:	483a      	ldr	r0, [pc, #232]	; (1005c30 <z_tick_sleep+0xfc>)
 1005b46:	f240 524e 	movw	r2, #1358	; 0x54e
 1005b4a:	f000 fc9c 	bl	1006486 <assert_print>
 1005b4e:	f240 514e 	movw	r1, #1358	; 0x54e
 1005b52:	4836      	ldr	r0, [pc, #216]	; (1005c2c <z_tick_sleep+0xf8>)
 1005b54:	f000 fc90 	bl	1006478 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 1005b58:	ea55 0306 	orrs.w	r3, r5, r6
 1005b5c:	d103      	bne.n	1005b66 <z_tick_sleep+0x32>
	z_impl_k_yield();
 1005b5e:	f7ff ff65 	bl	1005a2c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 1005b62:	2000      	movs	r0, #0
 1005b64:	e05f      	b.n	1005c26 <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
 1005b66:	f06f 0401 	mvn.w	r4, #1
 1005b6a:	f04f 33ff 	mov.w	r3, #4294967295
 1005b6e:	1b64      	subs	r4, r4, r5
 1005b70:	eb63 0306 	sbc.w	r3, r3, r6
 1005b74:	2c01      	cmp	r4, #1
 1005b76:	f173 0300 	sbcs.w	r3, r3, #0
 1005b7a:	da02      	bge.n	1005b82 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 1005b7c:	f000 ff13 	bl	10069a6 <sys_clock_tick_get_32>
 1005b80:	1944      	adds	r4, r0, r5
 1005b82:	f04f 0320 	mov.w	r3, #32
 1005b86:	f3ef 8811 	mrs	r8, BASEPRI
 1005b8a:	f383 8812 	msr	BASEPRI_MAX, r3
 1005b8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1005b92:	4828      	ldr	r0, [pc, #160]	; (1005c34 <z_tick_sleep+0x100>)
 1005b94:	f7ff f97e 	bl	1004e94 <z_spin_lock_valid>
 1005b98:	b940      	cbnz	r0, 1005bac <z_tick_sleep+0x78>
 1005b9a:	4927      	ldr	r1, [pc, #156]	; (1005c38 <z_tick_sleep+0x104>)
 1005b9c:	4824      	ldr	r0, [pc, #144]	; (1005c30 <z_tick_sleep+0xfc>)
 1005b9e:	228e      	movs	r2, #142	; 0x8e
 1005ba0:	f000 fc71 	bl	1006486 <assert_print>
 1005ba4:	218e      	movs	r1, #142	; 0x8e
 1005ba6:	4824      	ldr	r0, [pc, #144]	; (1005c38 <z_tick_sleep+0x104>)
 1005ba8:	f000 fc66 	bl	1006478 <assert_post_action>
	pending_current = _current;
 1005bac:	4f23      	ldr	r7, [pc, #140]	; (1005c3c <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
 1005bae:	4821      	ldr	r0, [pc, #132]	; (1005c34 <z_tick_sleep+0x100>)
 1005bb0:	f7ff f98c 	bl	1004ecc <z_spin_lock_set_owner>
 1005bb4:	68b8      	ldr	r0, [r7, #8]
 1005bb6:	4b22      	ldr	r3, [pc, #136]	; (1005c40 <z_tick_sleep+0x10c>)
 1005bb8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 1005bba:	f7ff fd6f 	bl	100569c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 1005bbe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 1005bc0:	462a      	mov	r2, r5
 1005bc2:	4633      	mov	r3, r6
 1005bc4:	3018      	adds	r0, #24
 1005bc6:	491f      	ldr	r1, [pc, #124]	; (1005c44 <z_tick_sleep+0x110>)
 1005bc8:	f000 f96c 	bl	1005ea4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 1005bcc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005bce:	4819      	ldr	r0, [pc, #100]	; (1005c34 <z_tick_sleep+0x100>)
 1005bd0:	7b53      	ldrb	r3, [r2, #13]
 1005bd2:	f043 0310 	orr.w	r3, r3, #16
 1005bd6:	7353      	strb	r3, [r2, #13]
 1005bd8:	f7ff f96a 	bl	1004eb0 <z_spin_unlock_valid>
 1005bdc:	b940      	cbnz	r0, 1005bf0 <z_tick_sleep+0xbc>
 1005bde:	4916      	ldr	r1, [pc, #88]	; (1005c38 <z_tick_sleep+0x104>)
 1005be0:	4813      	ldr	r0, [pc, #76]	; (1005c30 <z_tick_sleep+0xfc>)
 1005be2:	22d0      	movs	r2, #208	; 0xd0
 1005be4:	f000 fc4f 	bl	1006486 <assert_print>
 1005be8:	21d0      	movs	r1, #208	; 0xd0
 1005bea:	4813      	ldr	r0, [pc, #76]	; (1005c38 <z_tick_sleep+0x104>)
 1005bec:	f000 fc44 	bl	1006478 <assert_post_action>
 1005bf0:	4640      	mov	r0, r8
 1005bf2:	f7fb fc93 	bl	100151c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
 1005bf6:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
 1005bf8:	7b5b      	ldrb	r3, [r3, #13]
 1005bfa:	06db      	lsls	r3, r3, #27
 1005bfc:	d50a      	bpl.n	1005c14 <z_tick_sleep+0xe0>
 1005bfe:	490b      	ldr	r1, [pc, #44]	; (1005c2c <z_tick_sleep+0xf8>)
 1005c00:	480b      	ldr	r0, [pc, #44]	; (1005c30 <z_tick_sleep+0xfc>)
 1005c02:	f240 526f 	movw	r2, #1391	; 0x56f
 1005c06:	f000 fc3e 	bl	1006486 <assert_print>
 1005c0a:	f240 516f 	movw	r1, #1391	; 0x56f
 1005c0e:	4807      	ldr	r0, [pc, #28]	; (1005c2c <z_tick_sleep+0xf8>)
 1005c10:	f000 fc32 	bl	1006478 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 1005c14:	f000 fec7 	bl	10069a6 <sys_clock_tick_get_32>
 1005c18:	1a20      	subs	r0, r4, r0
 1005c1a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 1005c1e:	2801      	cmp	r0, #1
 1005c20:	f173 0300 	sbcs.w	r3, r3, #0
 1005c24:	db9d      	blt.n	1005b62 <z_tick_sleep+0x2e>
}
 1005c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1005c2a:	bf00      	nop
 1005c2c:	0100795b 	.word	0x0100795b
 1005c30:	01006eb0 	.word	0x01006eb0
 1005c34:	21000410 	.word	0x21000410
 1005c38:	01006fdf 	.word	0x01006fdf
 1005c3c:	210003e4 	.word	0x210003e4
 1005c40:	2100040c 	.word	0x2100040c
 1005c44:	0100560d 	.word	0x0100560d

01005c48 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 1005c48:	b538      	push	{r3, r4, r5, lr}
 1005c4a:	4605      	mov	r5, r0
 1005c4c:	460c      	mov	r4, r1
 1005c4e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
 1005c52:	b153      	cbz	r3, 1005c6a <z_impl_k_sleep+0x22>
 1005c54:	4911      	ldr	r1, [pc, #68]	; (1005c9c <z_impl_k_sleep+0x54>)
 1005c56:	4812      	ldr	r0, [pc, #72]	; (1005ca0 <z_impl_k_sleep+0x58>)
 1005c58:	f240 527e 	movw	r2, #1406	; 0x57e
 1005c5c:	f000 fc13 	bl	1006486 <assert_print>
 1005c60:	f240 517e 	movw	r1, #1406	; 0x57e
 1005c64:	480d      	ldr	r0, [pc, #52]	; (1005c9c <z_impl_k_sleep+0x54>)
 1005c66:	f000 fc07 	bl	1006478 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1005c6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 1005c6e:	bf08      	it	eq
 1005c70:	f1b5 3fff 	cmpeq.w	r5, #4294967295
 1005c74:	d106      	bne.n	1005c84 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
 1005c76:	4b0b      	ldr	r3, [pc, #44]	; (1005ca4 <z_impl_k_sleep+0x5c>)
 1005c78:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 1005c7a:	f7ff fdd9 	bl	1005830 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 1005c7e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 1005c82:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
 1005c84:	4628      	mov	r0, r5
 1005c86:	4621      	mov	r1, r4
 1005c88:	f7ff ff54 	bl	1005b34 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
 1005c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 1005c90:	fb80 0303 	smull	r0, r3, r0, r3
 1005c94:	0bc0      	lsrs	r0, r0, #15
 1005c96:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
 1005c9a:	e7f2      	b.n	1005c82 <z_impl_k_sleep+0x3a>
 1005c9c:	0100795b 	.word	0x0100795b
 1005ca0:	01006eb0 	.word	0x01006eb0
 1005ca4:	210003e4 	.word	0x210003e4

01005ca8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 1005ca8:	4b01      	ldr	r3, [pc, #4]	; (1005cb0 <z_impl_z_current_get+0x8>)
 1005caa:	6898      	ldr	r0, [r3, #8]
 1005cac:	4770      	bx	lr
 1005cae:	bf00      	nop
 1005cb0:	210003e4 	.word	0x210003e4

01005cb4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 1005cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1005cb8:	4604      	mov	r4, r0
 1005cba:	f04f 0320 	mov.w	r3, #32
 1005cbe:	f3ef 8611 	mrs	r6, BASEPRI
 1005cc2:	f383 8812 	msr	BASEPRI_MAX, r3
 1005cc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1005cca:	483e      	ldr	r0, [pc, #248]	; (1005dc4 <z_thread_abort+0x110>)
 1005ccc:	f7ff f8e2 	bl	1004e94 <z_spin_lock_valid>
 1005cd0:	b940      	cbnz	r0, 1005ce4 <z_thread_abort+0x30>
 1005cd2:	493d      	ldr	r1, [pc, #244]	; (1005dc8 <z_thread_abort+0x114>)
 1005cd4:	483d      	ldr	r0, [pc, #244]	; (1005dcc <z_thread_abort+0x118>)
 1005cd6:	228e      	movs	r2, #142	; 0x8e
 1005cd8:	f000 fbd5 	bl	1006486 <assert_print>
 1005cdc:	218e      	movs	r1, #142	; 0x8e
 1005cde:	483a      	ldr	r0, [pc, #232]	; (1005dc8 <z_thread_abort+0x114>)
 1005ce0:	f000 fbca 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1005ce4:	4837      	ldr	r0, [pc, #220]	; (1005dc4 <z_thread_abort+0x110>)
 1005ce6:	f7ff f8f1 	bl	1004ecc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 1005cea:	7b63      	ldrb	r3, [r4, #13]
 1005cec:	071a      	lsls	r2, r3, #28
 1005cee:	d512      	bpl.n	1005d16 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005cf0:	4834      	ldr	r0, [pc, #208]	; (1005dc4 <z_thread_abort+0x110>)
 1005cf2:	f7ff f8dd 	bl	1004eb0 <z_spin_unlock_valid>
 1005cf6:	b940      	cbnz	r0, 1005d0a <z_thread_abort+0x56>
 1005cf8:	4933      	ldr	r1, [pc, #204]	; (1005dc8 <z_thread_abort+0x114>)
 1005cfa:	4834      	ldr	r0, [pc, #208]	; (1005dcc <z_thread_abort+0x118>)
 1005cfc:	22b9      	movs	r2, #185	; 0xb9
 1005cfe:	f000 fbc2 	bl	1006486 <assert_print>
 1005d02:	21b9      	movs	r1, #185	; 0xb9
 1005d04:	4830      	ldr	r0, [pc, #192]	; (1005dc8 <z_thread_abort+0x114>)
 1005d06:	f000 fbb7 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005d0a:	f386 8811 	msr	BASEPRI, r6
 1005d0e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 1005d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 1005d16:	f023 0220 	bic.w	r2, r3, #32
 1005d1a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 1005d1e:	09d2      	lsrs	r2, r2, #7
 1005d20:	d138      	bne.n	1005d94 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 1005d22:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
 1005d24:	68a3      	ldr	r3, [r4, #8]
 1005d26:	b113      	cbz	r3, 1005d2e <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
 1005d28:	4620      	mov	r0, r4
 1005d2a:	f7ff faa9 	bl	1005280 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 1005d2e:	f104 0018 	add.w	r0, r4, #24
 1005d32:	f000 f965 	bl	1006000 <z_abort_timeout>
 1005d36:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 1005d3a:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
 1005d3e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005d40:	42bd      	cmp	r5, r7
 1005d42:	d000      	beq.n	1005d46 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 1005d44:	bb85      	cbnz	r5, 1005da8 <z_thread_abort+0xf4>
		update_cache(1);
 1005d46:	2001      	movs	r0, #1
 1005d48:	f7ff fab8 	bl	10052bc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 1005d4c:	4b20      	ldr	r3, [pc, #128]	; (1005dd0 <z_thread_abort+0x11c>)
 1005d4e:	689b      	ldr	r3, [r3, #8]
 1005d50:	42a3      	cmp	r3, r4
 1005d52:	d1cd      	bne.n	1005cf0 <z_thread_abort+0x3c>
 1005d54:	f3ef 8305 	mrs	r3, IPSR
 1005d58:	2b00      	cmp	r3, #0
 1005d5a:	d1c9      	bne.n	1005cf0 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005d5c:	4819      	ldr	r0, [pc, #100]	; (1005dc4 <z_thread_abort+0x110>)
 1005d5e:	f7ff f8a7 	bl	1004eb0 <z_spin_unlock_valid>
 1005d62:	b940      	cbnz	r0, 1005d76 <z_thread_abort+0xc2>
 1005d64:	4918      	ldr	r1, [pc, #96]	; (1005dc8 <z_thread_abort+0x114>)
 1005d66:	4819      	ldr	r0, [pc, #100]	; (1005dcc <z_thread_abort+0x118>)
 1005d68:	22d0      	movs	r2, #208	; 0xd0
 1005d6a:	f000 fb8c 	bl	1006486 <assert_print>
 1005d6e:	21d0      	movs	r1, #208	; 0xd0
 1005d70:	4815      	ldr	r0, [pc, #84]	; (1005dc8 <z_thread_abort+0x114>)
 1005d72:	f000 fb81 	bl	1006478 <assert_post_action>
 1005d76:	4630      	mov	r0, r6
 1005d78:	f7fb fbd0 	bl	100151c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
 1005d7c:	f240 62ac 	movw	r2, #1708	; 0x6ac
 1005d80:	4914      	ldr	r1, [pc, #80]	; (1005dd4 <z_thread_abort+0x120>)
 1005d82:	4812      	ldr	r0, [pc, #72]	; (1005dcc <z_thread_abort+0x118>)
 1005d84:	f000 fb7f 	bl	1006486 <assert_print>
 1005d88:	f240 61ac 	movw	r1, #1708	; 0x6ac
 1005d8c:	4811      	ldr	r0, [pc, #68]	; (1005dd4 <z_thread_abort+0x120>)
 1005d8e:	f000 fb73 	bl	1006478 <assert_post_action>
 1005d92:	e7ad      	b.n	1005cf0 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1005d94:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 1005d98:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
 1005d9c:	4621      	mov	r1, r4
 1005d9e:	480e      	ldr	r0, [pc, #56]	; (1005dd8 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1005da0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 1005da2:	f7ff fa4f 	bl	1005244 <z_priq_dumb_remove>
}
 1005da6:	e7bd      	b.n	1005d24 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
 1005da8:	4628      	mov	r0, r5
 1005daa:	f7ff fa69 	bl	1005280 <unpend_thread_no_timeout>
 1005dae:	f105 0018 	add.w	r0, r5, #24
 1005db2:	f000 f925 	bl	1006000 <z_abort_timeout>
		ready_thread(thread);
 1005db6:	4628      	mov	r0, r5
 1005db8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 1005dbc:	f7ff fb64 	bl	1005488 <ready_thread>
 1005dc0:	e7bd      	b.n	1005d3e <z_thread_abort+0x8a>
 1005dc2:	bf00      	nop
 1005dc4:	21000410 	.word	0x21000410
 1005dc8:	01006fdf 	.word	0x01006fdf
 1005dcc:	01006eb0 	.word	0x01006eb0
 1005dd0:	210003e4 	.word	0x210003e4
 1005dd4:	0100795b 	.word	0x0100795b
 1005dd8:	21000400 	.word	0x21000400

01005ddc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 1005ddc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 1005dde:	4806      	ldr	r0, [pc, #24]	; (1005df8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 1005de0:	4a06      	ldr	r2, [pc, #24]	; (1005dfc <z_data_copy+0x20>)
 1005de2:	4907      	ldr	r1, [pc, #28]	; (1005e00 <z_data_copy+0x24>)
 1005de4:	1a12      	subs	r2, r2, r0
 1005de6:	f000 fdb8 	bl	100695a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 1005dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 1005dee:	4a05      	ldr	r2, [pc, #20]	; (1005e04 <z_data_copy+0x28>)
 1005df0:	4905      	ldr	r1, [pc, #20]	; (1005e08 <z_data_copy+0x2c>)
 1005df2:	4806      	ldr	r0, [pc, #24]	; (1005e0c <z_data_copy+0x30>)
 1005df4:	f000 bdb1 	b.w	100695a <z_early_memcpy>
 1005df8:	21000000 	.word	0x21000000
 1005dfc:	210000f4 	.word	0x210000f4
 1005e00:	010079d8 	.word	0x010079d8
 1005e04:	00000000 	.word	0x00000000
 1005e08:	010079d8 	.word	0x010079d8
 1005e0c:	21000000 	.word	0x21000000

01005e10 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 1005e10:	4b03      	ldr	r3, [pc, #12]	; (1005e20 <elapsed+0x10>)
 1005e12:	681b      	ldr	r3, [r3, #0]
 1005e14:	b90b      	cbnz	r3, 1005e1a <elapsed+0xa>
 1005e16:	f7fd b8af 	b.w	1002f78 <sys_clock_elapsed>
}
 1005e1a:	2000      	movs	r0, #0
 1005e1c:	4770      	bx	lr
 1005e1e:	bf00      	nop
 1005e20:	2100041c 	.word	0x2100041c

01005e24 <next_timeout>:
	return list->head == list;
 1005e24:	4b10      	ldr	r3, [pc, #64]	; (1005e68 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 1005e26:	b510      	push	{r4, lr}
 1005e28:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005e2a:	429c      	cmp	r4, r3
 1005e2c:	bf08      	it	eq
 1005e2e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 1005e30:	f7ff ffee 	bl	1005e10 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 1005e34:	b1a4      	cbz	r4, 1005e60 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 1005e36:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 1005e3a:	1a1b      	subs	r3, r3, r0
 1005e3c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 1005e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 1005e44:	f170 0200 	sbcs.w	r2, r0, #0
 1005e48:	da0a      	bge.n	1005e60 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 1005e4a:	2800      	cmp	r0, #0
 1005e4c:	bfac      	ite	ge
 1005e4e:	4618      	movge	r0, r3
 1005e50:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 1005e52:	4b06      	ldr	r3, [pc, #24]	; (1005e6c <next_timeout+0x48>)
 1005e54:	691b      	ldr	r3, [r3, #16]
 1005e56:	b113      	cbz	r3, 1005e5e <next_timeout+0x3a>
 1005e58:	4298      	cmp	r0, r3
 1005e5a:	bfa8      	it	ge
 1005e5c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 1005e5e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 1005e60:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 1005e64:	e7f5      	b.n	1005e52 <next_timeout+0x2e>
 1005e66:	bf00      	nop
 1005e68:	210000b4 	.word	0x210000b4
 1005e6c:	210003e4 	.word	0x210003e4

01005e70 <remove_timeout>:
{
 1005e70:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 1005e72:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 1005e74:	b168      	cbz	r0, 1005e92 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 1005e76:	4a0a      	ldr	r2, [pc, #40]	; (1005ea0 <remove_timeout+0x30>)
 1005e78:	6852      	ldr	r2, [r2, #4]
 1005e7a:	4290      	cmp	r0, r2
 1005e7c:	d009      	beq.n	1005e92 <remove_timeout+0x22>
	if (next(t) != NULL) {
 1005e7e:	b143      	cbz	r3, 1005e92 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 1005e80:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 1005e84:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 1005e88:	1912      	adds	r2, r2, r4
 1005e8a:	eb41 0105 	adc.w	r1, r1, r5
 1005e8e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
 1005e92:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
 1005e94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 1005e96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 1005e98:	2300      	movs	r3, #0
	node->prev = NULL;
 1005e9a:	e9c0 3300 	strd	r3, r3, [r0]
}
 1005e9e:	bd30      	pop	{r4, r5, pc}
 1005ea0:	210000b4 	.word	0x210000b4

01005ea4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 1005ea8:	bf08      	it	eq
 1005eaa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 1005eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1005eb2:	4604      	mov	r4, r0
 1005eb4:	460e      	mov	r6, r1
 1005eb6:	4698      	mov	r8, r3
 1005eb8:	4615      	mov	r5, r2
 1005eba:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1005ebc:	f000 8090 	beq.w	1005fe0 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
 1005ec0:	6803      	ldr	r3, [r0, #0]
 1005ec2:	b143      	cbz	r3, 1005ed6 <z_add_timeout+0x32>
 1005ec4:	4947      	ldr	r1, [pc, #284]	; (1005fe4 <z_add_timeout+0x140>)
 1005ec6:	4848      	ldr	r0, [pc, #288]	; (1005fe8 <z_add_timeout+0x144>)
 1005ec8:	2263      	movs	r2, #99	; 0x63
 1005eca:	f000 fadc 	bl	1006486 <assert_print>
 1005ece:	2163      	movs	r1, #99	; 0x63
 1005ed0:	4844      	ldr	r0, [pc, #272]	; (1005fe4 <z_add_timeout+0x140>)
 1005ed2:	f000 fad1 	bl	1006478 <assert_post_action>
	to->fn = fn;
 1005ed6:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
 1005ed8:	f04f 0320 	mov.w	r3, #32
 1005edc:	f3ef 8611 	mrs	r6, BASEPRI
 1005ee0:	f383 8812 	msr	BASEPRI_MAX, r3
 1005ee4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1005ee8:	4840      	ldr	r0, [pc, #256]	; (1005fec <z_add_timeout+0x148>)
 1005eea:	f7fe ffd3 	bl	1004e94 <z_spin_lock_valid>
 1005eee:	b940      	cbnz	r0, 1005f02 <z_add_timeout+0x5e>
 1005ef0:	493f      	ldr	r1, [pc, #252]	; (1005ff0 <z_add_timeout+0x14c>)
 1005ef2:	483d      	ldr	r0, [pc, #244]	; (1005fe8 <z_add_timeout+0x144>)
 1005ef4:	228e      	movs	r2, #142	; 0x8e
 1005ef6:	f000 fac6 	bl	1006486 <assert_print>
 1005efa:	218e      	movs	r1, #142	; 0x8e
 1005efc:	483c      	ldr	r0, [pc, #240]	; (1005ff0 <z_add_timeout+0x14c>)
 1005efe:	f000 fabb 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 1005f02:	483a      	ldr	r0, [pc, #232]	; (1005fec <z_add_timeout+0x148>)
 1005f04:	f7fe ffe2 	bl	1004ecc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 1005f08:	f06f 0201 	mvn.w	r2, #1
 1005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 1005f10:	1b53      	subs	r3, r2, r5
 1005f12:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 1005f16:	2b00      	cmp	r3, #0
 1005f18:	db1b      	blt.n	1005f52 <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 1005f1a:	4b36      	ldr	r3, [pc, #216]	; (1005ff4 <z_add_timeout+0x150>)
 1005f1c:	e9d3 1300 	ldrd	r1, r3, [r3]
 1005f20:	1a52      	subs	r2, r2, r1
 1005f22:	eb60 0303 	sbc.w	r3, r0, r3
 1005f26:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 1005f28:	eb63 0707 	sbc.w	r7, r3, r7
 1005f2c:	2d01      	cmp	r5, #1
 1005f2e:	f177 0300 	sbcs.w	r3, r7, #0
 1005f32:	bfbc      	itt	lt
 1005f34:	2501      	movlt	r5, #1
 1005f36:	2700      	movlt	r7, #0
 1005f38:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
 1005f3c:	4a2e      	ldr	r2, [pc, #184]	; (1005ff8 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
 1005f3e:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005f42:	4293      	cmp	r3, r2
 1005f44:	d118      	bne.n	1005f78 <z_add_timeout+0xd4>
	node->prev = tail;
 1005f46:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
 1005f4a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 1005f4e:	6054      	str	r4, [r2, #4]
}
 1005f50:	e026      	b.n	1005fa0 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 1005f52:	f7ff ff5d 	bl	1005e10 <elapsed>
 1005f56:	3501      	adds	r5, #1
 1005f58:	f148 0800 	adc.w	r8, r8, #0
 1005f5c:	182d      	adds	r5, r5, r0
 1005f5e:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
 1005f62:	e9c4 5004 	strd	r5, r0, [r4, #16]
 1005f66:	e7e9      	b.n	1005f3c <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 1005f68:	1a09      	subs	r1, r1, r0
 1005f6a:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 1005f6e:	459c      	cmp	ip, r3
 1005f70:	e9c4 1504 	strd	r1, r5, [r4, #16]
 1005f74:	d0e7      	beq.n	1005f46 <z_add_timeout+0xa2>
 1005f76:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 1005f78:	2b00      	cmp	r3, #0
 1005f7a:	d0e4      	beq.n	1005f46 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
 1005f7c:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
 1005f80:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 1005f84:	4281      	cmp	r1, r0
 1005f86:	eb75 0e07 	sbcs.w	lr, r5, r7
 1005f8a:	daed      	bge.n	1005f68 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
 1005f8c:	1a41      	subs	r1, r0, r1
 1005f8e:	eb67 0505 	sbc.w	r5, r7, r5
 1005f92:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 1005f96:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 1005f98:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
 1005f9c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 1005f9e:	605c      	str	r4, [r3, #4]
	return list->head == list;
 1005fa0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005fa2:	4293      	cmp	r3, r2
 1005fa4:	d00b      	beq.n	1005fbe <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 1005fa6:	429c      	cmp	r4, r3
 1005fa8:	d109      	bne.n	1005fbe <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 1005faa:	f7ff ff3b 	bl	1005e24 <next_timeout>

			if (next_time == 0 ||
 1005fae:	b118      	cbz	r0, 1005fb8 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
 1005fb0:	4b12      	ldr	r3, [pc, #72]	; (1005ffc <z_add_timeout+0x158>)
			if (next_time == 0 ||
 1005fb2:	691b      	ldr	r3, [r3, #16]
 1005fb4:	4283      	cmp	r3, r0
 1005fb6:	d002      	beq.n	1005fbe <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
 1005fb8:	2100      	movs	r1, #0
 1005fba:	f7fc ffad 	bl	1002f18 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1005fbe:	480b      	ldr	r0, [pc, #44]	; (1005fec <z_add_timeout+0x148>)
 1005fc0:	f7fe ff76 	bl	1004eb0 <z_spin_unlock_valid>
 1005fc4:	b940      	cbnz	r0, 1005fd8 <z_add_timeout+0x134>
 1005fc6:	490a      	ldr	r1, [pc, #40]	; (1005ff0 <z_add_timeout+0x14c>)
 1005fc8:	4807      	ldr	r0, [pc, #28]	; (1005fe8 <z_add_timeout+0x144>)
 1005fca:	22b9      	movs	r2, #185	; 0xb9
 1005fcc:	f000 fa5b 	bl	1006486 <assert_print>
 1005fd0:	21b9      	movs	r1, #185	; 0xb9
 1005fd2:	4807      	ldr	r0, [pc, #28]	; (1005ff0 <z_add_timeout+0x14c>)
 1005fd4:	f000 fa50 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1005fd8:	f386 8811 	msr	BASEPRI, r6
 1005fdc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 1005fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1005fe4:	0100797d 	.word	0x0100797d
 1005fe8:	01006eb0 	.word	0x01006eb0
 1005fec:	21000420 	.word	0x21000420
 1005ff0:	01006fdf 	.word	0x01006fdf
 1005ff4:	21000218 	.word	0x21000218
 1005ff8:	210000b4 	.word	0x210000b4
 1005ffc:	210003e4 	.word	0x210003e4

01006000 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
 1006000:	b538      	push	{r3, r4, r5, lr}
 1006002:	4604      	mov	r4, r0
	__asm__ volatile(
 1006004:	f04f 0320 	mov.w	r3, #32
 1006008:	f3ef 8511 	mrs	r5, BASEPRI
 100600c:	f383 8812 	msr	BASEPRI_MAX, r3
 1006010:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1006014:	4815      	ldr	r0, [pc, #84]	; (100606c <z_abort_timeout+0x6c>)
 1006016:	f7fe ff3d 	bl	1004e94 <z_spin_lock_valid>
 100601a:	b940      	cbnz	r0, 100602e <z_abort_timeout+0x2e>
 100601c:	4914      	ldr	r1, [pc, #80]	; (1006070 <z_abort_timeout+0x70>)
 100601e:	4815      	ldr	r0, [pc, #84]	; (1006074 <z_abort_timeout+0x74>)
 1006020:	228e      	movs	r2, #142	; 0x8e
 1006022:	f000 fa30 	bl	1006486 <assert_print>
 1006026:	218e      	movs	r1, #142	; 0x8e
 1006028:	4811      	ldr	r0, [pc, #68]	; (1006070 <z_abort_timeout+0x70>)
 100602a:	f000 fa25 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 100602e:	480f      	ldr	r0, [pc, #60]	; (100606c <z_abort_timeout+0x6c>)
 1006030:	f7fe ff4c 	bl	1004ecc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
 1006034:	6823      	ldr	r3, [r4, #0]
 1006036:	b1b3      	cbz	r3, 1006066 <z_abort_timeout+0x66>
			remove_timeout(to);
 1006038:	4620      	mov	r0, r4
 100603a:	f7ff ff19 	bl	1005e70 <remove_timeout>
			ret = 0;
 100603e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 1006040:	480a      	ldr	r0, [pc, #40]	; (100606c <z_abort_timeout+0x6c>)
 1006042:	f7fe ff35 	bl	1004eb0 <z_spin_unlock_valid>
 1006046:	b940      	cbnz	r0, 100605a <z_abort_timeout+0x5a>
 1006048:	4909      	ldr	r1, [pc, #36]	; (1006070 <z_abort_timeout+0x70>)
 100604a:	480a      	ldr	r0, [pc, #40]	; (1006074 <z_abort_timeout+0x74>)
 100604c:	22b9      	movs	r2, #185	; 0xb9
 100604e:	f000 fa1a 	bl	1006486 <assert_print>
 1006052:	21b9      	movs	r1, #185	; 0xb9
 1006054:	4806      	ldr	r0, [pc, #24]	; (1006070 <z_abort_timeout+0x70>)
 1006056:	f000 fa0f 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 100605a:	f385 8811 	msr	BASEPRI, r5
 100605e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 1006062:	4620      	mov	r0, r4
 1006064:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
 1006066:	f06f 0415 	mvn.w	r4, #21
 100606a:	e7e9      	b.n	1006040 <z_abort_timeout+0x40>
 100606c:	21000420 	.word	0x21000420
 1006070:	01006fdf 	.word	0x01006fdf
 1006074:	01006eb0 	.word	0x01006eb0

01006078 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
 1006078:	b570      	push	{r4, r5, r6, lr}
 100607a:	4604      	mov	r4, r0
 100607c:	460d      	mov	r5, r1
	__asm__ volatile(
 100607e:	f04f 0320 	mov.w	r3, #32
 1006082:	f3ef 8611 	mrs	r6, BASEPRI
 1006086:	f383 8812 	msr	BASEPRI_MAX, r3
 100608a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 100608e:	4816      	ldr	r0, [pc, #88]	; (10060e8 <z_set_timeout_expiry+0x70>)
 1006090:	f7fe ff00 	bl	1004e94 <z_spin_lock_valid>
 1006094:	b940      	cbnz	r0, 10060a8 <z_set_timeout_expiry+0x30>
 1006096:	4915      	ldr	r1, [pc, #84]	; (10060ec <z_set_timeout_expiry+0x74>)
 1006098:	4815      	ldr	r0, [pc, #84]	; (10060f0 <z_set_timeout_expiry+0x78>)
 100609a:	228e      	movs	r2, #142	; 0x8e
 100609c:	f000 f9f3 	bl	1006486 <assert_print>
 10060a0:	218e      	movs	r1, #142	; 0x8e
 10060a2:	4812      	ldr	r0, [pc, #72]	; (10060ec <z_set_timeout_expiry+0x74>)
 10060a4:	f000 f9e8 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 10060a8:	480f      	ldr	r0, [pc, #60]	; (10060e8 <z_set_timeout_expiry+0x70>)
 10060aa:	f7fe ff0f 	bl	1004ecc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
 10060ae:	f7ff feb9 	bl	1005e24 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 10060b2:	2801      	cmp	r0, #1
 10060b4:	dd05      	ble.n	10060c2 <z_set_timeout_expiry+0x4a>
 10060b6:	42a0      	cmp	r0, r4
 10060b8:	db03      	blt.n	10060c2 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 10060ba:	4629      	mov	r1, r5
 10060bc:	4620      	mov	r0, r4
 10060be:	f7fc ff2b 	bl	1002f18 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 10060c2:	4809      	ldr	r0, [pc, #36]	; (10060e8 <z_set_timeout_expiry+0x70>)
 10060c4:	f7fe fef4 	bl	1004eb0 <z_spin_unlock_valid>
 10060c8:	b940      	cbnz	r0, 10060dc <z_set_timeout_expiry+0x64>
 10060ca:	4908      	ldr	r1, [pc, #32]	; (10060ec <z_set_timeout_expiry+0x74>)
 10060cc:	4808      	ldr	r0, [pc, #32]	; (10060f0 <z_set_timeout_expiry+0x78>)
 10060ce:	22b9      	movs	r2, #185	; 0xb9
 10060d0:	f000 f9d9 	bl	1006486 <assert_print>
 10060d4:	21b9      	movs	r1, #185	; 0xb9
 10060d6:	4805      	ldr	r0, [pc, #20]	; (10060ec <z_set_timeout_expiry+0x74>)
 10060d8:	f000 f9ce 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 10060dc:	f386 8811 	msr	BASEPRI, r6
 10060e0:	f3bf 8f6f 	isb	sy
		}
	}
}
 10060e4:	bd70      	pop	{r4, r5, r6, pc}
 10060e6:	bf00      	nop
 10060e8:	21000420 	.word	0x21000420
 10060ec:	01006fdf 	.word	0x01006fdf
 10060f0:	01006eb0 	.word	0x01006eb0

010060f4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
 10060f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10060f8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 10060fa:	f7ff f95f 	bl	10053bc <z_time_slice>
	__asm__ volatile(
 10060fe:	f04f 0320 	mov.w	r3, #32
 1006102:	f3ef 8511 	mrs	r5, BASEPRI
 1006106:	f383 8812 	msr	BASEPRI_MAX, r3
 100610a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 100610e:	4842      	ldr	r0, [pc, #264]	; (1006218 <sys_clock_announce+0x124>)
 1006110:	f7fe fec0 	bl	1004e94 <z_spin_lock_valid>
 1006114:	b940      	cbnz	r0, 1006128 <sys_clock_announce+0x34>
 1006116:	4941      	ldr	r1, [pc, #260]	; (100621c <sys_clock_announce+0x128>)
 1006118:	4841      	ldr	r0, [pc, #260]	; (1006220 <sys_clock_announce+0x12c>)
 100611a:	228e      	movs	r2, #142	; 0x8e
 100611c:	f000 f9b3 	bl	1006486 <assert_print>
 1006120:	218e      	movs	r1, #142	; 0x8e
 1006122:	483e      	ldr	r0, [pc, #248]	; (100621c <sys_clock_announce+0x128>)
 1006124:	f000 f9a8 	bl	1006478 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 1006128:	4f3e      	ldr	r7, [pc, #248]	; (1006224 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
 100612a:	483b      	ldr	r0, [pc, #236]	; (1006218 <sys_clock_announce+0x124>)
	return list->head == list;
 100612c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1006228 <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 1006130:	4e3e      	ldr	r6, [pc, #248]	; (100622c <sys_clock_announce+0x138>)
 1006132:	f7fe fecb 	bl	1004ecc <z_spin_lock_set_owner>
	announce_remaining = ticks;
 1006136:	603c      	str	r4, [r7, #0]
 1006138:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 100613c:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100613e:	4544      	cmp	r4, r8
 1006140:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
 1006144:	e9d6 1e00 	ldrd	r1, lr, [r6]
 1006148:	d00b      	beq.n	1006162 <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 100614a:	b154      	cbz	r4, 1006162 <sys_clock_announce+0x6e>
 100614c:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
 1006150:	429a      	cmp	r2, r3
 1006152:	eb70 090c 	sbcs.w	r9, r0, ip
 1006156:	da23      	bge.n	10061a0 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 1006158:	1a9b      	subs	r3, r3, r2
 100615a:	eb6c 0c00 	sbc.w	ip, ip, r0
 100615e:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
 1006162:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 1006164:	1852      	adds	r2, r2, r1
 1006166:	eb4e 0000 	adc.w	r0, lr, r0
 100616a:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
 100616e:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 1006170:	f7ff fe58 	bl	1005e24 <next_timeout>
 1006174:	4621      	mov	r1, r4
 1006176:	f7fc fecf 	bl	1002f18 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 100617a:	4827      	ldr	r0, [pc, #156]	; (1006218 <sys_clock_announce+0x124>)
 100617c:	f7fe fe98 	bl	1004eb0 <z_spin_unlock_valid>
 1006180:	b940      	cbnz	r0, 1006194 <sys_clock_announce+0xa0>
 1006182:	4926      	ldr	r1, [pc, #152]	; (100621c <sys_clock_announce+0x128>)
 1006184:	4826      	ldr	r0, [pc, #152]	; (1006220 <sys_clock_announce+0x12c>)
 1006186:	22b9      	movs	r2, #185	; 0xb9
 1006188:	f000 f97d 	bl	1006486 <assert_print>
 100618c:	21b9      	movs	r1, #185	; 0xb9
 100618e:	4823      	ldr	r0, [pc, #140]	; (100621c <sys_clock_announce+0x128>)
 1006190:	f000 f972 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 1006194:	f385 8811 	msr	BASEPRI, r5
 1006198:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 100619c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 10061a0:	1859      	adds	r1, r3, r1
 10061a2:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
 10061a6:	1ad3      	subs	r3, r2, r3
 10061a8:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
 10061aa:	2200      	movs	r2, #0
 10061ac:	2300      	movs	r3, #0
		curr_tick += dt;
 10061ae:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
 10061b2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 10061b6:	4620      	mov	r0, r4
 10061b8:	f7ff fe5a 	bl	1005e70 <remove_timeout>
 10061bc:	4816      	ldr	r0, [pc, #88]	; (1006218 <sys_clock_announce+0x124>)
 10061be:	f7fe fe77 	bl	1004eb0 <z_spin_unlock_valid>
 10061c2:	b940      	cbnz	r0, 10061d6 <sys_clock_announce+0xe2>
 10061c4:	4915      	ldr	r1, [pc, #84]	; (100621c <sys_clock_announce+0x128>)
 10061c6:	4816      	ldr	r0, [pc, #88]	; (1006220 <sys_clock_announce+0x12c>)
 10061c8:	22b9      	movs	r2, #185	; 0xb9
 10061ca:	f000 f95c 	bl	1006486 <assert_print>
 10061ce:	21b9      	movs	r1, #185	; 0xb9
 10061d0:	4812      	ldr	r0, [pc, #72]	; (100621c <sys_clock_announce+0x128>)
 10061d2:	f000 f951 	bl	1006478 <assert_post_action>
 10061d6:	f385 8811 	msr	BASEPRI, r5
 10061da:	f3bf 8f6f 	isb	sy
		t->fn(t);
 10061de:	4620      	mov	r0, r4
 10061e0:	68a3      	ldr	r3, [r4, #8]
 10061e2:	4798      	blx	r3
	__asm__ volatile(
 10061e4:	f04f 0320 	mov.w	r3, #32
 10061e8:	f3ef 8511 	mrs	r5, BASEPRI
 10061ec:	f383 8812 	msr	BASEPRI_MAX, r3
 10061f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 10061f4:	4808      	ldr	r0, [pc, #32]	; (1006218 <sys_clock_announce+0x124>)
 10061f6:	f7fe fe4d 	bl	1004e94 <z_spin_lock_valid>
 10061fa:	b940      	cbnz	r0, 100620e <sys_clock_announce+0x11a>
 10061fc:	4907      	ldr	r1, [pc, #28]	; (100621c <sys_clock_announce+0x128>)
 10061fe:	4808      	ldr	r0, [pc, #32]	; (1006220 <sys_clock_announce+0x12c>)
 1006200:	228e      	movs	r2, #142	; 0x8e
 1006202:	f000 f940 	bl	1006486 <assert_print>
 1006206:	218e      	movs	r1, #142	; 0x8e
 1006208:	4804      	ldr	r0, [pc, #16]	; (100621c <sys_clock_announce+0x128>)
 100620a:	f000 f935 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 100620e:	4802      	ldr	r0, [pc, #8]	; (1006218 <sys_clock_announce+0x124>)
 1006210:	f7fe fe5c 	bl	1004ecc <z_spin_lock_set_owner>
	return k;
 1006214:	e790      	b.n	1006138 <sys_clock_announce+0x44>
 1006216:	bf00      	nop
 1006218:	21000420 	.word	0x21000420
 100621c:	01006fdf 	.word	0x01006fdf
 1006220:	01006eb0 	.word	0x01006eb0
 1006224:	2100041c 	.word	0x2100041c
 1006228:	210000b4 	.word	0x210000b4
 100622c:	21000218 	.word	0x21000218

01006230 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 1006230:	b570      	push	{r4, r5, r6, lr}
 1006232:	f04f 0320 	mov.w	r3, #32
 1006236:	f3ef 8611 	mrs	r6, BASEPRI
 100623a:	f383 8812 	msr	BASEPRI_MAX, r3
 100623e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 1006242:	4816      	ldr	r0, [pc, #88]	; (100629c <sys_clock_tick_get+0x6c>)
 1006244:	f7fe fe26 	bl	1004e94 <z_spin_lock_valid>
 1006248:	b940      	cbnz	r0, 100625c <sys_clock_tick_get+0x2c>
 100624a:	4915      	ldr	r1, [pc, #84]	; (10062a0 <sys_clock_tick_get+0x70>)
 100624c:	4815      	ldr	r0, [pc, #84]	; (10062a4 <sys_clock_tick_get+0x74>)
 100624e:	228e      	movs	r2, #142	; 0x8e
 1006250:	f000 f919 	bl	1006486 <assert_print>
 1006254:	218e      	movs	r1, #142	; 0x8e
 1006256:	4812      	ldr	r0, [pc, #72]	; (10062a0 <sys_clock_tick_get+0x70>)
 1006258:	f000 f90e 	bl	1006478 <assert_post_action>
	z_spin_lock_set_owner(l);
 100625c:	480f      	ldr	r0, [pc, #60]	; (100629c <sys_clock_tick_get+0x6c>)
 100625e:	f7fe fe35 	bl	1004ecc <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 1006262:	f7fc fe89 	bl	1002f78 <sys_clock_elapsed>
 1006266:	4b10      	ldr	r3, [pc, #64]	; (10062a8 <sys_clock_tick_get+0x78>)
 1006268:	e9d3 4500 	ldrd	r4, r5, [r3]
 100626c:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 100626e:	480b      	ldr	r0, [pc, #44]	; (100629c <sys_clock_tick_get+0x6c>)
 1006270:	f145 0500 	adc.w	r5, r5, #0
 1006274:	f7fe fe1c 	bl	1004eb0 <z_spin_unlock_valid>
 1006278:	b940      	cbnz	r0, 100628c <sys_clock_tick_get+0x5c>
 100627a:	4909      	ldr	r1, [pc, #36]	; (10062a0 <sys_clock_tick_get+0x70>)
 100627c:	4809      	ldr	r0, [pc, #36]	; (10062a4 <sys_clock_tick_get+0x74>)
 100627e:	22b9      	movs	r2, #185	; 0xb9
 1006280:	f000 f901 	bl	1006486 <assert_print>
 1006284:	21b9      	movs	r1, #185	; 0xb9
 1006286:	4806      	ldr	r0, [pc, #24]	; (10062a0 <sys_clock_tick_get+0x70>)
 1006288:	f000 f8f6 	bl	1006478 <assert_post_action>
	__asm__ volatile(
 100628c:	f386 8811 	msr	BASEPRI, r6
 1006290:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 1006294:	4620      	mov	r0, r4
 1006296:	4629      	mov	r1, r5
 1006298:	bd70      	pop	{r4, r5, r6, pc}
 100629a:	bf00      	nop
 100629c:	21000420 	.word	0x21000420
 10062a0:	01006fdf 	.word	0x01006fdf
 10062a4:	01006eb0 	.word	0x01006eb0
 10062a8:	21000218 	.word	0x21000218

010062ac <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 10062ac:	4a02      	ldr	r2, [pc, #8]	; (10062b8 <boot_banner+0xc>)
 10062ae:	4903      	ldr	r1, [pc, #12]	; (10062bc <boot_banner+0x10>)
 10062b0:	4803      	ldr	r0, [pc, #12]	; (10062c0 <boot_banner+0x14>)
 10062b2:	f000 b81a 	b.w	10062ea <printk>
 10062b6:	bf00      	nop
 10062b8:	0100783a 	.word	0x0100783a
 10062bc:	010079a1 	.word	0x010079a1
 10062c0:	010079ae 	.word	0x010079ae

010062c4 <sys_notify_validate>:
	if (notify == NULL) {
 10062c4:	4603      	mov	r3, r0
 10062c6:	b158      	cbz	r0, 10062e0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 10062c8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
 10062ca:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
 10062ce:	2a01      	cmp	r2, #1
 10062d0:	d003      	beq.n	10062da <sys_notify_validate+0x16>
 10062d2:	2a03      	cmp	r2, #3
 10062d4:	d104      	bne.n	10062e0 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
 10062d6:	6802      	ldr	r2, [r0, #0]
 10062d8:	b112      	cbz	r2, 10062e0 <sys_notify_validate+0x1c>
		notify->result = 0;
 10062da:	2000      	movs	r0, #0
 10062dc:	6098      	str	r0, [r3, #8]
 10062de:	4770      	bx	lr
		return -EINVAL;
 10062e0:	f06f 0015 	mvn.w	r0, #21
}
 10062e4:	4770      	bx	lr

010062e6 <arch_printk_char_out>:
}
 10062e6:	2000      	movs	r0, #0
 10062e8:	4770      	bx	lr

010062ea <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 10062ea:	b40f      	push	{r0, r1, r2, r3}
 10062ec:	b507      	push	{r0, r1, r2, lr}
 10062ee:	a904      	add	r1, sp, #16
 10062f0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 10062f4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 10062f6:	f7fa fa01 	bl	10006fc <vprintk>

	va_end(ap);
}
 10062fa:	b003      	add	sp, #12
 10062fc:	f85d eb04 	ldr.w	lr, [sp], #4
 1006300:	b004      	add	sp, #16
 1006302:	4770      	bx	lr

01006304 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1006304:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
 1006306:	f013 0307 	ands.w	r3, r3, #7
 100630a:	d105      	bne.n	1006318 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
 100630c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
 100630e:	2b00      	cmp	r3, #0
 1006310:	bf0c      	ite	eq
 1006312:	2000      	moveq	r0, #0
 1006314:	2003      	movne	r0, #3
 1006316:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
 1006318:	2b02      	cmp	r3, #2
 100631a:	d105      	bne.n	1006328 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
 100631c:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
 100631e:	2b00      	cmp	r3, #0
 1006320:	bf14      	ite	ne
 1006322:	2000      	movne	r0, #0
 1006324:	2004      	moveq	r0, #4
 1006326:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
 1006328:	2b01      	cmp	r3, #1
 100632a:	d105      	bne.n	1006338 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
 100632c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
 100632e:	2b00      	cmp	r3, #0
 1006330:	bf0c      	ite	eq
 1006332:	2000      	moveq	r0, #0
 1006334:	2005      	movne	r0, #5
 1006336:	4770      	bx	lr
	int evt = EVT_NOP;
 1006338:	2000      	movs	r0, #0
}
 100633a:	4770      	bx	lr

0100633c <notify_one>:
{
 100633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1006340:	460d      	mov	r5, r1
 1006342:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 1006344:	4619      	mov	r1, r3
 1006346:	1d28      	adds	r0, r5, #4
{
 1006348:	4690      	mov	r8, r2
 100634a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 100634c:	f7fa f9aa 	bl	10006a4 <sys_notify_finalize>
	if (cb) {
 1006350:	4604      	mov	r4, r0
 1006352:	b138      	cbz	r0, 1006364 <notify_one+0x28>
		cb(mgr, cli, state, res);
 1006354:	4633      	mov	r3, r6
 1006356:	4642      	mov	r2, r8
 1006358:	4629      	mov	r1, r5
 100635a:	4638      	mov	r0, r7
 100635c:	46a4      	mov	ip, r4
}
 100635e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
 1006362:	4760      	bx	ip
}
 1006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01006368 <validate_args>:
{
 1006368:	b510      	push	{r4, lr}
 100636a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
 100636c:	b140      	cbz	r0, 1006380 <validate_args+0x18>
 100636e:	b139      	cbz	r1, 1006380 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
 1006370:	1d08      	adds	r0, r1, #4
 1006372:	f7ff ffa7 	bl	10062c4 <sys_notify_validate>
	if ((rv == 0)
 1006376:	b928      	cbnz	r0, 1006384 <validate_args+0x1c>
	    && ((cli->notify.flags
 1006378:	68a3      	ldr	r3, [r4, #8]
 100637a:	f033 0303 	bics.w	r3, r3, #3
 100637e:	d001      	beq.n	1006384 <validate_args+0x1c>
		rv = -EINVAL;
 1006380:	f06f 0015 	mvn.w	r0, #21
}
 1006384:	bd10      	pop	{r4, pc}

01006386 <onoff_manager_init>:
{
 1006386:	b538      	push	{r3, r4, r5, lr}
 1006388:	460c      	mov	r4, r1
	if ((mgr == NULL)
 100638a:	4605      	mov	r5, r0
 100638c:	b158      	cbz	r0, 10063a6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
 100638e:	b151      	cbz	r1, 10063a6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
 1006390:	680b      	ldr	r3, [r1, #0]
 1006392:	b143      	cbz	r3, 10063a6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
 1006394:	684b      	ldr	r3, [r1, #4]
 1006396:	b133      	cbz	r3, 10063a6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 1006398:	2220      	movs	r2, #32
 100639a:	2100      	movs	r1, #0
 100639c:	f000 f8c5 	bl	100652a <memset>
	return 0;
 10063a0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 10063a2:	612c      	str	r4, [r5, #16]
}
 10063a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 10063a6:	f06f 0015 	mvn.w	r0, #21
 10063aa:	e7fb      	b.n	10063a4 <onoff_manager_init+0x1e>

010063ac <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 10063ac:	4604      	mov	r4, r0
 10063ae:	b508      	push	{r3, lr}
 10063b0:	4608      	mov	r0, r1
 10063b2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 10063b4:	461a      	mov	r2, r3
 10063b6:	47a0      	blx	r4
	return z_impl_z_current_get();
 10063b8:	f7ff fc76 	bl	1005ca8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 10063bc:	f7fb fbe2 	bl	1001b84 <z_impl_k_thread_abort>

010063c0 <encode_uint>:
{
 10063c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10063c4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 10063c6:	78d3      	ldrb	r3, [r2, #3]
{
 10063c8:	4680      	mov	r8, r0
	switch (specifier) {
 10063ca:	2b6f      	cmp	r3, #111	; 0x6f
{
 10063cc:	460f      	mov	r7, r1
 10063ce:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 10063d0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 10063d4:	d029      	beq.n	100642a <encode_uint+0x6a>
 10063d6:	d824      	bhi.n	1006422 <encode_uint+0x62>
		return 16;
 10063d8:	2b58      	cmp	r3, #88	; 0x58
 10063da:	bf14      	ite	ne
 10063dc:	260a      	movne	r6, #10
 10063de:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 10063e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 10063e4:	4632      	mov	r2, r6
 10063e6:	2300      	movs	r3, #0
 10063e8:	4640      	mov	r0, r8
 10063ea:	4639      	mov	r1, r7
 10063ec:	f7f9 fe64 	bl	10000b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 10063f0:	2a09      	cmp	r2, #9
 10063f2:	b2d4      	uxtb	r4, r2
 10063f4:	d81e      	bhi.n	1006434 <encode_uint+0x74>
 10063f6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 10063f8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 10063fa:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 10063fc:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1006400:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 1006404:	d301      	bcc.n	100640a <encode_uint+0x4a>
 1006406:	45d1      	cmp	r9, sl
 1006408:	d811      	bhi.n	100642e <encode_uint+0x6e>
	if (conv->flag_hash) {
 100640a:	782b      	ldrb	r3, [r5, #0]
 100640c:	069b      	lsls	r3, r3, #26
 100640e:	d505      	bpl.n	100641c <encode_uint+0x5c>
		if (radix == 8) {
 1006410:	2e08      	cmp	r6, #8
 1006412:	d115      	bne.n	1006440 <encode_uint+0x80>
			conv->altform_0 = true;
 1006414:	78ab      	ldrb	r3, [r5, #2]
 1006416:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 100641a:	70ab      	strb	r3, [r5, #2]
}
 100641c:	4648      	mov	r0, r9
 100641e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 1006422:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 1006426:	2b70      	cmp	r3, #112	; 0x70
 1006428:	e7d7      	b.n	10063da <encode_uint+0x1a>
	switch (specifier) {
 100642a:	2608      	movs	r6, #8
 100642c:	e7d8      	b.n	10063e0 <encode_uint+0x20>
		value /= radix;
 100642e:	4680      	mov	r8, r0
 1006430:	460f      	mov	r7, r1
 1006432:	e7d7      	b.n	10063e4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1006434:	f1bb 0f19 	cmp.w	fp, #25
 1006438:	bf94      	ite	ls
 100643a:	3437      	addls	r4, #55	; 0x37
 100643c:	3457      	addhi	r4, #87	; 0x57
 100643e:	e7db      	b.n	10063f8 <encode_uint+0x38>
		} else if (radix == 16) {
 1006440:	2e10      	cmp	r6, #16
 1006442:	d1eb      	bne.n	100641c <encode_uint+0x5c>
			conv->altform_0c = true;
 1006444:	78ab      	ldrb	r3, [r5, #2]
 1006446:	f043 0310 	orr.w	r3, r3, #16
 100644a:	e7e6      	b.n	100641a <encode_uint+0x5a>

0100644c <outs>:
{
 100644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1006450:	4607      	mov	r7, r0
 1006452:	4688      	mov	r8, r1
 1006454:	4615      	mov	r5, r2
 1006456:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 1006458:	4614      	mov	r4, r2
 100645a:	42b4      	cmp	r4, r6
 100645c:	eba4 0005 	sub.w	r0, r4, r5
 1006460:	d302      	bcc.n	1006468 <outs+0x1c>
 1006462:	b93e      	cbnz	r6, 1006474 <outs+0x28>
 1006464:	7823      	ldrb	r3, [r4, #0]
 1006466:	b12b      	cbz	r3, 1006474 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 1006468:	4641      	mov	r1, r8
 100646a:	f814 0b01 	ldrb.w	r0, [r4], #1
 100646e:	47b8      	blx	r7
		if (rc < 0) {
 1006470:	2800      	cmp	r0, #0
 1006472:	daf2      	bge.n	100645a <outs+0xe>
}
 1006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01006478 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
 1006478:	4040      	eors	r0, r0
 100647a:	f380 8811 	msr	BASEPRI, r0
 100647e:	f04f 0004 	mov.w	r0, #4
 1006482:	df02      	svc	2
}
 1006484:	4770      	bx	lr

01006486 <assert_print>:

void assert_print(const char *fmt, ...)
{
 1006486:	b40f      	push	{r0, r1, r2, r3}
 1006488:	b507      	push	{r0, r1, r2, lr}
 100648a:	a904      	add	r1, sp, #16
 100648c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 1006490:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 1006492:	f7fa f933 	bl	10006fc <vprintk>

	va_end(ap);
}
 1006496:	b003      	add	sp, #12
 1006498:	f85d eb04 	ldr.w	lr, [sp], #4
 100649c:	b004      	add	sp, #16
 100649e:	4770      	bx	lr

010064a0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ESB_PRX_APP_LOG_LEVEL, 4);

GEN_ABS_SYM_END
 10064a0:	4770      	bx	lr

010064a2 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
 10064a2:	b40f      	push	{r0, r1, r2, r3}
 10064a4:	b507      	push	{r0, r1, r2, lr}
 10064a6:	a904      	add	r1, sp, #16
 10064a8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 10064ac:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 10064ae:	f7fa f925 	bl	10006fc <vprintk>
	va_end(ap);
}
 10064b2:	b003      	add	sp, #12
 10064b4:	f85d eb04 	ldr.w	lr, [sp], #4
 10064b8:	b004      	add	sp, #16
 10064ba:	4770      	bx	lr

010064bc <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 10064bc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 10064be:	6800      	ldr	r0, [r0, #0]
 10064c0:	f7fa bf8c 	b.w	10013dc <z_arm_fatal_error>

010064c4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 10064c4:	2100      	movs	r1, #0
 10064c6:	2001      	movs	r0, #1
 10064c8:	f7fa bf88 	b.w	10013dc <z_arm_fatal_error>

010064cc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 10064cc:	b508      	push	{r3, lr}
	handler();
 10064ce:	f7fb f80b 	bl	10014e8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 10064d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 10064d6:	f7fb b8bb 	b.w	1001650 <z_arm_exc_exit>

010064da <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 10064da:	6e43      	ldr	r3, [r0, #100]	; 0x64
 10064dc:	f383 880b 	msr	PSPLIM, r3
}
 10064e0:	4770      	bx	lr

010064e2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
 10064e2:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
 10064e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 10064ea:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
 10064ec:	bf08      	it	eq
 10064ee:	f06f 0015 	mvneq.w	r0, #21
 10064f2:	4770      	bx	lr

010064f4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 10064f4:	4603      	mov	r3, r0
	size_t n = 0;
 10064f6:	2000      	movs	r0, #0

	while (*s != '\0') {
 10064f8:	5c1a      	ldrb	r2, [r3, r0]
 10064fa:	b902      	cbnz	r2, 10064fe <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 10064fc:	4770      	bx	lr
		n++;
 10064fe:	3001      	adds	r0, #1
 1006500:	e7fa      	b.n	10064f8 <strlen+0x4>

01006502 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 1006502:	4603      	mov	r3, r0
	size_t n = 0;
 1006504:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 1006506:	5c1a      	ldrb	r2, [r3, r0]
 1006508:	b10a      	cbz	r2, 100650e <strnlen+0xc>
 100650a:	4288      	cmp	r0, r1
 100650c:	d100      	bne.n	1006510 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 100650e:	4770      	bx	lr
		n++;
 1006510:	3001      	adds	r0, #1
 1006512:	e7f8      	b.n	1006506 <strnlen+0x4>

01006514 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 1006514:	b510      	push	{r4, lr}
 1006516:	1e43      	subs	r3, r0, #1
 1006518:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 100651a:	4291      	cmp	r1, r2
 100651c:	d100      	bne.n	1006520 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 100651e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 1006520:	f811 4b01 	ldrb.w	r4, [r1], #1
 1006524:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 1006528:	e7f7      	b.n	100651a <memcpy+0x6>

0100652a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 100652a:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 100652c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 100652e:	4402      	add	r2, r0
 1006530:	4293      	cmp	r3, r2
 1006532:	d100      	bne.n	1006536 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 1006534:	4770      	bx	lr
		*(d_byte++) = c_byte;
 1006536:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 100653a:	e7f9      	b.n	1006530 <memset+0x6>

0100653c <_stdout_hook_default>:
}
 100653c:	f04f 30ff 	mov.w	r0, #4294967295
 1006540:	4770      	bx	lr

01006542 <set_on_state>:
	__asm__ volatile(
 1006542:	f04f 0320 	mov.w	r3, #32
 1006546:	f3ef 8211 	mrs	r2, BASEPRI
 100654a:	f383 8812 	msr	BASEPRI_MAX, r3
 100654e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
 1006552:	6803      	ldr	r3, [r0, #0]
 1006554:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 1006558:	f043 0302 	orr.w	r3, r3, #2
 100655c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
 100655e:	f382 8811 	msr	BASEPRI, r2
 1006562:	f3bf 8f6f 	isb	sy
}
 1006566:	4770      	bx	lr

01006568 <async_start>:
{
 1006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100656a:	9f06      	ldr	r7, [sp, #24]
 100656c:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
 100656e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
 1006570:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
 1006572:	f04f 0020 	mov.w	r0, #32
 1006576:	f3ef 8c11 	mrs	ip, BASEPRI
 100657a:	f380 8812 	msr	BASEPRI_MAX, r0
 100657e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 1006582:	260c      	movs	r6, #12
 1006584:	fb06 4601 	mla	r6, r6, r1, r4
 1006588:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
 100658a:	f000 0e07 	and.w	lr, r0, #7
 100658e:	f1be 0f01 	cmp.w	lr, #1
 1006592:	d110      	bne.n	10065b6 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
 1006594:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
 1006596:	2600      	movs	r6, #0
	__asm__ volatile(
 1006598:	f38c 8811 	msr	BASEPRI, ip
 100659c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
 10065a0:	b93e      	cbnz	r6, 10065b2 <async_start+0x4a>
	subdata->cb = cb;
 10065a2:	200c      	movs	r0, #12
 10065a4:	4341      	muls	r1, r0
 10065a6:	440c      	add	r4, r1
	subdata->user_data = user_data;
 10065a8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
 10065ac:	686b      	ldr	r3, [r5, #4]
 10065ae:	585b      	ldr	r3, [r3, r1]
 10065b0:	4798      	blx	r3
}
 10065b2:	4630      	mov	r0, r6
 10065b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
 10065b6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
 10065ba:	4287      	cmp	r7, r0
 10065bc:	bf14      	ite	ne
 10065be:	f04f 36ff 	movne.w	r6, #4294967295
 10065c2:	f06f 0677 	mvneq.w	r6, #119	; 0x77
 10065c6:	e7e7      	b.n	1006598 <async_start+0x30>

010065c8 <api_start>:
{
 10065c8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
 10065ca:	2480      	movs	r4, #128	; 0x80
 10065cc:	9400      	str	r4, [sp, #0]
 10065ce:	f7ff ffcb 	bl	1006568 <async_start>
}
 10065d2:	b002      	add	sp, #8
 10065d4:	bd10      	pop	{r4, pc}

010065d6 <onoff_started_callback>:
	return &data->mgr[type];
 10065d6:	6900      	ldr	r0, [r0, #16]
 10065d8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
 10065da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 10065de:	2100      	movs	r1, #0
 10065e0:	4710      	bx	r2

010065e2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
 10065e2:	2000      	movs	r0, #0
 10065e4:	f7fd bd9e 	b.w	1004124 <nrfx_clock_start>

010065e8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 10065e8:	2000      	movs	r0, #0
 10065ea:	f7fd bdfd 	b.w	10041e8 <nrfx_clock_stop>

010065ee <api_stop>:
	return stop(dev, subsys, CTX_API);
 10065ee:	2280      	movs	r2, #128	; 0x80
 10065f0:	f7fb bd22 	b.w	1002038 <stop>

010065f4 <blocking_start_callback>:
{
 10065f4:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 10065f6:	f7fe bc93 	b.w	1004f20 <z_impl_k_sem_give>

010065fa <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10065fa:	6843      	ldr	r3, [r0, #4]
}
 10065fc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 10065fe:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
 1006600:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
 1006602:	600b      	str	r3, [r1, #0]
}
 1006604:	4770      	bx	lr

01006606 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006606:	6843      	ldr	r3, [r0, #4]
 1006608:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
 100660a:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
 100660c:	4042      	eors	r2, r0
 100660e:	400a      	ands	r2, r1
 1006610:	4042      	eors	r2, r0
    p_reg->OUT = value;
 1006612:	605a      	str	r2, [r3, #4]
}
 1006614:	2000      	movs	r0, #0
 1006616:	4770      	bx	lr

01006618 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006618:	6843      	ldr	r3, [r0, #4]
}
 100661a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100661c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
 100661e:	6099      	str	r1, [r3, #8]
}
 1006620:	4770      	bx	lr

01006622 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006622:	6843      	ldr	r3, [r0, #4]
}
 1006624:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006626:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
 1006628:	60d9      	str	r1, [r3, #12]
}
 100662a:	4770      	bx	lr

0100662c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100662c:	6843      	ldr	r3, [r0, #4]
}
 100662e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006630:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
 1006632:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
 1006634:	404b      	eors	r3, r1
    p_reg->OUT = value;
 1006636:	6053      	str	r3, [r2, #4]
}
 1006638:	4770      	bx	lr

0100663a <uarte_nrfx_config_get>:
{
 100663a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
 100663c:	6902      	ldr	r2, [r0, #16]
 100663e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
 1006642:	e883 0003 	stmia.w	r3, {r0, r1}
}
 1006646:	2000      	movs	r0, #0
 1006648:	4770      	bx	lr

0100664a <uarte_nrfx_err_check>:
	return config->uarte_regs;
 100664a:	6843      	ldr	r3, [r0, #4]
 100664c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
 100664e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
 1006652:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
 1006656:	4770      	bx	lr

01006658 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
 1006658:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
 100665a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
 100665c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 100665e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
 1006662:	b148      	cbz	r0, 1006678 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1006664:	2000      	movs	r0, #0
	*c = data->rx_data;
 1006666:	7c52      	ldrb	r2, [r2, #17]
 1006668:	700a      	strb	r2, [r1, #0]
 100666a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
 100666e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1006672:	2201      	movs	r2, #1
 1006674:	601a      	str	r2, [r3, #0]
	return 0;
 1006676:	4770      	bx	lr
		return -1;
 1006678:	f04f 30ff 	mov.w	r0, #4294967295
}
 100667c:	4770      	bx	lr

0100667e <is_tx_ready.isra.0>:
	return config->uarte_regs;
 100667e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
 1006680:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1006682:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
 1006686:	b940      	cbnz	r0, 100669a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
 1006688:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
 100668a:	079b      	lsls	r3, r3, #30
 100668c:	d406      	bmi.n	100669c <is_tx_ready.isra.0+0x1e>
 100668e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
 1006692:	3800      	subs	r0, #0
 1006694:	bf18      	it	ne
 1006696:	2001      	movne	r0, #1
 1006698:	4770      	bx	lr
 100669a:	2001      	movs	r0, #1
}
 100669c:	4770      	bx	lr

0100669e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
 100669e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
 10066a0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
 10066a2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
 10066a6:	05c9      	lsls	r1, r1, #23
 10066a8:	d518      	bpl.n	10066dc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10066aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 10066ae:	b1a9      	cbz	r1, 10066dc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
 10066b0:	f04f 0020 	mov.w	r0, #32
 10066b4:	f3ef 8111 	mrs	r1, BASEPRI
 10066b8:	f380 8812 	msr	BASEPRI_MAX, r0
 10066bc:	f3bf 8f6f 	isb	sy
 10066c0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
 10066c4:	b130      	cbz	r0, 10066d4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10066c6:	2000      	movs	r0, #0
 10066c8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
 10066cc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10066d0:	2001      	movs	r0, #1
 10066d2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
 10066d4:	f381 8811 	msr	BASEPRI, r1
 10066d8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
 10066dc:	6852      	ldr	r2, [r2, #4]
 10066de:	06d2      	lsls	r2, r2, #27
 10066e0:	d515      	bpl.n	100670e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
 10066e2:	f04f 0120 	mov.w	r1, #32
 10066e6:	f3ef 8211 	mrs	r2, BASEPRI
 10066ea:	f381 8812 	msr	BASEPRI_MAX, r1
 10066ee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10066f2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
 10066f6:	b111      	cbz	r1, 10066fe <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
 10066f8:	2100      	movs	r1, #0
 10066fa:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
 10066fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 1006702:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
 1006706:	f382 8811 	msr	BASEPRI, r2
 100670a:	f3bf 8f6f 	isb	sy
}
 100670e:	4770      	bx	lr

01006710 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 1006710:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 1006712:	6843      	ldr	r3, [r0, #4]
 1006714:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 1006716:	7a03      	ldrb	r3, [r0, #8]
 1006718:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 100671c:	3b01      	subs	r3, #1
 100671e:	00db      	lsls	r3, r3, #3
 1006720:	6845      	ldr	r5, [r0, #4]
 1006722:	6814      	ldr	r4, [r2, #0]
 1006724:	441d      	add	r5, r3
 1006726:	42ac      	cmp	r4, r5
 1006728:	d902      	bls.n	1006730 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 100672a:	f06f 0001 	mvn.w	r0, #1
}
 100672e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 1006730:	7965      	ldrb	r5, [r4, #5]
 1006732:	428d      	cmp	r5, r1
 1006734:	d002      	beq.n	100673c <pinctrl_lookup_state+0x2c>
		(*state)++;
 1006736:	3408      	adds	r4, #8
 1006738:	6014      	str	r4, [r2, #0]
 100673a:	e7f1      	b.n	1006720 <pinctrl_lookup_state+0x10>
			return 0;
 100673c:	2000      	movs	r0, #0
 100673e:	e7f6      	b.n	100672e <pinctrl_lookup_state+0x1e>

01006740 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
 1006740:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
 1006742:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
 1006746:	2b00      	cmp	r3, #0
{
 1006748:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
 100674a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100674e:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
 1006750:	bf07      	ittee	eq
 1006752:	4615      	moveq	r5, r2
 1006754:	460e      	moveq	r6, r1
 1006756:	2501      	movne	r5, #1
 1006758:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
 100675a:	9301      	str	r3, [sp, #4]
 100675c:	f7fc fc16 	bl	1002f8c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 1006760:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
 1006762:	f3c4 1281 	ubfx	r2, r4, #6, #2
 1006766:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 100676a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
 100676e:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 1006772:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
 1006776:	4332      	orrs	r2, r6
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 1006778:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 100677c:	430a      	orrs	r2, r1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 100677e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
 1006782:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
 1006786:	b002      	add	sp, #8
 1006788:	bd70      	pop	{r4, r5, r6, pc}

0100678a <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 100678a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 100678c:	4615      	mov	r5, r2
 100678e:	4604      	mov	r4, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
 1006790:	2701      	movs	r7, #1
 1006792:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 1006796:	42b4      	cmp	r4, r6
 1006798:	d102      	bne.n	10067a0 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
 100679a:	2000      	movs	r0, #0
}
 100679c:	b003      	add	sp, #12
 100679e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (NRF_GET_FUN(pins[i])) {
 10067a0:	6823      	ldr	r3, [r4, #0]
 10067a2:	0c1a      	lsrs	r2, r3, #16
 10067a4:	2a03      	cmp	r2, #3
 10067a6:	d829      	bhi.n	10067fc <pinctrl_configure_pins+0x72>
 10067a8:	e8df f002 	tbb	[pc, r2]
 10067ac:	231e1802 	.word	0x231e1802
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
 10067b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 10067b4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
 10067b8:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 10067ba:	a801      	add	r0, sp, #4
 10067bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 10067c0:	9301      	str	r3, [sp, #4]
 10067c2:	f7fc fbe3 	bl	1002f8c <nrf_gpio_pin_port_decode>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
 10067c6:	2201      	movs	r2, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
 10067c8:	9b01      	ldr	r3, [sp, #4]
 10067ca:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
 10067ce:	6083      	str	r3, [r0, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
 10067d0:	6820      	ldr	r0, [r4, #0]
 10067d2:	4611      	mov	r1, r2
 10067d4:	f7ff ffb4 	bl	1006740 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 10067d8:	3404      	adds	r4, #4
 10067da:	e7dc      	b.n	1006796 <pinctrl_configure_pins+0xc>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
 10067dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 10067e0:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
 10067e4:	2200      	movs	r2, #0
 10067e6:	e7f3      	b.n	10067d0 <pinctrl_configure_pins+0x46>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
 10067e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 10067ec:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
 10067f0:	e7e2      	b.n	10067b8 <pinctrl_configure_pins+0x2e>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
 10067f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 10067f6:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
 10067fa:	e7f3      	b.n	10067e4 <pinctrl_configure_pins+0x5a>
		switch (NRF_GET_FUN(pins[i])) {
 10067fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1006800:	e7cc      	b.n	100679c <pinctrl_configure_pins+0x12>

01006802 <bytewise_bit_swap>:
	uint32_t inp = sys_cpu_to_le32(*(uint32_t *)input);
 1006802:	6803      	ldr	r3, [r0, #0]
	inp = (inp & 0xF0F0F0F0) >> 4 | (inp & 0x0F0F0F0F) << 4;
 1006804:	091a      	lsrs	r2, r3, #4
 1006806:	011b      	lsls	r3, r3, #4
 1006808:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 100680c:	f002 320f 	and.w	r2, r2, #252645135	; 0xf0f0f0f
 1006810:	431a      	orrs	r2, r3
	inp = (inp & 0xCCCCCCCC) >> 2 | (inp & 0x33333333) << 2;
 1006812:	0893      	lsrs	r3, r2, #2
 1006814:	0092      	lsls	r2, r2, #2
 1006816:	f002 32cc 	and.w	r2, r2, #3435973836	; 0xcccccccc
 100681a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 100681e:	4313      	orrs	r3, r2
	inp = (inp & 0xAAAAAAAA) >> 1 | (inp & 0x55555555) << 1;
 1006820:	0858      	lsrs	r0, r3, #1
 1006822:	005b      	lsls	r3, r3, #1
 1006824:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 1006828:	f000 3055 	and.w	r0, r0, #1431655765	; 0x55555555
}
 100682c:	4318      	orrs	r0, r3
 100682e:	4770      	bx	lr

01006830 <ESB_SYS_TIMER_IRQHandler>:
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
 1006830:	4668      	mov	r0, sp
 1006832:	f020 0107 	bic.w	r1, r0, #7
 1006836:	468d      	mov	sp, r1
 1006838:	b501      	push	{r0, lr}
 100683a:	f7fa ff09 	bl	1001650 <z_arm_exc_exit>
 100683e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 1006842:	4685      	mov	sp, r0
 1006844:	4770      	bx	lr

01006846 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
 1006846:	4700      	bx	r0

01006848 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
 1006848:	f000 b8b1 	b.w	10069ae <z_impl_k_busy_wait>

0100684c <nrf_gpio_pin_present_check>:
    switch (port)
 100684c:	0943      	lsrs	r3, r0, #5
 100684e:	d00b      	beq.n	1006868 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
 1006850:	2b01      	cmp	r3, #1
 1006852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 1006856:	bf18      	it	ne
 1006858:	2300      	movne	r3, #0
    pin_number &= 0x1F;
 100685a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
 100685e:	fa23 f000 	lsr.w	r0, r3, r0
}
 1006862:	f000 0001 	and.w	r0, r0, #1
 1006866:	4770      	bx	lr
    switch (port)
 1006868:	f04f 33ff 	mov.w	r3, #4294967295
 100686c:	e7f5      	b.n	100685a <nrf_gpio_pin_present_check+0xe>

0100686e <pin_is_task_output>:
{
 100686e:	b508      	push	{r3, lr}
 1006870:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
 1006872:	f7fd fd25 	bl	10042c0 <pin_is_output>
 1006876:	b110      	cbz	r0, 100687e <pin_is_task_output+0x10>
 1006878:	4610      	mov	r0, r2
 100687a:	f7fd fd0b 	bl	1004294 <pin_in_use_by_te>
}
 100687e:	f000 0001 	and.w	r0, r0, #1
 1006882:	bd08      	pop	{r3, pc}

01006884 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
 1006884:	0080      	lsls	r0, r0, #2
}
 1006886:	f500 7080 	add.w	r0, r0, #256	; 0x100
 100688a:	4770      	bx	lr

0100688c <nrf_gpio_reconfigure>:
{
 100688c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 1006890:	4690      	mov	r8, r2
 1006892:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
 1006896:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1006898:	a801      	add	r0, sp, #4
{
 100689a:	460e      	mov	r6, r1
 100689c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100689e:	f7fd fd93 	bl	10043c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
 10068a2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
 10068a4:	f1b8 0f00 	cmp.w	r8, #0
 10068a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 10068ac:	bf14      	ite	ne
 10068ae:	2302      	movne	r3, #2
 10068b0:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 10068b2:	2e00      	cmp	r6, #0
 10068b4:	bf18      	it	ne
 10068b6:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 10068ba:	2d00      	cmp	r5, #0
 10068bc:	bf14      	ite	ne
 10068be:	210c      	movne	r1, #12
 10068c0:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
 10068c2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
 10068c4:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
 10068c8:	bf14      	ite	ne
 10068ca:	f44f 6170 	movne.w	r1, #3840	; 0xf00
 10068ce:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
 10068d0:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 10068d2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
 10068d6:	bf14      	ite	ne
 10068d8:	f44f 3140 	movne.w	r1, #196608	; 0x30000
 10068dc:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
 10068de:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 10068e2:	430b      	orrs	r3, r1
    cnf &= ~to_update;
 10068e4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
 10068e8:	b106      	cbz	r6, 10068ec <nrf_gpio_reconfigure+0x60>
 10068ea:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
 10068ec:	f1b8 0f00 	cmp.w	r8, #0
 10068f0:	d003      	beq.n	10068fa <nrf_gpio_reconfigure+0x6e>
 10068f2:	f898 8000 	ldrb.w	r8, [r8]
 10068f6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 10068fa:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
 10068fc:	b10d      	cbz	r5, 1006902 <nrf_gpio_reconfigure+0x76>
 10068fe:	782d      	ldrb	r5, [r5, #0]
 1006900:	00ad      	lsls	r5, r5, #2
 1006902:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
 1006906:	b10c      	cbz	r4, 100690c <nrf_gpio_reconfigure+0x80>
 1006908:	7822      	ldrb	r2, [r4, #0]
 100690a:	0214      	lsls	r4, r2, #8
 100690c:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
 100690e:	b10f      	cbz	r7, 1006914 <nrf_gpio_reconfigure+0x88>
 1006910:	783f      	ldrb	r7, [r7, #0]
 1006912:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
 1006914:	432c      	orrs	r4, r5
 1006916:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
 1006918:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
 100691c:	b002      	add	sp, #8
 100691e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01006922 <nrf_gpio_cfg_sense_set>:
{
 1006922:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
 1006924:	f10d 030f 	add.w	r3, sp, #15
 1006928:	9301      	str	r3, [sp, #4]
 100692a:	2300      	movs	r3, #0
{
 100692c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
 1006930:	461a      	mov	r2, r3
 1006932:	4619      	mov	r1, r3
 1006934:	9300      	str	r3, [sp, #0]
 1006936:	f7ff ffa9 	bl	100688c <nrf_gpio_reconfigure>
}
 100693a:	b005      	add	sp, #20
 100693c:	f85d fb04 	ldr.w	pc, [sp], #4

01006940 <z_device_state_init>:
}
 1006940:	4770      	bx	lr

01006942 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 1006942:	b138      	cbz	r0, 1006954 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 1006944:	68c3      	ldr	r3, [r0, #12]
 1006946:	8818      	ldrh	r0, [r3, #0]
 1006948:	f3c0 0008 	ubfx	r0, r0, #0, #9
 100694c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 1006950:	4258      	negs	r0, r3
 1006952:	4158      	adcs	r0, r3
}
 1006954:	4770      	bx	lr

01006956 <z_early_memset>:
	(void) memset(dst, c, n);
 1006956:	f7ff bde8 	b.w	100652a <memset>

0100695a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 100695a:	f7ff bddb 	b.w	1006514 <memcpy>

0100695e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 100695e:	f3ef 8005 	mrs	r0, IPSR
}
 1006962:	3800      	subs	r0, #0
 1006964:	bf18      	it	ne
 1006966:	2001      	movne	r0, #1
 1006968:	4770      	bx	lr

0100696a <k_thread_name_get>:
}
 100696a:	2000      	movs	r0, #0
 100696c:	4770      	bx	lr

0100696e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 100696e:	4603      	mov	r3, r0
 1006970:	b920      	cbnz	r0, 100697c <z_reschedule_irqlock+0xe>
 1006972:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 1006976:	b90a      	cbnz	r2, 100697c <z_reschedule_irqlock+0xe>
 1006978:	f7fa bdd0 	b.w	100151c <arch_swap>
 100697c:	f383 8811 	msr	BASEPRI, r3
 1006980:	f3bf 8f6f 	isb	sy
}
 1006984:	4770      	bx	lr

01006986 <z_reschedule_unlocked>:
	__asm__ volatile(
 1006986:	f04f 0320 	mov.w	r3, #32
 100698a:	f3ef 8011 	mrs	r0, BASEPRI
 100698e:	f383 8812 	msr	BASEPRI_MAX, r3
 1006992:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 1006996:	f7ff bfea 	b.w	100696e <z_reschedule_irqlock>

0100699a <z_priq_dumb_best>:
{
 100699a:	4603      	mov	r3, r0
	return list->head == list;
 100699c:	6800      	ldr	r0, [r0, #0]
}
 100699e:	4283      	cmp	r3, r0
 10069a0:	bf08      	it	eq
 10069a2:	2000      	moveq	r0, #0
 10069a4:	4770      	bx	lr

010069a6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 10069a6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 10069a8:	f7ff fc42 	bl	1006230 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 10069ac:	bd08      	pop	{r3, pc}

010069ae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 10069ae:	b108      	cbz	r0, 10069b4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
 10069b0:	f7fa bcec 	b.w	100138c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 10069b4:	4770      	bx	lr

010069b6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 10069b6:	4770      	bx	lr

010069b8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
 10069b8:	f7fd ba7c 	b.w	1003eb4 <SystemInit>
