
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 18 00 20 25 20 00 00 f1 75 00 00 f9 1f 00 00     ... % ...u......
  10:	f9 1f 00 00 f9 1f 00 00 f9 1f 00 00 00 00 00 00     ................
	...
  2c:	a9 1a 00 00 f9 1f 00 00 00 00 00 00 55 1a 00 00     ............U...
  3c:	f9 1f 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	59 1b 00 00 a5 39 00 00 59 1b 00 00 59 1b 00 00     Y....9..Y...Y...
  50:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...
  60:	59 1b 00 00 59 1b 00 00 a9 7a 00 00 59 1b 00 00     Y...Y....z..Y...
  70:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...
  80:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...
  90:	15 3a 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     .:..Y...Y...Y...
  a0:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...
  b0:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...
  c0:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...
  d0:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...
  e0:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...
  f0:	59 1b 00 00 59 1b 00 00 59 1b 00 00 59 1b 00 00     Y...Y...Y...Y...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0x15f>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <__data_size+0x69>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <__data_size+0x61>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <__data_size+0x21>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <__data_size+0x21>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <__data_size+0x65>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <__data_size+0x4b>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <__data_size+0x4b>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <__data_size+0x5d>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <__data_size+0x21>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <__data_size+0x4b>
     1e2:	b902      	cbnz	r2, 1e6 <__data_size+0x6d>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0xd1>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <__data_size+0x157>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <__data_size+0xa1>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <__data_size+0xa1>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0x15b>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <__data_size+0xcd>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0xcd>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <__data_size+0x4f>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0x14f>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <__data_size+0x119>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0x119>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0x153>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <__data_size+0x145>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0x145>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <__data_size+0x73>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0x119>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0x145>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <__data_size+0xa1>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0xcd>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0x16f>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0x169>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <__data_size+0x5d>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <__data_size+0x197>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0x17d>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <__data_size+0x193>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <__data_size+0x25d>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <__data_size+0x5d>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <__data_size+0x187>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <__data_size+0x255>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <__data_size+0x1e9>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <__data_size+0x1e9>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <__data_size+0x259>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <__data_size+0x215>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <__data_size+0x215>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <__data_size+0x22f>
     3a2:	d106      	bne.n	3b2 <__data_size+0x239>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <__data_size+0x239>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <__data_size+0x25d>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <__data_size+0x18f>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <__data_size+0x1e9>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <__data_size+0x215>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <__data_size+0x5d>
	...

000003dc <event_handler>:
}

int print_count = 0;
bool print_next = false;
void event_handler(struct esb_evt const *event)
{ 
     3dc:	b510      	push	{r4, lr}
	switch (event->evt_id) {
     3de:	7803      	ldrb	r3, [r0, #0]
     3e0:	2b01      	cmp	r3, #1
{ 
     3e2:	b086      	sub	sp, #24
	switch (event->evt_id) {
     3e4:	d00a      	beq.n	3fc <event_handler+0x20>
     3e6:	2b02      	cmp	r3, #2
     3e8:	d00b      	beq.n	402 <CONFIG_FLASH_SIZE+0x2>
     3ea:	2b00      	cmp	r3, #0
     3ec:	d151      	bne.n	492 <CONFIG_FLASH_SIZE+0x92>
				LOG_DBG("TX SUCCESS EVENT");

	case ESB_EVENT_TX_SUCCESS:
		LOG_DBG("TX SUCCESS EVENT");
     3ee:	482a      	ldr	r0, [pc, #168]	; (498 <CONFIG_FLASH_SIZE+0x98>)
     3f0:	2144      	movs	r1, #68	; 0x44
		} else {
			LOG_ERR("Error while reading rx packet");
		}
		break;
	}
}
     3f2:	b006      	add	sp, #24
     3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_ERR("Error while reading rx packet");
     3f8:	f007 b8e1 	b.w	75be <z_log_minimal_printk>
		LOG_DBG("TX FAILED EVENT");
     3fc:	4827      	ldr	r0, [pc, #156]	; (49c <CONFIG_FLASH_SIZE+0x9c>)
     3fe:	2144      	movs	r1, #68	; 0x44
     400:	e7f7      	b.n	3f2 <event_handler+0x16>
		if (esb_read_rx_payload(&rx_payload) == 0) {
     402:	4c27      	ldr	r4, [pc, #156]	; (4a0 <CONFIG_FLASH_SIZE+0xa0>)
     404:	4620      	mov	r0, r4
     406:	f003 fef5 	bl	41f4 <esb_read_rx_payload>
     40a:	2800      	cmp	r0, #0
     40c:	d13e      	bne.n	48c <CONFIG_FLASH_SIZE+0x8c>
			print_count ++;
     40e:	4a25      	ldr	r2, [pc, #148]	; (4a4 <CONFIG_FLASH_SIZE+0xa4>)
			 	LOG_DBG("Packet received, len %d : 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x", rx_payload.length, rx_payload.data[5], rx_payload.data[4], rx_payload.data[3], rx_payload.data[2], rx_payload.data[1], rx_payload.data[0]);
     410:	4825      	ldr	r0, [pc, #148]	; (4a8 <CONFIG_FLASH_SIZE+0xa8>)
			print_count ++;
     412:	6813      	ldr	r3, [r2, #0]
     414:	3301      	adds	r3, #1
     416:	6013      	str	r3, [r2, #0]
			 	LOG_DBG("Packet received, len %d : 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x", rx_payload.length, rx_payload.data[5], rx_payload.data[4], rx_payload.data[3], rx_payload.data[2], rx_payload.data[1], rx_payload.data[0]);
     418:	7963      	ldrb	r3, [r4, #5]
     41a:	9304      	str	r3, [sp, #16]
     41c:	79a3      	ldrb	r3, [r4, #6]
     41e:	9303      	str	r3, [sp, #12]
     420:	79e3      	ldrb	r3, [r4, #7]
     422:	9302      	str	r3, [sp, #8]
     424:	7a23      	ldrb	r3, [r4, #8]
     426:	9301      	str	r3, [sp, #4]
     428:	7a63      	ldrb	r3, [r4, #9]
     42a:	9300      	str	r3, [sp, #0]
     42c:	7aa3      	ldrb	r3, [r4, #10]
     42e:	7822      	ldrb	r2, [r4, #0]
     430:	2144      	movs	r1, #68	; 0x44
     432:	f007 f8c4 	bl	75be <z_log_minimal_printk>
			leds_update(rx_payload.data[1]);
     436:	79a1      	ldrb	r1, [r4, #6]
	bool led0_status = !(value % 8 > 0 && value % 8 <= 4);
     438:	f001 0007 	and.w	r0, r1, #7
     43c:	1e43      	subs	r3, r0, #1
     43e:	2b03      	cmp	r3, #3
     440:	bf94      	ite	ls
     442:	2300      	movls	r3, #0
     444:	2301      	movhi	r3, #1
	bool led1_status = !(value % 8 > 1 && value % 8 <= 5);
     446:	f011 0f06 	tst.w	r1, #6
     44a:	d01d      	beq.n	488 <CONFIG_FLASH_SIZE+0x88>
     44c:	2805      	cmp	r0, #5
     44e:	bf94      	ite	ls
     450:	2200      	movls	r2, #0
     452:	2201      	movhi	r2, #1
	bool led2_status = !(value % 8 > 2 && value % 8 <= 6);
     454:	3803      	subs	r0, #3
     456:	2803      	cmp	r0, #3
     458:	bf94      	ite	ls
     45a:	2000      	movls	r0, #0
     45c:	2001      	movhi	r0, #1
	gpio_port_value_t val = led0_status << leds[0].pin |
     45e:	035b      	lsls	r3, r3, #13
				led2_status << leds[2].pin |
     460:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
	bool led3_status = !(value % 8 > 3);
     464:	f081 0104 	eor.w	r1, r1, #4
						  gpio_port_value_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_set_masked_raw(port, mask, value);
     468:	4810      	ldr	r0, [pc, #64]	; (4ac <CONFIG_FLASH_SIZE+0xac>)
     46a:	f3c1 0180 	ubfx	r1, r1, #2, #1
				led2_status << leds[2].pin |
     46e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     472:	6881      	ldr	r1, [r0, #8]
     474:	688c      	ldr	r4, [r1, #8]
     476:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
     47a:	f44f 31f0 	mov.w	r1, #122880	; 0x1e000
     47e:	4623      	mov	r3, r4
}
     480:	b006      	add	sp, #24
     482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     486:	4718      	bx	r3
	bool led1_status = !(value % 8 > 1 && value % 8 <= 5);
     488:	2201      	movs	r2, #1
     48a:	e7e3      	b.n	454 <CONFIG_FLASH_SIZE+0x54>
			LOG_ERR("Error while reading rx packet");
     48c:	4808      	ldr	r0, [pc, #32]	; (4b0 <CONFIG_FLASH_SIZE+0xb0>)
     48e:	2145      	movs	r1, #69	; 0x45
     490:	e7af      	b.n	3f2 <event_handler+0x16>
}
     492:	b006      	add	sp, #24
     494:	bd10      	pop	{r4, pc}
     496:	bf00      	nop
     498:	000081e8 	.word	0x000081e8
     49c:	000081fe 	.word	0x000081fe
     4a0:	20000d0c 	.word	0x20000d0c
     4a4:	20000308 	.word	0x20000308
     4a8:	00008213 	.word	0x00008213
     4ac:	00007d5c 	.word	0x00007d5c
     4b0:	00008261 	.word	0x00008261

000004b4 <clocks_start>:

int clocks_start(void)
{
     4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	int res;
	struct onoff_manager *clk_mgr;
	struct onoff_client clk_cli;

	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
     4b6:	2000      	movs	r0, #0
     4b8:	f002 f904 	bl	26c4 <z_nrf_clock_control_get_onoff>
	if (!clk_mgr) {
     4bc:	b940      	cbnz	r0, 4d0 <clocks_start+0x1c>
		LOG_ERR("Unable to get the Clock manager");
     4be:	4813      	ldr	r0, [pc, #76]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4c0:	2145      	movs	r1, #69	; 0x45
     4c2:	f007 f87c 	bl	75be <z_log_minimal_printk>
		return -ENXIO;
     4c6:	f06f 0405 	mvn.w	r4, #5
		}
	} while (err);

	LOG_DBG("HF clock started");
	return 0;
}
     4ca:	4620      	mov	r0, r4
     4cc:	b004      	add	sp, #16
     4ce:	bd10      	pop	{r4, pc}
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
     4d0:	2300      	movs	r3, #0
     4d2:	9301      	str	r3, [sp, #4]
     4d4:	9303      	str	r3, [sp, #12]
	err = onoff_request(clk_mgr, &clk_cli);
     4d6:	4669      	mov	r1, sp
     4d8:	2301      	movs	r3, #1
     4da:	9302      	str	r3, [sp, #8]
     4dc:	f000 fb26 	bl	b2c <onoff_request>
	if (err < 0) {
     4e0:	1e04      	subs	r4, r0, #0
     4e2:	da05      	bge.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
		LOG_ERR("Clock request failed: %d", err);
     4e4:	480a      	ldr	r0, [pc, #40]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     4e6:	4622      	mov	r2, r4
     4e8:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Clock could not be started: %d", res);
     4ea:	f007 f868 	bl	75be <z_log_minimal_printk>
			return res;
     4ee:	e7ec      	b.n	4ca <clocks_start+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     4f0:	9b02      	ldr	r3, [sp, #8]
	if (sys_notify_get_method(notify) == SYS_NOTIFY_METHOD_COMPLETED) {
     4f2:	079b      	lsls	r3, r3, #30
     4f4:	d1fc      	bne.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
		*result = notify->result;
     4f6:	9c03      	ldr	r4, [sp, #12]
		if (!err && res) {
     4f8:	b11c      	cbz	r4, 502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
			LOG_ERR("Clock could not be started: %d", res);
     4fa:	4806      	ldr	r0, [pc, #24]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     4fc:	4622      	mov	r2, r4
     4fe:	2145      	movs	r1, #69	; 0x45
     500:	e7f3      	b.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
	LOG_DBG("HF clock started");
     502:	4805      	ldr	r0, [pc, #20]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     504:	2144      	movs	r1, #68	; 0x44
     506:	f007 f85a 	bl	75be <z_log_minimal_printk>
	return 0;
     50a:	e7de      	b.n	4ca <clocks_start+0x16>
     50c:	00008284 	.word	0x00008284
     510:	000082a9 	.word	0x000082a9
     514:	000082c7 	.word	0x000082c7
     518:	000082eb 	.word	0x000082eb

0000051c <esb_initialize>:

int esb_initialize(void)
{
     51c:	b530      	push	{r4, r5, lr}
	int err;
	/* These are arbitrary default addresses. In end user products
	 * different addresses should be used for each set of devices.
	 */
	uint8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     51e:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
{
     522:	b08b      	sub	sp, #44	; 0x2c
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     524:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
     528:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     52c:	4a12      	ldr	r2, [pc, #72]	; (578 <esb_initialize+0x5c>)

	struct esb_config config = ESB_DEFAULT_CONFIG;
     52e:	4d13      	ldr	r5, [pc, #76]	; (57c <esb_initialize+0x60>)
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     530:	6810      	ldr	r0, [r2, #0]
     532:	6851      	ldr	r1, [r2, #4]
     534:	ab03      	add	r3, sp, #12
     536:	c303      	stmia	r3!, {r0, r1}
	struct esb_config config = ESB_DEFAULT_CONFIG;
     538:	461c      	mov	r4, r3
     53a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     53c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     53e:	682b      	ldr	r3, [r5, #0]
     540:	6023      	str	r3, [r4, #0]

	config.protocol = ESB_PROTOCOL_ESB_DPL;
	config.bitrate = ESB_BITRATE_2MBPS;
	config.mode = ESB_MODE_PRX;
	config.event_handler = event_handler;
     542:	4a0f      	ldr	r2, [pc, #60]	; (580 <esb_initialize+0x64>)
     544:	9206      	str	r2, [sp, #24]
	config.mode = ESB_MODE_PRX;
     546:	2301      	movs	r3, #1
	config.selective_auto_ack = true;
	config.crc = ESB_CRC_8BIT; // let's reduce it to 8 bits instead of 16 to increase throughput

	err = esb_init(&config);
     548:	a805      	add	r0, sp, #20
	config.mode = ESB_MODE_PRX;
     54a:	f88d 3015 	strb.w	r3, [sp, #21]
	config.selective_auto_ack = true;
     54e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	config.crc = ESB_CRC_8BIT; // let's reduce it to 8 bits instead of 16 to increase throughput
     552:	f88d 301d 	strb.w	r3, [sp, #29]
	err = esb_init(&config);
     556:	f003 fc71 	bl	3e3c <esb_init>
	if (err) {
     55a:	b958      	cbnz	r0, 574 <esb_initialize+0x58>
		return err;
	}

	err = esb_set_base_address_0(base_addr_0);
     55c:	a801      	add	r0, sp, #4
     55e:	f003 fecd 	bl	42fc <esb_set_base_address_0>
	if (err) {
     562:	b938      	cbnz	r0, 574 <esb_initialize+0x58>
		return err;
	}

	err = esb_set_base_address_1(base_addr_1);
     564:	a802      	add	r0, sp, #8
     566:	f003 fee5 	bl	4334 <esb_set_base_address_1>
	if (err) {
     56a:	b918      	cbnz	r0, 574 <esb_initialize+0x58>
		return err;
	}

	err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
     56c:	2108      	movs	r1, #8
     56e:	a803      	add	r0, sp, #12
     570:	f003 fefc 	bl	436c <esb_set_prefixes>
	if (err) {
		return err;
	}

	return 0;
}
     574:	b00b      	add	sp, #44	; 0x2c
     576:	bd30      	pop	{r4, r5, pc}
     578:	00008301 	.word	0x00008301
     57c:	00007fa0 	.word	0x00007fa0
     580:	000003dd 	.word	0x000003dd

00000584 <main>:
void message_to_count(uint8_t data[CONFIG_ESB_MAX_PAYLOAD_LENGTH]){

}

void main(void)
{
     584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;

	LOG_INF("Enhanced ShockBurst prx sample");
     588:	484e      	ldr	r0, [pc, #312]	; (6c4 <main+0x140>)
{
     58a:	b085      	sub	sp, #20
	LOG_INF("Enhanced ShockBurst prx sample");
     58c:	2149      	movs	r1, #73	; 0x49
     58e:	f007 f816 	bl	75be <z_log_minimal_printk>

	err = clocks_start();
     592:	f7ff ff8f 	bl	4b4 <clocks_start>
	if (err) {
     596:	4604      	mov	r4, r0
     598:	2800      	cmp	r0, #0
     59a:	f040 808f 	bne.w	6bc <main+0x138>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     59e:	484a      	ldr	r0, [pc, #296]	; (6c8 <main+0x144>)
     5a0:	f007 fb2d 	bl	7bfe <z_device_is_ready>
	if (!device_is_ready(leds[0].port)) {
     5a4:	b930      	cbnz	r0, 5b4 <main+0x30>
		LOG_ERR("LEDs port not ready");
     5a6:	4849      	ldr	r0, [pc, #292]	; (6cc <main+0x148>)
     5a8:	2145      	movs	r1, #69	; 0x45
		return;
	}

	/* return to idle thread */
	return;
}
     5aa:	b005      	add	sp, #20
     5ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_ERR("LEDs port not ready");
     5b0:	f007 b805 	b.w	75be <z_log_minimal_printk>
     5b4:	4e46      	ldr	r6, [pc, #280]	; (6d0 <main+0x14c>)
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     5b6:	4d47      	ldr	r5, [pc, #284]	; (6d4 <main+0x150>)
     5b8:	f8df 911c 	ldr.w	r9, [pc, #284]	; 6d8 <main+0x154>
				  spec->dt_flags | extra_flags);
     5bc:	f8b6 8006 	ldrh.w	r8, [r6, #6]
	return gpio_pin_configure(spec->port,
     5c0:	6837      	ldr	r7, [r6, #0]
     5c2:	f896 a004 	ldrb.w	sl, [r6, #4]
     5c6:	f448 3b00 	orr.w	fp, r8, #131072	; 0x20000
	const struct gpio_driver_api *api =
     5ca:	68bb      	ldr	r3, [r7, #8]
     5cc:	9302      	str	r3, [sp, #8]
	const struct gpio_driver_config *const cfg =
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	9303      	str	r3, [sp, #12]
	struct gpio_driver_data *data =
     5d2:	693b      	ldr	r3, [r7, #16]
     5d4:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     5d6:	f008 0330 	and.w	r3, r8, #48	; 0x30
     5da:	2b30      	cmp	r3, #48	; 0x30
     5dc:	d10a      	bne.n	5f4 <main+0x70>
     5de:	4629      	mov	r1, r5
     5e0:	4648      	mov	r0, r9
     5e2:	f44f 722e 	mov.w	r2, #696	; 0x2b8
     5e6:	f006 ffdc 	bl	75a2 <assert_print>
     5ea:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     5ee:	4628      	mov	r0, r5
     5f0:	f006 ffd0 	bl	7594 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     5f4:	f008 0306 	and.w	r3, r8, #6
     5f8:	2b04      	cmp	r3, #4
     5fa:	d10a      	bne.n	612 <main+0x8e>
     5fc:	4629      	mov	r1, r5
     5fe:	4648      	mov	r0, r9
     600:	f44f 7230 	mov.w	r2, #704	; 0x2c0
     604:	f006 ffcd 	bl	75a2 <assert_print>
     608:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     60c:	4628      	mov	r0, r5
     60e:	f006 ffc1 	bl	7594 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     612:	9a03      	ldr	r2, [sp, #12]
     614:	2301      	movs	r3, #1
     616:	6812      	ldr	r2, [r2, #0]
     618:	fa03 f30a 	lsl.w	r3, r3, sl
     61c:	4213      	tst	r3, r2
     61e:	d10c      	bne.n	63a <main+0xb6>
     620:	f44f 7235 	mov.w	r2, #724	; 0x2d4
     624:	4629      	mov	r1, r5
     626:	4648      	mov	r0, r9
     628:	9303      	str	r3, [sp, #12]
     62a:	f006 ffba 	bl	75a2 <assert_print>
     62e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     632:	4628      	mov	r0, r5
     634:	f006 ffae 	bl	7594 <assert_post_action>
     638:	9b03      	ldr	r3, [sp, #12]
		data->invert |= (gpio_port_pins_t)BIT(pin);
     63a:	9a01      	ldr	r2, [sp, #4]
     63c:	6812      	ldr	r2, [r2, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     63e:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
     642:	bf14      	ite	ne
     644:	4313      	orrne	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     646:	ea22 0303 	biceq.w	r3, r2, r3
     64a:	9a01      	ldr	r2, [sp, #4]
     64c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
     64e:	9b02      	ldr	r3, [sp, #8]
     650:	465a      	mov	r2, fp
     652:	681b      	ldr	r3, [r3, #0]
     654:	4651      	mov	r1, sl
     656:	4638      	mov	r0, r7
     658:	4798      	blx	r3
		if (err) {
     65a:	4603      	mov	r3, r0
     65c:	b138      	cbz	r0, 66e <main+0xea>
			LOG_ERR("Unable to configure LED%u, err %d.", i, err);
     65e:	481f      	ldr	r0, [pc, #124]	; (6dc <main+0x158>)
     660:	4622      	mov	r2, r4
     662:	2145      	movs	r1, #69	; 0x45
}
     664:	b005      	add	sp, #20
     666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Unable to configure LED%u, err %d.", i, err);
     66a:	f006 bfa8 	b.w	75be <z_log_minimal_printk>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
     66e:	3401      	adds	r4, #1
     670:	2c04      	cmp	r4, #4
     672:	f106 0608 	add.w	r6, r6, #8
     676:	d1a1      	bne.n	5bc <main+0x38>
	err = esb_initialize();
     678:	f7ff ff50 	bl	51c <esb_initialize>
	if (err) {
     67c:	4602      	mov	r2, r0
     67e:	b130      	cbz	r0, 68e <main+0x10a>
		LOG_ERR("ESB initialization failed, err %d", err);
     680:	4817      	ldr	r0, [pc, #92]	; (6e0 <main+0x15c>)
     682:	2145      	movs	r1, #69	; 0x45
}
     684:	b005      	add	sp, #20
     686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LOG_ERR("RX setup failed, err %d", err);
     68a:	f006 bf98 	b.w	75be <z_log_minimal_printk>
	LOG_INF("Initialization complete");
     68e:	4815      	ldr	r0, [pc, #84]	; (6e4 <main+0x160>)
     690:	2149      	movs	r1, #73	; 0x49
     692:	f006 ff94 	bl	75be <z_log_minimal_printk>
	err = esb_write_payload(&tx_payload);
     696:	4814      	ldr	r0, [pc, #80]	; (6e8 <main+0x164>)
     698:	f003 fd0c 	bl	40b4 <esb_write_payload>
	if (err) {
     69c:	4602      	mov	r2, r0
     69e:	b110      	cbz	r0, 6a6 <main+0x122>
		LOG_ERR("Write payload, err %d", err);
     6a0:	4812      	ldr	r0, [pc, #72]	; (6ec <main+0x168>)
     6a2:	2145      	movs	r1, #69	; 0x45
     6a4:	e7ee      	b.n	684 <main+0x100>
	LOG_INF("Setting up for packet receiption");
     6a6:	4812      	ldr	r0, [pc, #72]	; (6f0 <main+0x16c>)
     6a8:	2149      	movs	r1, #73	; 0x49
     6aa:	f006 ff88 	bl	75be <z_log_minimal_printk>
	err = esb_start_rx();
     6ae:	f003 fddf 	bl	4270 <esb_start_rx>
	if (err) {
     6b2:	4602      	mov	r2, r0
     6b4:	b110      	cbz	r0, 6bc <main+0x138>
		LOG_ERR("RX setup failed, err %d", err);
     6b6:	480f      	ldr	r0, [pc, #60]	; (6f4 <main+0x170>)
     6b8:	2145      	movs	r1, #69	; 0x45
     6ba:	e7e3      	b.n	684 <main+0x100>
}
     6bc:	b005      	add	sp, #20
     6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6c2:	bf00      	nop
     6c4:	0000830a 	.word	0x0000830a
     6c8:	00007d5c 	.word	0x00007d5c
     6cc:	0000832e 	.word	0x0000832e
     6d0:	00007fc8 	.word	0x00007fc8
     6d4:	00008347 	.word	0x00008347
     6d8:	00008378 	.word	0x00008378
     6dc:	00008390 	.word	0x00008390
     6e0:	000083b8 	.word	0x000083b8
     6e4:	000083df 	.word	0x000083df
     6e8:	20000154 	.word	0x20000154
     6ec:	000083fc 	.word	0x000083fc
     6f0:	00008417 	.word	0x00008417
     6f4:	0000843d 	.word	0x0000843d

000006f8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     6f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     6fa:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     6fc:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
     6fe:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     702:	2c03      	cmp	r4, #3
{
     704:	4605      	mov	r5, r0
	switch (method) {
     706:	d002      	beq.n	70e <sys_notify_finalize+0x16>
     708:	b12c      	cbz	r4, 716 <sys_notify_finalize+0x1e>
     70a:	2000      	movs	r0, #0
     70c:	e000      	b.n	710 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     70e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     710:	2300      	movs	r3, #0
     712:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     714:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     716:	4905      	ldr	r1, [pc, #20]	; (72c <sys_notify_finalize+0x34>)
     718:	4805      	ldr	r0, [pc, #20]	; (730 <sys_notify_finalize+0x38>)
     71a:	2245      	movs	r2, #69	; 0x45
     71c:	f006 ff41 	bl	75a2 <assert_print>
     720:	4802      	ldr	r0, [pc, #8]	; (72c <sys_notify_finalize+0x34>)
     722:	2145      	movs	r1, #69	; 0x45
     724:	f006 ff36 	bl	7594 <assert_post_action>
     728:	e7ef      	b.n	70a <sys_notify_finalize+0x12>
     72a:	bf00      	nop
     72c:	00008462 	.word	0x00008462
     730:	00008378 	.word	0x00008378

00000734 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     734:	680b      	ldr	r3, [r1, #0]
     736:	3301      	adds	r3, #1
     738:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     73a:	4b01      	ldr	r3, [pc, #4]	; (740 <char_out+0xc>)
     73c:	681b      	ldr	r3, [r3, #0]
     73e:	4718      	bx	r3
     740:	20000000 	.word	0x20000000

00000744 <__printk_hook_install>:
	_char_out = fn;
     744:	4b01      	ldr	r3, [pc, #4]	; (74c <__printk_hook_install+0x8>)
     746:	6018      	str	r0, [r3, #0]
}
     748:	4770      	bx	lr
     74a:	bf00      	nop
     74c:	20000000 	.word	0x20000000

00000750 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     750:	b507      	push	{r0, r1, r2, lr}
     752:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     754:	2100      	movs	r1, #0
{
     756:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     758:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     75a:	4803      	ldr	r0, [pc, #12]	; (768 <vprintk+0x18>)
     75c:	a901      	add	r1, sp, #4
     75e:	f000 fa69 	bl	c34 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     762:	b003      	add	sp, #12
     764:	f85d fb04 	ldr.w	pc, [sp], #4
     768:	00000735 	.word	0x00000735

0000076c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     770:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     774:	f01a 0f08 	tst.w	sl, #8
{
     778:	4604      	mov	r4, r0
     77a:	4693      	mov	fp, r2
	if (processing) {
     77c:	d01c      	beq.n	7b8 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
     77e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     780:	bf0c      	ite	eq
     782:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     786:	f04a 0a20 	orrne.w	sl, sl, #32
     78a:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     78e:	f104 0014 	add.w	r0, r4, #20
     792:	f005 f815 	bl	57c0 <z_spin_unlock_valid>
     796:	b940      	cbnz	r0, 7aa <process_event+0x3e>
     798:	4992      	ldr	r1, [pc, #584]	; (9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>)
     79a:	4893      	ldr	r0, [pc, #588]	; (9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>)
     79c:	22b9      	movs	r2, #185	; 0xb9
     79e:	f006 ff00 	bl	75a2 <assert_print>
     7a2:	4890      	ldr	r0, [pc, #576]	; (9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>)
     7a4:	21b9      	movs	r1, #185	; 0xb9
     7a6:	f006 fef5 	bl	7594 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     7aa:	f38b 8811 	msr	BASEPRI, fp
     7ae:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     7b2:	b003      	add	sp, #12
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     7b8:	4f8c      	ldr	r7, [pc, #560]	; (9ec <CONFIG_ISR_STACK_SIZE+0x1ec>)
     7ba:	f8df 822c 	ldr.w	r8, [pc, #556]	; 9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7be:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
     7c2:	2902      	cmp	r1, #2
     7c4:	d106      	bne.n	7d4 <process_event+0x68>
			evt = process_recheck(mgr);
     7c6:	4620      	mov	r0, r4
     7c8:	f006 fe2a 	bl	7420 <process_recheck>
		if (evt == EVT_NOP) {
     7cc:	2800      	cmp	r0, #0
     7ce:	d0de      	beq.n	78e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     7d0:	2801      	cmp	r0, #1
     7d2:	d163      	bne.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
			res = mgr->last_res;
     7d4:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7d8:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     7da:	f1b9 0f00 	cmp.w	r9, #0
     7de:	da19      	bge.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     7e0:	2600      	movs	r6, #0
		*clients = mgr->clients;
     7e2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7e4:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     7e8:	e9c4 6600 	strd	r6, r6, [r4]
     7ec:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     7f0:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     7f2:	8ba3      	ldrh	r3, [r4, #28]
     7f4:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     7f8:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     7fa:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
     7fc:	d003      	beq.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
		if (do_monitors
     7fe:	68a2      	ldr	r2, [r4, #8]
     800:	2a00      	cmp	r2, #0
     802:	f040 80f5 	bne.w	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		    || !sys_slist_is_empty(&clients)
     806:	b915      	cbnz	r5, 80e <CONFIG_ISR_STACK_SIZE+0xe>
		    || (transit != NULL)) {
     808:	2e00      	cmp	r6, #0
     80a:	f000 812f 	beq.w	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     80e:	f04f 0a00 	mov.w	sl, #0
     812:	e0ef      	b.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     814:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     818:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     81a:	2901      	cmp	r1, #1
     81c:	d820      	bhi.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
	list->head = NULL;
     81e:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     820:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     824:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     826:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     828:	b29b      	uxth	r3, r3
	list->tail = NULL;
     82a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     82e:	d10a      	bne.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     830:	b13d      	cbz	r5, 842 <CONFIG_ISR_STACK_SIZE+0x42>
     832:	8be2      	ldrh	r2, [r4, #30]
     834:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     836:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
     838:	3201      	adds	r2, #1
     83a:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     83c:	2900      	cmp	r1, #0
     83e:	d1fa      	bne.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     840:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     842:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     846:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     848:	4620      	mov	r0, r4
     84a:	f006 fde9 	bl	7420 <process_recheck>
     84e:	4606      	mov	r6, r0
     850:	2800      	cmp	r0, #0
     852:	d0ce      	beq.n	7f2 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     854:	8ba3      	ldrh	r3, [r4, #28]
     856:	f043 0320 	orr.w	r3, r3, #32
     85a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     85c:	2600      	movs	r6, #0
     85e:	e7c8      	b.n	7f2 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
     860:	2a04      	cmp	r2, #4
     862:	d10d      	bne.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     864:	f023 0307 	bic.w	r3, r3, #7
     868:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     86a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     86c:	4620      	mov	r0, r4
     86e:	f006 fdd7 	bl	7420 <process_recheck>
     872:	4605      	mov	r5, r0
     874:	b180      	cbz	r0, 898 <CONFIG_ISR_STACK_SIZE+0x98>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     876:	f042 0220 	orr.w	r2, r2, #32
     87a:	83a2      	strh	r2, [r4, #28]
     87c:	2500      	movs	r5, #0
     87e:	e7ed      	b.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
		__ASSERT_NO_MSG(false);
     880:	f240 121b 	movw	r2, #283	; 0x11b
     884:	4639      	mov	r1, r7
     886:	4640      	mov	r0, r8
     888:	f006 fe8b 	bl	75a2 <assert_print>
     88c:	f240 111b 	movw	r1, #283	; 0x11b
     890:	4638      	mov	r0, r7
     892:	f006 fe7f 	bl	7594 <assert_post_action>
     896:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     898:	462e      	mov	r6, r5
     89a:	e7aa      	b.n	7f2 <process_event+0x86>
		} else if (evt == EVT_START) {
     89c:	2803      	cmp	r0, #3
     89e:	d131      	bne.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     8a0:	f1ba 0f00 	cmp.w	sl, #0
     8a4:	d00a      	beq.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
     8a6:	4639      	mov	r1, r7
     8a8:	4640      	mov	r0, r8
     8aa:	f44f 72ab 	mov.w	r2, #342	; 0x156
     8ae:	f006 fe78 	bl	75a2 <assert_print>
     8b2:	f44f 71ab 	mov.w	r1, #342	; 0x156
     8b6:	4638      	mov	r0, r7
     8b8:	f006 fe6c 	bl	7594 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     8bc:	6823      	ldr	r3, [r4, #0]
     8be:	b953      	cbnz	r3, 8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
     8c0:	4639      	mov	r1, r7
     8c2:	4640      	mov	r0, r8
     8c4:	f240 1257 	movw	r2, #343	; 0x157
     8c8:	f006 fe6b 	bl	75a2 <assert_print>
     8cc:	f240 1157 	movw	r1, #343	; 0x157
     8d0:	4638      	mov	r0, r7
     8d2:	f006 fe5f 	bl	7594 <assert_post_action>
			transit = mgr->transitions->start;
     8d6:	6923      	ldr	r3, [r4, #16]
     8d8:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     8da:	b956      	cbnz	r6, 8f2 <CONFIG_ISR_STACK_SIZE+0xf2>
     8dc:	4639      	mov	r1, r7
     8de:	4640      	mov	r0, r8
     8e0:	f44f 72ad 	mov.w	r2, #346	; 0x15a
     8e4:	f006 fe5d 	bl	75a2 <assert_print>
     8e8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     8ec:	4638      	mov	r0, r7
     8ee:	f006 fe51 	bl	7594 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8f2:	8ba3      	ldrh	r3, [r4, #28]
     8f4:	f023 0307 	bic.w	r3, r3, #7
     8f8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     8fc:	83a3      	strh	r3, [r4, #28]
}
     8fe:	2500      	movs	r5, #0
		res = 0;
     900:	46a9      	mov	r9, r5
}
     902:	e776      	b.n	7f2 <process_event+0x86>
		} else if (evt == EVT_STOP) {
     904:	2804      	cmp	r0, #4
     906:	d12e      	bne.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     908:	f1ba 0f02 	cmp.w	sl, #2
     90c:	d00a      	beq.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
     90e:	4639      	mov	r1, r7
     910:	4640      	mov	r0, r8
     912:	f240 125d 	movw	r2, #349	; 0x15d
     916:	f006 fe44 	bl	75a2 <assert_print>
     91a:	f240 115d 	movw	r1, #349	; 0x15d
     91e:	4638      	mov	r0, r7
     920:	f006 fe38 	bl	7594 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     924:	8be3      	ldrh	r3, [r4, #30]
     926:	b153      	cbz	r3, 93e <CONFIG_ISR_STACK_SIZE+0x13e>
     928:	4639      	mov	r1, r7
     92a:	4640      	mov	r0, r8
     92c:	f44f 72af 	mov.w	r2, #350	; 0x15e
     930:	f006 fe37 	bl	75a2 <assert_print>
     934:	f44f 71af 	mov.w	r1, #350	; 0x15e
     938:	4638      	mov	r0, r7
     93a:	f006 fe2b 	bl	7594 <assert_post_action>
			transit = mgr->transitions->stop;
     93e:	6923      	ldr	r3, [r4, #16]
     940:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     942:	b956      	cbnz	r6, 95a <CONFIG_ISR_STACK_SIZE+0x15a>
     944:	4639      	mov	r1, r7
     946:	4640      	mov	r0, r8
     948:	f240 1261 	movw	r2, #353	; 0x161
     94c:	f006 fe29 	bl	75a2 <assert_print>
     950:	f240 1161 	movw	r1, #353	; 0x161
     954:	4638      	mov	r0, r7
     956:	f006 fe1d 	bl	7594 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     95a:	8ba3      	ldrh	r3, [r4, #28]
     95c:	f023 0307 	bic.w	r3, r3, #7
     960:	f043 0304 	orr.w	r3, r3, #4
     964:	e7ca      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
		} else if (evt == EVT_RESET) {
     966:	2805      	cmp	r0, #5
     968:	d12e      	bne.n	9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     96a:	f1ba 0f01 	cmp.w	sl, #1
     96e:	d00a      	beq.n	986 <CONFIG_ISR_STACK_SIZE+0x186>
     970:	4639      	mov	r1, r7
     972:	4640      	mov	r0, r8
     974:	f44f 72b2 	mov.w	r2, #356	; 0x164
     978:	f006 fe13 	bl	75a2 <assert_print>
     97c:	f44f 71b2 	mov.w	r1, #356	; 0x164
     980:	4638      	mov	r0, r7
     982:	f006 fe07 	bl	7594 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     986:	6823      	ldr	r3, [r4, #0]
     988:	b953      	cbnz	r3, 9a0 <CONFIG_ISR_STACK_SIZE+0x1a0>
     98a:	4639      	mov	r1, r7
     98c:	4640      	mov	r0, r8
     98e:	f240 1265 	movw	r2, #357	; 0x165
     992:	f006 fe06 	bl	75a2 <assert_print>
     996:	f240 1165 	movw	r1, #357	; 0x165
     99a:	4638      	mov	r0, r7
     99c:	f006 fdfa 	bl	7594 <assert_post_action>
			transit = mgr->transitions->reset;
     9a0:	6923      	ldr	r3, [r4, #16]
     9a2:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     9a4:	b956      	cbnz	r6, 9bc <CONFIG_ISR_STACK_SIZE+0x1bc>
     9a6:	4639      	mov	r1, r7
     9a8:	4640      	mov	r0, r8
     9aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
     9ae:	f006 fdf8 	bl	75a2 <assert_print>
     9b2:	f44f 71b4 	mov.w	r1, #360	; 0x168
     9b6:	4638      	mov	r0, r7
     9b8:	f006 fdec 	bl	7594 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9bc:	8ba3      	ldrh	r3, [r4, #28]
     9be:	f023 0307 	bic.w	r3, r3, #7
     9c2:	f043 0305 	orr.w	r3, r3, #5
     9c6:	e799      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
			__ASSERT_NO_MSG(false);
     9c8:	f240 126b 	movw	r2, #363	; 0x16b
     9cc:	4639      	mov	r1, r7
     9ce:	4640      	mov	r0, r8
     9d0:	f006 fde7 	bl	75a2 <assert_print>
     9d4:	2500      	movs	r5, #0
     9d6:	f240 116b 	movw	r1, #363	; 0x16b
     9da:	4638      	mov	r0, r7
     9dc:	f006 fdda 	bl	7594 <assert_post_action>
		onoff_transition_fn transit = NULL;
     9e0:	462e      	mov	r6, r5
     9e2:	e78d      	b.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
     9e4:	000084a7 	.word	0x000084a7
     9e8:	00008378 	.word	0x00008378
     9ec:	00008485 	.word	0x00008485
				   && !sys_slist_is_empty(&mgr->monitors);
     9f0:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     9f4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     9f8:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     9fa:	f104 0314 	add.w	r3, r4, #20
     9fe:	4618      	mov	r0, r3
     a00:	9301      	str	r3, [sp, #4]
     a02:	f004 fedd 	bl	57c0 <z_spin_unlock_valid>
     a06:	b940      	cbnz	r0, a1a <CONFIG_ISR_STACK_SIZE+0x21a>
     a08:	4931      	ldr	r1, [pc, #196]	; (ad0 <CONFIG_ISR_STACK_SIZE+0x2d0>)
     a0a:	4640      	mov	r0, r8
     a0c:	22b9      	movs	r2, #185	; 0xb9
     a0e:	f006 fdc8 	bl	75a2 <assert_print>
     a12:	482f      	ldr	r0, [pc, #188]	; (ad0 <CONFIG_ISR_STACK_SIZE+0x2d0>)
     a14:	21b9      	movs	r1, #185	; 0xb9
     a16:	f006 fdbd 	bl	7594 <assert_post_action>
     a1a:	f38b 8811 	msr	BASEPRI, fp
     a1e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     a22:	f1ba 0f00 	cmp.w	sl, #0
     a26:	d130      	bne.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
	while (!sys_slist_is_empty(list)) {
     a28:	2d00      	cmp	r5, #0
     a2a:	d140      	bne.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
			if (transit != NULL) {
     a2c:	b116      	cbz	r6, a34 <CONFIG_ISR_STACK_SIZE+0x234>
				transit(mgr, transition_complete);
     a2e:	4929      	ldr	r1, [pc, #164]	; (ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>)
     a30:	4620      	mov	r0, r4
     a32:	47b0      	blx	r6
	__asm__ volatile(
     a34:	f04f 0320 	mov.w	r3, #32
     a38:	f3ef 8b11 	mrs	fp, BASEPRI
     a3c:	f383 8812 	msr	BASEPRI_MAX, r3
     a40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a44:	9801      	ldr	r0, [sp, #4]
     a46:	f004 fead 	bl	57a4 <z_spin_lock_valid>
     a4a:	b940      	cbnz	r0, a5e <CONFIG_ISR_STACK_SIZE+0x25e>
     a4c:	4920      	ldr	r1, [pc, #128]	; (ad0 <CONFIG_ISR_STACK_SIZE+0x2d0>)
     a4e:	4640      	mov	r0, r8
     a50:	228e      	movs	r2, #142	; 0x8e
     a52:	f006 fda6 	bl	75a2 <assert_print>
     a56:	481e      	ldr	r0, [pc, #120]	; (ad0 <CONFIG_ISR_STACK_SIZE+0x2d0>)
     a58:	218e      	movs	r1, #142	; 0x8e
     a5a:	f006 fd9b 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
     a5e:	9801      	ldr	r0, [sp, #4]
     a60:	f004 febe 	bl	57e0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     a64:	8ba3      	ldrh	r3, [r4, #28]
     a66:	f023 0308 	bic.w	r3, r3, #8
     a6a:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a6c:	8ba3      	ldrh	r3, [r4, #28]
     a6e:	06da      	lsls	r2, r3, #27
     a70:	d525      	bpl.n	abe <CONFIG_ISR_STACK_SIZE+0x2be>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a72:	f023 0310 	bic.w	r3, r3, #16
     a76:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     a78:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     a7a:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
     a7e:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
     a82:	2900      	cmp	r1, #0
     a84:	f47f ae9d 	bne.w	7c2 <process_event+0x56>
out:
     a88:	e681      	b.n	78e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     a8a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a8c:	2900      	cmp	r1, #0
     a8e:	d0cb      	beq.n	a28 <CONFIG_ISR_STACK_SIZE+0x228>
	return node->next;
     a90:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
     a94:	f8d1 b004 	ldr.w	fp, [r1, #4]
     a98:	9a00      	ldr	r2, [sp, #0]
     a9a:	464b      	mov	r3, r9
     a9c:	4620      	mov	r0, r4
     a9e:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     aa0:	f1ba 0f00 	cmp.w	sl, #0
     aa4:	d0c0      	beq.n	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     aa6:	4651      	mov	r1, sl
     aa8:	f8da a000 	ldr.w	sl, [sl]
     aac:	e7f2      	b.n	a94 <CONFIG_ISR_STACK_SIZE+0x294>
     aae:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     ab0:	9a00      	ldr	r2, [sp, #0]
     ab2:	682d      	ldr	r5, [r5, #0]
     ab4:	464b      	mov	r3, r9
     ab6:	4620      	mov	r0, r4
     ab8:	f006 fcce 	bl	7458 <notify_one>
     abc:	e7b4      	b.n	a28 <CONFIG_ISR_STACK_SIZE+0x228>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     abe:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ac2:	bf1e      	ittt	ne
     ac4:	f023 0320 	bicne.w	r3, r3, #32
     ac8:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     aca:	2102      	movne	r1, #2
     acc:	e7d5      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
     ace:	bf00      	nop
     ad0:	000084a7 	.word	0x000084a7
     ad4:	00000ad9 	.word	0x00000ad9

00000ad8 <transition_complete>:
{
     ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ada:	4604      	mov	r4, r0
     adc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     ade:	f100 0614 	add.w	r6, r0, #20
     ae2:	f04f 0320 	mov.w	r3, #32
     ae6:	f3ef 8711 	mrs	r7, BASEPRI
     aea:	f383 8812 	msr	BASEPRI_MAX, r3
     aee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     af2:	4630      	mov	r0, r6
     af4:	f004 fe56 	bl	57a4 <z_spin_lock_valid>
     af8:	b940      	cbnz	r0, b0c <transition_complete+0x34>
     afa:	490a      	ldr	r1, [pc, #40]	; (b24 <transition_complete+0x4c>)
     afc:	480a      	ldr	r0, [pc, #40]	; (b28 <transition_complete+0x50>)
     afe:	228e      	movs	r2, #142	; 0x8e
     b00:	f006 fd4f 	bl	75a2 <assert_print>
     b04:	4807      	ldr	r0, [pc, #28]	; (b24 <transition_complete+0x4c>)
     b06:	218e      	movs	r1, #142	; 0x8e
     b08:	f006 fd44 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
     b0c:	4630      	mov	r0, r6
     b0e:	f004 fe67 	bl	57e0 <z_spin_lock_set_owner>
	mgr->last_res = res;
     b12:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     b14:	463a      	mov	r2, r7
     b16:	4620      	mov	r0, r4
     b18:	2101      	movs	r1, #1
}
     b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     b1e:	f7ff be25 	b.w	76c <process_event>
     b22:	bf00      	nop
     b24:	000084a7 	.word	0x000084a7
     b28:	00008378 	.word	0x00008378

00000b2c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b30:	4604      	mov	r4, r0
     b32:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     b34:	f006 fca6 	bl	7484 <validate_args>

	if (rv < 0) {
     b38:	1e05      	subs	r5, r0, #0
     b3a:	db54      	blt.n	be6 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     b3c:	f104 0914 	add.w	r9, r4, #20
     b40:	f04f 0320 	mov.w	r3, #32
     b44:	f3ef 8a11 	mrs	sl, BASEPRI
     b48:	f383 8812 	msr	BASEPRI_MAX, r3
     b4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     b50:	4648      	mov	r0, r9
     b52:	f004 fe27 	bl	57a4 <z_spin_lock_valid>
     b56:	b940      	cbnz	r0, b6a <onoff_request+0x3e>
     b58:	4933      	ldr	r1, [pc, #204]	; (c28 <onoff_request+0xfc>)
     b5a:	4834      	ldr	r0, [pc, #208]	; (c2c <onoff_request+0x100>)
     b5c:	228e      	movs	r2, #142	; 0x8e
     b5e:	f006 fd20 	bl	75a2 <assert_print>
     b62:	4831      	ldr	r0, [pc, #196]	; (c28 <onoff_request+0xfc>)
     b64:	218e      	movs	r1, #142	; 0x8e
     b66:	f006 fd15 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
     b6a:	4648      	mov	r0, r9
     b6c:	f004 fe38 	bl	57e0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     b70:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b72:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
     b74:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b78:	428b      	cmp	r3, r1
     b7a:	f002 0607 	and.w	r6, r2, #7
     b7e:	d04a      	beq.n	c16 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     b80:	2e02      	cmp	r6, #2
     b82:	d11f      	bne.n	bc4 <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
     b84:	3301      	adds	r3, #1
     b86:	83e3      	strh	r3, [r4, #30]
	rv = state;
     b88:	4635      	mov	r5, r6
		notify = true;
     b8a:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     b8e:	4648      	mov	r0, r9
     b90:	f004 fe16 	bl	57c0 <z_spin_unlock_valid>
     b94:	b940      	cbnz	r0, ba8 <onoff_request+0x7c>
     b96:	4924      	ldr	r1, [pc, #144]	; (c28 <onoff_request+0xfc>)
     b98:	4824      	ldr	r0, [pc, #144]	; (c2c <onoff_request+0x100>)
     b9a:	22b9      	movs	r2, #185	; 0xb9
     b9c:	f006 fd01 	bl	75a2 <assert_print>
     ba0:	4821      	ldr	r0, [pc, #132]	; (c28 <onoff_request+0xfc>)
     ba2:	21b9      	movs	r1, #185	; 0xb9
     ba4:	f006 fcf6 	bl	7594 <assert_post_action>
	__asm__ volatile(
     ba8:	f38a 8811 	msr	BASEPRI, sl
     bac:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     bb0:	f1b8 0f00 	cmp.w	r8, #0
     bb4:	d017      	beq.n	be6 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
     bb6:	2300      	movs	r3, #0
     bb8:	4632      	mov	r2, r6
     bba:	4639      	mov	r1, r7
     bbc:	4620      	mov	r0, r4
     bbe:	f006 fc4b 	bl	7458 <notify_one>
     bc2:	e010      	b.n	be6 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
     bc4:	0793      	lsls	r3, r2, #30
     bc6:	d001      	beq.n	bcc <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
     bc8:	2e06      	cmp	r6, #6
     bca:	d10f      	bne.n	bec <onoff_request+0xc0>
	parent->next = child;
     bcc:	2300      	movs	r3, #0
     bce:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
     bd0:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     bd2:	b9eb      	cbnz	r3, c10 <onoff_request+0xe4>
	list->head = node;
     bd4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     bd8:	4635      	mov	r5, r6
     bda:	b9f6      	cbnz	r6, c1a <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
     bdc:	4652      	mov	r2, sl
     bde:	2102      	movs	r1, #2
     be0:	4620      	mov	r0, r4
     be2:	f7ff fdc3 	bl	76c <process_event>
		}
	}

	return rv;
}
     be6:	4628      	mov	r0, r5
     be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
     bec:	2e05      	cmp	r6, #5
     bee:	d017      	beq.n	c20 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     bf0:	2e01      	cmp	r6, #1
     bf2:	d00a      	beq.n	c0a <onoff_request+0xde>
     bf4:	490e      	ldr	r1, [pc, #56]	; (c30 <onoff_request+0x104>)
     bf6:	480d      	ldr	r0, [pc, #52]	; (c2c <onoff_request+0x100>)
     bf8:	f240 12c9 	movw	r2, #457	; 0x1c9
     bfc:	f006 fcd1 	bl	75a2 <assert_print>
     c00:	480b      	ldr	r0, [pc, #44]	; (c30 <onoff_request+0x104>)
     c02:	f240 11c9 	movw	r1, #457	; 0x1c9
     c06:	f006 fcc5 	bl	7594 <assert_post_action>
		rv = -EIO;
     c0a:	f06f 0504 	mvn.w	r5, #4
     c0e:	e004      	b.n	c1a <onoff_request+0xee>
	parent->next = child;
     c10:	601f      	str	r7, [r3, #0]
	list->tail = node;
     c12:	6067      	str	r7, [r4, #4]
}
     c14:	e7e0      	b.n	bd8 <onoff_request+0xac>
		rv = -EAGAIN;
     c16:	f06f 050a 	mvn.w	r5, #10
     c1a:	f04f 0800 	mov.w	r8, #0
     c1e:	e7b6      	b.n	b8e <onoff_request+0x62>
		rv = -ENOTSUP;
     c20:	f06f 0585 	mvn.w	r5, #133	; 0x85
     c24:	e7f9      	b.n	c1a <onoff_request+0xee>
     c26:	bf00      	nop
     c28:	000084a7 	.word	0x000084a7
     c2c:	00008378 	.word	0x00008378
     c30:	00008485 	.word	0x00008485

00000c34 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b091      	sub	sp, #68	; 0x44
     c3a:	468b      	mov	fp, r1
     c3c:	9002      	str	r0, [sp, #8]
     c3e:	4692      	mov	sl, r2
     c40:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     c42:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     c44:	f89a 0000 	ldrb.w	r0, [sl]
     c48:	b908      	cbnz	r0, c4e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     c4a:	4628      	mov	r0, r5
     c4c:	e35f      	b.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
		if (*fp != '%') {
     c4e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     c50:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     c54:	d007      	beq.n	c66 <cbvprintf+0x32>
			OUTC('%');
     c56:	9b02      	ldr	r3, [sp, #8]
     c58:	4659      	mov	r1, fp
     c5a:	4798      	blx	r3
     c5c:	2800      	cmp	r0, #0
     c5e:	f2c0 8356 	blt.w	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
     c62:	3501      	adds	r5, #1
			break;
     c64:	e212      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		} state = {
     c66:	2218      	movs	r2, #24
     c68:	2100      	movs	r1, #0
     c6a:	a80a      	add	r0, sp, #40	; 0x28
     c6c:	f006 fcec 	bl	7648 <memset>
	if (*sp == '%') {
     c70:	f89a 3001 	ldrb.w	r3, [sl, #1]
     c74:	2b25      	cmp	r3, #37	; 0x25
     c76:	d078      	beq.n	d6a <cbvprintf+0x136>
     c78:	2200      	movs	r2, #0
     c7a:	4610      	mov	r0, r2
     c7c:	4696      	mov	lr, r2
     c7e:	4694      	mov	ip, r2
     c80:	4616      	mov	r6, r2
     c82:	4639      	mov	r1, r7
		switch (*sp) {
     c84:	f817 3b01 	ldrb.w	r3, [r7], #1
     c88:	2b2b      	cmp	r3, #43	; 0x2b
     c8a:	f000 809d 	beq.w	dc8 <cbvprintf+0x194>
     c8e:	f200 8094 	bhi.w	dba <cbvprintf+0x186>
     c92:	2b20      	cmp	r3, #32
     c94:	f000 809b 	beq.w	dce <cbvprintf+0x19a>
     c98:	2b23      	cmp	r3, #35	; 0x23
     c9a:	f000 809b 	beq.w	dd4 <cbvprintf+0x1a0>
     c9e:	b12e      	cbz	r6, cac <cbvprintf+0x78>
     ca0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     ca4:	f046 0604 	orr.w	r6, r6, #4
     ca8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     cac:	f1bc 0f00 	cmp.w	ip, #0
     cb0:	d005      	beq.n	cbe <cbvprintf+0x8a>
     cb2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     cb6:	f046 0608 	orr.w	r6, r6, #8
     cba:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     cbe:	f1be 0f00 	cmp.w	lr, #0
     cc2:	d005      	beq.n	cd0 <cbvprintf+0x9c>
     cc4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     cc8:	f046 0610 	orr.w	r6, r6, #16
     ccc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     cd0:	b128      	cbz	r0, cde <cbvprintf+0xaa>
     cd2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     cd6:	f040 0020 	orr.w	r0, r0, #32
     cda:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     cde:	b12a      	cbz	r2, cec <cbvprintf+0xb8>
     ce0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     ce8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     cec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     cf0:	f002 0044 	and.w	r0, r2, #68	; 0x44
     cf4:	2844      	cmp	r0, #68	; 0x44
     cf6:	d103      	bne.n	d00 <cbvprintf+0xcc>
		conv->flag_zero = false;
     cf8:	f36f 1286 	bfc	r2, #6, #1
     cfc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     d00:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     d04:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     d06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     d0a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     d0e:	d17b      	bne.n	e08 <cbvprintf+0x1d4>
		conv->width_star = true;
     d10:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d14:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     d18:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     d1a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     d1e:	781a      	ldrb	r2, [r3, #0]
     d20:	2a2e      	cmp	r2, #46	; 0x2e
     d22:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d26:	bf0c      	ite	eq
     d28:	2101      	moveq	r1, #1
     d2a:	2100      	movne	r1, #0
     d2c:	f361 0241 	bfi	r2, r1, #1, #1
     d30:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     d34:	d174      	bne.n	e20 <cbvprintf+0x1ec>
	if (*sp == '*') {
     d36:	785a      	ldrb	r2, [r3, #1]
     d38:	2a2a      	cmp	r2, #42	; 0x2a
     d3a:	d06a      	beq.n	e12 <cbvprintf+0x1de>
	++sp;
     d3c:	3301      	adds	r3, #1
	size_t val = 0;
     d3e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     d40:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     d42:	4618      	mov	r0, r3
     d44:	f810 2b01 	ldrb.w	r2, [r0], #1
     d48:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     d4c:	2f09      	cmp	r7, #9
     d4e:	f240 808e 	bls.w	e6e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     d52:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     d56:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     d58:	f3c2 0040 	ubfx	r0, r2, #1, #1
     d5c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     d60:	f361 0241 	bfi	r2, r1, #1, #1
     d64:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     d68:	e05a      	b.n	e20 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     d6a:	f10a 0702 	add.w	r7, sl, #2
     d6e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     d72:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d76:	07d9      	lsls	r1, r3, #31
     d78:	f140 8149 	bpl.w	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
			width = va_arg(ap, int);
     d7c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     d80:	f1b9 0f00 	cmp.w	r9, #0
     d84:	da07      	bge.n	d96 <cbvprintf+0x162>
				conv->flag_dash = true;
     d86:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     d8a:	f042 0204 	orr.w	r2, r2, #4
     d8e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     d92:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     d96:	075a      	lsls	r2, r3, #29
     d98:	f140 8142 	bpl.w	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
			int arg = va_arg(ap, int);
     d9c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     da0:	f1b8 0f00 	cmp.w	r8, #0
     da4:	f280 8141 	bge.w	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
				conv->prec_present = false;
     da8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     dac:	f36f 0341 	bfc	r3, #1, #1
     db0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     db4:	f04f 38ff 	mov.w	r8, #4294967295
     db8:	e137      	b.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
		switch (*sp) {
     dba:	2b2d      	cmp	r3, #45	; 0x2d
     dbc:	d00c      	beq.n	dd8 <cbvprintf+0x1a4>
     dbe:	2b30      	cmp	r3, #48	; 0x30
     dc0:	f47f af6d 	bne.w	c9e <cbvprintf+0x6a>
			conv->flag_zero = true;
     dc4:	2201      	movs	r2, #1
	} while (loop);
     dc6:	e75c      	b.n	c82 <cbvprintf+0x4e>
			conv->flag_plus = true;
     dc8:	f04f 0c01 	mov.w	ip, #1
     dcc:	e759      	b.n	c82 <cbvprintf+0x4e>
			conv->flag_space = true;
     dce:	f04f 0e01 	mov.w	lr, #1
     dd2:	e756      	b.n	c82 <cbvprintf+0x4e>
			conv->flag_hash = true;
     dd4:	2001      	movs	r0, #1
     dd6:	e754      	b.n	c82 <cbvprintf+0x4e>
		switch (*sp) {
     dd8:	2601      	movs	r6, #1
     dda:	e752      	b.n	c82 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     ddc:	fb0c 0202 	mla	r2, ip, r2, r0
     de0:	3a30      	subs	r2, #48	; 0x30
     de2:	4633      	mov	r3, r6
     de4:	461e      	mov	r6, r3
     de6:	f816 0b01 	ldrb.w	r0, [r6], #1
     dea:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     dee:	2f09      	cmp	r7, #9
     df0:	d9f4      	bls.n	ddc <cbvprintf+0x1a8>
	if (sp != wp) {
     df2:	4299      	cmp	r1, r3
     df4:	d093      	beq.n	d1e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     df6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     dfa:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     dfc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     dfe:	f362 0141 	bfi	r1, r2, #1, #1
     e02:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     e06:	e78a      	b.n	d1e <cbvprintf+0xea>
     e08:	460b      	mov	r3, r1
	size_t val = 0;
     e0a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     e0c:	f04f 0c0a 	mov.w	ip, #10
     e10:	e7e8      	b.n	de4 <cbvprintf+0x1b0>
		conv->prec_star = true;
     e12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e16:	f042 0204 	orr.w	r2, r2, #4
     e1a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     e1e:	3302      	adds	r3, #2
	switch (*sp) {
     e20:	461f      	mov	r7, r3
     e22:	f817 2b01 	ldrb.w	r2, [r7], #1
     e26:	2a6c      	cmp	r2, #108	; 0x6c
     e28:	d041      	beq.n	eae <cbvprintf+0x27a>
     e2a:	d825      	bhi.n	e78 <cbvprintf+0x244>
     e2c:	2a68      	cmp	r2, #104	; 0x68
     e2e:	d02b      	beq.n	e88 <cbvprintf+0x254>
     e30:	2a6a      	cmp	r2, #106	; 0x6a
     e32:	d046      	beq.n	ec2 <cbvprintf+0x28e>
     e34:	2a4c      	cmp	r2, #76	; 0x4c
     e36:	d04c      	beq.n	ed2 <cbvprintf+0x29e>
     e38:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     e3a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     e3e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     e42:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     e46:	2a78      	cmp	r2, #120	; 0x78
     e48:	f200 80d9 	bhi.w	ffe <cbvprintf+0x3ca>
     e4c:	2a57      	cmp	r2, #87	; 0x57
     e4e:	d84d      	bhi.n	eec <cbvprintf+0x2b8>
     e50:	2a41      	cmp	r2, #65	; 0x41
     e52:	d003      	beq.n	e5c <cbvprintf+0x228>
     e54:	3a45      	subs	r2, #69	; 0x45
     e56:	2a02      	cmp	r2, #2
     e58:	f200 80d1 	bhi.w	ffe <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     e5c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     e60:	2204      	movs	r2, #4
     e62:	f362 0302 	bfi	r3, r2, #0, #3
     e66:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     e6a:	2301      	movs	r3, #1
			break;
     e6c:	e09e      	b.n	fac <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     e6e:	fb06 2101 	mla	r1, r6, r1, r2
     e72:	3930      	subs	r1, #48	; 0x30
     e74:	4603      	mov	r3, r0
     e76:	e764      	b.n	d42 <cbvprintf+0x10e>
	switch (*sp) {
     e78:	2a74      	cmp	r2, #116	; 0x74
     e7a:	d026      	beq.n	eca <cbvprintf+0x296>
     e7c:	2a7a      	cmp	r2, #122	; 0x7a
     e7e:	d1db      	bne.n	e38 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     e80:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e84:	2206      	movs	r2, #6
     e86:	e00d      	b.n	ea4 <cbvprintf+0x270>
		if (*++sp == 'h') {
     e88:	785a      	ldrb	r2, [r3, #1]
     e8a:	2a68      	cmp	r2, #104	; 0x68
     e8c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e90:	d106      	bne.n	ea0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     e92:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     e94:	f361 02c6 	bfi	r2, r1, #3, #4
     e98:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     e9c:	1c9f      	adds	r7, r3, #2
     e9e:	e7cc      	b.n	e3a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     ea0:	4613      	mov	r3, r2
     ea2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     ea4:	f362 03c6 	bfi	r3, r2, #3, #4
     ea8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     eac:	e7c5      	b.n	e3a <cbvprintf+0x206>
		if (*++sp == 'l') {
     eae:	785a      	ldrb	r2, [r3, #1]
     eb0:	2a6c      	cmp	r2, #108	; 0x6c
     eb2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     eb6:	d101      	bne.n	ebc <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     eb8:	2104      	movs	r1, #4
     eba:	e7eb      	b.n	e94 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     ebc:	4613      	mov	r3, r2
     ebe:	2203      	movs	r2, #3
     ec0:	e7f0      	b.n	ea4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     ec2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ec6:	2205      	movs	r2, #5
     ec8:	e7ec      	b.n	ea4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     eca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ece:	2207      	movs	r2, #7
     ed0:	e7e8      	b.n	ea4 <cbvprintf+0x270>
		conv->unsupported = true;
     ed2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     ed6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     eda:	f023 0302 	bic.w	r3, r3, #2
     ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     ee2:	f043 0302 	orr.w	r3, r3, #2
     ee6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     eea:	e7a6      	b.n	e3a <cbvprintf+0x206>
	switch (conv->specifier) {
     eec:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     ef0:	2920      	cmp	r1, #32
     ef2:	f200 8084 	bhi.w	ffe <cbvprintf+0x3ca>
     ef6:	a001      	add	r0, pc, #4	; (adr r0, efc <cbvprintf+0x2c8>)
     ef8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     efc:	00000fc1 	.word	0x00000fc1
     f00:	00000fff 	.word	0x00000fff
     f04:	00000fff 	.word	0x00000fff
     f08:	00000fff 	.word	0x00000fff
     f0c:	00000fff 	.word	0x00000fff
     f10:	00000fff 	.word	0x00000fff
     f14:	00000fff 	.word	0x00000fff
     f18:	00000fff 	.word	0x00000fff
     f1c:	00000fff 	.word	0x00000fff
     f20:	00000e5d 	.word	0x00000e5d
     f24:	00000fff 	.word	0x00000fff
     f28:	00000fc1 	.word	0x00000fc1
     f2c:	00000f81 	.word	0x00000f81
     f30:	00000e5d 	.word	0x00000e5d
     f34:	00000e5d 	.word	0x00000e5d
     f38:	00000e5d 	.word	0x00000e5d
     f3c:	00000fff 	.word	0x00000fff
     f40:	00000f81 	.word	0x00000f81
     f44:	00000fff 	.word	0x00000fff
     f48:	00000fff 	.word	0x00000fff
     f4c:	00000fff 	.word	0x00000fff
     f50:	00000fff 	.word	0x00000fff
     f54:	00000fc9 	.word	0x00000fc9
     f58:	00000fc1 	.word	0x00000fc1
     f5c:	00000fe5 	.word	0x00000fe5
     f60:	00000fff 	.word	0x00000fff
     f64:	00000fff 	.word	0x00000fff
     f68:	00000fe5 	.word	0x00000fe5
     f6c:	00000fff 	.word	0x00000fff
     f70:	00000fc1 	.word	0x00000fc1
     f74:	00000fff 	.word	0x00000fff
     f78:	00000fff 	.word	0x00000fff
     f7c:	00000fc1 	.word	0x00000fc1
		conv->specifier_cat = SPECIFIER_SINT;
     f80:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     f84:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     f86:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     f8a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     f8e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     f90:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     f94:	bf02      	ittt	eq
     f96:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     f9a:	f041 0101 	orreq.w	r1, r1, #1
     f9e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     fa2:	2a63      	cmp	r2, #99	; 0x63
     fa4:	d131      	bne.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
			unsupported = (conv->length_mod != LENGTH_NONE);
     fa6:	3b00      	subs	r3, #0
     fa8:	bf18      	it	ne
     faa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     fac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     fb0:	f3c2 0140 	ubfx	r1, r2, #1, #1
     fb4:	430b      	orrs	r3, r1
     fb6:	f363 0241 	bfi	r2, r3, #1, #1
     fba:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     fbe:	e6d8      	b.n	d72 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     fc0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     fc4:	2002      	movs	r0, #2
     fc6:	e7de      	b.n	f86 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     fc8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     fcc:	f003 0378 	and.w	r3, r3, #120	; 0x78
     fd0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     fd4:	2103      	movs	r1, #3
     fd6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     fda:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     fdc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     fe0:	4143      	adcs	r3, r0
     fe2:	e7e3      	b.n	fac <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     fe4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     fe8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     fea:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     fee:	f361 0202 	bfi	r2, r1, #0, #3
     ff2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     ff6:	bf14      	ite	ne
     ff8:	2301      	movne	r3, #1
     ffa:	2300      	moveq	r3, #0
     ffc:	e7d6      	b.n	fac <cbvprintf+0x378>
		conv->invalid = true;
     ffe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1002:	f043 0301 	orr.w	r3, r3, #1
    1006:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    100a:	2300      	movs	r3, #0
    100c:	e7ce      	b.n	fac <cbvprintf+0x378>
		} else if (conv->width_present) {
    100e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1012:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1014:	bfb4      	ite	lt
    1016:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    101a:	f04f 39ff 	movge.w	r9, #4294967295
    101e:	e6ba      	b.n	d96 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1020:	079b      	lsls	r3, r3, #30
    1022:	f57f aec7 	bpl.w	db4 <cbvprintf+0x180>
			precision = conv->prec_value;
    1026:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    102a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    102e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1030:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1034:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1038:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    103c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    103e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1042:	d138      	bne.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
			switch (length_mod) {
    1044:	1ecb      	subs	r3, r1, #3
    1046:	2b04      	cmp	r3, #4
    1048:	d822      	bhi.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
    104a:	e8df f003 	tbb	[pc, r3]
    104e:	0903      	.short	0x0903
    1050:	2109      	.short	0x2109
    1052:	21          	.byte	0x21
    1053:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1054:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1058:	17da      	asrs	r2, r3, #31
    105a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    105e:	e006      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
					(sint_value_type)va_arg(ap, intmax_t);
    1060:	3407      	adds	r4, #7
    1062:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1066:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    106a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    106e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1072:	f013 0603 	ands.w	r6, r3, #3
    1076:	d056      	beq.n	1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
			OUTS(sp, fp);
    1078:	9802      	ldr	r0, [sp, #8]
    107a:	463b      	mov	r3, r7
    107c:	4652      	mov	r2, sl
    107e:	4659      	mov	r1, fp
    1080:	f006 fa72 	bl	7568 <outs>
    1084:	2800      	cmp	r0, #0
    1086:	f2c0 8142 	blt.w	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    108a:	4405      	add	r5, r0
			continue;
    108c:	46ba      	mov	sl, r7
    108e:	e5d9      	b.n	c44 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1090:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1094:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1096:	ea4f 72e3 	mov.w	r2, r3, asr #31
    109a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    109e:	d105      	bne.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
				value->uint = (unsigned char)value->uint;
    10a0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    10a4:	930a      	str	r3, [sp, #40]	; 0x28
    10a6:	2300      	movs	r3, #0
    10a8:	930b      	str	r3, [sp, #44]	; 0x2c
    10aa:	e7e0      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
			} else if (length_mod == LENGTH_H) {
    10ac:	2902      	cmp	r1, #2
    10ae:	d1de      	bne.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
				value->sint = (short)value->sint;
    10b0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    10b4:	e7d0      	b.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
		} else if (specifier_cat == SPECIFIER_UINT) {
    10b6:	2b02      	cmp	r3, #2
    10b8:	d123      	bne.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
			switch (length_mod) {
    10ba:	1ecb      	subs	r3, r1, #3
    10bc:	2b04      	cmp	r3, #4
    10be:	d813      	bhi.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10c0:	e8df f003 	tbb	[pc, r3]
    10c4:	120a0a03 	.word	0x120a0a03
    10c8:	12          	.byte	0x12
    10c9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    10ca:	6822      	ldr	r2, [r4, #0]
    10cc:	920a      	str	r2, [sp, #40]	; 0x28
    10ce:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    10d0:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    10d2:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    10d4:	4604      	mov	r4, r0
    10d6:	e7ca      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
					(uint_value_type)va_arg(ap,
    10d8:	1de0      	adds	r0, r4, #7
    10da:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    10de:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    10e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    10e6:	e7f5      	b.n	10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>
					(uint_value_type)va_arg(ap, size_t);
    10e8:	f854 3b04 	ldr.w	r3, [r4], #4
    10ec:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    10ee:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    10f0:	f04f 0300 	mov.w	r3, #0
    10f4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    10f6:	d0d3      	beq.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
			} else if (length_mod == LENGTH_H) {
    10f8:	2902      	cmp	r1, #2
    10fa:	d1b8      	bne.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
				value->uint = (unsigned short)value->uint;
    10fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1100:	e7d0      	b.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
		} else if (specifier_cat == SPECIFIER_FP) {
    1102:	2b04      	cmp	r3, #4
    1104:	d109      	bne.n	111a <CONFIG_FPROTECT_BLOCK_SIZE+0x11a>
					(sint_value_type)va_arg(ap, long long);
    1106:	1de3      	adds	r3, r4, #7
    1108:	f023 0307 	bic.w	r3, r3, #7
    110c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1110:	e9d3 2300 	ldrd	r2, r3, [r3]
    1114:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1118:	e7a9      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
		} else if (specifier_cat == SPECIFIER_PTR) {
    111a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    111c:	bf04      	itt	eq
    111e:	f854 3b04 	ldreq.w	r3, [r4], #4
    1122:	930a      	streq	r3, [sp, #40]	; 0x28
    1124:	e7a3      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
		switch (conv->specifier) {
    1126:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    112a:	2878      	cmp	r0, #120	; 0x78
    112c:	d8ae      	bhi.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    112e:	2862      	cmp	r0, #98	; 0x62
    1130:	d822      	bhi.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    1132:	2825      	cmp	r0, #37	; 0x25
    1134:	f43f ad8f 	beq.w	c56 <cbvprintf+0x22>
    1138:	2858      	cmp	r0, #88	; 0x58
    113a:	d1a7      	bne.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
			bps = encode_uint(value->uint, conv, buf, bpe);
    113c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1140:	9300      	str	r3, [sp, #0]
    1142:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1146:	ab04      	add	r3, sp, #16
    1148:	aa0c      	add	r2, sp, #48	; 0x30
    114a:	f006 f9c7 	bl	74dc <encode_uint>
    114e:	4682      	mov	sl, r0
			if (precision >= 0) {
    1150:	f1b8 0f00 	cmp.w	r8, #0
    1154:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1158:	db0c      	blt.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
				conv->flag_zero = false;
    115a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    115e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1162:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1166:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1168:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    116c:	d902      	bls.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
					conv->pad0_value = precision - (int)len;
    116e:	eba8 0303 	sub.w	r3, r8, r3
    1172:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1174:	4680      	mov	r8, r0
    1176:	e03d      	b.n	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
		switch (conv->specifier) {
    1178:	3863      	subs	r0, #99	; 0x63
    117a:	2815      	cmp	r0, #21
    117c:	d886      	bhi.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    117e:	a201      	add	r2, pc, #4	; (adr r2, 1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    1180:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1184:	00001205 	.word	0x00001205
    1188:	00001269 	.word	0x00001269
    118c:	0000108d 	.word	0x0000108d
    1190:	0000108d 	.word	0x0000108d
    1194:	0000108d 	.word	0x0000108d
    1198:	0000108d 	.word	0x0000108d
    119c:	00001269 	.word	0x00001269
    11a0:	0000108d 	.word	0x0000108d
    11a4:	0000108d 	.word	0x0000108d
    11a8:	0000108d 	.word	0x0000108d
    11ac:	0000108d 	.word	0x0000108d
    11b0:	000012c3 	.word	0x000012c3
    11b4:	00001291 	.word	0x00001291
    11b8:	00001295 	.word	0x00001295
    11bc:	0000108d 	.word	0x0000108d
    11c0:	0000108d 	.word	0x0000108d
    11c4:	000011dd 	.word	0x000011dd
    11c8:	0000108d 	.word	0x0000108d
    11cc:	00001291 	.word	0x00001291
    11d0:	0000108d 	.word	0x0000108d
    11d4:	0000108d 	.word	0x0000108d
    11d8:	00001291 	.word	0x00001291
			if (precision >= 0) {
    11dc:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    11e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    11e4:	db0a      	blt.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
				len = strnlen(bps, precision);
    11e6:	4641      	mov	r1, r8
    11e8:	4650      	mov	r0, sl
    11ea:	f006 fa19 	bl	7620 <strnlen>
			bpe = bps + len;
    11ee:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    11f2:	2600      	movs	r6, #0
		if (bps == NULL) {
    11f4:	f1ba 0f00 	cmp.w	sl, #0
    11f8:	d10c      	bne.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    11fa:	e747      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
				len = strlen(bps);
    11fc:	4650      	mov	r0, sl
    11fe:	f006 fa08 	bl	7612 <strlen>
    1202:	e7f4      	b.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1206:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    120a:	2600      	movs	r6, #0
			bps = buf;
    120c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1210:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1214:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1218:	b106      	cbz	r6, 121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
			nj_len += 1U;
    121a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    121c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1220:	06d0      	lsls	r0, r2, #27
    1222:	d568      	bpl.n	12f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f6>
			nj_len += 2U;
    1224:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1226:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1228:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    122a:	bf48      	it	mi
    122c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    122e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1230:	bf48      	it	mi
    1232:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1234:	f1b9 0f00 	cmp.w	r9, #0
    1238:	dd76      	ble.n	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
			if (!conv->flag_dash) {
    123a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    123e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1242:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1246:	9303      	str	r3, [sp, #12]
    1248:	0753      	lsls	r3, r2, #29
    124a:	d46d      	bmi.n	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
				if (conv->flag_zero) {
    124c:	0650      	lsls	r0, r2, #25
    124e:	d561      	bpl.n	1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>
					if (sign != 0) {
    1250:	b146      	cbz	r6, 1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
						OUTC(sign);
    1252:	9b02      	ldr	r3, [sp, #8]
    1254:	4659      	mov	r1, fp
    1256:	4630      	mov	r0, r6
    1258:	4798      	blx	r3
    125a:	2800      	cmp	r0, #0
    125c:	db57      	blt.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
						sign = 0;
    125e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1260:	3501      	adds	r5, #1
						sign = 0;
    1262:	461e      	mov	r6, r3
					pad = '0';
    1264:	2330      	movs	r3, #48	; 0x30
    1266:	e056      	b.n	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
			if (conv->flag_plus) {
    1268:	071e      	lsls	r6, r3, #28
    126a:	d40f      	bmi.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
				sign = ' ';
    126c:	f013 0610 	ands.w	r6, r3, #16
    1270:	bf18      	it	ne
    1272:	2620      	movne	r6, #32
			sint = value->sint;
    1274:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1278:	2b00      	cmp	r3, #0
    127a:	f6bf af5f 	bge.w	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
				value->uint = (uint_value_type)-sint;
    127e:	4252      	negs	r2, r2
    1280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1284:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1288:	262d      	movs	r6, #45	; 0x2d
    128a:	e757      	b.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
				sign = '+';
    128c:	262b      	movs	r6, #43	; 0x2b
    128e:	e7f1      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
		switch (conv->specifier) {
    1290:	2600      	movs	r6, #0
    1292:	e753      	b.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
			if (value->ptr != NULL) {
    1294:	980a      	ldr	r0, [sp, #40]	; 0x28
    1296:	b340      	cbz	r0, 12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1298:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    129c:	9300      	str	r3, [sp, #0]
    129e:	aa0c      	add	r2, sp, #48	; 0x30
    12a0:	ab04      	add	r3, sp, #16
    12a2:	2100      	movs	r1, #0
    12a4:	f006 f91a 	bl	74dc <encode_uint>
				conv->altform_0c = true;
    12a8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    12ac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    12b0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    12b4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    12b8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    12ba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    12be:	2600      	movs	r6, #0
				goto prec_int_pad0;
    12c0:	e746      	b.n	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
				store_count(conv, value->ptr, count);
    12c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    12c4:	2907      	cmp	r1, #7
    12c6:	f63f aee1 	bhi.w	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    12ca:	e8df f001 	tbb	[pc, r1]
    12ce:	040c      	.short	0x040c
    12d0:	08080c06 	.word	0x08080c06
    12d4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    12d6:	701d      	strb	r5, [r3, #0]
		break;
    12d8:	e6d8      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		*(short *)dp = (short)count;
    12da:	801d      	strh	r5, [r3, #0]
		break;
    12dc:	e6d6      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		*(intmax_t *)dp = (intmax_t)count;
    12de:	17ea      	asrs	r2, r5, #31
    12e0:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    12e4:	e6d2      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    12e6:	601d      	str	r5, [r3, #0]
		break;
    12e8:	e6d0      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
			bps = "(nil)";
    12ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 13b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b4>
    12ee:	4606      	mov	r6, r0
			bpe = bps + 5;
    12f0:	f10a 0805 	add.w	r8, sl, #5
    12f4:	e78e      	b.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
		} else if (conv->altform_0) {
    12f6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    12f8:	bf48      	it	mi
    12fa:	3301      	addmi	r3, #1
    12fc:	e793      	b.n	1226 <CONFIG_FPROTECT_BLOCK_SIZE+0x226>
					OUTC(pad);
    12fe:	4618      	mov	r0, r3
    1300:	9303      	str	r3, [sp, #12]
    1302:	4659      	mov	r1, fp
    1304:	9b02      	ldr	r3, [sp, #8]
    1306:	4798      	blx	r3
    1308:	2800      	cmp	r0, #0
    130a:	9b03      	ldr	r3, [sp, #12]
    130c:	da04      	bge.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
#undef OUTS
#undef OUTC
}
    130e:	b011      	add	sp, #68	; 0x44
    1310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1314:	2320      	movs	r3, #32
    1316:	444d      	add	r5, r9
    1318:	464a      	mov	r2, r9
				while (width-- > 0) {
    131a:	2a00      	cmp	r2, #0
    131c:	eba5 0109 	sub.w	r1, r5, r9
    1320:	f109 39ff 	add.w	r9, r9, #4294967295
    1324:	dceb      	bgt.n	12fe <CONFIG_FPROTECT_BLOCK_SIZE+0x2fe>
    1326:	460d      	mov	r5, r1
		if (sign != 0) {
    1328:	b136      	cbz	r6, 1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
			OUTC(sign);
    132a:	9b02      	ldr	r3, [sp, #8]
    132c:	4659      	mov	r1, fp
    132e:	4630      	mov	r0, r6
    1330:	4798      	blx	r3
    1332:	2800      	cmp	r0, #0
    1334:	dbeb      	blt.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    1336:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1338:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    133c:	06d9      	lsls	r1, r3, #27
    133e:	d401      	bmi.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    1340:	071a      	lsls	r2, r3, #28
    1342:	d506      	bpl.n	1352 <CONFIG_FPROTECT_BLOCK_SIZE+0x352>
				OUTC('0');
    1344:	9b02      	ldr	r3, [sp, #8]
    1346:	4659      	mov	r1, fp
    1348:	2030      	movs	r0, #48	; 0x30
    134a:	4798      	blx	r3
    134c:	2800      	cmp	r0, #0
    134e:	dbde      	blt.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    1350:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1352:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1356:	06db      	lsls	r3, r3, #27
    1358:	d507      	bpl.n	136a <CONFIG_FPROTECT_BLOCK_SIZE+0x36a>
				OUTC(conv->specifier);
    135a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    135e:	9b02      	ldr	r3, [sp, #8]
    1360:	4659      	mov	r1, fp
    1362:	4798      	blx	r3
    1364:	2800      	cmp	r0, #0
    1366:	dbd2      	blt.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    1368:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    136a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    136c:	442e      	add	r6, r5
    136e:	1b73      	subs	r3, r6, r5
    1370:	2b00      	cmp	r3, #0
    1372:	dc16      	bgt.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
			OUTS(bps, bpe);
    1374:	9802      	ldr	r0, [sp, #8]
    1376:	4643      	mov	r3, r8
    1378:	4652      	mov	r2, sl
    137a:	4659      	mov	r1, fp
    137c:	f006 f8f4 	bl	7568 <outs>
    1380:	2800      	cmp	r0, #0
    1382:	dbc4      	blt.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    1384:	4405      	add	r5, r0
		while (width > 0) {
    1386:	44a9      	add	r9, r5
    1388:	eba9 0305 	sub.w	r3, r9, r5
    138c:	2b00      	cmp	r3, #0
    138e:	f77f ae7d 	ble.w	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
			OUTC(' ');
    1392:	9b02      	ldr	r3, [sp, #8]
    1394:	4659      	mov	r1, fp
    1396:	2020      	movs	r0, #32
    1398:	4798      	blx	r3
    139a:	2800      	cmp	r0, #0
    139c:	dbb7      	blt.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    139e:	3501      	adds	r5, #1
			--width;
    13a0:	e7f2      	b.n	1388 <CONFIG_FPROTECT_BLOCK_SIZE+0x388>
				OUTC('0');
    13a2:	9b02      	ldr	r3, [sp, #8]
    13a4:	4659      	mov	r1, fp
    13a6:	2030      	movs	r0, #48	; 0x30
    13a8:	4798      	blx	r3
    13aa:	2800      	cmp	r0, #0
    13ac:	dbaf      	blt.n	130e <CONFIG_FPROTECT_BLOCK_SIZE+0x30e>
    13ae:	3501      	adds	r5, #1
    13b0:	e7dd      	b.n	136e <CONFIG_FPROTECT_BLOCK_SIZE+0x36e>
    13b2:	bf00      	nop
    13b4:	000084d4 	.word	0x000084d4

000013b8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    13b8:	b508      	push	{r3, lr}
	__asm__ volatile(
    13ba:	f04f 0220 	mov.w	r2, #32
    13be:	f3ef 8311 	mrs	r3, BASEPRI
    13c2:	f382 8812 	msr	BASEPRI_MAX, r2
    13c6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    13ca:	f000 ffff 	bl	23cc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    13ce:	4803      	ldr	r0, [pc, #12]	; (13dc <sys_reboot+0x24>)
    13d0:	f006 f819 	bl	7406 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    13d4:	f000 fa56 	bl	1884 <arch_cpu_idle>
    13d8:	e7fc      	b.n	13d4 <sys_reboot+0x1c>
    13da:	bf00      	nop
    13dc:	000084da 	.word	0x000084da

000013e0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    13e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    13e4:	4605      	mov	r5, r0
    13e6:	f04f 0320 	mov.w	r3, #32
    13ea:	f3ef 8611 	mrs	r6, BASEPRI
    13ee:	f383 8812 	msr	BASEPRI_MAX, r3
    13f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    13f6:	481d      	ldr	r0, [pc, #116]	; (146c <pm_state_notify+0x8c>)
    13f8:	f004 f9d4 	bl	57a4 <z_spin_lock_valid>
    13fc:	b940      	cbnz	r0, 1410 <pm_state_notify+0x30>
    13fe:	491c      	ldr	r1, [pc, #112]	; (1470 <pm_state_notify+0x90>)
    1400:	481c      	ldr	r0, [pc, #112]	; (1474 <pm_state_notify+0x94>)
    1402:	228e      	movs	r2, #142	; 0x8e
    1404:	f006 f8cd 	bl	75a2 <assert_print>
    1408:	4819      	ldr	r0, [pc, #100]	; (1470 <pm_state_notify+0x90>)
    140a:	218e      	movs	r1, #142	; 0x8e
    140c:	f006 f8c2 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    1410:	4816      	ldr	r0, [pc, #88]	; (146c <pm_state_notify+0x8c>)
    1412:	f004 f9e5 	bl	57e0 <z_spin_lock_set_owner>
	return list->head;
    1416:	4b18      	ldr	r3, [pc, #96]	; (1478 <pm_state_notify+0x98>)
    1418:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    141a:	b19c      	cbz	r4, 1444 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    141c:	4f17      	ldr	r7, [pc, #92]	; (147c <pm_state_notify+0x9c>)
    141e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1480 <pm_state_notify+0xa0>
    1422:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1426:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    142a:	2d00      	cmp	r5, #0
    142c:	bf08      	it	eq
    142e:	4613      	moveq	r3, r2
		if (callback) {
    1430:	b12b      	cbz	r3, 143e <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1432:	f898 2014 	ldrb.w	r2, [r8, #20]
    1436:	fb09 f202 	mul.w	r2, r9, r2
    143a:	5cb8      	ldrb	r0, [r7, r2]
    143c:	4798      	blx	r3
	return node->next;
    143e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1440:	2c00      	cmp	r4, #0
    1442:	d1f0      	bne.n	1426 <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1444:	4809      	ldr	r0, [pc, #36]	; (146c <pm_state_notify+0x8c>)
    1446:	f004 f9bb 	bl	57c0 <z_spin_unlock_valid>
    144a:	b940      	cbnz	r0, 145e <pm_state_notify+0x7e>
    144c:	4908      	ldr	r1, [pc, #32]	; (1470 <pm_state_notify+0x90>)
    144e:	4809      	ldr	r0, [pc, #36]	; (1474 <pm_state_notify+0x94>)
    1450:	22b9      	movs	r2, #185	; 0xb9
    1452:	f006 f8a6 	bl	75a2 <assert_print>
    1456:	4806      	ldr	r0, [pc, #24]	; (1470 <pm_state_notify+0x90>)
    1458:	21b9      	movs	r1, #185	; 0xb9
    145a:	f006 f89b 	bl	7594 <assert_post_action>
	__asm__ volatile(
    145e:	f386 8811 	msr	BASEPRI, r6
    1462:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    146a:	bf00      	nop
    146c:	2000030c 	.word	0x2000030c
    1470:	000084a7 	.word	0x000084a7
    1474:	00008378 	.word	0x00008378
    1478:	20000310 	.word	0x20000310
    147c:	20000318 	.word	0x20000318
    1480:	20000acc 	.word	0x20000acc

00001484 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1484:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1486:	2301      	movs	r3, #1
    1488:	f000 001f 	and.w	r0, r0, #31
    148c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1490:	4b07      	ldr	r3, [pc, #28]	; (14b0 <atomic_clear_bit.constprop.0+0x2c>)
    1492:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1496:	43c0      	mvns	r0, r0
    1498:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    149c:	e853 2f00 	ldrex	r2, [r3]
    14a0:	4002      	ands	r2, r0
    14a2:	e843 2100 	strex	r1, r2, [r3]
    14a6:	2900      	cmp	r1, #0
    14a8:	d1f8      	bne.n	149c <atomic_clear_bit.constprop.0+0x18>
    14aa:	f3bf 8f5b 	dmb	ish
}
    14ae:	4770      	bx	lr
    14b0:	20000324 	.word	0x20000324

000014b4 <pm_system_resume>:

void pm_system_resume(void)
{
    14b4:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    14b6:	4b1a      	ldr	r3, [pc, #104]	; (1520 <pm_system_resume+0x6c>)
    14b8:	7d1c      	ldrb	r4, [r3, #20]
    14ba:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    14be:	f004 031f 	and.w	r3, r4, #31
    14c2:	2201      	movs	r2, #1
    14c4:	409a      	lsls	r2, r3
    14c6:	4b17      	ldr	r3, [pc, #92]	; (1524 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    14c8:	0961      	lsrs	r1, r4, #5
    14ca:	43d0      	mvns	r0, r2
    14cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    14d0:	e853 1f00 	ldrex	r1, [r3]
    14d4:	ea01 0500 	and.w	r5, r1, r0
    14d8:	e843 5c00 	strex	ip, r5, [r3]
    14dc:	f1bc 0f00 	cmp.w	ip, #0
    14e0:	d1f6      	bne.n	14d0 <pm_system_resume+0x1c>
    14e2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    14e6:	4211      	tst	r1, r2
    14e8:	d013      	beq.n	1512 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    14ea:	4b0f      	ldr	r3, [pc, #60]	; (1528 <pm_system_resume+0x74>)
    14ec:	4d0f      	ldr	r5, [pc, #60]	; (152c <pm_system_resume+0x78>)
    14ee:	b18b      	cbz	r3, 1514 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    14f0:	230c      	movs	r3, #12
    14f2:	4363      	muls	r3, r4
    14f4:	18ea      	adds	r2, r5, r3
    14f6:	5ce8      	ldrb	r0, [r5, r3]
    14f8:	7851      	ldrb	r1, [r2, #1]
    14fa:	f006 f8bd 	bl	7678 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    14fe:	2000      	movs	r0, #0
    1500:	f7ff ff6e 	bl	13e0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1504:	230c      	movs	r3, #12
    1506:	435c      	muls	r4, r3
    1508:	192a      	adds	r2, r5, r4
    150a:	2300      	movs	r3, #0
    150c:	512b      	str	r3, [r5, r4]
    150e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1512:	bd38      	pop	{r3, r4, r5, pc}
    1514:	f383 8811 	msr	BASEPRI, r3
    1518:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    151c:	e7ef      	b.n	14fe <pm_system_resume+0x4a>
    151e:	bf00      	nop
    1520:	20000acc 	.word	0x20000acc
    1524:	20000328 	.word	0x20000328
    1528:	00007679 	.word	0x00007679
    152c:	20000318 	.word	0x20000318

00001530 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1534:	4b32      	ldr	r3, [pc, #200]	; (1600 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1536:	4a33      	ldr	r2, [pc, #204]	; (1604 <pm_system_suspend+0xd4>)
    1538:	7d1c      	ldrb	r4, [r3, #20]
    153a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    153e:	0963      	lsrs	r3, r4, #5
    1540:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1548:	4e2f      	ldr	r6, [pc, #188]	; (1608 <pm_system_suspend+0xd8>)
    154a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    154e:	f004 081f 	and.w	r8, r4, #31
    1552:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1556:	f013 0f01 	tst.w	r3, #1
{
    155a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    155c:	d10a      	bne.n	1574 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    155e:	4601      	mov	r1, r0
    1560:	4620      	mov	r0, r4
    1562:	f000 f869 	bl	1638 <pm_policy_next_state>
		if (info != NULL) {
    1566:	b128      	cbz	r0, 1574 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1568:	c807      	ldmia	r0, {r0, r1, r2}
    156a:	230c      	movs	r3, #12
    156c:	fb03 6304 	mla	r3, r3, r4, r6
    1570:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1574:	230c      	movs	r3, #12
    1576:	4363      	muls	r3, r4
    1578:	18f2      	adds	r2, r6, r3
    157a:	5cf5      	ldrb	r5, [r6, r3]
    157c:	b92d      	cbnz	r5, 158a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    157e:	4620      	mov	r0, r4
    1580:	f7ff ff80 	bl	1484 <atomic_clear_bit.constprop.0>
		ret = false;
    1584:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    158a:	1c7b      	adds	r3, r7, #1
    158c:	d00f      	beq.n	15ae <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    158e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1592:	481e      	ldr	r0, [pc, #120]	; (160c <pm_system_suspend+0xdc>)
    1594:	4a1e      	ldr	r2, [pc, #120]	; (1610 <pm_system_suspend+0xe0>)
    1596:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    159a:	2100      	movs	r1, #0
    159c:	2300      	movs	r3, #0
    159e:	fbec 0105 	umlal	r0, r1, ip, r5
    15a2:	f7fe fdad 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    15a6:	2101      	movs	r1, #1
    15a8:	1a38      	subs	r0, r7, r0
    15aa:	f005 fc1d 	bl	6de8 <z_set_timeout_expiry>
	k_sched_lock();
    15ae:	f004 fbf5 	bl	5d9c <k_sched_lock>
	pm_state_notify(true);
    15b2:	2001      	movs	r0, #1
    15b4:	f7ff ff14 	bl	13e0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    15b8:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    15bc:	2301      	movs	r3, #1
    15be:	fa03 f808 	lsl.w	r8, r3, r8
    15c2:	4b14      	ldr	r3, [pc, #80]	; (1614 <pm_system_suspend+0xe4>)
    15c4:	4499      	add	r9, r3
    15c6:	e859 3f00 	ldrex	r3, [r9]
    15ca:	ea43 0308 	orr.w	r3, r3, r8
    15ce:	e849 3200 	strex	r2, r3, [r9]
    15d2:	2a00      	cmp	r2, #0
    15d4:	d1f7      	bne.n	15c6 <pm_system_suspend+0x96>
    15d6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    15da:	4b0f      	ldr	r3, [pc, #60]	; (1618 <pm_system_suspend+0xe8>)
    15dc:	b133      	cbz	r3, 15ec <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    15de:	230c      	movs	r3, #12
    15e0:	4363      	muls	r3, r4
    15e2:	18f2      	adds	r2, r6, r3
    15e4:	5cf0      	ldrb	r0, [r6, r3]
    15e6:	7851      	ldrb	r1, [r2, #1]
    15e8:	f006 f83a 	bl	7660 <pm_state_set>
	pm_system_resume();
    15ec:	f7ff ff62 	bl	14b4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    15f0:	4620      	mov	r0, r4
    15f2:	f7ff ff47 	bl	1484 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    15f6:	f004 fff5 	bl	65e4 <k_sched_unlock>
	bool ret = true;
    15fa:	2001      	movs	r0, #1
    15fc:	e7c3      	b.n	1586 <pm_system_suspend+0x56>
    15fe:	bf00      	nop
    1600:	20000acc 	.word	0x20000acc
    1604:	20000324 	.word	0x20000324
    1608:	20000318 	.word	0x20000318
    160c:	000f423f 	.word	0x000f423f
    1610:	000f4240 	.word	0x000f4240
    1614:	20000328 	.word	0x20000328
    1618:	00007661 	.word	0x00007661

0000161c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    161c:	4b05      	ldr	r3, [pc, #20]	; (1634 <pm_policy_state_lock_is_active+0x18>)
    161e:	f3bf 8f5b 	dmb	ish
    1622:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1626:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    162a:	3800      	subs	r0, #0
    162c:	bf18      	it	ne
    162e:	2001      	movne	r0, #1
    1630:	4770      	bx	lr
    1632:	bf00      	nop
    1634:	2000032c 	.word	0x2000032c

00001638 <pm_policy_next_state>:
{
    1638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    163c:	b085      	sub	sp, #20
    163e:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1640:	a903      	add	r1, sp, #12
    1642:	f000 f847 	bl	16d4 <pm_state_cpu_get_all>
    1646:	f8df 8080 	ldr.w	r8, [pc, #128]	; 16c8 <pm_policy_next_state+0x90>
    164a:	f8df a080 	ldr.w	sl, [pc, #128]	; 16cc <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    164e:	1e44      	subs	r4, r0, #1
    1650:	b224      	sxth	r4, r4
    1652:	f04f 0b00 	mov.w	fp, #0
    1656:	1c63      	adds	r3, r4, #1
    1658:	d104      	bne.n	1664 <pm_policy_next_state+0x2c>
	return NULL;
    165a:	2600      	movs	r6, #0
}
    165c:	4630      	mov	r0, r6
    165e:	b005      	add	sp, #20
    1660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1664:	9a03      	ldr	r2, [sp, #12]
    1666:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    166a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    166e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1672:	f7ff ffd3 	bl	161c <pm_policy_state_lock_is_active>
    1676:	4605      	mov	r5, r0
    1678:	bb10      	cbnz	r0, 16c0 <pm_policy_next_state+0x88>
    167a:	6870      	ldr	r0, [r6, #4]
    167c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1680:	46c4      	mov	ip, r8
    1682:	4629      	mov	r1, r5
    1684:	fbe0 c109 	umlal	ip, r1, r0, r9
    1688:	4652      	mov	r2, sl
    168a:	465b      	mov	r3, fp
    168c:	4660      	mov	r0, ip
    168e:	f7fe fd37 	bl	100 <__aeabi_uldivmod>
    1692:	9001      	str	r0, [sp, #4]
    1694:	68b0      	ldr	r0, [r6, #8]
    1696:	46c4      	mov	ip, r8
    1698:	4629      	mov	r1, r5
    169a:	fbe0 c109 	umlal	ip, r1, r0, r9
    169e:	465b      	mov	r3, fp
    16a0:	4652      	mov	r2, sl
    16a2:	4660      	mov	r0, ip
    16a4:	f7fe fd2c 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    16a8:	4b09      	ldr	r3, [pc, #36]	; (16d0 <pm_policy_next_state+0x98>)
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	1c59      	adds	r1, r3, #1
    16ae:	d001      	beq.n	16b4 <pm_policy_next_state+0x7c>
    16b0:	4283      	cmp	r3, r0
    16b2:	d905      	bls.n	16c0 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    16b4:	1c7a      	adds	r2, r7, #1
    16b6:	d0d1      	beq.n	165c <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    16b8:	9b01      	ldr	r3, [sp, #4]
    16ba:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    16bc:	42b8      	cmp	r0, r7
    16be:	d9cd      	bls.n	165c <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    16c0:	3c01      	subs	r4, #1
    16c2:	b224      	sxth	r4, r4
    16c4:	e7c7      	b.n	1656 <pm_policy_next_state+0x1e>
    16c6:	bf00      	nop
    16c8:	000f423f 	.word	0x000f423f
    16cc:	000f4240 	.word	0x000f4240
    16d0:	20000004 	.word	0x20000004

000016d4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    16d4:	b908      	cbnz	r0, 16da <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    16d6:	4b02      	ldr	r3, [pc, #8]	; (16e0 <pm_state_cpu_get_all+0xc>)
    16d8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    16da:	2000      	movs	r0, #0
    16dc:	4770      	bx	lr
    16de:	bf00      	nop
    16e0:	00007fe8 	.word	0x00007fe8

000016e4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    16e4:	4801      	ldr	r0, [pc, #4]	; (16ec <nrf_cc3xx_platform_abort_init+0x8>)
    16e6:	f005 bced 	b.w	70c4 <nrf_cc3xx_platform_set_abort>
    16ea:	bf00      	nop
    16ec:	00007fe8 	.word	0x00007fe8

000016f0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    16f0:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    16f2:	4604      	mov	r4, r0
    16f4:	b918      	cbnz	r0, 16fe <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    16f6:	4b0d      	ldr	r3, [pc, #52]	; (172c <mutex_free_platform+0x3c>)
    16f8:	480d      	ldr	r0, [pc, #52]	; (1730 <mutex_free_platform+0x40>)
    16fa:	685b      	ldr	r3, [r3, #4]
    16fc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    16fe:	6861      	ldr	r1, [r4, #4]
    1700:	2908      	cmp	r1, #8
    1702:	d00d      	beq.n	1720 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1704:	f031 0304 	bics.w	r3, r1, #4
    1708:	d00a      	beq.n	1720 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    170a:	f011 0102 	ands.w	r1, r1, #2
    170e:	d008      	beq.n	1722 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1710:	4808      	ldr	r0, [pc, #32]	; (1734 <mutex_free_platform+0x44>)
    1712:	4621      	mov	r1, r4
    1714:	f003 ff20 	bl	5558 <k_mem_slab_free>
        mutex->mutex = NULL;
    1718:	2300      	movs	r3, #0
    171a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    171c:	2300      	movs	r3, #0
    171e:	6063      	str	r3, [r4, #4]
}
    1720:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1722:	6820      	ldr	r0, [r4, #0]
    1724:	2214      	movs	r2, #20
    1726:	f005 ff8f 	bl	7648 <memset>
    172a:	e7f7      	b.n	171c <mutex_free_platform+0x2c>
    172c:	200000f4 	.word	0x200000f4
    1730:	00008506 	.word	0x00008506
    1734:	20000348 	.word	0x20000348

00001738 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1738:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    173a:	b308      	cbz	r0, 1780 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    173c:	6843      	ldr	r3, [r0, #4]
    173e:	2b04      	cmp	r3, #4
    1740:	d110      	bne.n	1764 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1742:	2201      	movs	r2, #1
    1744:	6803      	ldr	r3, [r0, #0]
    1746:	f3bf 8f5b 	dmb	ish
    174a:	e853 1f00 	ldrex	r1, [r3]
    174e:	2900      	cmp	r1, #0
    1750:	d103      	bne.n	175a <mutex_lock_platform+0x22>
    1752:	e843 2000 	strex	r0, r2, [r3]
    1756:	2800      	cmp	r0, #0
    1758:	d1f7      	bne.n	174a <mutex_lock_platform+0x12>
    175a:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    175e:	d10b      	bne.n	1778 <mutex_lock_platform+0x40>
    1760:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1762:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1764:	b153      	cbz	r3, 177c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1766:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1768:	f04f 32ff 	mov.w	r2, #4294967295
    176c:	f04f 33ff 	mov.w	r3, #4294967295
    1770:	f004 f86c 	bl	584c <z_impl_k_mutex_lock>
        if (ret == 0) {
    1774:	2800      	cmp	r0, #0
    1776:	d0f3      	beq.n	1760 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1778:	4803      	ldr	r0, [pc, #12]	; (1788 <mutex_lock_platform+0x50>)
    177a:	e7f2      	b.n	1762 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    177c:	4803      	ldr	r0, [pc, #12]	; (178c <mutex_lock_platform+0x54>)
    177e:	e7f0      	b.n	1762 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1780:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1784:	e7ed      	b.n	1762 <mutex_lock_platform+0x2a>
    1786:	bf00      	nop
    1788:	ffff8fe9 	.word	0xffff8fe9
    178c:	ffff8fea 	.word	0xffff8fea

00001790 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1790:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1792:	b1d0      	cbz	r0, 17ca <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1794:	6843      	ldr	r3, [r0, #4]
    1796:	2b04      	cmp	r3, #4
    1798:	d111      	bne.n	17be <mutex_unlock_platform+0x2e>
    179a:	2200      	movs	r2, #0
    179c:	6803      	ldr	r3, [r0, #0]
    179e:	f3bf 8f5b 	dmb	ish
    17a2:	e853 1f00 	ldrex	r1, [r3]
    17a6:	2901      	cmp	r1, #1
    17a8:	d103      	bne.n	17b2 <mutex_unlock_platform+0x22>
    17aa:	e843 2000 	strex	r0, r2, [r3]
    17ae:	2800      	cmp	r0, #0
    17b0:	d1f7      	bne.n	17a2 <mutex_unlock_platform+0x12>
    17b2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    17b6:	4807      	ldr	r0, [pc, #28]	; (17d4 <mutex_unlock_platform+0x44>)
    17b8:	bf08      	it	eq
    17ba:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    17bc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    17be:	b13b      	cbz	r3, 17d0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    17c0:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    17c2:	f004 f915 	bl	59f0 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    17c6:	2000      	movs	r0, #0
    17c8:	e7f8      	b.n	17bc <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    17ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    17ce:	e7f5      	b.n	17bc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    17d0:	4801      	ldr	r0, [pc, #4]	; (17d8 <mutex_unlock_platform+0x48>)
    17d2:	e7f3      	b.n	17bc <mutex_unlock_platform+0x2c>
    17d4:	ffff8fe9 	.word	0xffff8fe9
    17d8:	ffff8fea 	.word	0xffff8fea

000017dc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    17de:	4604      	mov	r4, r0
    17e0:	b918      	cbnz	r0, 17ea <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    17e2:	4b16      	ldr	r3, [pc, #88]	; (183c <mutex_init_platform+0x60>)
    17e4:	4816      	ldr	r0, [pc, #88]	; (1840 <mutex_init_platform+0x64>)
    17e6:	685b      	ldr	r3, [r3, #4]
    17e8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    17ea:	6863      	ldr	r3, [r4, #4]
    17ec:	2b04      	cmp	r3, #4
    17ee:	d023      	beq.n	1838 <mutex_init_platform+0x5c>
    17f0:	2b08      	cmp	r3, #8
    17f2:	d021      	beq.n	1838 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    17f4:	b9cb      	cbnz	r3, 182a <mutex_init_platform+0x4e>
    17f6:	6823      	ldr	r3, [r4, #0]
    17f8:	b9bb      	cbnz	r3, 182a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    17fa:	4812      	ldr	r0, [pc, #72]	; (1844 <mutex_init_platform+0x68>)
    17fc:	f04f 32ff 	mov.w	r2, #4294967295
    1800:	f04f 33ff 	mov.w	r3, #4294967295
    1804:	4621      	mov	r1, r4
    1806:	f003 fe4d 	bl	54a4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    180a:	b908      	cbnz	r0, 1810 <mutex_init_platform+0x34>
    180c:	6823      	ldr	r3, [r4, #0]
    180e:	b91b      	cbnz	r3, 1818 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1810:	4b0a      	ldr	r3, [pc, #40]	; (183c <mutex_init_platform+0x60>)
    1812:	480d      	ldr	r0, [pc, #52]	; (1848 <mutex_init_platform+0x6c>)
    1814:	685b      	ldr	r3, [r3, #4]
    1816:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1818:	6820      	ldr	r0, [r4, #0]
    181a:	2214      	movs	r2, #20
    181c:	2100      	movs	r1, #0
    181e:	f005 ff13 	bl	7648 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1822:	6863      	ldr	r3, [r4, #4]
    1824:	f043 0302 	orr.w	r3, r3, #2
    1828:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    182a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    182c:	f006 fa28 	bl	7c80 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1830:	6863      	ldr	r3, [r4, #4]
    1832:	f043 0301 	orr.w	r3, r3, #1
    1836:	6063      	str	r3, [r4, #4]
}
    1838:	bd10      	pop	{r4, pc}
    183a:	bf00      	nop
    183c:	200000f4 	.word	0x200000f4
    1840:	00008506 	.word	0x00008506
    1844:	20000348 	.word	0x20000348
    1848:	0000852c 	.word	0x0000852c

0000184c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    184c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    184e:	4906      	ldr	r1, [pc, #24]	; (1868 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1850:	4806      	ldr	r0, [pc, #24]	; (186c <nrf_cc3xx_platform_mutex_init+0x20>)
    1852:	2340      	movs	r3, #64	; 0x40
    1854:	2214      	movs	r2, #20
    1856:	f006 f9e0 	bl	7c1a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    185a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    185e:	4904      	ldr	r1, [pc, #16]	; (1870 <nrf_cc3xx_platform_mutex_init+0x24>)
    1860:	4804      	ldr	r0, [pc, #16]	; (1874 <nrf_cc3xx_platform_mutex_init+0x28>)
    1862:	f005 bc8f 	b.w	7184 <nrf_cc3xx_platform_set_mutexes>
    1866:	bf00      	nop
    1868:	20000368 	.word	0x20000368
    186c:	20000348 	.word	0x20000348
    1870:	00008000 	.word	0x00008000
    1874:	00007ff0 	.word	0x00007ff0

00001878 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1878:	4901      	ldr	r1, [pc, #4]	; (1880 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    187a:	2210      	movs	r2, #16
	str	r2, [r1]
    187c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    187e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1880:	e000ed10 	.word	0xe000ed10

00001884 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1884:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1886:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1888:	f380 8811 	msr	BASEPRI, r0
	isb
    188c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1890:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1894:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1896:	b662      	cpsie	i
	isb
    1898:	f3bf 8f6f 	isb	sy

	bx	lr
    189c:	4770      	bx	lr
    189e:	bf00      	nop

000018a0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    18a0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    18a2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    18a4:	f381 8811 	msr	BASEPRI, r1

	wfe
    18a8:	bf20      	wfe

	msr	BASEPRI, r0
    18aa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    18ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    18b0:	4770      	bx	lr
    18b2:	bf00      	nop

000018b4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    18b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    18b6:	4605      	mov	r5, r0

	if (esf != NULL) {
    18b8:	460c      	mov	r4, r1
    18ba:	b1c9      	cbz	r1, 18f0 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    18bc:	688b      	ldr	r3, [r1, #8]
    18be:	9300      	str	r3, [sp, #0]
    18c0:	e9d1 2300 	ldrd	r2, r3, [r1]
    18c4:	480e      	ldr	r0, [pc, #56]	; (1900 <z_arm_fatal_error+0x4c>)
    18c6:	2145      	movs	r1, #69	; 0x45
    18c8:	f005 fe79 	bl	75be <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    18cc:	6963      	ldr	r3, [r4, #20]
    18ce:	9300      	str	r3, [sp, #0]
    18d0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    18d4:	480b      	ldr	r0, [pc, #44]	; (1904 <z_arm_fatal_error+0x50>)
    18d6:	2145      	movs	r1, #69	; 0x45
    18d8:	f005 fe71 	bl	75be <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    18dc:	69e2      	ldr	r2, [r4, #28]
    18de:	480a      	ldr	r0, [pc, #40]	; (1908 <z_arm_fatal_error+0x54>)
    18e0:	2145      	movs	r1, #69	; 0x45
    18e2:	f005 fe6c 	bl	75be <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    18e6:	69a2      	ldr	r2, [r4, #24]
    18e8:	4808      	ldr	r0, [pc, #32]	; (190c <z_arm_fatal_error+0x58>)
    18ea:	2145      	movs	r1, #69	; 0x45
    18ec:	f005 fe67 	bl	75be <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    18f0:	4621      	mov	r1, r4
    18f2:	4628      	mov	r0, r5
}
    18f4:	b003      	add	sp, #12
    18f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    18fa:	f003 bc7d 	b.w	51f8 <z_fatal_error>
    18fe:	bf00      	nop
    1900:	00008559 	.word	0x00008559
    1904:	0000858d 	.word	0x0000858d
    1908:	000085c1 	.word	0x000085c1
    190c:	000085d5 	.word	0x000085d5

00001910 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1910:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1912:	2b00      	cmp	r3, #0
    1914:	db08      	blt.n	1928 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1916:	2201      	movs	r2, #1
    1918:	f000 001f 	and.w	r0, r0, #31
    191c:	fa02 f000 	lsl.w	r0, r2, r0
    1920:	095b      	lsrs	r3, r3, #5
    1922:	4a02      	ldr	r2, [pc, #8]	; (192c <arch_irq_enable+0x1c>)
    1924:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1928:	4770      	bx	lr
    192a:	bf00      	nop
    192c:	e000e100 	.word	0xe000e100

00001930 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1930:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1932:	2b00      	cmp	r3, #0
    1934:	db0d      	blt.n	1952 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1936:	2201      	movs	r2, #1
    1938:	095b      	lsrs	r3, r3, #5
    193a:	f000 001f 	and.w	r0, r0, #31
    193e:	fa02 f000 	lsl.w	r0, r2, r0
    1942:	3320      	adds	r3, #32
    1944:	4a03      	ldr	r2, [pc, #12]	; (1954 <arch_irq_disable+0x24>)
    1946:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    194a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    194e:	f3bf 8f6f 	isb	sy
}
    1952:	4770      	bx	lr
    1954:	e000e100 	.word	0xe000e100

00001958 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1958:	4b05      	ldr	r3, [pc, #20]	; (1970 <arch_irq_is_enabled+0x18>)
    195a:	0942      	lsrs	r2, r0, #5
    195c:	f000 001f 	and.w	r0, r0, #31
    1960:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1964:	2301      	movs	r3, #1
    1966:	fa03 f000 	lsl.w	r0, r3, r0
}
    196a:	4010      	ands	r0, r2
    196c:	4770      	bx	lr
    196e:	bf00      	nop
    1970:	e000e100 	.word	0xe000e100

00001974 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1974:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1976:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1978:	2c07      	cmp	r4, #7
{
    197a:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    197c:	d908      	bls.n	1990 <z_arm_irq_priority_set+0x1c>
    197e:	490e      	ldr	r1, [pc, #56]	; (19b8 <z_arm_irq_priority_set+0x44>)
    1980:	480e      	ldr	r0, [pc, #56]	; (19bc <z_arm_irq_priority_set+0x48>)
    1982:	2257      	movs	r2, #87	; 0x57
    1984:	f005 fe0d 	bl	75a2 <assert_print>
    1988:	480b      	ldr	r0, [pc, #44]	; (19b8 <z_arm_irq_priority_set+0x44>)
    198a:	2157      	movs	r1, #87	; 0x57
    198c:	f005 fe02 	bl	7594 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1990:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1992:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1994:	bfac      	ite	ge
    1996:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    199a:	4b09      	ldrlt	r3, [pc, #36]	; (19c0 <z_arm_irq_priority_set+0x4c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    199c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19a0:	bfb8      	it	lt
    19a2:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19a6:	b2e4      	uxtb	r4, r4
    19a8:	bfaa      	itet	ge
    19aa:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ae:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19b0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    19b4:	bd38      	pop	{r3, r4, r5, pc}
    19b6:	bf00      	nop
    19b8:	00008608 	.word	0x00008608
    19bc:	00008378 	.word	0x00008378
    19c0:	e000ed14 	.word	0xe000ed14

000019c4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    19c4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    19c6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <_arch_isr_direct_pm+0x18>)
    19ca:	699a      	ldr	r2, [r3, #24]
    19cc:	b11a      	cbz	r2, 19d6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    19ce:	2200      	movs	r2, #0
    19d0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    19d2:	f006 f946 	bl	7c62 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    19d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    19d8:	bd08      	pop	{r3, pc}
    19da:	bf00      	nop
    19dc:	20000acc 	.word	0x20000acc

000019e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    19e0:	bf30      	wfi
    b z_SysNmiOnReset
    19e2:	f7ff bffd 	b.w	19e0 <z_SysNmiOnReset>
    19e6:	bf00      	nop

000019e8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    19e8:	4a0b      	ldr	r2, [pc, #44]	; (1a18 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    19ea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    19ec:	4b0b      	ldr	r3, [pc, #44]	; (1a1c <z_arm_prep_c+0x34>)
    19ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    19f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    19f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    19fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1a00:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a08:	f003 fc6c 	bl	52e4 <z_bss_zero>
	z_data_copy();
    1a0c:	f005 f868 	bl	6ae0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a10:	f000 fafc 	bl	200c <z_arm_interrupt_init>
	z_cstart();
    1a14:	f003 fcaa 	bl	536c <z_cstart>
    1a18:	00000000 	.word	0x00000000
    1a1c:	e000ed00 	.word	0xe000ed00

00001a20 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1a20:	4a09      	ldr	r2, [pc, #36]	; (1a48 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a22:	490a      	ldr	r1, [pc, #40]	; (1a4c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1a24:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1a26:	6809      	ldr	r1, [r1, #0]
    1a28:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a2a:	4909      	ldr	r1, [pc, #36]	; (1a50 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1a2c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a2e:	684b      	ldr	r3, [r1, #4]
    1a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a34:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1a36:	2300      	movs	r3, #0
    1a38:	f383 8811 	msr	BASEPRI, r3
    1a3c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1a40:	6893      	ldr	r3, [r2, #8]
}
    1a42:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1a44:	4770      	bx	lr
    1a46:	bf00      	nop
    1a48:	20000acc 	.word	0x20000acc
    1a4c:	00008148 	.word	0x00008148
    1a50:	e000ed00 	.word	0xe000ed00

00001a54 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1a54:	4912      	ldr	r1, [pc, #72]	; (1aa0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1a56:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1a58:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1a5c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1a5e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1a62:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a66:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1a68:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1a6c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1a70:	4f0c      	ldr	r7, [pc, #48]	; (1aa4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1a72:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1a76:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1a78:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1a7a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1a7c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1a7e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1a80:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1a82:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1a86:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1a88:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1a8a:	f000 fb5b 	bl	2144 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1a8e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1a92:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1a96:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1a9a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1a9e:	4770      	bx	lr
    ldr r1, =_kernel
    1aa0:	20000acc 	.word	0x20000acc
    ldr v4, =_SCS_ICSR
    1aa4:	e000ed04 	.word	0xe000ed04

00001aa8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1aa8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1aac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1aae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1ab2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1ab6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1ab8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1abc:	2902      	cmp	r1, #2
    beq _oops
    1abe:	d0ff      	beq.n	1ac0 <_oops>

00001ac0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1ac0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1ac2:	f005 fd8d 	bl	75e0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1ac6:	bd01      	pop	{r0, pc}

00001ac8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1ac8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1acc:	9b00      	ldr	r3, [sp, #0]
    1ace:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1ad2:	490a      	ldr	r1, [pc, #40]	; (1afc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1ad4:	9b01      	ldr	r3, [sp, #4]
    1ad6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1ada:	9b02      	ldr	r3, [sp, #8]
    1adc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1ae0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1ae8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1aec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1af0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1af2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1af4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1af6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop
    1afc:	000074c9 	.word	0x000074c9

00001b00 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1b00:	4a09      	ldr	r2, [pc, #36]	; (1b28 <z_check_thread_stack_fail+0x28>)
{
    1b02:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1b04:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1b06:	b170      	cbz	r0, 1b26 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1b08:	f113 0f16 	cmn.w	r3, #22
    1b0c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1b0e:	d005      	beq.n	1b1c <z_check_thread_stack_fail+0x1c>
    1b10:	f1a0 0220 	sub.w	r2, r0, #32
    1b14:	429a      	cmp	r2, r3
    1b16:	d805      	bhi.n	1b24 <z_check_thread_stack_fail+0x24>
    1b18:	4283      	cmp	r3, r0
    1b1a:	d203      	bcs.n	1b24 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1b1c:	4281      	cmp	r1, r0
    1b1e:	bf28      	it	cs
    1b20:	2000      	movcs	r0, #0
    1b22:	4770      	bx	lr
    1b24:	2000      	movs	r0, #0
}
    1b26:	4770      	bx	lr
    1b28:	20000acc 	.word	0x20000acc

00001b2c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1b2c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1b2e:	4b09      	ldr	r3, [pc, #36]	; (1b54 <arch_switch_to_main_thread+0x28>)
    1b30:	6098      	str	r0, [r3, #8]
{
    1b32:	460d      	mov	r5, r1
    1b34:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1b36:	f000 fb05 	bl	2144 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1b3a:	4620      	mov	r0, r4
    1b3c:	f385 8809 	msr	PSP, r5
    1b40:	2100      	movs	r1, #0
    1b42:	b663      	cpsie	if
    1b44:	f381 8811 	msr	BASEPRI, r1
    1b48:	f3bf 8f6f 	isb	sy
    1b4c:	2200      	movs	r2, #0
    1b4e:	2300      	movs	r3, #0
    1b50:	f005 fcba 	bl	74c8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1b54:	20000acc 	.word	0x20000acc

00001b58 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1b58:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1b5a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1b5c:	4a0b      	ldr	r2, [pc, #44]	; (1b8c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1b5e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1b60:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1b62:	bf1e      	ittt	ne
	movne	r1, #0
    1b64:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1b66:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1b68:	f006 f87b 	blne	7c62 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1b6c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1b6e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1b72:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1b76:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1b7a:	4905      	ldr	r1, [pc, #20]	; (1b90 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1b7c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1b7e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1b80:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1b82:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1b86:	4903      	ldr	r1, [pc, #12]	; (1b94 <_isr_wrapper+0x3c>)
	bx r1
    1b88:	4708      	bx	r1
    1b8a:	0000      	.short	0x0000
	ldr r2, =_kernel
    1b8c:	20000acc 	.word	0x20000acc
	ldr r1, =_sw_isr_table
    1b90:	00007dbc 	.word	0x00007dbc
	ldr r1, =z_arm_int_exit
    1b94:	00001b99 	.word	0x00001b99

00001b98 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1b98:	4b04      	ldr	r3, [pc, #16]	; (1bac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1b9a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1b9c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1b9e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1ba0:	d003      	beq.n	1baa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1ba2:	4903      	ldr	r1, [pc, #12]	; (1bb0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ba8:	600a      	str	r2, [r1, #0]

00001baa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1baa:	4770      	bx	lr
	ldr r3, =_kernel
    1bac:	20000acc 	.word	0x20000acc
	ldr r1, =_SCS_ICSR
    1bb0:	e000ed04 	.word	0xe000ed04

00001bb4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1bb8:	4c39      	ldr	r4, [pc, #228]	; (1ca0 <mem_manage_fault+0xec>)
{
    1bba:	4680      	mov	r8, r0
    1bbc:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1bbe:	4839      	ldr	r0, [pc, #228]	; (1ca4 <mem_manage_fault+0xf0>)
    1bc0:	2145      	movs	r1, #69	; 0x45
{
    1bc2:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    1bc4:	f005 fcfb 	bl	75be <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1bca:	06da      	lsls	r2, r3, #27
    1bcc:	d503      	bpl.n	1bd6 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1bce:	4836      	ldr	r0, [pc, #216]	; (1ca8 <mem_manage_fault+0xf4>)
    1bd0:	2145      	movs	r1, #69	; 0x45
    1bd2:	f005 fcf4 	bl	75be <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1bd8:	071b      	lsls	r3, r3, #28
    1bda:	d503      	bpl.n	1be4 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    1bdc:	4833      	ldr	r0, [pc, #204]	; (1cac <mem_manage_fault+0xf8>)
    1bde:	2145      	movs	r1, #69	; 0x45
    1be0:	f005 fced 	bl	75be <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1be4:	4c2e      	ldr	r4, [pc, #184]	; (1ca0 <mem_manage_fault+0xec>)
    1be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1be8:	079f      	lsls	r7, r3, #30
    1bea:	d429      	bmi.n	1c40 <mem_manage_fault+0x8c>
	uint32_t mmfar = -EINVAL;
    1bec:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1bf0:	4c2b      	ldr	r4, [pc, #172]	; (1ca0 <mem_manage_fault+0xec>)
    1bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1bf4:	07d9      	lsls	r1, r3, #31
    1bf6:	d503      	bpl.n	1c00 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    1bf8:	482d      	ldr	r0, [pc, #180]	; (1cb0 <mem_manage_fault+0xfc>)
    1bfa:	2145      	movs	r1, #69	; 0x45
    1bfc:	f005 fcdf 	bl	75be <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1c02:	069a      	lsls	r2, r3, #26
    1c04:	d503      	bpl.n	1c0e <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    1c06:	482b      	ldr	r0, [pc, #172]	; (1cb4 <mem_manage_fault+0x100>)
    1c08:	2145      	movs	r1, #69	; 0x45
    1c0a:	f005 fcd8 	bl	75be <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c0e:	4d24      	ldr	r5, [pc, #144]	; (1ca0 <mem_manage_fault+0xec>)
    1c10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1c12:	06db      	lsls	r3, r3, #27
    1c14:	d428      	bmi.n	1c68 <mem_manage_fault+0xb4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1c16:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c18:	079c      	lsls	r4, r3, #30
    1c1a:	d425      	bmi.n	1c68 <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c1c:	2400      	movs	r4, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c1e:	4b20      	ldr	r3, [pc, #128]	; (1ca0 <mem_manage_fault+0xec>)
    1c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c22:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1c24:	bf42      	ittt	mi
    1c26:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1c28:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1c2c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c30:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1c34:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1c36:	2300      	movs	r3, #0
    1c38:	7033      	strb	r3, [r6, #0]

	return reason;
}
    1c3a:	4620      	mov	r0, r4
    1c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    1c40:	481d      	ldr	r0, [pc, #116]	; (1cb8 <mem_manage_fault+0x104>)
    1c42:	2145      	movs	r1, #69	; 0x45
    1c44:	f005 fcbb 	bl	75be <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1c48:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1c4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1c4c:	0618      	lsls	r0, r3, #24
    1c4e:	d5cd      	bpl.n	1bec <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1c50:	481a      	ldr	r0, [pc, #104]	; (1cbc <mem_manage_fault+0x108>)
    1c52:	463a      	mov	r2, r7
    1c54:	2145      	movs	r1, #69	; 0x45
    1c56:	f005 fcb2 	bl	75be <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1c5a:	2d00      	cmp	r5, #0
    1c5c:	d0c8      	beq.n	1bf0 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1c64:	62a3      	str	r3, [r4, #40]	; 0x28
    1c66:	e7c3      	b.n	1bf0 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1c68:	686b      	ldr	r3, [r5, #4]
    1c6a:	0518      	lsls	r0, r3, #20
    1c6c:	d5d6      	bpl.n	1c1c <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1c6e:	4641      	mov	r1, r8
    1c70:	4638      	mov	r0, r7
    1c72:	f7ff ff45 	bl	1b00 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1c76:	4604      	mov	r4, r0
    1c78:	b118      	cbz	r0, 1c82 <mem_manage_fault+0xce>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1c7a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1c7e:	2402      	movs	r4, #2
    1c80:	e7cd      	b.n	1c1e <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1c82:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1c84:	06d9      	lsls	r1, r3, #27
    1c86:	d5c9      	bpl.n	1c1c <mem_manage_fault+0x68>
    1c88:	490d      	ldr	r1, [pc, #52]	; (1cc0 <mem_manage_fault+0x10c>)
    1c8a:	480e      	ldr	r0, [pc, #56]	; (1cc4 <mem_manage_fault+0x110>)
    1c8c:	f240 1249 	movw	r2, #329	; 0x149
    1c90:	f005 fc87 	bl	75a2 <assert_print>
    1c94:	480a      	ldr	r0, [pc, #40]	; (1cc0 <mem_manage_fault+0x10c>)
    1c96:	f240 1149 	movw	r1, #329	; 0x149
    1c9a:	f005 fc7b 	bl	7594 <assert_post_action>
    1c9e:	e7be      	b.n	1c1e <mem_manage_fault+0x6a>
    1ca0:	e000ed00 	.word	0xe000ed00
    1ca4:	0000863e 	.word	0x0000863e
    1ca8:	00008659 	.word	0x00008659
    1cac:	00008691 	.word	0x00008691
    1cb0:	000086e1 	.word	0x000086e1
    1cb4:	00008705 	.word	0x00008705
    1cb8:	000086a9 	.word	0x000086a9
    1cbc:	000086c6 	.word	0x000086c6
    1cc0:	00008739 	.word	0x00008739
    1cc4:	00008378 	.word	0x00008378

00001cc8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1cc8:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1cca:	4c1d      	ldr	r4, [pc, #116]	; (1d40 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1ccc:	481d      	ldr	r0, [pc, #116]	; (1d44 <usage_fault.constprop.0+0x7c>)
    1cce:	2145      	movs	r1, #69	; 0x45
    1cd0:	f005 fc75 	bl	75be <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1cd6:	019b      	lsls	r3, r3, #6
    1cd8:	d503      	bpl.n	1ce2 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1cda:	481b      	ldr	r0, [pc, #108]	; (1d48 <usage_fault.constprop.0+0x80>)
    1cdc:	2145      	movs	r1, #69	; 0x45
    1cde:	f005 fc6e 	bl	75be <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1ce2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ce4:	01dc      	lsls	r4, r3, #7
    1ce6:	d503      	bpl.n	1cf0 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1ce8:	4818      	ldr	r0, [pc, #96]	; (1d4c <usage_fault.constprop.0+0x84>)
    1cea:	2145      	movs	r1, #69	; 0x45
    1cec:	f005 fc67 	bl	75be <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1cf0:	4c13      	ldr	r4, [pc, #76]	; (1d40 <usage_fault.constprop.0+0x78>)
    1cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1cf4:	0318      	lsls	r0, r3, #12
    1cf6:	d503      	bpl.n	1d00 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    1cf8:	4815      	ldr	r0, [pc, #84]	; (1d50 <usage_fault.constprop.0+0x88>)
    1cfa:	2145      	movs	r1, #69	; 0x45
    1cfc:	f005 fc5f 	bl	75be <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d02:	0359      	lsls	r1, r3, #13
    1d04:	d503      	bpl.n	1d0e <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1d06:	4813      	ldr	r0, [pc, #76]	; (1d54 <usage_fault.constprop.0+0x8c>)
    1d08:	2145      	movs	r1, #69	; 0x45
    1d0a:	f005 fc58 	bl	75be <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d0e:	4c0c      	ldr	r4, [pc, #48]	; (1d40 <usage_fault.constprop.0+0x78>)
    1d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d12:	039a      	lsls	r2, r3, #14
    1d14:	d503      	bpl.n	1d1e <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1d16:	4810      	ldr	r0, [pc, #64]	; (1d58 <usage_fault.constprop.0+0x90>)
    1d18:	2145      	movs	r1, #69	; 0x45
    1d1a:	f005 fc50 	bl	75be <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d20:	03db      	lsls	r3, r3, #15
    1d22:	d503      	bpl.n	1d2c <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1d24:	480d      	ldr	r0, [pc, #52]	; (1d5c <usage_fault.constprop.0+0x94>)
    1d26:	2145      	movs	r1, #69	; 0x45
    1d28:	f005 fc49 	bl	75be <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d2c:	4a04      	ldr	r2, [pc, #16]	; (1d40 <usage_fault.constprop.0+0x78>)
    1d2e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d30:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1d34:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1d38:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1d3a:	2000      	movs	r0, #0
    1d3c:	bd10      	pop	{r4, pc}
    1d3e:	bf00      	nop
    1d40:	e000ed00 	.word	0xe000ed00
    1d44:	00008773 	.word	0x00008773
    1d48:	00008790 	.word	0x00008790
    1d4c:	000087a8 	.word	0x000087a8
    1d50:	000087c7 	.word	0x000087c7
    1d54:	000087ea 	.word	0x000087ea
    1d58:	00008814 	.word	0x00008814
    1d5c:	00008833 	.word	0x00008833

00001d60 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1d60:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1d62:	4c23      	ldr	r4, [pc, #140]	; (1df0 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1d64:	4606      	mov	r6, r0
    1d66:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1d68:	4822      	ldr	r0, [pc, #136]	; (1df4 <bus_fault.constprop.0+0x94>)
    1d6a:	2145      	movs	r1, #69	; 0x45
    1d6c:	f005 fc27 	bl	75be <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1d70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d72:	04d9      	lsls	r1, r3, #19
    1d74:	d503      	bpl.n	1d7e <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1d76:	4820      	ldr	r0, [pc, #128]	; (1df8 <bus_fault.constprop.0+0x98>)
    1d78:	2145      	movs	r1, #69	; 0x45
    1d7a:	f005 fc20 	bl	75be <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d80:	051a      	lsls	r2, r3, #20
    1d82:	d503      	bpl.n	1d8c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1d84:	481d      	ldr	r0, [pc, #116]	; (1dfc <bus_fault.constprop.0+0x9c>)
    1d86:	2145      	movs	r1, #69	; 0x45
    1d88:	f005 fc19 	bl	75be <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1d8c:	4c18      	ldr	r4, [pc, #96]	; (1df0 <bus_fault.constprop.0+0x90>)
    1d8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d90:	059b      	lsls	r3, r3, #22
    1d92:	d510      	bpl.n	1db6 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1d94:	481a      	ldr	r0, [pc, #104]	; (1e00 <bus_fault.constprop.0+0xa0>)
    1d96:	2145      	movs	r1, #69	; 0x45
    1d98:	f005 fc11 	bl	75be <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1d9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1da0:	0418      	lsls	r0, r3, #16
    1da2:	d508      	bpl.n	1db6 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1da4:	4817      	ldr	r0, [pc, #92]	; (1e04 <bus_fault.constprop.0+0xa4>)
    1da6:	2145      	movs	r1, #69	; 0x45
    1da8:	f005 fc09 	bl	75be <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1dac:	b11e      	cbz	r6, 1db6 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1dae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1db0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1db4:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1db6:	4c0e      	ldr	r4, [pc, #56]	; (1df0 <bus_fault.constprop.0+0x90>)
    1db8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dba:	0559      	lsls	r1, r3, #21
    1dbc:	d503      	bpl.n	1dc6 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1dbe:	4812      	ldr	r0, [pc, #72]	; (1e08 <bus_fault.constprop.0+0xa8>)
    1dc0:	2145      	movs	r1, #69	; 0x45
    1dc2:	f005 fbfc 	bl	75be <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dc8:	05da      	lsls	r2, r3, #23
    1dca:	d50b      	bpl.n	1de4 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1dcc:	480f      	ldr	r0, [pc, #60]	; (1e0c <bus_fault.constprop.0+0xac>)
    1dce:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1dd0:	f005 fbf5 	bl	75be <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1dd4:	4a06      	ldr	r2, [pc, #24]	; (1df0 <bus_fault.constprop.0+0x90>)
    1dd6:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1dd8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1dda:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1dde:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1de0:	7028      	strb	r0, [r5, #0]
}
    1de2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1de6:	049b      	lsls	r3, r3, #18
    1de8:	d5f4      	bpl.n	1dd4 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1dea:	4809      	ldr	r0, [pc, #36]	; (1e10 <bus_fault.constprop.0+0xb0>)
    1dec:	2145      	movs	r1, #69	; 0x45
    1dee:	e7ef      	b.n	1dd0 <bus_fault.constprop.0+0x70>
    1df0:	e000ed00 	.word	0xe000ed00
    1df4:	00008863 	.word	0x00008863
    1df8:	0000887e 	.word	0x0000887e
    1dfc:	00008691 	.word	0x00008691
    1e00:	00008894 	.word	0x00008894
    1e04:	000088b2 	.word	0x000088b2
    1e08:	000088cc 	.word	0x000088cc
    1e0c:	000088ec 	.word	0x000088ec
    1e10:	00008705 	.word	0x00008705

00001e14 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e18:	4b66      	ldr	r3, [pc, #408]	; (1fb4 <z_arm_fault+0x1a0>)
    1e1a:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    1e1e:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e20:	f3c8 0508 	ubfx	r5, r8, #0, #9
    1e24:	2700      	movs	r7, #0
    1e26:	f387 8811 	msr	BASEPRI, r7
    1e2a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1e2e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1e32:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1e36:	d107      	bne.n	1e48 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1e38:	f002 030c 	and.w	r3, r2, #12
    1e3c:	2b08      	cmp	r3, #8
    1e3e:	d110      	bne.n	1e62 <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1e40:	485d      	ldr	r0, [pc, #372]	; (1fb8 <z_arm_fault+0x1a4>)
    1e42:	2145      	movs	r1, #69	; 0x45
    1e44:	f005 fbbb 	bl	75be <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1e48:	495c      	ldr	r1, [pc, #368]	; (1fbc <z_arm_fault+0x1a8>)
    1e4a:	485d      	ldr	r0, [pc, #372]	; (1fc0 <z_arm_fault+0x1ac>)
    1e4c:	f240 32fb 	movw	r2, #1019	; 0x3fb
    1e50:	f005 fba7 	bl	75a2 <assert_print>
    1e54:	4859      	ldr	r0, [pc, #356]	; (1fbc <z_arm_fault+0x1a8>)
    1e56:	f240 31fb 	movw	r1, #1019	; 0x3fb
    1e5a:	f005 fb9b 	bl	7594 <assert_post_action>
    1e5e:	2600      	movs	r6, #0
    1e60:	e006      	b.n	1e70 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1e62:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1e64:	bf4e      	itee	mi
    1e66:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
    1e68:	4606      	movpl	r6, r0
			*nested_exc = true;
    1e6a:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    1e6c:	2e00      	cmp	r6, #0
    1e6e:	d0eb      	beq.n	1e48 <z_arm_fault+0x34>
	*recoverable = false;
    1e70:	2400      	movs	r4, #0
	switch (fault) {
    1e72:	1eeb      	subs	r3, r5, #3
	*recoverable = false;
    1e74:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    1e78:	2b09      	cmp	r3, #9
    1e7a:	f200 8088 	bhi.w	1f8e <z_arm_fault+0x17a>
    1e7e:	e8df f003 	tbb	[pc, r3]
    1e82:	7b05      	.short	0x7b05
    1e84:	8686637f 	.word	0x8686637f
    1e88:	83868686 	.word	0x83868686
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1e8c:	4d49      	ldr	r5, [pc, #292]	; (1fb4 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    1e8e:	484d      	ldr	r0, [pc, #308]	; (1fc4 <z_arm_fault+0x1b0>)
    1e90:	2145      	movs	r1, #69	; 0x45
    1e92:	f005 fb94 	bl	75be <z_log_minimal_printk>
	*recoverable = false;
    1e96:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1e9a:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    1e9c:	f014 0402 	ands.w	r4, r4, #2
    1ea0:	d005      	beq.n	1eae <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    1ea2:	4849      	ldr	r0, [pc, #292]	; (1fc8 <z_arm_fault+0x1b4>)
    1ea4:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    1ea6:	f005 fb8a 	bl	75be <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1eaa:	2400      	movs	r4, #0
}
    1eac:	e006      	b.n	1ebc <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1eae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	da1d      	bge.n	1ef0 <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
    1eb4:	4845      	ldr	r0, [pc, #276]	; (1fcc <z_arm_fault+0x1b8>)
    1eb6:	2145      	movs	r1, #69	; 0x45
    1eb8:	f005 fb81 	bl	75be <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1ebc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1ec0:	b99b      	cbnz	r3, 1eea <z_arm_fault+0xd6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1ec2:	2220      	movs	r2, #32
    1ec4:	4631      	mov	r1, r6
    1ec6:	a802      	add	r0, sp, #8
    1ec8:	f005 fbb3 	bl	7632 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ece:	2f00      	cmp	r7, #0
    1ed0:	d06a      	beq.n	1fa8 <z_arm_fault+0x194>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1ed6:	b922      	cbnz	r2, 1ee2 <z_arm_fault+0xce>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1ed8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1edc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1ee0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1ee2:	a902      	add	r1, sp, #8
    1ee4:	4620      	mov	r0, r4
    1ee6:	f7ff fce5 	bl	18b4 <z_arm_fatal_error>
}
    1eea:	b00a      	add	sp, #40	; 0x28
    1eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1ef0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1ef2:	005b      	lsls	r3, r3, #1
    1ef4:	d537      	bpl.n	1f66 <z_arm_fault+0x152>
		PR_EXC("  Fault escalation (see below)");
    1ef6:	4836      	ldr	r0, [pc, #216]	; (1fd0 <z_arm_fault+0x1bc>)
    1ef8:	2145      	movs	r1, #69	; 0x45
    1efa:	f005 fb60 	bl	75be <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    1efe:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1f00:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1f04:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1f08:	429a      	cmp	r2, r3
    1f0a:	d106      	bne.n	1f1a <z_arm_fault+0x106>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    1f0c:	6832      	ldr	r2, [r6, #0]
    1f0e:	4831      	ldr	r0, [pc, #196]	; (1fd4 <z_arm_fault+0x1c0>)
    1f10:	2145      	movs	r1, #69	; 0x45
    1f12:	f005 fb54 	bl	75be <z_log_minimal_printk>
			reason = esf->basic.r0;
    1f16:	6834      	ldr	r4, [r6, #0]
    1f18:	e7d0      	b.n	1ebc <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    1f1a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    1f1e:	b13b      	cbz	r3, 1f30 <z_arm_fault+0x11c>
			reason = mem_manage_fault(esf, 1, recoverable);
    1f20:	f10d 0207 	add.w	r2, sp, #7
    1f24:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1f26:	4630      	mov	r0, r6
    1f28:	f7ff fe44 	bl	1bb4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1f2c:	4604      	mov	r4, r0
		break;
    1f2e:	e7c5      	b.n	1ebc <z_arm_fault+0xa8>
		} else if (SCB_BFSR != 0) {
    1f30:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    1f34:	b12b      	cbz	r3, 1f42 <z_arm_fault+0x12e>
			reason = bus_fault(esf, 1, recoverable);
    1f36:	f10d 0107 	add.w	r1, sp, #7
    1f3a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1f3c:	f7ff ff10 	bl	1d60 <bus_fault.constprop.0>
    1f40:	e7f4      	b.n	1f2c <z_arm_fault+0x118>
		} else if (SCB_UFSR != 0) {
    1f42:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    1f44:	b29b      	uxth	r3, r3
    1f46:	b113      	cbz	r3, 1f4e <z_arm_fault+0x13a>
		reason = usage_fault(esf);
    1f48:	f7ff febe 	bl	1cc8 <usage_fault.constprop.0>
    1f4c:	e7ee      	b.n	1f2c <z_arm_fault+0x118>
			__ASSERT(0,
    1f4e:	491b      	ldr	r1, [pc, #108]	; (1fbc <z_arm_fault+0x1a8>)
    1f50:	481b      	ldr	r0, [pc, #108]	; (1fc0 <z_arm_fault+0x1ac>)
    1f52:	f240 22cd 	movw	r2, #717	; 0x2cd
    1f56:	f005 fb24 	bl	75a2 <assert_print>
    1f5a:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    1f5e:	4817      	ldr	r0, [pc, #92]	; (1fbc <z_arm_fault+0x1a8>)
    1f60:	f005 fb18 	bl	7594 <assert_post_action>
    1f64:	e7aa      	b.n	1ebc <z_arm_fault+0xa8>
    1f66:	4915      	ldr	r1, [pc, #84]	; (1fbc <z_arm_fault+0x1a8>)
    1f68:	4815      	ldr	r0, [pc, #84]	; (1fc0 <z_arm_fault+0x1ac>)
    1f6a:	f240 22d1 	movw	r2, #721	; 0x2d1
    1f6e:	f005 fb18 	bl	75a2 <assert_print>
    1f72:	f240 21d1 	movw	r1, #721	; 0x2d1
    1f76:	e7f2      	b.n	1f5e <z_arm_fault+0x14a>
		reason = mem_manage_fault(esf, 0, recoverable);
    1f78:	f10d 0207 	add.w	r2, sp, #7
    1f7c:	2100      	movs	r1, #0
    1f7e:	e7d2      	b.n	1f26 <z_arm_fault+0x112>
		reason = bus_fault(esf, 0, recoverable);
    1f80:	f10d 0107 	add.w	r1, sp, #7
    1f84:	2000      	movs	r0, #0
    1f86:	e7d9      	b.n	1f3c <z_arm_fault+0x128>
	PR_FAULT_INFO(
    1f88:	4813      	ldr	r0, [pc, #76]	; (1fd8 <z_arm_fault+0x1c4>)
    1f8a:	2145      	movs	r1, #69	; 0x45
    1f8c:	e78b      	b.n	1ea6 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
    1f8e:	4913      	ldr	r1, [pc, #76]	; (1fdc <z_arm_fault+0x1c8>)
    1f90:	4a13      	ldr	r2, [pc, #76]	; (1fe0 <z_arm_fault+0x1cc>)
    1f92:	4814      	ldr	r0, [pc, #80]	; (1fe4 <z_arm_fault+0x1d0>)
    1f94:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    1f98:	bf08      	it	eq
    1f9a:	460a      	moveq	r2, r1
    1f9c:	f1a5 0310 	sub.w	r3, r5, #16
    1fa0:	2145      	movs	r1, #69	; 0x45
    1fa2:	f005 fb0c 	bl	75be <z_log_minimal_printk>
    1fa6:	e780      	b.n	1eaa <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1fa8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1fac:	f023 0301 	bic.w	r3, r3, #1
    1fb0:	e796      	b.n	1ee0 <z_arm_fault+0xcc>
    1fb2:	bf00      	nop
    1fb4:	e000ed00 	.word	0xe000ed00
    1fb8:	00008937 	.word	0x00008937
    1fbc:	00008739 	.word	0x00008739
    1fc0:	00008378 	.word	0x00008378
    1fc4:	00008967 	.word	0x00008967
    1fc8:	00008983 	.word	0x00008983
    1fcc:	000089a9 	.word	0x000089a9
    1fd0:	000089bc 	.word	0x000089bc
    1fd4:	000089e0 	.word	0x000089e0
    1fd8:	00008a01 	.word	0x00008a01
    1fdc:	00008909 	.word	0x00008909
    1fe0:	0000891e 	.word	0x0000891e
    1fe4:	00008a2a 	.word	0x00008a2a

00001fe8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1fe8:	4a02      	ldr	r2, [pc, #8]	; (1ff4 <z_arm_fault_init+0xc>)
    1fea:	6953      	ldr	r3, [r2, #20]
    1fec:	f043 0310 	orr.w	r3, r3, #16
    1ff0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1ff2:	4770      	bx	lr
    1ff4:	e000ed00 	.word	0xe000ed00

00001ff8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1ff8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1ffc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2000:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2002:	4672      	mov	r2, lr
	bl z_arm_fault
    2004:	f7ff ff06 	bl	1e14 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2008:	bd01      	pop	{r0, pc}
    200a:	bf00      	nop

0000200c <z_arm_interrupt_init>:
    200c:	4804      	ldr	r0, [pc, #16]	; (2020 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    200e:	2300      	movs	r3, #0
    2010:	2120      	movs	r1, #32
    2012:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2014:	3301      	adds	r3, #1
    2016:	2b30      	cmp	r3, #48	; 0x30
    2018:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    201c:	d1f9      	bne.n	2012 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    201e:	4770      	bx	lr
    2020:	e000e100 	.word	0xe000e100

00002024 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2024:	2000      	movs	r0, #0
    msr CONTROL, r0
    2026:	f380 8814 	msr	CONTROL, r0
    isb
    202a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    202e:	f005 fe53 	bl	7cd8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2032:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2034:	490d      	ldr	r1, [pc, #52]	; (206c <__start+0x48>)
    str r0, [r1]
    2036:	6008      	str	r0, [r1, #0]
    dsb
    2038:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    203c:	480c      	ldr	r0, [pc, #48]	; (2070 <__start+0x4c>)
    msr msp, r0
    203e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2042:	f000 f82b 	bl	209c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2046:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2048:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    204c:	4809      	ldr	r0, [pc, #36]	; (2074 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    204e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2052:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2054:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2058:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    205c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    205e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2060:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2064:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2068:	f7ff fcbe 	bl	19e8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    206c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2070:	20001800 	.word	0x20001800
    ldr r0, =z_interrupt_stacks
    2074:	20001980 	.word	0x20001980

00002078 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2078:	4907      	ldr	r1, [pc, #28]	; (2098 <z_arm_clear_arm_mpu_config+0x20>)
    207a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    207e:	2300      	movs	r3, #0
	int num_regions =
    2080:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2084:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2086:	4293      	cmp	r3, r2
    2088:	d100      	bne.n	208c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    208a:	4770      	bx	lr
  MPU->RNR = rnr;
    208c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2090:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2094:	3301      	adds	r3, #1
    2096:	e7f6      	b.n	2086 <z_arm_clear_arm_mpu_config+0xe>
    2098:	e000ed00 	.word	0xe000ed00

0000209c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    209c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    209e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    20a0:	2300      	movs	r3, #0
    20a2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    20a6:	f7ff ffe7 	bl	2078 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    20aa:	4b14      	ldr	r3, [pc, #80]	; (20fc <z_arm_init_arch_hw_at_boot+0x60>)
    20ac:	f04f 32ff 	mov.w	r2, #4294967295
    20b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    20b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    20b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    20bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    20c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    20c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    20c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    20cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    20d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    20d4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    20d8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    20dc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    20e0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    20e4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    20e8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    20ec:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    20f0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    20f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20f6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    20fa:	bd08      	pop	{r3, pc}
    20fc:	e000e100 	.word	0xe000e100

00002100 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2100:	4b08      	ldr	r3, [pc, #32]	; (2124 <z_impl_k_thread_abort+0x24>)
    2102:	689b      	ldr	r3, [r3, #8]
    2104:	4283      	cmp	r3, r0
    2106:	d10b      	bne.n	2120 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2108:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    210c:	b143      	cbz	r3, 2120 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    210e:	4b06      	ldr	r3, [pc, #24]	; (2128 <z_impl_k_thread_abort+0x28>)
    2110:	685a      	ldr	r2, [r3, #4]
    2112:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2116:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    211a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    211e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2120:	f004 bc4a 	b.w	69b8 <z_thread_abort>
    2124:	20000acc 	.word	0x20000acc
    2128:	e000ed00 	.word	0xe000ed00

0000212c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    212c:	4b02      	ldr	r3, [pc, #8]	; (2138 <z_arm_configure_static_mpu_regions+0xc>)
    212e:	4a03      	ldr	r2, [pc, #12]	; (213c <z_arm_configure_static_mpu_regions+0x10>)
    2130:	4803      	ldr	r0, [pc, #12]	; (2140 <z_arm_configure_static_mpu_regions+0x14>)
    2132:	2101      	movs	r1, #1
    2134:	f000 b87c 	b.w	2230 <arm_core_mpu_configure_static_mpu_regions>
    2138:	20040000 	.word	0x20040000
    213c:	20000000 	.word	0x20000000
    2140:	00008014 	.word	0x00008014

00002144 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2144:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2146:	4b05      	ldr	r3, [pc, #20]	; (215c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2148:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    214a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    214c:	4a04      	ldr	r2, [pc, #16]	; (2160 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    214e:	2120      	movs	r1, #32
    2150:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2154:	4618      	mov	r0, r3
    2156:	2101      	movs	r1, #1
    2158:	f000 b888 	b.w	226c <arm_core_mpu_configure_dynamic_mpu_regions>
    215c:	20000868 	.word	0x20000868
    2160:	150b0000 	.word	0x150b0000

00002164 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2166:	4f24      	ldr	r7, [pc, #144]	; (21f8 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;
    2168:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    216a:	2200      	movs	r2, #0
    216c:	428a      	cmp	r2, r1
    216e:	da0e      	bge.n	218e <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    2170:	6844      	ldr	r4, [r0, #4]
    2172:	2c00      	cmp	r4, #0
    2174:	d03c      	beq.n	21f0 <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2176:	b193      	cbz	r3, 219e <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2178:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    217c:	ea14 0f0c 	tst.w	r4, ip
    2180:	d007      	beq.n	2192 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2182:	481e      	ldr	r0, [pc, #120]	; (21fc <mpu_configure_regions+0x98>)
    2184:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2186:	f005 fa1a 	bl	75be <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    218a:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    218e:	4628      	mov	r0, r5
    2190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2192:	2c1f      	cmp	r4, #31
    2194:	d9f5      	bls.n	2182 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    2196:	6806      	ldr	r6, [r0, #0]
		&&
    2198:	ea1c 0f06 	tst.w	ip, r6
    219c:	d1f1      	bne.n	2182 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    219e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    21a0:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    21a2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    21a6:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
    21a8:	d910      	bls.n	21cc <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
    21aa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    21ae:	d80f      	bhi.n	21d0 <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    21b0:	3c01      	subs	r4, #1
    21b2:	fab4 f484 	clz	r4, r4
    21b6:	f1c4 041f 	rsb	r4, r4, #31
    21ba:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    21bc:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    21be:	ea4c 0404 	orr.w	r4, ip, r4
    21c2:	d907      	bls.n	21d4 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    21c4:	480e      	ldr	r0, [pc, #56]	; (2200 <mpu_configure_regions+0x9c>)
    21c6:	462a      	mov	r2, r5
    21c8:	2145      	movs	r1, #69	; 0x45
    21ca:	e7dc      	b.n	2186 <mpu_configure_regions+0x22>
		return REGION_32B;
    21cc:	2408      	movs	r4, #8
    21ce:	e7f5      	b.n	21bc <mpu_configure_regions+0x58>
		return REGION_4G;
    21d0:	243e      	movs	r4, #62	; 0x3e
    21d2:	e7f3      	b.n	21bc <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    21d4:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    21d8:	432e      	orrs	r6, r5
    21da:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    21de:	f044 0401 	orr.w	r4, r4, #1
    21e2:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    21e6:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
    21ea:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    21ec:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    21f0:	3201      	adds	r2, #1
    21f2:	300c      	adds	r0, #12
    21f4:	e7ba      	b.n	216c <mpu_configure_regions+0x8>
    21f6:	bf00      	nop
    21f8:	e000ed00 	.word	0xe000ed00
    21fc:	00008a46 	.word	0x00008a46
    2200:	00008a6e 	.word	0x00008a6e

00002204 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2204:	4b04      	ldr	r3, [pc, #16]	; (2218 <arm_core_mpu_enable+0x14>)
    2206:	2205      	movs	r2, #5
    2208:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    220c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2210:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2214:	4770      	bx	lr
    2216:	bf00      	nop
    2218:	e000ed00 	.word	0xe000ed00

0000221c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    221c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2220:	4b02      	ldr	r3, [pc, #8]	; (222c <arm_core_mpu_disable+0x10>)
    2222:	2200      	movs	r2, #0
    2224:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2228:	4770      	bx	lr
    222a:	bf00      	nop
    222c:	e000ed00 	.word	0xe000ed00

00002230 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2230:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2232:	4c0b      	ldr	r4, [pc, #44]	; (2260 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2234:	2301      	movs	r3, #1
    2236:	7822      	ldrb	r2, [r4, #0]
    2238:	f7ff ff94 	bl	2164 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    223c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    223e:	3016      	adds	r0, #22
    2240:	d10c      	bne.n	225c <arm_core_mpu_configure_static_mpu_regions+0x2c>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2242:	4908      	ldr	r1, [pc, #32]	; (2264 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    2244:	4808      	ldr	r0, [pc, #32]	; (2268 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    2246:	f240 1211 	movw	r2, #273	; 0x111
    224a:	f005 f9aa 	bl	75a2 <assert_print>
			regions_num);
	}
}
    224e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2252:	4804      	ldr	r0, [pc, #16]	; (2264 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    2254:	f240 1111 	movw	r1, #273	; 0x111
    2258:	f005 b99c 	b.w	7594 <assert_post_action>
}
    225c:	bd10      	pop	{r4, pc}
    225e:	bf00      	nop
    2260:	20000d31 	.word	0x20000d31
    2264:	00008a99 	.word	0x00008a99
    2268:	00008378 	.word	0x00008378

0000226c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    226c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    226e:	4a10      	ldr	r2, [pc, #64]	; (22b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
    2270:	2300      	movs	r3, #0
    2272:	7812      	ldrb	r2, [r2, #0]
    2274:	f7ff ff76 	bl	2164 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2278:	f110 0f16 	cmn.w	r0, #22
    227c:	d00a      	beq.n	2294 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
  MPU->RNR = rnr;
    227e:	4b0d      	ldr	r3, [pc, #52]	; (22b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
    2280:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2282:	2807      	cmp	r0, #7
    2284:	dd00      	ble.n	2288 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2286:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2288:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    228c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2290:	3001      	adds	r0, #1
    2292:	e7f6      	b.n	2282 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2294:	4908      	ldr	r1, [pc, #32]	; (22b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2296:	4809      	ldr	r0, [pc, #36]	; (22bc <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    2298:	f44f 7298 	mov.w	r2, #304	; 0x130
    229c:	f005 f981 	bl	75a2 <assert_print>
}
    22a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    22a4:	4804      	ldr	r0, [pc, #16]	; (22b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    22a6:	f44f 7198 	mov.w	r1, #304	; 0x130
    22aa:	f005 b973 	b.w	7594 <assert_post_action>
    22ae:	bf00      	nop
    22b0:	20000d31 	.word	0x20000d31
    22b4:	e000ed00 	.word	0xe000ed00
    22b8:	00008a99 	.word	0x00008a99
    22bc:	00008378 	.word	0x00008378

000022c0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    22c0:	4922      	ldr	r1, [pc, #136]	; (234c <z_arm_mpu_init+0x8c>)
{
    22c2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    22c4:	680c      	ldr	r4, [r1, #0]
    22c6:	2c08      	cmp	r4, #8
    22c8:	d90d      	bls.n	22e6 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    22ca:	4921      	ldr	r1, [pc, #132]	; (2350 <z_arm_mpu_init+0x90>)
    22cc:	4821      	ldr	r0, [pc, #132]	; (2354 <z_arm_mpu_init+0x94>)
    22ce:	f44f 72a4 	mov.w	r2, #328	; 0x148
    22d2:	f005 f966 	bl	75a2 <assert_print>
    22d6:	481e      	ldr	r0, [pc, #120]	; (2350 <z_arm_mpu_init+0x90>)
    22d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    22dc:	f005 f95a 	bl	7594 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    22e0:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    22e4:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    22e6:	f7ff ff99 	bl	221c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    22ea:	6848      	ldr	r0, [r1, #4]
    22ec:	491a      	ldr	r1, [pc, #104]	; (2358 <z_arm_mpu_init+0x98>)
    22ee:	2200      	movs	r2, #0
    22f0:	4294      	cmp	r4, r2
    22f2:	f100 000c 	add.w	r0, r0, #12
    22f6:	d116      	bne.n	2326 <z_arm_mpu_init+0x66>
	static_regions_num = mpu_config.num_regions;
    22f8:	4b18      	ldr	r3, [pc, #96]	; (235c <z_arm_mpu_init+0x9c>)
    22fa:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    22fc:	f7ff ff82 	bl	2204 <arm_core_mpu_enable>
	__ASSERT(
    2300:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    2304:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2308:	2b08      	cmp	r3, #8
    230a:	d00a      	beq.n	2322 <z_arm_mpu_init+0x62>
    230c:	4910      	ldr	r1, [pc, #64]	; (2350 <z_arm_mpu_init+0x90>)
    230e:	4811      	ldr	r0, [pc, #68]	; (2354 <z_arm_mpu_init+0x94>)
    2310:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
    2314:	f005 f945 	bl	75a2 <assert_print>
    2318:	480d      	ldr	r0, [pc, #52]	; (2350 <z_arm_mpu_init+0x90>)
    231a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    231e:	f005 f939 	bl	7594 <assert_post_action>
	return 0;
    2322:	2000      	movs	r0, #0
    2324:	e7de      	b.n	22e4 <z_arm_mpu_init+0x24>
    2326:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    232a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    232e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2332:	4313      	orrs	r3, r2
    2334:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2338:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    233c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2340:	f043 0301 	orr.w	r3, r3, #1
    2344:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2348:	3201      	adds	r2, #1
    234a:	e7d1      	b.n	22f0 <z_arm_mpu_init+0x30>
    234c:	00008020 	.word	0x00008020
    2350:	00008a99 	.word	0x00008a99
    2354:	00008378 	.word	0x00008378
    2358:	e000ed00 	.word	0xe000ed00
    235c:	20000d31 	.word	0x20000d31

00002360 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2360:	4b01      	ldr	r3, [pc, #4]	; (2368 <__stdout_hook_install+0x8>)
    2362:	6018      	str	r0, [r3, #0]
}
    2364:	4770      	bx	lr
    2366:	bf00      	nop
    2368:	20000028 	.word	0x20000028

0000236c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    236c:	b510      	push	{r4, lr}
	__asm__ volatile(
    236e:	f04f 0320 	mov.w	r3, #32
    2372:	f3ef 8011 	mrs	r0, BASEPRI
    2376:	f383 8812 	msr	BASEPRI_MAX, r3
    237a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    237e:	4a11      	ldr	r2, [pc, #68]	; (23c4 <nordicsemi_nrf52_init+0x58>)
    2380:	2301      	movs	r3, #1
    2382:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    238a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    238e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2392:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    2396:	2c08      	cmp	r4, #8
    2398:	d108      	bne.n	23ac <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    239a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    239e:	2905      	cmp	r1, #5
    23a0:	d804      	bhi.n	23ac <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    23a2:	4c09      	ldr	r4, [pc, #36]	; (23c8 <nordicsemi_nrf52_init+0x5c>)
    23a4:	5c61      	ldrb	r1, [r4, r1]
    23a6:	b109      	cbz	r1, 23ac <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    23a8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    23ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23b0:	2201      	movs	r2, #1
    23b2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    23b6:	f380 8811 	msr	BASEPRI, r0
    23ba:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    23be:	2000      	movs	r0, #0
    23c0:	bd10      	pop	{r4, pc}
    23c2:	bf00      	nop
    23c4:	4001e000 	.word	0x4001e000
    23c8:	00008ae3 	.word	0x00008ae3

000023cc <sys_arch_reboot>:
    *p_gpregret = val;
    23cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23d0:	b2c0      	uxtb	r0, r0
    23d2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    23d6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    23da:	4905      	ldr	r1, [pc, #20]	; (23f0 <sys_arch_reboot+0x24>)
    23dc:	4b05      	ldr	r3, [pc, #20]	; (23f4 <sys_arch_reboot+0x28>)
    23de:	68ca      	ldr	r2, [r1, #12]
    23e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    23e4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    23e6:	60cb      	str	r3, [r1, #12]
    23e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    23ec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    23ee:	e7fd      	b.n	23ec <sys_arch_reboot+0x20>
    23f0:	e000ed00 	.word	0xe000ed00
    23f4:	05fa0004 	.word	0x05fa0004

000023f8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    23f8:	b120      	cbz	r0, 2404 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    23fa:	4b03      	ldr	r3, [pc, #12]	; (2408 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    23fc:	0180      	lsls	r0, r0, #6
    23fe:	f043 0301 	orr.w	r3, r3, #1
    2402:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2404:	4770      	bx	lr
    2406:	bf00      	nop
    2408:	00007fc0 	.word	0x00007fc0

0000240c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    240c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    240e:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2410:	490a      	ldr	r1, [pc, #40]	; (243c <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2412:	4a0b      	ldr	r2, [pc, #44]	; (2440 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    2414:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2416:	2340      	movs	r3, #64	; 0x40
    2418:	9300      	str	r3, [sp, #0]
    241a:	1149      	asrs	r1, r1, #5
{
    241c:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    241e:	4623      	mov	r3, r4
    2420:	4808      	ldr	r0, [pc, #32]	; (2444 <onoff_start+0x38>)
    2422:	f005 f942 	bl	76aa <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2426:	1e01      	subs	r1, r0, #0
    2428:	da05      	bge.n	2436 <onoff_start+0x2a>
		notify(mgr, err);
    242a:	4628      	mov	r0, r5
    242c:	4623      	mov	r3, r4
	}
}
    242e:	b003      	add	sp, #12
    2430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    2434:	4718      	bx	r3
}
    2436:	b003      	add	sp, #12
    2438:	bd30      	pop	{r4, r5, pc}
    243a:	bf00      	nop
    243c:	20000884 	.word	0x20000884
    2440:	00007719 	.word	0x00007719
    2444:	00007d44 	.word	0x00007d44

00002448 <get_status>:
{
    2448:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    244a:	b2cc      	uxtb	r4, r1
    244c:	2c01      	cmp	r4, #1
{
    244e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2450:	d908      	bls.n	2464 <get_status+0x1c>
    2452:	4908      	ldr	r1, [pc, #32]	; (2474 <get_status+0x2c>)
    2454:	4808      	ldr	r0, [pc, #32]	; (2478 <get_status+0x30>)
    2456:	2279      	movs	r2, #121	; 0x79
    2458:	f005 f8a3 	bl	75a2 <assert_print>
    245c:	4805      	ldr	r0, [pc, #20]	; (2474 <get_status+0x2c>)
    245e:	2179      	movs	r1, #121	; 0x79
    2460:	f005 f898 	bl	7594 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2464:	6929      	ldr	r1, [r5, #16]
    2466:	230c      	movs	r3, #12
    2468:	fb04 1403 	mla	r4, r4, r3, r1
    246c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    246e:	f000 0007 	and.w	r0, r0, #7
    2472:	bd38      	pop	{r3, r4, r5, pc}
    2474:	00008ae9 	.word	0x00008ae9
    2478:	00008378 	.word	0x00008378

0000247c <stop>:
{
    247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    247e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2480:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    2482:	6906      	ldr	r6, [r0, #16]
{
    2484:	4605      	mov	r5, r0
    2486:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2488:	d90a      	bls.n	24a0 <stop+0x24>
    248a:	4918      	ldr	r1, [pc, #96]	; (24ec <stop+0x70>)
    248c:	4818      	ldr	r0, [pc, #96]	; (24f0 <stop+0x74>)
    248e:	f240 124d 	movw	r2, #333	; 0x14d
    2492:	f005 f886 	bl	75a2 <assert_print>
    2496:	4815      	ldr	r0, [pc, #84]	; (24ec <stop+0x70>)
    2498:	f240 114d 	movw	r1, #333	; 0x14d
    249c:	f005 f87a 	bl	7594 <assert_post_action>
	__asm__ volatile(
    24a0:	f04f 0320 	mov.w	r3, #32
    24a4:	f3ef 8111 	mrs	r1, BASEPRI
    24a8:	f383 8812 	msr	BASEPRI_MAX, r3
    24ac:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    24b0:	220c      	movs	r2, #12
    24b2:	fb02 6304 	mla	r3, r2, r4, r6
    24b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    24b8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    24bc:	d001      	beq.n	24c2 <stop+0x46>
    24be:	429f      	cmp	r7, r3
    24c0:	d111      	bne.n	24e6 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    24c2:	fb02 6604 	mla	r6, r2, r4, r6
    24c6:	2301      	movs	r3, #1
    24c8:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    24ca:	2000      	movs	r0, #0
	__asm__ volatile(
    24cc:	f381 8811 	msr	BASEPRI, r1
    24d0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    24d4:	b930      	cbnz	r0, 24e4 <stop+0x68>
	get_sub_config(dev, type)->stop();
    24d6:	6869      	ldr	r1, [r5, #4]
    24d8:	230c      	movs	r3, #12
    24da:	fb03 1404 	mla	r4, r3, r4, r1
    24de:	6863      	ldr	r3, [r4, #4]
    24e0:	4798      	blx	r3
	return 0;
    24e2:	2000      	movs	r0, #0
}
    24e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    24e6:	f04f 30ff 	mov.w	r0, #4294967295
    24ea:	e7ef      	b.n	24cc <stop+0x50>
    24ec:	00008ae9 	.word	0x00008ae9
    24f0:	00008378 	.word	0x00008378

000024f4 <onoff_stop>:
{
    24f4:	b570      	push	{r4, r5, r6, lr}
    24f6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    24f8:	4906      	ldr	r1, [pc, #24]	; (2514 <onoff_stop+0x20>)
    24fa:	1a41      	subs	r1, r0, r1
{
    24fc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    24fe:	1149      	asrs	r1, r1, #5
    2500:	4805      	ldr	r0, [pc, #20]	; (2518 <onoff_stop+0x24>)
    2502:	2240      	movs	r2, #64	; 0x40
    2504:	f7ff ffba 	bl	247c <stop>
	notify(mgr, res);
    2508:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    250a:	4601      	mov	r1, r0
	notify(mgr, res);
    250c:	4620      	mov	r0, r4
}
    250e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2512:	4718      	bx	r3
    2514:	20000884 	.word	0x20000884
    2518:	00007d44 	.word	0x00007d44

0000251c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    251c:	2200      	movs	r2, #0
{
    251e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2520:	2101      	movs	r1, #1
{
    2522:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2524:	4610      	mov	r0, r2
    2526:	f7ff fa25 	bl	1974 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    252a:	480f      	ldr	r0, [pc, #60]	; (2568 <clk_init+0x4c>)
    252c:	f002 f900 	bl	4730 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2530:	4b0e      	ldr	r3, [pc, #56]	; (256c <clk_init+0x50>)
    2532:	4298      	cmp	r0, r3
    2534:	d115      	bne.n	2562 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2536:	f002 f91d 	bl	4774 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    253a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    253c:	490c      	ldr	r1, [pc, #48]	; (2570 <clk_init+0x54>)
    253e:	4630      	mov	r0, r6
    2540:	f004 ffaf 	bl	74a2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2544:	2800      	cmp	r0, #0
    2546:	db0b      	blt.n	2560 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    2548:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    254a:	4909      	ldr	r1, [pc, #36]	; (2570 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    254c:	2501      	movs	r5, #1
    254e:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2550:	f104 0020 	add.w	r0, r4, #32
    2554:	f004 ffa5 	bl	74a2 <onoff_manager_init>
		if (err < 0) {
    2558:	2800      	cmp	r0, #0
    255a:	db01      	blt.n	2560 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    255c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    255e:	2000      	movs	r0, #0
}
    2560:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2562:	f06f 0004 	mvn.w	r0, #4
    2566:	e7fb      	b.n	2560 <clk_init+0x44>
    2568:	000025a9 	.word	0x000025a9
    256c:	0bad0000 	.word	0x0bad0000
    2570:	00008070 	.word	0x00008070

00002574 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2574:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2576:	230c      	movs	r3, #12
    2578:	4809      	ldr	r0, [pc, #36]	; (25a0 <clkstarted_handle.constprop.0+0x2c>)
    257a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    257c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    257e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2580:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    2584:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2586:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2588:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    258a:	4418      	add	r0, r3
    258c:	f005 f87a 	bl	7684 <set_on_state>
	if (callback) {
    2590:	b12d      	cbz	r5, 259e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2592:	4632      	mov	r2, r6
    2594:	462b      	mov	r3, r5
    2596:	4803      	ldr	r0, [pc, #12]	; (25a4 <clkstarted_handle.constprop.0+0x30>)
}
    2598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    259c:	4718      	bx	r3
}
    259e:	bd70      	pop	{r4, r5, r6, pc}
    25a0:	20000884 	.word	0x20000884
    25a4:	00007d44 	.word	0x00007d44

000025a8 <clock_event_handler>:
	switch (event) {
    25a8:	2801      	cmp	r0, #1
{
    25aa:	b508      	push	{r3, lr}
	switch (event) {
    25ac:	d006      	beq.n	25bc <clock_event_handler+0x14>
    25ae:	2803      	cmp	r0, #3
    25b0:	d008      	beq.n	25c4 <clock_event_handler+0x1c>
    25b2:	b9a0      	cbnz	r0, 25de <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    25b4:	4b0f      	ldr	r3, [pc, #60]	; (25f4 <clock_event_handler+0x4c>)
    25b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    25b8:	075b      	lsls	r3, r3, #29
    25ba:	d119      	bne.n	25f0 <clock_event_handler+0x48>
}
    25bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    25c0:	f7ff bfd8 	b.w	2574 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    25c4:	490c      	ldr	r1, [pc, #48]	; (25f8 <clock_event_handler+0x50>)
    25c6:	480d      	ldr	r0, [pc, #52]	; (25fc <clock_event_handler+0x54>)
    25c8:	f240 225e 	movw	r2, #606	; 0x25e
    25cc:	f004 ffe9 	bl	75a2 <assert_print>
    25d0:	f240 215e 	movw	r1, #606	; 0x25e
}
    25d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    25d8:	4807      	ldr	r0, [pc, #28]	; (25f8 <clock_event_handler+0x50>)
    25da:	f004 bfdb 	b.w	7594 <assert_post_action>
    25de:	4906      	ldr	r1, [pc, #24]	; (25f8 <clock_event_handler+0x50>)
    25e0:	4806      	ldr	r0, [pc, #24]	; (25fc <clock_event_handler+0x54>)
    25e2:	f240 2262 	movw	r2, #610	; 0x262
    25e6:	f004 ffdc 	bl	75a2 <assert_print>
    25ea:	f240 2162 	movw	r1, #610	; 0x262
    25ee:	e7f1      	b.n	25d4 <clock_event_handler+0x2c>
}
    25f0:	bd08      	pop	{r3, pc}
    25f2:	bf00      	nop
    25f4:	20000884 	.word	0x20000884
    25f8:	00008ae9 	.word	0x00008ae9
    25fc:	00008378 	.word	0x00008378

00002600 <generic_hfclk_start>:
{
    2600:	b508      	push	{r3, lr}
	__asm__ volatile(
    2602:	f04f 0320 	mov.w	r3, #32
    2606:	f3ef 8111 	mrs	r1, BASEPRI
    260a:	f383 8812 	msr	BASEPRI_MAX, r3
    260e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2612:	4a12      	ldr	r2, [pc, #72]	; (265c <generic_hfclk_start+0x5c>)
    2614:	6813      	ldr	r3, [r2, #0]
    2616:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    261a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    261e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2620:	d00c      	beq.n	263c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2626:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    262a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    262e:	f013 0301 	ands.w	r3, r3, #1
    2632:	d003      	beq.n	263c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2634:	480a      	ldr	r0, [pc, #40]	; (2660 <generic_hfclk_start+0x60>)
    2636:	f005 f825 	bl	7684 <set_on_state>
			already_started = true;
    263a:	2301      	movs	r3, #1
	__asm__ volatile(
    263c:	f381 8811 	msr	BASEPRI, r1
    2640:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2644:	b123      	cbz	r3, 2650 <generic_hfclk_start+0x50>
}
    2646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    264a:	2000      	movs	r0, #0
    264c:	f7ff bf92 	b.w	2574 <clkstarted_handle.constprop.0>
}
    2650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2654:	2001      	movs	r0, #1
    2656:	f002 b8af 	b.w	47b8 <nrfx_clock_start>
    265a:	bf00      	nop
    265c:	200008dc 	.word	0x200008dc
    2660:	200008cc 	.word	0x200008cc

00002664 <api_blocking_start>:
{
    2664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2666:	2200      	movs	r2, #0
    2668:	2301      	movs	r3, #1
    266a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    266e:	4a09      	ldr	r2, [pc, #36]	; (2694 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2670:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2674:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2676:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    267a:	f005 f846 	bl	770a <api_start>
	if (err < 0) {
    267e:	2800      	cmp	r0, #0
    2680:	db05      	blt.n	268e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2686:	2300      	movs	r3, #0
    2688:	4668      	mov	r0, sp
    268a:	f003 fa7f 	bl	5b8c <z_impl_k_sem_take>
}
    268e:	b005      	add	sp, #20
    2690:	f85d fb04 	ldr.w	pc, [sp], #4
    2694:	00007737 	.word	0x00007737

00002698 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2698:	4b09      	ldr	r3, [pc, #36]	; (26c0 <generic_hfclk_stop+0x28>)
    269a:	f3bf 8f5b 	dmb	ish
    269e:	e853 2f00 	ldrex	r2, [r3]
    26a2:	f022 0102 	bic.w	r1, r2, #2
    26a6:	e843 1000 	strex	r0, r1, [r3]
    26aa:	2800      	cmp	r0, #0
    26ac:	d1f7      	bne.n	269e <generic_hfclk_stop+0x6>
    26ae:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    26b2:	07d3      	lsls	r3, r2, #31
    26b4:	d402      	bmi.n	26bc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    26b6:	2001      	movs	r0, #1
    26b8:	f002 b8dc 	b.w	4874 <nrfx_clock_stop>
}
    26bc:	4770      	bx	lr
    26be:	bf00      	nop
    26c0:	200008dc 	.word	0x200008dc

000026c4 <z_nrf_clock_control_get_onoff>:
}
    26c4:	4b02      	ldr	r3, [pc, #8]	; (26d0 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    26c6:	b2c0      	uxtb	r0, r0
}
    26c8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    26cc:	4770      	bx	lr
    26ce:	bf00      	nop
    26d0:	20000884 	.word	0x20000884

000026d4 <z_nrf_clock_control_lf_on>:
{
    26d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    26d8:	4946      	ldr	r1, [pc, #280]	; (27f4 <z_nrf_clock_control_lf_on+0x120>)
    26da:	f3bf 8f5b 	dmb	ish
    26de:	4606      	mov	r6, r0
    26e0:	2201      	movs	r2, #1
    26e2:	e851 3f00 	ldrex	r3, [r1]
    26e6:	e841 2000 	strex	r0, r2, [r1]
    26ea:	2800      	cmp	r0, #0
    26ec:	d1f9      	bne.n	26e2 <z_nrf_clock_control_lf_on+0xe>
    26ee:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    26f2:	b99b      	cbnz	r3, 271c <z_nrf_clock_control_lf_on+0x48>
	*notify = (struct sys_notify){
    26f4:	4940      	ldr	r1, [pc, #256]	; (27f8 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
    26f6:	4841      	ldr	r0, [pc, #260]	; (27fc <z_nrf_clock_control_lf_on+0x128>)
    26f8:	604b      	str	r3, [r1, #4]
    26fa:	60cb      	str	r3, [r1, #12]
    26fc:	608a      	str	r2, [r1, #8]
    26fe:	f7fe fa15 	bl	b2c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2702:	2800      	cmp	r0, #0
    2704:	da0a      	bge.n	271c <z_nrf_clock_control_lf_on+0x48>
    2706:	493e      	ldr	r1, [pc, #248]	; (2800 <z_nrf_clock_control_lf_on+0x12c>)
    2708:	483e      	ldr	r0, [pc, #248]	; (2804 <z_nrf_clock_control_lf_on+0x130>)
    270a:	f44f 7208 	mov.w	r2, #544	; 0x220
    270e:	f004 ff48 	bl	75a2 <assert_print>
    2712:	483b      	ldr	r0, [pc, #236]	; (2800 <z_nrf_clock_control_lf_on+0x12c>)
    2714:	f44f 7108 	mov.w	r1, #544	; 0x220
    2718:	f004 ff3c 	bl	7594 <assert_post_action>
	switch (start_mode) {
    271c:	b396      	cbz	r6, 2784 <z_nrf_clock_control_lf_on+0xb0>
    271e:	1e73      	subs	r3, r6, #1
    2720:	2b01      	cmp	r3, #1
    2722:	d853      	bhi.n	27cc <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2724:	2e01      	cmp	r6, #1
    2726:	d107      	bne.n	2738 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    272c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2730:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2734:	2b01      	cmp	r3, #1
    2736:	d025      	beq.n	2784 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2738:	f005 fa8b 	bl	7c52 <k_is_in_isr>
    273c:	4604      	mov	r4, r0
    273e:	b918      	cbnz	r0, 2748 <z_nrf_clock_control_lf_on+0x74>
	return !z_sys_post_kernel;
    2740:	4b31      	ldr	r3, [pc, #196]	; (2808 <z_nrf_clock_control_lf_on+0x134>)
	int key = isr_mode ? irq_lock() : 0;
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	2b00      	cmp	r3, #0
    2746:	d14e      	bne.n	27e6 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
    2748:	f04f 0320 	mov.w	r3, #32
    274c:	f3ef 8711 	mrs	r7, BASEPRI
    2750:	f383 8812 	msr	BASEPRI_MAX, r3
    2754:	f3bf 8f6f 	isb	sy
    2758:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    275a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 280c <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    275e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2762:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2766:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    276a:	03d2      	lsls	r2, r2, #15
    276c:	d50c      	bpl.n	2788 <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    276e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2772:	2b01      	cmp	r3, #1
    2774:	d001      	beq.n	277a <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2776:	2e01      	cmp	r6, #1
    2778:	d106      	bne.n	2788 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
    277a:	b30c      	cbz	r4, 27c0 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
    277c:	f387 8811 	msr	BASEPRI, r7
    2780:	f3bf 8f6f 	isb	sy
}
    2784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2788:	b1ac      	cbz	r4, 27b6 <z_nrf_clock_control_lf_on+0xe2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    278a:	4638      	mov	r0, r7
    278c:	f7ff f888 	bl	18a0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2790:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2794:	2b00      	cmp	r3, #0
    2796:	d1e4      	bne.n	2762 <z_nrf_clock_control_lf_on+0x8e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2798:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    279c:	2a00      	cmp	r2, #0
    279e:	d0e0      	beq.n	2762 <z_nrf_clock_control_lf_on+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27a0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    27a4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    27a8:	2301      	movs	r3, #1
    27aa:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    27ae:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27b2:	60ab      	str	r3, [r5, #8]
}
    27b4:	e7d5      	b.n	2762 <z_nrf_clock_control_lf_on+0x8e>
	return z_impl_k_sleep(timeout);
    27b6:	2100      	movs	r1, #0
    27b8:	2021      	movs	r0, #33	; 0x21
    27ba:	f004 f8c7 	bl	694c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    27be:	e7e7      	b.n	2790 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
    27c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27c4:	2202      	movs	r2, #2
    27c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    27ca:	e7db      	b.n	2784 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
    27cc:	490c      	ldr	r1, [pc, #48]	; (2800 <z_nrf_clock_control_lf_on+0x12c>)
    27ce:	480d      	ldr	r0, [pc, #52]	; (2804 <z_nrf_clock_control_lf_on+0x130>)
    27d0:	f240 2232 	movw	r2, #562	; 0x232
    27d4:	f004 fee5 	bl	75a2 <assert_print>
}
    27d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    27dc:	4808      	ldr	r0, [pc, #32]	; (2800 <z_nrf_clock_control_lf_on+0x12c>)
    27de:	f240 2132 	movw	r1, #562	; 0x232
    27e2:	f004 bed7 	b.w	7594 <assert_post_action>
    p_reg->INTENCLR = mask;
    27e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27ea:	2202      	movs	r2, #2
    27ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    27f0:	4607      	mov	r7, r0
}
    27f2:	e7b2      	b.n	275a <z_nrf_clock_control_lf_on+0x86>
    27f4:	200008e0 	.word	0x200008e0
    27f8:	20000874 	.word	0x20000874
    27fc:	200008a4 	.word	0x200008a4
    2800:	00008ae9 	.word	0x00008ae9
    2804:	00008378 	.word	0x00008378
    2808:	200013e4 	.word	0x200013e4
    280c:	e000e100 	.word	0xe000e100

00002810 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2810:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2812:	4b08      	ldr	r3, [pc, #32]	; (2834 <uart_console_init+0x24>)
    2814:	4808      	ldr	r0, [pc, #32]	; (2838 <uart_console_init+0x28>)
    2816:	6018      	str	r0, [r3, #0]
    2818:	f005 f9f1 	bl	7bfe <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    281c:	b138      	cbz	r0, 282e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    281e:	4807      	ldr	r0, [pc, #28]	; (283c <uart_console_init+0x2c>)
    2820:	f7ff fd9e 	bl	2360 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2824:	4805      	ldr	r0, [pc, #20]	; (283c <uart_console_init+0x2c>)
    2826:	f7fd ff8d 	bl	744 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    282a:	2000      	movs	r0, #0
}
    282c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    282e:	f06f 0012 	mvn.w	r0, #18
    2832:	e7fb      	b.n	282c <uart_console_init+0x1c>
    2834:	200008e4 	.word	0x200008e4
    2838:	00007da4 	.word	0x00007da4
    283c:	00002841 	.word	0x00002841

00002840 <console_out>:
	if ('\n' == c) {
    2840:	280a      	cmp	r0, #10
{
    2842:	b538      	push	{r3, r4, r5, lr}
    2844:	4d07      	ldr	r5, [pc, #28]	; (2864 <console_out+0x24>)
    2846:	4604      	mov	r4, r0
	if ('\n' == c) {
    2848:	d104      	bne.n	2854 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    284a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    284c:	6883      	ldr	r3, [r0, #8]
    284e:	210d      	movs	r1, #13
    2850:	685b      	ldr	r3, [r3, #4]
    2852:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2854:	6828      	ldr	r0, [r5, #0]
    2856:	6883      	ldr	r3, [r0, #8]
    2858:	b2e1      	uxtb	r1, r4
    285a:	685b      	ldr	r3, [r3, #4]
    285c:	4798      	blx	r3
}
    285e:	4620      	mov	r0, r4
    2860:	bd38      	pop	{r3, r4, r5, pc}
    2862:	bf00      	nop
    2864:	200008e4 	.word	0x200008e4

00002868 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2868:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    286a:	6905      	ldr	r5, [r0, #16]
{
    286c:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    286e:	460c      	mov	r4, r1
    2870:	b941      	cbnz	r1, 2884 <gpio_nrfx_manage_callback+0x1c>
    2872:	491e      	ldr	r1, [pc, #120]	; (28ec <gpio_nrfx_manage_callback+0x84>)
    2874:	481e      	ldr	r0, [pc, #120]	; (28f0 <gpio_nrfx_manage_callback+0x88>)
    2876:	2224      	movs	r2, #36	; 0x24
    2878:	f004 fe93 	bl	75a2 <assert_print>
    287c:	481b      	ldr	r0, [pc, #108]	; (28ec <gpio_nrfx_manage_callback+0x84>)
    287e:	2124      	movs	r1, #36	; 0x24
    2880:	f004 fe88 	bl	7594 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2884:	6863      	ldr	r3, [r4, #4]
    2886:	b943      	cbnz	r3, 289a <gpio_nrfx_manage_callback+0x32>
    2888:	4918      	ldr	r1, [pc, #96]	; (28ec <gpio_nrfx_manage_callback+0x84>)
    288a:	4819      	ldr	r0, [pc, #100]	; (28f0 <gpio_nrfx_manage_callback+0x88>)
    288c:	2225      	movs	r2, #37	; 0x25
    288e:	f004 fe88 	bl	75a2 <assert_print>
    2892:	4816      	ldr	r0, [pc, #88]	; (28ec <gpio_nrfx_manage_callback+0x84>)
    2894:	2125      	movs	r1, #37	; 0x25
    2896:	f004 fe7d 	bl	7594 <assert_post_action>
	return list->head;
    289a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    289c:	b15b      	cbz	r3, 28b6 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    289e:	2200      	movs	r2, #0
    28a0:	429c      	cmp	r4, r3
    28a2:	d112      	bne.n	28ca <gpio_nrfx_manage_callback+0x62>
	return node->next;
    28a4:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    28a6:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    28a8:	b952      	cbnz	r2, 28c0 <gpio_nrfx_manage_callback+0x58>
    28aa:	42a1      	cmp	r1, r4
	list->head = node;
    28ac:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    28ae:	d100      	bne.n	28b2 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
    28b0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    28b2:	2300      	movs	r3, #0
    28b4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    28b6:	b96e      	cbnz	r6, 28d4 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    28b8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    28ba:	bd70      	pop	{r4, r5, r6, pc}
    28bc:	460b      	mov	r3, r1
    28be:	e7ef      	b.n	28a0 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
    28c0:	42a1      	cmp	r1, r4
	parent->next = child;
    28c2:	6013      	str	r3, [r2, #0]
	list->tail = node;
    28c4:	bf08      	it	eq
    28c6:	60aa      	streq	r2, [r5, #8]
}
    28c8:	e7f3      	b.n	28b2 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
    28ca:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    28cc:	461a      	mov	r2, r3
    28ce:	2900      	cmp	r1, #0
    28d0:	d1f4      	bne.n	28bc <gpio_nrfx_manage_callback+0x54>
			if (!set) {
    28d2:	b13e      	cbz	r6, 28e4 <gpio_nrfx_manage_callback+0x7c>
Z_GENLIST_PREPEND(slist, snode)
    28d4:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    28d6:	686b      	ldr	r3, [r5, #4]
    28d8:	6023      	str	r3, [r4, #0]
	list->head = node;
    28da:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    28dc:	2800      	cmp	r0, #0
    28de:	d1eb      	bne.n	28b8 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
    28e0:	60ac      	str	r4, [r5, #8]
}
    28e2:	e7ea      	b.n	28ba <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
    28e4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    28e8:	e7e7      	b.n	28ba <gpio_nrfx_manage_callback+0x52>
    28ea:	bf00      	nop
    28ec:	00008b46 	.word	0x00008b46
    28f0:	00008378 	.word	0x00008378

000028f4 <gpio_nrfx_pin_interrupt_configure>:
{
    28f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    28f6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    28f8:	7b05      	ldrb	r5, [r0, #12]
    28fa:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    28fe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2902:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2906:	f04f 0500 	mov.w	r5, #0
    290a:	d104      	bne.n	2916 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    290c:	4620      	mov	r0, r4
    290e:	f002 fac5 	bl	4e9c <nrfx_gpiote_trigger_disable>
	return 0;
    2912:	2000      	movs	r0, #0
    2914:	e052      	b.n	29bc <gpio_nrfx_pin_interrupt_configure+0xc8>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2916:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    291a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    291e:	d14f      	bne.n	29c0 <gpio_nrfx_pin_interrupt_configure+0xcc>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2924:	bf0c      	ite	eq
    2926:	2304      	moveq	r3, #4
    2928:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    292a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    292e:	6883      	ldr	r3, [r0, #8]
    2930:	fa23 f101 	lsr.w	r1, r3, r1
    2934:	f011 0101 	ands.w	r1, r1, #1
    2938:	d153      	bne.n	29e2 <gpio_nrfx_pin_interrupt_configure+0xee>
    293a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    293e:	d150      	bne.n	29e2 <gpio_nrfx_pin_interrupt_configure+0xee>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    2940:	0966      	lsrs	r6, r4, #5
    2942:	d048      	beq.n	29d6 <gpio_nrfx_pin_interrupt_configure+0xe2>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    2944:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2948:	2e01      	cmp	r6, #1
    294a:	bf08      	it	eq
    294c:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    294e:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    2952:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2954:	07ca      	lsls	r2, r1, #31
    2956:	d40a      	bmi.n	296e <gpio_nrfx_pin_interrupt_configure+0x7a>
    2958:	492a      	ldr	r1, [pc, #168]	; (2a04 <gpio_nrfx_pin_interrupt_configure+0x110>)
    295a:	482b      	ldr	r0, [pc, #172]	; (2a08 <gpio_nrfx_pin_interrupt_configure+0x114>)
    295c:	f240 2229 	movw	r2, #553	; 0x229
    2960:	f004 fe1f 	bl	75a2 <assert_print>
    2964:	4827      	ldr	r0, [pc, #156]	; (2a04 <gpio_nrfx_pin_interrupt_configure+0x110>)
    2966:	f240 2129 	movw	r1, #553	; 0x229
    296a:	f004 fe13 	bl	7594 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    296e:	b166      	cbz	r6, 298a <gpio_nrfx_pin_interrupt_configure+0x96>
    2970:	2e01      	cmp	r6, #1
    2972:	d033      	beq.n	29dc <gpio_nrfx_pin_interrupt_configure+0xe8>
            NRFX_ASSERT(0);
    2974:	4923      	ldr	r1, [pc, #140]	; (2a04 <gpio_nrfx_pin_interrupt_configure+0x110>)
    2976:	4824      	ldr	r0, [pc, #144]	; (2a08 <gpio_nrfx_pin_interrupt_configure+0x114>)
    2978:	f240 222e 	movw	r2, #558	; 0x22e
    297c:	f004 fe11 	bl	75a2 <assert_print>
    2980:	4820      	ldr	r0, [pc, #128]	; (2a04 <gpio_nrfx_pin_interrupt_configure+0x110>)
    2982:	f240 212e 	movw	r1, #558	; 0x22e
    2986:	f004 fe05 	bl	7594 <assert_post_action>
        case 0: return NRF_P0;
    298a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    298e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    2992:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2996:	07db      	lsls	r3, r3, #31
    2998:	d423      	bmi.n	29e2 <gpio_nrfx_pin_interrupt_configure+0xee>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    299a:	f10d 0507 	add.w	r5, sp, #7
    299e:	4629      	mov	r1, r5
    29a0:	4620      	mov	r0, r4
    29a2:	f002 f9a7 	bl	4cf4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    29a6:	4b19      	ldr	r3, [pc, #100]	; (2a0c <gpio_nrfx_pin_interrupt_configure+0x118>)
    29a8:	4298      	cmp	r0, r3
    29aa:	d119      	bne.n	29e0 <gpio_nrfx_pin_interrupt_configure+0xec>
			err = nrfx_gpiote_channel_alloc(&ch);
    29ac:	4628      	mov	r0, r5
    29ae:	f002 fa01 	bl	4db4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    29b2:	4b17      	ldr	r3, [pc, #92]	; (2a10 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    29b4:	4298      	cmp	r0, r3
    29b6:	d013      	beq.n	29e0 <gpio_nrfx_pin_interrupt_configure+0xec>
				return -ENOMEM;
    29b8:	f06f 000b 	mvn.w	r0, #11
}
    29bc:	b004      	add	sp, #16
    29be:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    29c0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    29c4:	d005      	beq.n	29d2 <gpio_nrfx_pin_interrupt_configure+0xde>
    29c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    29ca:	bf0c      	ite	eq
    29cc:	2302      	moveq	r3, #2
    29ce:	2301      	movne	r3, #1
    29d0:	e7ab      	b.n	292a <gpio_nrfx_pin_interrupt_configure+0x36>
    29d2:	2303      	movs	r3, #3
    29d4:	e7a9      	b.n	292a <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    29d6:	f04f 31ff 	mov.w	r1, #4294967295
    29da:	e7b8      	b.n	294e <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    29dc:	4b0d      	ldr	r3, [pc, #52]	; (2a14 <gpio_nrfx_pin_interrupt_configure+0x120>)
    29de:	e7d6      	b.n	298e <gpio_nrfx_pin_interrupt_configure+0x9a>
		trigger_config.p_in_channel = &ch;
    29e0:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    29e2:	2300      	movs	r3, #0
    29e4:	4619      	mov	r1, r3
    29e6:	aa02      	add	r2, sp, #8
    29e8:	4620      	mov	r0, r4
    29ea:	f002 f85b 	bl	4aa4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    29ee:	4b08      	ldr	r3, [pc, #32]	; (2a10 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    29f0:	4298      	cmp	r0, r3
    29f2:	d104      	bne.n	29fe <gpio_nrfx_pin_interrupt_configure+0x10a>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    29f4:	2101      	movs	r1, #1
    29f6:	4620      	mov	r0, r4
    29f8:	f002 f9e2 	bl	4dc0 <nrfx_gpiote_trigger_enable>
    29fc:	e789      	b.n	2912 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    29fe:	f06f 0004 	mvn.w	r0, #4
    2a02:	e7db      	b.n	29bc <gpio_nrfx_pin_interrupt_configure+0xc8>
    2a04:	00008b73 	.word	0x00008b73
    2a08:	00008378 	.word	0x00008378
    2a0c:	0bad0004 	.word	0x0bad0004
    2a10:	0bad0000 	.word	0x0bad0000
    2a14:	50000300 	.word	0x50000300

00002a18 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2a18:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2a1a:	f002 f9bb 	bl	4d94 <nrfx_gpiote_is_init>
    2a1e:	4604      	mov	r4, r0
    2a20:	b968      	cbnz	r0, 2a3e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2a22:	f002 f98f 	bl	4d44 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2a26:	4b08      	ldr	r3, [pc, #32]	; (2a48 <gpio_nrfx_init+0x30>)
    2a28:	4298      	cmp	r0, r3
    2a2a:	d10a      	bne.n	2a42 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2a2c:	4807      	ldr	r0, [pc, #28]	; (2a4c <gpio_nrfx_init+0x34>)
    2a2e:	4621      	mov	r1, r4
    2a30:	f002 f95a 	bl	4ce8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2a34:	4622      	mov	r2, r4
    2a36:	2105      	movs	r1, #5
    2a38:	2006      	movs	r0, #6
    2a3a:	f7fe ff9b 	bl	1974 <z_arm_irq_priority_set>
		return 0;
    2a3e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2a40:	bd10      	pop	{r4, pc}
		return -EIO;
    2a42:	f06f 0004 	mvn.w	r0, #4
    2a46:	e7fb      	b.n	2a40 <gpio_nrfx_init+0x28>
    2a48:	0bad0000 	.word	0x0bad0000
    2a4c:	00002a51 	.word	0x00002a51

00002a50 <nrfx_gpio_handler>:
{
    2a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2a54:	0943      	lsrs	r3, r0, #5
    2a56:	d003      	beq.n	2a60 <nrfx_gpio_handler+0x10>
    2a58:	2b01      	cmp	r3, #1
    2a5a:	d028      	beq.n	2aae <nrfx_gpio_handler+0x5e>
}
    2a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2a60:	4f14      	ldr	r7, [pc, #80]	; (2ab4 <nrfx_gpio_handler+0x64>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2a62:	693b      	ldr	r3, [r7, #16]
    2a64:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2a66:	2c00      	cmp	r4, #0
    2a68:	d0f8      	beq.n	2a5c <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2a6a:	f000 001f 	and.w	r0, r0, #31
    2a6e:	2601      	movs	r6, #1
	return node->next;
    2a70:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    2a72:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2ab8 <nrfx_gpio_handler+0x68>
    2a76:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2abc <nrfx_gpio_handler+0x6c>
    2a7a:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    2a7c:	68a3      	ldr	r3, [r4, #8]
    2a7e:	421e      	tst	r6, r3
    2a80:	d010      	beq.n	2aa4 <nrfx_gpio_handler+0x54>
			__ASSERT(cb->handler, "No callback handler!");
    2a82:	6863      	ldr	r3, [r4, #4]
    2a84:	b943      	cbnz	r3, 2a98 <nrfx_gpio_handler+0x48>
    2a86:	4641      	mov	r1, r8
    2a88:	4648      	mov	r0, r9
    2a8a:	2245      	movs	r2, #69	; 0x45
    2a8c:	f004 fd89 	bl	75a2 <assert_print>
    2a90:	2145      	movs	r1, #69	; 0x45
    2a92:	4640      	mov	r0, r8
    2a94:	f004 fd7e 	bl	7594 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2a98:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2a9c:	4621      	mov	r1, r4
    2a9e:	4032      	ands	r2, r6
    2aa0:	4638      	mov	r0, r7
    2aa2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2aa4:	2d00      	cmp	r5, #0
    2aa6:	d0d9      	beq.n	2a5c <nrfx_gpio_handler+0xc>
    2aa8:	462c      	mov	r4, r5
    2aaa:	682d      	ldr	r5, [r5, #0]
    2aac:	e7e6      	b.n	2a7c <nrfx_gpio_handler+0x2c>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2aae:	4f04      	ldr	r7, [pc, #16]	; (2ac0 <nrfx_gpio_handler+0x70>)
    2ab0:	e7d7      	b.n	2a62 <nrfx_gpio_handler+0x12>
    2ab2:	bf00      	nop
    2ab4:	00007d5c 	.word	0x00007d5c
    2ab8:	00008b46 	.word	0x00008b46
    2abc:	00008378 	.word	0x00008378
    2ac0:	00007d74 	.word	0x00007d74

00002ac4 <gpio_nrfx_pin_configure>:
{
    2ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2ac8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2aca:	7b3b      	ldrb	r3, [r7, #12]
    2acc:	f001 051f 	and.w	r5, r1, #31
{
    2ad0:	b085      	sub	sp, #20
    2ad2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2ad4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2ad8:	4614      	mov	r4, r2
    2ada:	b9ca      	cbnz	r2, 2b10 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2adc:	a902      	add	r1, sp, #8
    2ade:	4628      	mov	r0, r5
    2ae0:	f002 f908 	bl	4cf4 <nrfx_gpiote_channel_get>
    2ae4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2ae6:	4628      	mov	r0, r5
    2ae8:	f002 fa02 	bl	4ef0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2aec:	4b4a      	ldr	r3, [pc, #296]	; (2c18 <gpio_nrfx_pin_configure+0x154>)
    2aee:	4298      	cmp	r0, r3
    2af0:	d004      	beq.n	2afc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2af2:	f06f 0004 	mvn.w	r0, #4
}
    2af6:	b005      	add	sp, #20
    2af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2afc:	4284      	cmp	r4, r0
    2afe:	d105      	bne.n	2b0c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2b00:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2b04:	f002 f950 	bl	4da8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2b08:	42a0      	cmp	r0, r4
    2b0a:	d1f2      	bne.n	2af2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2b0c:	2000      	movs	r0, #0
    2b0e:	e7f2      	b.n	2af6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b10:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2b14:	f10d 0103 	add.w	r1, sp, #3
    2b18:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b1a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2b1e:	f002 f8e9 	bl	4cf4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2b22:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2b24:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2b26:	aa02      	add	r2, sp, #8
    2b28:	4649      	mov	r1, r9
    2b2a:	4628      	mov	r0, r5
    2b2c:	f001 ffba 	bl	4aa4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2b30:	4b39      	ldr	r3, [pc, #228]	; (2c18 <gpio_nrfx_pin_configure+0x154>)
    2b32:	4298      	cmp	r0, r3
    2b34:	d002      	beq.n	2b3c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2b36:	f06f 0015 	mvn.w	r0, #21
    2b3a:	e7dc      	b.n	2af6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2b3c:	4580      	cmp	r8, r0
    2b3e:	d103      	bne.n	2b48 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2b40:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2b44:	f002 f930 	bl	4da8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2b48:	03a3      	lsls	r3, r4, #14
    2b4a:	d551      	bpl.n	2bf0 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2b4c:	f240 6306 	movw	r3, #1542	; 0x606
    2b50:	4023      	ands	r3, r4
    2b52:	f240 2206 	movw	r2, #518	; 0x206
    2b56:	4293      	cmp	r3, r2
    2b58:	d03b      	beq.n	2bd2 <gpio_nrfx_pin_configure+0x10e>
    2b5a:	d80c      	bhi.n	2b76 <gpio_nrfx_pin_configure+0xb2>
    2b5c:	2b06      	cmp	r3, #6
    2b5e:	d015      	beq.n	2b8c <gpio_nrfx_pin_configure+0xc8>
    2b60:	d804      	bhi.n	2b6c <gpio_nrfx_pin_configure+0xa8>
    2b62:	b19b      	cbz	r3, 2b8c <gpio_nrfx_pin_configure+0xc8>
    2b64:	2b02      	cmp	r3, #2
    2b66:	d1e6      	bne.n	2b36 <gpio_nrfx_pin_configure+0x72>
    2b68:	2304      	movs	r3, #4
    2b6a:	e00f      	b.n	2b8c <gpio_nrfx_pin_configure+0xc8>
    2b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2b70:	d1e1      	bne.n	2b36 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2b72:	2301      	movs	r3, #1
    2b74:	e00a      	b.n	2b8c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2b76:	f240 4202 	movw	r2, #1026	; 0x402
    2b7a:	4293      	cmp	r3, r2
    2b7c:	d02b      	beq.n	2bd6 <gpio_nrfx_pin_configure+0x112>
    2b7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2b82:	d02a      	beq.n	2bda <gpio_nrfx_pin_configure+0x116>
    2b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2b88:	d1d5      	bne.n	2b36 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2b8a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2b8c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2b90:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2b94:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2b98:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2b9a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2b9e:	bf54      	ite	pl
    2ba0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2ba4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2ba6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2ba8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2bac:	d517      	bpl.n	2bde <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	2101      	movs	r1, #1
    2bb2:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2bb6:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2bba:	2200      	movs	r2, #0
    2bbc:	a901      	add	r1, sp, #4
    2bbe:	4628      	mov	r0, r5
    2bc0:	f002 f81e 	bl	4c00 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2bc4:	4b14      	ldr	r3, [pc, #80]	; (2c18 <gpio_nrfx_pin_configure+0x154>)
    2bc6:	4298      	cmp	r0, r3
    2bc8:	bf14      	ite	ne
    2bca:	f06f 0015 	mvnne.w	r0, #21
    2bce:	2000      	moveq	r0, #0
    2bd0:	e791      	b.n	2af6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2bd2:	2307      	movs	r3, #7
    2bd4:	e7da      	b.n	2b8c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    2bd6:	2305      	movs	r3, #5
    2bd8:	e7d8      	b.n	2b8c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    2bda:	2303      	movs	r3, #3
    2bdc:	e7d6      	b.n	2b8c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2bde:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2be0:	bf41      	itttt	mi
    2be2:	687b      	ldrmi	r3, [r7, #4]
    2be4:	2101      	movmi	r1, #1
    2be6:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2bea:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2bee:	e7e4      	b.n	2bba <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2bf0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2bf2:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2bf6:	bf54      	ite	pl
    2bf8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2bfc:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2bfe:	461a      	mov	r2, r3
    2c00:	a901      	add	r1, sp, #4
    2c02:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2c04:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2c08:	f001 ff4c 	bl	4aa4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2c0c:	4b02      	ldr	r3, [pc, #8]	; (2c18 <gpio_nrfx_pin_configure+0x154>)
    2c0e:	4298      	cmp	r0, r3
    2c10:	f43f af7c 	beq.w	2b0c <gpio_nrfx_pin_configure+0x48>
    2c14:	e78f      	b.n	2b36 <gpio_nrfx_pin_configure+0x72>
    2c16:	bf00      	nop
    2c18:	0bad0000 	.word	0x0bad0000

00002c1c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2c1e:	794b      	ldrb	r3, [r1, #5]
    2c20:	2b01      	cmp	r3, #1
    2c22:	d026      	beq.n	2c72 <uarte_nrfx_configure+0x56>
    2c24:	2b03      	cmp	r3, #3
    2c26:	d121      	bne.n	2c6c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2c28:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2c2a:	798b      	ldrb	r3, [r1, #6]
    2c2c:	2b03      	cmp	r3, #3
    2c2e:	d11d      	bne.n	2c6c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2c30:	79cc      	ldrb	r4, [r1, #7]
    2c32:	b10c      	cbz	r4, 2c38 <uarte_nrfx_configure+0x1c>
    2c34:	2c01      	cmp	r4, #1
    2c36:	d119      	bne.n	2c6c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2c38:	790a      	ldrb	r2, [r1, #4]
    2c3a:	b112      	cbz	r2, 2c42 <uarte_nrfx_configure+0x26>
    2c3c:	2a02      	cmp	r2, #2
    2c3e:	d115      	bne.n	2c6c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2c40:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2c42:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2c44:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2c46:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2c4a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2c4c:	d065      	beq.n	2d1a <uarte_nrfx_configure+0xfe>
    2c4e:	d82d      	bhi.n	2cac <uarte_nrfx_configure+0x90>
    2c50:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2c54:	d064      	beq.n	2d20 <uarte_nrfx_configure+0x104>
    2c56:	d816      	bhi.n	2c86 <uarte_nrfx_configure+0x6a>
    2c58:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2c5c:	d062      	beq.n	2d24 <uarte_nrfx_configure+0x108>
    2c5e:	d80a      	bhi.n	2c76 <uarte_nrfx_configure+0x5a>
    2c60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2c64:	d061      	beq.n	2d2a <uarte_nrfx_configure+0x10e>
    2c66:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2c6a:	d061      	beq.n	2d30 <uarte_nrfx_configure+0x114>
    2c6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c70:	e052      	b.n	2d18 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2c72:	2600      	movs	r6, #0
    2c74:	e7d9      	b.n	2c2a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2c76:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2c7a:	d05c      	beq.n	2d36 <uarte_nrfx_configure+0x11a>
    2c7c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2c80:	d1f4      	bne.n	2c6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2c82:	4b37      	ldr	r3, [pc, #220]	; (2d60 <uarte_nrfx_configure+0x144>)
    2c84:	e03c      	b.n	2d00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c86:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2c8a:	d057      	beq.n	2d3c <uarte_nrfx_configure+0x120>
    2c8c:	d807      	bhi.n	2c9e <uarte_nrfx_configure+0x82>
    2c8e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2c92:	d055      	beq.n	2d40 <uarte_nrfx_configure+0x124>
    2c94:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2c98:	d1e8      	bne.n	2c6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2c9a:	4b32      	ldr	r3, [pc, #200]	; (2d64 <uarte_nrfx_configure+0x148>)
    2c9c:	e030      	b.n	2d00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c9e:	f647 2712 	movw	r7, #31250	; 0x7a12
    2ca2:	42bb      	cmp	r3, r7
    2ca4:	d1e2      	bne.n	2c6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2ca6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2caa:	e029      	b.n	2d00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cac:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2cb0:	d048      	beq.n	2d44 <uarte_nrfx_configure+0x128>
    2cb2:	d813      	bhi.n	2cdc <uarte_nrfx_configure+0xc0>
    2cb4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2cb8:	d047      	beq.n	2d4a <uarte_nrfx_configure+0x12e>
    2cba:	d809      	bhi.n	2cd0 <uarte_nrfx_configure+0xb4>
    2cbc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2cc0:	42bb      	cmp	r3, r7
    2cc2:	d044      	beq.n	2d4e <uarte_nrfx_configure+0x132>
    2cc4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2cc8:	d1d0      	bne.n	2c6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2cca:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2cce:	e017      	b.n	2d00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cd0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2cd4:	d1ca      	bne.n	2c6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2cd6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2cda:	e011      	b.n	2d00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cdc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2ce0:	d038      	beq.n	2d54 <uarte_nrfx_configure+0x138>
    2ce2:	d808      	bhi.n	2cf6 <uarte_nrfx_configure+0xda>
    2ce4:	4f20      	ldr	r7, [pc, #128]	; (2d68 <uarte_nrfx_configure+0x14c>)
    2ce6:	42bb      	cmp	r3, r7
    2ce8:	d037      	beq.n	2d5a <uarte_nrfx_configure+0x13e>
    2cea:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2cee:	d1bd      	bne.n	2c6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2cf0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2cf4:	e004      	b.n	2d00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cf6:	4f1d      	ldr	r7, [pc, #116]	; (2d6c <uarte_nrfx_configure+0x150>)
    2cf8:	42bb      	cmp	r3, r7
    2cfa:	d1b7      	bne.n	2c6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2cfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2d00:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2d02:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2d06:	1d03      	adds	r3, r0, #4
    2d08:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2d0a:	4334      	orrs	r4, r6
    2d0c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2d0e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2d12:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2d16:	2000      	movs	r0, #0
}
    2d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2d1a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2d1e:	e7ef      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2d20:	4b13      	ldr	r3, [pc, #76]	; (2d70 <uarte_nrfx_configure+0x154>)
    2d22:	e7ed      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2d24:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2d28:	e7ea      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2d2a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2d2e:	e7e7      	b.n	2d00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d30:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2d34:	e7e4      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2d36:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2d3a:	e7e1      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2d3c:	4b0d      	ldr	r3, [pc, #52]	; (2d74 <uarte_nrfx_configure+0x158>)
    2d3e:	e7df      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2d40:	4b0d      	ldr	r3, [pc, #52]	; (2d78 <uarte_nrfx_configure+0x15c>)
    2d42:	e7dd      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2d44:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2d48:	e7da      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2d4a:	4b0c      	ldr	r3, [pc, #48]	; (2d7c <uarte_nrfx_configure+0x160>)
    2d4c:	e7d8      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2d4e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2d52:	e7d5      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2d54:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2d58:	e7d2      	b.n	2d00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2d5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2d5e:	e7cf      	b.n	2d00 <uarte_nrfx_configure+0xe4>
    2d60:	0013b000 	.word	0x0013b000
    2d64:	004ea000 	.word	0x004ea000
    2d68:	0003d090 	.word	0x0003d090
    2d6c:	000f4240 	.word	0x000f4240
    2d70:	00275000 	.word	0x00275000
    2d74:	0075c000 	.word	0x0075c000
    2d78:	003af000 	.word	0x003af000
    2d7c:	013a9000 	.word	0x013a9000

00002d80 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2d80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    2d84:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2d88:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2d8a:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2d8e:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2d92:	2100      	movs	r1, #0
    2d94:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2d98:	4607      	mov	r7, r0
	data->dev = dev;
    2d9a:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2d9c:	aa01      	add	r2, sp, #4
    2d9e:	4648      	mov	r0, r9
    2da0:	f004 fd7d 	bl	789e <pinctrl_lookup_state>
	if (ret < 0) {
    2da4:	1e05      	subs	r5, r0, #0
    2da6:	db1f      	blt.n	2de8 <uarte_instance_init.constprop.0+0x68>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2da8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2daa:	f8d9 2000 	ldr.w	r2, [r9]
    2dae:	7919      	ldrb	r1, [r3, #4]
    2db0:	6818      	ldr	r0, [r3, #0]
    2db2:	f004 fdcb 	bl	794c <pinctrl_configure_pins>
	if (err < 0) {
    2db6:	1e05      	subs	r5, r0, #0
    2db8:	db16      	blt.n	2de8 <uarte_instance_init.constprop.0+0x68>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2dba:	1d31      	adds	r1, r6, #4
    2dbc:	4638      	mov	r0, r7
    2dbe:	f7ff ff2d 	bl	2c1c <uarte_nrfx_configure>
	if (err) {
    2dc2:	4605      	mov	r5, r0
    2dc4:	b980      	cbnz	r0, 2de8 <uarte_instance_init.constprop.0+0x68>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2dc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2dca:	0799      	lsls	r1, r3, #30
    2dcc:	d523      	bpl.n	2e16 <uarte_instance_init.constprop.0+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2dce:	f106 0012 	add.w	r0, r6, #18
    2dd2:	f002 f989 	bl	50e8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2dd6:	4b25      	ldr	r3, [pc, #148]	; (2e6c <uarte_instance_init.constprop.0+0xec>)
    2dd8:	4298      	cmp	r0, r3
    2dda:	d009      	beq.n	2df0 <uarte_instance_init.constprop.0+0x70>
		LOG_ERR("Failed to allocate PPI Channel");
    2ddc:	4824      	ldr	r0, [pc, #144]	; (2e70 <uarte_instance_init.constprop.0+0xf0>)
    2dde:	2145      	movs	r1, #69	; 0x45
    2de0:	f004 fbed 	bl	75be <z_log_minimal_printk>
		return -EIO;
    2de4:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2de8:	4628      	mov	r0, r5
    2dea:	b003      	add	sp, #12
    2dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2df0:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2df2:	00c3      	lsls	r3, r0, #3
    2df4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2df8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2dfc:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2e00:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2e04:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2e08:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2e0c:	4a19      	ldr	r2, [pc, #100]	; (2e74 <uarte_instance_init.constprop.0+0xf4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2e0e:	2301      	movs	r3, #1
    2e10:	4083      	lsls	r3, r0
    2e12:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2e16:	2308      	movs	r3, #8
    2e18:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2e1c:	f898 3008 	ldrb.w	r3, [r8, #8]
    2e20:	b95b      	cbnz	r3, 2e3a <uarte_instance_init.constprop.0+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e22:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2e26:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2e2a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2e2e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2e32:	2301      	movs	r3, #1
    2e34:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e38:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2e3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2e3e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2e40:	bf5c      	itt	pl
    2e42:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2e46:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2e4a:	06db      	lsls	r3, r3, #27
    2e4c:	bf44      	itt	mi
    2e4e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2e52:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2e56:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    2e58:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e5a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e5e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e62:	2301      	movs	r3, #1
    2e64:	60a3      	str	r3, [r4, #8]
    2e66:	60e3      	str	r3, [r4, #12]
	return 0;
    2e68:	e7be      	b.n	2de8 <uarte_instance_init.constprop.0+0x68>
    2e6a:	bf00      	nop
    2e6c:	0bad0000 	.word	0x0bad0000
    2e70:	00008bb4 	.word	0x00008bb4
    2e74:	4001f000 	.word	0x4001f000

00002e78 <uarte_nrfx_poll_out>:
{
    2e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    2e7a:	6906      	ldr	r6, [r0, #16]
{
    2e7c:	4605      	mov	r5, r0
    2e7e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2e80:	f004 fee7 	bl	7c52 <k_is_in_isr>
    2e84:	b910      	cbnz	r0, 2e8c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2e86:	4b2c      	ldr	r3, [pc, #176]	; (2f38 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    2e88:	781b      	ldrb	r3, [r3, #0]
    2e8a:	b983      	cbnz	r3, 2eae <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2e8c:	f04f 0320 	mov.w	r3, #32
    2e90:	f3ef 8411 	mrs	r4, BASEPRI
    2e94:	f383 8812 	msr	BASEPRI_MAX, r3
    2e98:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2e9c:	6868      	ldr	r0, [r5, #4]
    2e9e:	f004 fc96 	bl	77ce <is_tx_ready.isra.0>
    2ea2:	bb28      	cbnz	r0, 2ef0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2ea4:	f384 8811 	msr	BASEPRI, r4
    2ea8:	f3bf 8f6f 	isb	sy
}
    2eac:	e7ee      	b.n	2e8c <uarte_nrfx_poll_out+0x14>
{
    2eae:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2eb0:	6868      	ldr	r0, [r5, #4]
    2eb2:	f004 fc8c 	bl	77ce <is_tx_ready.isra.0>
    2eb6:	b970      	cbnz	r0, 2ed6 <uarte_nrfx_poll_out+0x5e>
    2eb8:	2001      	movs	r0, #1
    2eba:	f004 fe17 	bl	7aec <nrfx_busy_wait>
    2ebe:	3c01      	subs	r4, #1
    2ec0:	d1f6      	bne.n	2eb0 <uarte_nrfx_poll_out+0x38>
    2ec2:	2100      	movs	r1, #0
    2ec4:	2021      	movs	r0, #33	; 0x21
    2ec6:	f003 fd41 	bl	694c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2eca:	e7f0      	b.n	2eae <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2ecc:	f384 8811 	msr	BASEPRI, r4
    2ed0:	f3bf 8f6f 	isb	sy
}
    2ed4:	e7f5      	b.n	2ec2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2ed6:	f04f 0320 	mov.w	r3, #32
    2eda:	f3ef 8411 	mrs	r4, BASEPRI
    2ede:	f383 8812 	msr	BASEPRI_MAX, r3
    2ee2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2ee6:	6868      	ldr	r0, [r5, #4]
    2ee8:	f004 fc71 	bl	77ce <is_tx_ready.isra.0>
    2eec:	2800      	cmp	r0, #0
    2eee:	d0ed      	beq.n	2ecc <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    2ef0:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    2ef4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2ef6:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    2ef8:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2efa:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2efe:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f02:	2200      	movs	r2, #0
    2f04:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2f08:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2f0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2f10:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2f14:	684a      	ldr	r2, [r1, #4]
    2f16:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2f18:	bf41      	itttt	mi
    2f1a:	2208      	movmi	r2, #8
    2f1c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2f20:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2f24:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f28:	2201      	movs	r2, #1
    2f2a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2f2c:	f384 8811 	msr	BASEPRI, r4
    2f30:	f3bf 8f6f 	isb	sy
}
    2f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f36:	bf00      	nop
    2f38:	200013e4 	.word	0x200013e4

00002f3c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2f3c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2f3e:	2301      	movs	r3, #1
    2f40:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2f42:	4a11      	ldr	r2, [pc, #68]	; (2f88 <compare_int_lock+0x4c>)
    2f44:	f3bf 8f5b 	dmb	ish
    2f48:	43dc      	mvns	r4, r3
    2f4a:	e852 1f00 	ldrex	r1, [r2]
    2f4e:	ea01 0c04 	and.w	ip, r1, r4
    2f52:	e842 ce00 	strex	lr, ip, [r2]
    2f56:	f1be 0f00 	cmp.w	lr, #0
    2f5a:	d1f6      	bne.n	2f4a <compare_int_lock+0xe>
    2f5c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2f64:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2f68:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2f70:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2f74:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f78:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2f7c:	420b      	tst	r3, r1
}
    2f7e:	bf14      	ite	ne
    2f80:	2001      	movne	r0, #1
    2f82:	2000      	moveq	r0, #0
    2f84:	bd10      	pop	{r4, pc}
    2f86:	bf00      	nop
    2f88:	20000904 	.word	0x20000904

00002f8c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f8c:	4919      	ldr	r1, [pc, #100]	; (2ff4 <sys_clock_timeout_handler+0x68>)
{
    2f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f90:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2f92:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f96:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2f98:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2f9c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2fa0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2fa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2fa6:	d222      	bcs.n	2fee <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2fa8:	4b13      	ldr	r3, [pc, #76]	; (2ff8 <sys_clock_timeout_handler+0x6c>)
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	0a1a      	lsrs	r2, r3, #8
    2fae:	061b      	lsls	r3, r3, #24
    2fb0:	195e      	adds	r6, r3, r5
    2fb2:	4b12      	ldr	r3, [pc, #72]	; (2ffc <sys_clock_timeout_handler+0x70>)
    2fb4:	f142 0700 	adc.w	r7, r2, #0
    2fb8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    2fbc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2fbe:	f003 ff51 	bl	6e64 <sys_clock_announce>
    return p_reg->CC[ch];
    2fc2:	00a3      	lsls	r3, r4, #2
    2fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2fc8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2fcc:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2fd0:	42aa      	cmp	r2, r5
    2fd2:	d10b      	bne.n	2fec <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2fd4:	b91e      	cbnz	r6, 2fde <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    2fd6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2fda:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2fde:	4b08      	ldr	r3, [pc, #32]	; (3000 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2fe0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2fe4:	fa00 f404 	lsl.w	r4, r0, r4
    2fe8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2fee:	2600      	movs	r6, #0
    2ff0:	e7e5      	b.n	2fbe <sys_clock_timeout_handler+0x32>
    2ff2:	bf00      	nop
    2ff4:	200001f8 	.word	0x200001f8
    2ff8:	20000908 	.word	0x20000908
    2ffc:	200001e0 	.word	0x200001e0
    3000:	40011000 	.word	0x40011000

00003004 <compare_int_unlock>:
	if (key) {
    3004:	b319      	cbz	r1, 304e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3006:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    300a:	2301      	movs	r3, #1
    300c:	4a10      	ldr	r2, [pc, #64]	; (3050 <compare_int_unlock+0x4c>)
    300e:	4083      	lsls	r3, r0
    3010:	e852 1f00 	ldrex	r1, [r2]
    3014:	4319      	orrs	r1, r3
    3016:	e842 1c00 	strex	ip, r1, [r2]
    301a:	f1bc 0f00 	cmp.w	ip, #0
    301e:	d1f7      	bne.n	3010 <compare_int_unlock+0xc>
    3020:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3024:	4a0b      	ldr	r2, [pc, #44]	; (3054 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    302a:	4083      	lsls	r3, r0
    302c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3030:	4b09      	ldr	r3, [pc, #36]	; (3058 <compare_int_unlock+0x54>)
    3032:	f3bf 8f5b 	dmb	ish
    3036:	681b      	ldr	r3, [r3, #0]
    3038:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    303c:	fa23 f000 	lsr.w	r0, r3, r0
    3040:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3042:	bf42      	ittt	mi
    3044:	4b05      	ldrmi	r3, [pc, #20]	; (305c <compare_int_unlock+0x58>)
    3046:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    304a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    304e:	4770      	bx	lr
    3050:	20000904 	.word	0x20000904
    3054:	40011000 	.word	0x40011000
    3058:	20000900 	.word	0x20000900
    305c:	e000e100 	.word	0xe000e100

00003060 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3060:	4b0d      	ldr	r3, [pc, #52]	; (3098 <z_nrf_rtc_timer_read+0x38>)
    3062:	6818      	ldr	r0, [r3, #0]
    3064:	0a01      	lsrs	r1, r0, #8
    3066:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3068:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    306c:	4b0b      	ldr	r3, [pc, #44]	; (309c <z_nrf_rtc_timer_read+0x3c>)
    306e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3072:	1818      	adds	r0, r3, r0
    3074:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    307c:	d20a      	bcs.n	3094 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    307e:	4b08      	ldr	r3, [pc, #32]	; (30a0 <z_nrf_rtc_timer_read+0x40>)
    3080:	e9d3 2300 	ldrd	r2, r3, [r3]
    3084:	4290      	cmp	r0, r2
    3086:	eb71 0303 	sbcs.w	r3, r1, r3
    308a:	d203      	bcs.n	3094 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    308c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3090:	f141 0100 	adc.w	r1, r1, #0
}
    3094:	4770      	bx	lr
    3096:	bf00      	nop
    3098:	20000908 	.word	0x20000908
    309c:	40011000 	.word	0x40011000
    30a0:	200001e0 	.word	0x200001e0

000030a4 <compare_set>:
{
    30a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30a8:	b085      	sub	sp, #20
    30aa:	4616      	mov	r6, r2
    30ac:	4698      	mov	r8, r3
    30ae:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    30b0:	f7ff ff44 	bl	2f3c <compare_int_lock>
    30b4:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    30b6:	f7ff ffd3 	bl	3060 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    30ba:	42b0      	cmp	r0, r6
    30bc:	eb71 0308 	sbcs.w	r3, r1, r8
    30c0:	d278      	bcs.n	31b4 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    30c2:	4b46      	ldr	r3, [pc, #280]	; (31dc <compare_set+0x138>)
    30c4:	1a30      	subs	r0, r6, r0
    30c6:	eb68 0101 	sbc.w	r1, r8, r1
    30ca:	4298      	cmp	r0, r3
    30cc:	f171 0300 	sbcs.w	r3, r1, #0
    30d0:	f080 8081 	bcs.w	31d6 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    30d4:	4b42      	ldr	r3, [pc, #264]	; (31e0 <compare_set+0x13c>)
    30d6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    30da:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    30de:	45d8      	cmp	r8, fp
    30e0:	bf08      	it	eq
    30e2:	4556      	cmpeq	r6, sl
    30e4:	d051      	beq.n	318a <compare_set+0xe6>
    30e6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    30ea:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    30ee:	f105 0750 	add.w	r7, r5, #80	; 0x50
    30f2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    30f6:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    30fc:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3100:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3102:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3106:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    310a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    310c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3110:	4b34      	ldr	r3, [pc, #208]	; (31e4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3112:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3116:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3118:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    311c:	1a40      	subs	r0, r0, r1
    311e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3122:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3126:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3128:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    312c:	d107      	bne.n	313e <compare_set+0x9a>
    312e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3132:	2013      	movs	r0, #19
    3134:	f004 fdcb 	bl	7cce <z_impl_k_busy_wait>
    3138:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    313c:	4b29      	ldr	r3, [pc, #164]	; (31e4 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    313e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3142:	eba4 000c 	sub.w	r0, r4, ip
    3146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    314a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    314e:	bf88      	it	hi
    3150:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3152:	2000      	movs	r0, #0
    3154:	6038      	str	r0, [r7, #0]
    3156:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3158:	9801      	ldr	r0, [sp, #4]
    315a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    315e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3162:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3166:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    316a:	4281      	cmp	r1, r0
    316c:	d006      	beq.n	317c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    316e:	1a20      	subs	r0, r4, r0
    3170:	3802      	subs	r0, #2
    3172:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3176:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    317a:	d819      	bhi.n	31b0 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    317c:	1aa4      	subs	r4, r4, r2
    317e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3182:	eb14 0a06 	adds.w	sl, r4, r6
    3186:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    318a:	4915      	ldr	r1, [pc, #84]	; (31e0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    318c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    318e:	012b      	lsls	r3, r5, #4
    3190:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3194:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3198:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    319a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    319c:	6053      	str	r3, [r2, #4]
	return ret;
    319e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    31a0:	4628      	mov	r0, r5
    31a2:	9900      	ldr	r1, [sp, #0]
    31a4:	f7ff ff2e 	bl	3004 <compare_int_unlock>
}
    31a8:	4620      	mov	r0, r4
    31aa:	b005      	add	sp, #20
    31ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31b0:	4620      	mov	r0, r4
    31b2:	e7b1      	b.n	3118 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    31b4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    31b6:	4a0c      	ldr	r2, [pc, #48]	; (31e8 <compare_set+0x144>)
    31b8:	f3bf 8f5b 	dmb	ish
    31bc:	40ab      	lsls	r3, r5
    31be:	e852 1f00 	ldrex	r1, [r2]
    31c2:	4319      	orrs	r1, r3
    31c4:	e842 1000 	strex	r0, r1, [r2]
    31c8:	2800      	cmp	r0, #0
    31ca:	d1f8      	bne.n	31be <compare_set+0x11a>
    31cc:	f3bf 8f5b 	dmb	ish
    31d0:	46b2      	mov	sl, r6
    31d2:	46c3      	mov	fp, r8
    31d4:	e7d9      	b.n	318a <compare_set+0xe6>
			return -EINVAL;
    31d6:	f06f 0415 	mvn.w	r4, #21
    31da:	e7e1      	b.n	31a0 <compare_set+0xfc>
    31dc:	01000001 	.word	0x01000001
    31e0:	200001e8 	.word	0x200001e8
    31e4:	40011000 	.word	0x40011000
    31e8:	20000900 	.word	0x20000900

000031ec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    31ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    31ee:	4b19      	ldr	r3, [pc, #100]	; (3254 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    31f0:	4d19      	ldr	r5, [pc, #100]	; (3258 <sys_clock_driver_init+0x6c>)
    31f2:	2400      	movs	r4, #0
    31f4:	f04f 30ff 	mov.w	r0, #4294967295
    31f8:	f04f 31ff 	mov.w	r1, #4294967295
    31fc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3200:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3208:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    320c:	4b13      	ldr	r3, [pc, #76]	; (325c <sys_clock_driver_init+0x70>)
    320e:	2602      	movs	r6, #2
    3210:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3214:	2101      	movs	r1, #1
    3216:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    321a:	2011      	movs	r0, #17
    321c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3220:	4622      	mov	r2, r4
    3222:	f7fe fba7 	bl	1974 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3226:	2011      	movs	r0, #17
    3228:	f7fe fb72 	bl	1910 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    322c:	4a0c      	ldr	r2, [pc, #48]	; (3260 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    322e:	2301      	movs	r3, #1
    3230:	60ab      	str	r3, [r5, #8]
    3232:	602b      	str	r3, [r5, #0]
    3234:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3236:	4b0b      	ldr	r3, [pc, #44]	; (3264 <sys_clock_driver_init+0x78>)
    3238:	4a0b      	ldr	r2, [pc, #44]	; (3268 <sys_clock_driver_init+0x7c>)
    323a:	9300      	str	r3, [sp, #0]
    323c:	9401      	str	r4, [sp, #4]
    323e:	2300      	movs	r3, #0
    3240:	4620      	mov	r0, r4
    3242:	f7ff ff2f 	bl	30a4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3246:	4630      	mov	r0, r6
    3248:	f7ff fa44 	bl	26d4 <z_nrf_clock_control_lf_on>

	return 0;
}
    324c:	4620      	mov	r0, r4
    324e:	b002      	add	sp, #8
    3250:	bd70      	pop	{r4, r5, r6, pc}
    3252:	bf00      	nop
    3254:	200001e8 	.word	0x200001e8
    3258:	40011000 	.word	0x40011000
    325c:	e000e100 	.word	0xe000e100
    3260:	20000904 	.word	0x20000904
    3264:	00002f8d 	.word	0x00002f8d
    3268:	007fffff 	.word	0x007fffff

0000326c <rtc_nrf_isr>:
{
    326c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3270:	4c35      	ldr	r4, [pc, #212]	; (3348 <rtc_nrf_isr+0xdc>)
    3272:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3276:	079a      	lsls	r2, r3, #30
    3278:	d50b      	bpl.n	3292 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    327a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    327e:	b143      	cbz	r3, 3292 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3280:	4a32      	ldr	r2, [pc, #200]	; (334c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3282:	2300      	movs	r3, #0
    3284:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3288:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    328c:	6813      	ldr	r3, [r2, #0]
    328e:	3301      	adds	r3, #1
    3290:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3292:	f04f 0320 	mov.w	r3, #32
    3296:	f3ef 8211 	mrs	r2, BASEPRI
    329a:	f383 8812 	msr	BASEPRI_MAX, r3
    329e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    32a2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    32a6:	03db      	lsls	r3, r3, #15
    32a8:	d512      	bpl.n	32d0 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    32aa:	f3bf 8f5b 	dmb	ish
    32ae:	4b28      	ldr	r3, [pc, #160]	; (3350 <rtc_nrf_isr+0xe4>)
    32b0:	e853 1f00 	ldrex	r1, [r3]
    32b4:	f021 0001 	bic.w	r0, r1, #1
    32b8:	e843 0600 	strex	r6, r0, [r3]
    32bc:	2e00      	cmp	r6, #0
    32be:	d1f7      	bne.n	32b0 <rtc_nrf_isr+0x44>
    32c0:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    32c4:	2900      	cmp	r1, #0
    32c6:	d136      	bne.n	3336 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    32c8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    32cc:	2b00      	cmp	r3, #0
    32ce:	d132      	bne.n	3336 <rtc_nrf_isr+0xca>
{
    32d0:	2300      	movs	r3, #0
	__asm__ volatile(
    32d2:	f382 8811 	msr	BASEPRI, r2
    32d6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    32da:	b34b      	cbz	r3, 3330 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    32dc:	f7ff fec0 	bl	3060 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    32e0:	f04f 0320 	mov.w	r3, #32
    32e4:	f3ef 8c11 	mrs	ip, BASEPRI
    32e8:	f383 8812 	msr	BASEPRI_MAX, r3
    32ec:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    32f0:	4b18      	ldr	r3, [pc, #96]	; (3354 <rtc_nrf_isr+0xe8>)
    32f2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    32f6:	42b0      	cmp	r0, r6
    32f8:	eb71 0207 	sbcs.w	r2, r1, r7
    32fc:	f04f 0200 	mov.w	r2, #0
    3300:	d320      	bcc.n	3344 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3302:	f04f 38ff 	mov.w	r8, #4294967295
    3306:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    330a:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    330e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3312:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3318:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    331c:	f38c 8811 	msr	BASEPRI, ip
    3320:	f3bf 8f6f 	isb	sy
		if (handler) {
    3324:	b121      	cbz	r1, 3330 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3326:	9500      	str	r5, [sp, #0]
    3328:	4632      	mov	r2, r6
    332a:	463b      	mov	r3, r7
    332c:	2000      	movs	r0, #0
    332e:	4788      	blx	r1
}
    3330:	b003      	add	sp, #12
    3332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3336:	2300      	movs	r3, #0
    3338:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    333c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3340:	2301      	movs	r3, #1
}
    3342:	e7c6      	b.n	32d2 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3344:	4611      	mov	r1, r2
    3346:	e7e9      	b.n	331c <rtc_nrf_isr+0xb0>
    3348:	40011000 	.word	0x40011000
    334c:	20000908 	.word	0x20000908
    3350:	20000900 	.word	0x20000900
    3354:	200001e8 	.word	0x200001e8

00003358 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3358:	1c43      	adds	r3, r0, #1
{
    335a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    335c:	d021      	beq.n	33a2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    335e:	2801      	cmp	r0, #1
    3360:	dd21      	ble.n	33a6 <sys_clock_set_timeout+0x4e>
    3362:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3366:	da20      	bge.n	33aa <sys_clock_set_timeout+0x52>
    3368:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    336a:	f7ff fe79 	bl	3060 <z_nrf_rtc_timer_read>
    336e:	4b10      	ldr	r3, [pc, #64]	; (33b0 <sys_clock_set_timeout+0x58>)
    3370:	e9d3 1300 	ldrd	r1, r3, [r3]
    3374:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3376:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    337a:	bf28      	it	cs
    337c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    337e:	3001      	adds	r0, #1
    3380:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3382:	480c      	ldr	r0, [pc, #48]	; (33b4 <sys_clock_set_timeout+0x5c>)
    3384:	4282      	cmp	r2, r0
    3386:	bf28      	it	cs
    3388:	4602      	movcs	r2, r0
    338a:	1852      	adds	r2, r2, r1
    338c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3390:	4909      	ldr	r1, [pc, #36]	; (33b8 <sys_clock_set_timeout+0x60>)
    3392:	9001      	str	r0, [sp, #4]
    3394:	9100      	str	r1, [sp, #0]
    3396:	f143 0300 	adc.w	r3, r3, #0
    339a:	f7ff fe83 	bl	30a4 <compare_set>
}
    339e:	b002      	add	sp, #8
    33a0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    33a2:	4804      	ldr	r0, [pc, #16]	; (33b4 <sys_clock_set_timeout+0x5c>)
    33a4:	e7e0      	b.n	3368 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    33a6:	2400      	movs	r4, #0
    33a8:	e7df      	b.n	336a <sys_clock_set_timeout+0x12>
    33aa:	4c02      	ldr	r4, [pc, #8]	; (33b4 <sys_clock_set_timeout+0x5c>)
    33ac:	e7dd      	b.n	336a <sys_clock_set_timeout+0x12>
    33ae:	bf00      	nop
    33b0:	200001f8 	.word	0x200001f8
    33b4:	007fffff 	.word	0x007fffff
    33b8:	00002f8d 	.word	0x00002f8d

000033bc <sys_clock_elapsed>:
{
    33bc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    33be:	f7ff fe4f 	bl	3060 <z_nrf_rtc_timer_read>
    33c2:	4b02      	ldr	r3, [pc, #8]	; (33cc <sys_clock_elapsed+0x10>)
    33c4:	681b      	ldr	r3, [r3, #0]
}
    33c6:	1ac0      	subs	r0, r0, r3
    33c8:	bd08      	pop	{r3, pc}
    33ca:	bf00      	nop
    33cc:	200001f8 	.word	0x200001f8

000033d0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33d0:	6802      	ldr	r2, [r0, #0]
    switch (port)
    33d2:	0953      	lsrs	r3, r2, #5
{
    33d4:	b510      	push	{r4, lr}
    33d6:	4604      	mov	r4, r0
    switch (port)
    33d8:	d02a      	beq.n	3430 <nrf_gpio_pin_port_decode+0x60>
    uint32_t mask = 0;
    33da:	2b01      	cmp	r3, #1
    33dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    33e0:	bf18      	it	ne
    33e2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    33e4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    33e8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    33ea:	07db      	lsls	r3, r3, #31
    33ec:	d40a      	bmi.n	3404 <nrf_gpio_pin_port_decode+0x34>
    33ee:	4913      	ldr	r1, [pc, #76]	; (343c <nrf_gpio_pin_port_decode+0x6c>)
    33f0:	4813      	ldr	r0, [pc, #76]	; (3440 <nrf_gpio_pin_port_decode+0x70>)
    33f2:	f240 2229 	movw	r2, #553	; 0x229
    33f6:	f004 f8d4 	bl	75a2 <assert_print>
    33fa:	4810      	ldr	r0, [pc, #64]	; (343c <nrf_gpio_pin_port_decode+0x6c>)
    33fc:	f240 2129 	movw	r1, #553	; 0x229
    3400:	f004 f8c8 	bl	7594 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3404:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3406:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    340a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    340c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    340e:	d00c      	beq.n	342a <nrf_gpio_pin_port_decode+0x5a>
    3410:	2b01      	cmp	r3, #1
    3412:	d010      	beq.n	3436 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
    3414:	4909      	ldr	r1, [pc, #36]	; (343c <nrf_gpio_pin_port_decode+0x6c>)
    3416:	480a      	ldr	r0, [pc, #40]	; (3440 <nrf_gpio_pin_port_decode+0x70>)
    3418:	f240 222e 	movw	r2, #558	; 0x22e
    341c:	f004 f8c1 	bl	75a2 <assert_print>
    3420:	4806      	ldr	r0, [pc, #24]	; (343c <nrf_gpio_pin_port_decode+0x6c>)
    3422:	f240 212e 	movw	r1, #558	; 0x22e
    3426:	f004 f8b5 	bl	7594 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    342a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    342e:	bd10      	pop	{r4, pc}
    switch (port)
    3430:	f04f 33ff 	mov.w	r3, #4294967295
    3434:	e7d6      	b.n	33e4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3436:	4803      	ldr	r0, [pc, #12]	; (3444 <nrf_gpio_pin_port_decode+0x74>)
    3438:	e7f9      	b.n	342e <nrf_gpio_pin_port_decode+0x5e>
    343a:	bf00      	nop
    343c:	00008b73 	.word	0x00008b73
    3440:	00008378 	.word	0x00008378
    3444:	50000300 	.word	0x50000300

00003448 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3448:	4803      	ldr	r0, [pc, #12]	; (3458 <k_sys_fatal_error_handler+0x10>)
{
    344a:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    344c:	2145      	movs	r1, #69	; 0x45
    344e:	f004 f8b6 	bl	75be <z_log_minimal_printk>
		sys_arch_reboot(0);
    3452:	2000      	movs	r0, #0
    3454:	f7fe ffba 	bl	23cc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3458:	00008bf6 	.word	0x00008bf6

0000345c <update_rf_payload_format_esb_dpl>:

static void update_rf_payload_format_esb_dpl(uint32_t payload_length)
{
#if (CONFIG_ESB_MAX_PAYLOAD_LENGTH <= 32)
	/* Using 6 bits for length */
	NRF_RADIO->PCNF0 = (0 << RADIO_PCNF0_S0LEN_Pos) |
    345c:	4906      	ldr	r1, [pc, #24]	; (3478 <update_rf_payload_format_esb_dpl+0x1c>)
    345e:	4b07      	ldr	r3, [pc, #28]	; (347c <update_rf_payload_format_esb_dpl+0x20>)
    3460:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
			   (3 << RADIO_PCNF0_S1LEN_Pos);
#endif
	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    3464:	4b06      	ldr	r3, [pc, #24]	; (3480 <update_rf_payload_format_esb_dpl+0x24>)
    3466:	7c5b      	ldrb	r3, [r3, #17]
    3468:	1e5a      	subs	r2, r3, #1
		(0 << RADIO_PCNF1_STATLEN_Pos) |
    346a:	4b06      	ldr	r3, [pc, #24]	; (3484 <update_rf_payload_format_esb_dpl+0x28>)
    346c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	NRF_RADIO->PCNF1 =
    3470:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
		(CONFIG_ESB_MAX_PAYLOAD_LENGTH << RADIO_PCNF1_MAXLEN_Pos);
}
    3474:	4770      	bx	lr
    3476:	bf00      	nop
    3478:	40001000 	.word	0x40001000
    347c:	00030006 	.word	0x00030006
    3480:	20000054 	.word	0x20000054
    3484:	01000020 	.word	0x01000020

00003488 <update_rf_payload_format_esb>:

static void update_rf_payload_format_esb(uint32_t payload_length)
{
	NRF_RADIO->PCNF0 = (1 << RADIO_PCNF0_S0LEN_Pos) |
    3488:	4a07      	ldr	r2, [pc, #28]	; (34a8 <update_rf_payload_format_esb+0x20>)
    348a:	4b08      	ldr	r3, [pc, #32]	; (34ac <update_rf_payload_format_esb+0x24>)
    348c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   (1 << RADIO_PCNF0_S1LEN_Pos);

	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    3490:	4b07      	ldr	r3, [pc, #28]	; (34b0 <update_rf_payload_format_esb+0x28>)
    3492:	7c5b      	ldrb	r3, [r3, #17]
    3494:	3b01      	subs	r3, #1
		(payload_length << RADIO_PCNF1_STATLEN_Pos) |
    3496:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    349a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    349e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
	NRF_RADIO->PCNF1 =
    34a2:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
		(payload_length << RADIO_PCNF1_MAXLEN_Pos);
}
    34a6:	4770      	bx	lr
    34a8:	40001000 	.word	0x40001000
    34ac:	00010100 	.word	0x00010100
    34b0:	20000054 	.word	0x20000054

000034b4 <update_radio_bitrate>:
			     << RADIO_TXPOWER_TXPOWER_Pos;
}

static bool update_radio_bitrate(void)
{
	NRF_RADIO->MODE = esb_cfg.bitrate << RADIO_MODE_MODE_Pos;
    34b4:	4b0b      	ldr	r3, [pc, #44]	; (34e4 <update_radio_bitrate+0x30>)
    34b6:	4a0c      	ldr	r2, [pc, #48]	; (34e8 <update_radio_bitrate+0x34>)
    34b8:	7a1b      	ldrb	r3, [r3, #8]
    34ba:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
    34be:	2b04      	cmp	r3, #4
    34c0:	d80d      	bhi.n	34de <update_radio_bitrate+0x2a>
    34c2:	e8df f003 	tbb	[pc, r3]
    34c6:	0308      	.short	0x0308
    34c8:	080c      	.short	0x080c
    34ca:	03          	.byte	0x03
    34cb:	00          	.byte	0x00
	case ESB_BITRATE_2MBPS:
#if defined(CONFIG_SOC_SERIES_NRF52X) || defined(CONFIG_SOC_NRF5340_CPUNET)
	case ESB_BITRATE_2MBPS_BLE:
#endif
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
    34cc:	4b07      	ldr	r3, [pc, #28]	; (34ec <update_radio_bitrate+0x38>)
    34ce:	22a0      	movs	r2, #160	; 0xa0
		break;

	case ESB_BITRATE_1MBPS:
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
    34d0:	601a      	str	r2, [r3, #0]
	default:
		/* Should not be reached */
		return false;
	}

	return true;
    34d2:	2001      	movs	r0, #1
		break;
    34d4:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
    34d6:	4b05      	ldr	r3, [pc, #20]	; (34ec <update_radio_bitrate+0x38>)
    34d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
    34dc:	e7f8      	b.n	34d0 <update_radio_bitrate+0x1c>
	switch (esb_cfg.bitrate) {
    34de:	2000      	movs	r0, #0
}
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop
    34e4:	20000990 	.word	0x20000990
    34e8:	40001000 	.word	0x40001000
    34ec:	20000a18 	.word	0x20000a18

000034f0 <reset_fifos>:
	return params_valid;
}

static void reset_fifos(void)
{
	tx_fifo.back = 0;
    34f0:	4a04      	ldr	r2, [pc, #16]	; (3504 <reset_fifos+0x14>)
    34f2:	2300      	movs	r3, #0
	tx_fifo.front = 0;
    34f4:	e9c2 3308 	strd	r3, r3, [r2, #32]
	tx_fifo.count = 0;
    34f8:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
    34fa:	4a03      	ldr	r2, [pc, #12]	; (3508 <reset_fifos+0x18>)
	rx_fifo.front = 0;
    34fc:	e9c2 3308 	strd	r3, r3, [r2, #32]
	rx_fifo.count = 0;
    3500:	6293      	str	r3, [r2, #40]	; 0x28
}
    3502:	4770      	bx	lr
    3504:	200009e8 	.word	0x200009e8
    3508:	200009bc 	.word	0x200009bc

0000350c <on_radio_disabled_tx>:
		start_tx_transaction();
	}
}

static void on_radio_disabled_tx(void)
{
    350c:	b538      	push	{r3, r4, r5, lr}
	/* Remove the DISABLED -> RXEN shortcut, to make sure the radio stays
	 * disabled after the RX window
	 */
	NRF_RADIO->SHORTS = radio_shorts_common;
    350e:	4c19      	ldr	r4, [pc, #100]	; (3574 <on_radio_disabled_tx+0x68>)
	/* Make sure the timer is started the next time the radio is ready,
	 * and that it will disable the radio automatically if no packet is
	 * received by the time defined in wait_for_ack_timeout_us
	 */
	ESB_SYS_TIMER->CC[0] = wait_for_ack_timeout_us;
	ESB_SYS_TIMER->CC[1] = esb_cfg.retransmit_delay - 130;
    3510:	4819      	ldr	r0, [pc, #100]	; (3578 <on_radio_disabled_tx+0x6c>)
	NRF_RADIO->SHORTS = radio_shorts_common;
    3512:	f240 1313 	movw	r3, #275	; 0x113
    3516:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	ESB_SYS_TIMER->CC[0] = wait_for_ack_timeout_us;
    351a:	4b18      	ldr	r3, [pc, #96]	; (357c <on_radio_disabled_tx+0x70>)
    351c:	681a      	ldr	r2, [r3, #0]
    351e:	4b18      	ldr	r3, [pc, #96]	; (3580 <on_radio_disabled_tx+0x74>)
    3520:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	ESB_SYS_TIMER->CC[1] = esb_cfg.retransmit_delay - 130;
    3524:	8982      	ldrh	r2, [r0, #12]
    3526:	3a82      	subs	r2, #130	; 0x82
    3528:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
	ESB_SYS_TIMER->TASKS_CLEAR = 1;
	ESB_SYS_TIMER->EVENTS_COMPARE[0] = 0;
    352c:	2100      	movs	r1, #0
	ESB_SYS_TIMER->TASKS_CLEAR = 1;
    352e:	2201      	movs	r2, #1
    3530:	60da      	str	r2, [r3, #12]
	ESB_SYS_TIMER->EVENTS_COMPARE[0] = 0;
    3532:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
	ESB_SYS_TIMER->EVENTS_COMPARE[1] = 0;
    3536:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144

	/* Remove */
	ESB_SYS_TIMER->TASKS_START = 1;
    353a:	601a      	str	r2, [r3, #0]

	nrfx_gppi_channels_enable(ppi_all_channels_mask);
    353c:	4b11      	ldr	r3, [pc, #68]	; (3584 <on_radio_disabled_tx+0x78>)
    353e:	681d      	ldr	r5, [r3, #0]
    3540:	4b11      	ldr	r3, [pc, #68]	; (3588 <on_radio_disabled_tx+0x7c>)
    3542:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	nrfx_gppi_channels_disable(1 << ppi_ch_timer_compare1_radio_txen);
    3546:	4d11      	ldr	r5, [pc, #68]	; (358c <on_radio_disabled_tx+0x80>)
    3548:	782d      	ldrb	r5, [r5, #0]
    354a:	40aa      	lsls	r2, r5
    p_reg->CHENCLR = mask;
    354c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

	NRF_RADIO->EVENTS_END = 0;
    3550:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c

	if (esb_cfg.protocol == ESB_PROTOCOL_ESB) {
    3554:	7800      	ldrb	r0, [r0, #0]
    3556:	b910      	cbnz	r0, 355e <on_radio_disabled_tx+0x52>
		update_rf_payload_format(0);
    3558:	4b0d      	ldr	r3, [pc, #52]	; (3590 <on_radio_disabled_tx+0x84>)
    355a:	681b      	ldr	r3, [r3, #0]
    355c:	4798      	blx	r3
	}

	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
    355e:	4b0d      	ldr	r3, [pc, #52]	; (3594 <on_radio_disabled_tx+0x88>)
    3560:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_tx_wait_for_ack;
    3564:	4b0c      	ldr	r3, [pc, #48]	; (3598 <on_radio_disabled_tx+0x8c>)
    3566:	4a0d      	ldr	r2, [pc, #52]	; (359c <on_radio_disabled_tx+0x90>)
    3568:	601a      	str	r2, [r3, #0]
	esb_state = ESB_STATE_PTX_RX_ACK;
    356a:	4b0d      	ldr	r3, [pc, #52]	; (35a0 <on_radio_disabled_tx+0x94>)
    356c:	2203      	movs	r2, #3
    356e:	701a      	strb	r2, [r3, #0]
}
    3570:	bd38      	pop	{r3, r4, r5, pc}
    3572:	bf00      	nop
    3574:	40001000 	.word	0x40001000
    3578:	20000990 	.word	0x20000990
    357c:	20000a18 	.word	0x20000a18
    3580:	4000a000 	.word	0x4000a000
    3584:	200009b4 	.word	0x200009b4
    3588:	4001f000 	.word	0x4001f000
    358c:	20000d3f 	.word	0x20000d3f
    3590:	20000a14 	.word	0x20000a14
    3594:	20000e68 	.word	0x20000e68
    3598:	200009b0 	.word	0x200009b0
    359c:	00003849 	.word	0x00003849
    35a0:	20000d33 	.word	0x20000d33

000035a4 <clear_events_restart_rx>:
		}
	}
}

static void clear_events_restart_rx(void)
{
    35a4:	b510      	push	{r4, lr}
	NRF_RADIO->SHORTS = radio_shorts_common;
    35a6:	4c10      	ldr	r4, [pc, #64]	; (35e8 <clear_events_restart_rx+0x44>)
	update_rf_payload_format(esb_cfg.payload_length);
    35a8:	4a10      	ldr	r2, [pc, #64]	; (35ec <clear_events_restart_rx+0x48>)
	NRF_RADIO->SHORTS = radio_shorts_common;
    35aa:	f240 1313 	movw	r3, #275	; 0x113
    35ae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	update_rf_payload_format(esb_cfg.payload_length);
    35b2:	4b0f      	ldr	r3, [pc, #60]	; (35f0 <clear_events_restart_rx+0x4c>)
    35b4:	7c50      	ldrb	r0, [r2, #17]
    35b6:	681b      	ldr	r3, [r3, #0]
    35b8:	4798      	blx	r3
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
    35ba:	4b0e      	ldr	r3, [pc, #56]	; (35f4 <clear_events_restart_rx+0x50>)
    35bc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	NRF_RADIO->EVENTS_DISABLED = 0;
    35c0:	2300      	movs	r3, #0
    35c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_DISABLE = 1;
    35c6:	2301      	movs	r3, #1
    35c8:	6123      	str	r3, [r4, #16]

	while (NRF_RADIO->EVENTS_DISABLED == 0) {
    35ca:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    35ce:	2b00      	cmp	r3, #0
    35d0:	d0fb      	beq.n	35ca <clear_events_restart_rx+0x26>
		/* wait for register to settle */
	}

	NRF_RADIO->EVENTS_DISABLED = 0;
    35d2:	2300      	movs	r3, #0
    35d4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->SHORTS = radio_shorts_common |
    35d8:	f240 1317 	movw	r3, #279	; 0x117
    35dc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;

	NRF_RADIO->TASKS_RXEN = 1;
    35e0:	2301      	movs	r3, #1
    35e2:	6063      	str	r3, [r4, #4]
}
    35e4:	bd10      	pop	{r4, pc}
    35e6:	bf00      	nop
    35e8:	40001000 	.word	0x40001000
    35ec:	20000990 	.word	0x20000990
    35f0:	20000a14 	.word	0x20000a14
    35f4:	20000e68 	.word	0x20000e68

000035f8 <on_radio_disabled_rx_ack>:
		}
	}
}

static void on_radio_disabled_rx_ack(void)
{
    35f8:	b510      	push	{r4, lr}
	NRF_RADIO->SHORTS = radio_shorts_common |
    35fa:	4c0a      	ldr	r4, [pc, #40]	; (3624 <on_radio_disabled_rx_ack+0x2c>)
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
	update_rf_payload_format(esb_cfg.payload_length);
    35fc:	4a0a      	ldr	r2, [pc, #40]	; (3628 <on_radio_disabled_rx_ack+0x30>)
	NRF_RADIO->SHORTS = radio_shorts_common |
    35fe:	f240 1317 	movw	r3, #279	; 0x117
    3602:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	update_rf_payload_format(esb_cfg.payload_length);
    3606:	4b09      	ldr	r3, [pc, #36]	; (362c <on_radio_disabled_rx_ack+0x34>)
    3608:	7c50      	ldrb	r0, [r2, #17]
    360a:	681b      	ldr	r3, [r3, #0]
    360c:	4798      	blx	r3

	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
    360e:	4b08      	ldr	r3, [pc, #32]	; (3630 <on_radio_disabled_rx_ack+0x38>)
    3610:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_rx;
    3614:	4b07      	ldr	r3, [pc, #28]	; (3634 <on_radio_disabled_rx_ack+0x3c>)
    3616:	4a08      	ldr	r2, [pc, #32]	; (3638 <on_radio_disabled_rx_ack+0x40>)
    3618:	601a      	str	r2, [r3, #0]

	esb_state = ESB_STATE_PRX;
    361a:	4b08      	ldr	r3, [pc, #32]	; (363c <on_radio_disabled_rx_ack+0x44>)
    361c:	2204      	movs	r2, #4
    361e:	701a      	strb	r2, [r3, #0]
}
    3620:	bd10      	pop	{r4, pc}
    3622:	bf00      	nop
    3624:	40001000 	.word	0x40001000
    3628:	20000990 	.word	0x20000990
    362c:	20000a14 	.word	0x20000a14
    3630:	20000e68 	.word	0x20000e68
    3634:	200009b0 	.word	0x200009b0
    3638:	00003bf1 	.word	0x00003bf1
    363c:	20000d33 	.word	0x20000d33

00003640 <tx_fifo_remove_last.part.0>:
	__asm__ volatile(
    3640:	f04f 0320 	mov.w	r3, #32
    3644:	f3ef 8111 	mrs	r1, BASEPRI
    3648:	f383 8812 	msr	BASEPRI_MAX, r3
    364c:	f3bf 8f6f 	isb	sy
	tx_fifo.count--;
    3650:	4b07      	ldr	r3, [pc, #28]	; (3670 <tx_fifo_remove_last.part.0+0x30>)
    3652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3654:	3a01      	subs	r2, #1
    3656:	629a      	str	r2, [r3, #40]	; 0x28
	if (++tx_fifo.front >= CONFIG_ESB_TX_FIFO_SIZE) {
    3658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    365a:	3201      	adds	r2, #1
    365c:	2a07      	cmp	r2, #7
		tx_fifo.front = 0;
    365e:	bf88      	it	hi
    3660:	2200      	movhi	r2, #0
    3662:	625a      	str	r2, [r3, #36]	; 0x24
	__asm__ volatile(
    3664:	f381 8811 	msr	BASEPRI, r1
    3668:	f3bf 8f6f 	isb	sy
}
    366c:	4770      	bx	lr
    366e:	bf00      	nop
    3670:	200009e8 	.word	0x200009e8

00003674 <rx_fifo_push_rfbuf.part.0>:
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
    3674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
    3678:	4b1f      	ldr	r3, [pc, #124]	; (36f8 <rx_fifo_push_rfbuf.part.0+0x84>)
    367a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 36fc <rx_fifo_push_rfbuf.part.0+0x88>
    367e:	781a      	ldrb	r2, [r3, #0]
    3680:	2a01      	cmp	r2, #1
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
    3682:	4607      	mov	r7, r0
    3684:	460e      	mov	r6, r1
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
    3686:	d109      	bne.n	369c <rx_fifo_push_rfbuf.part.0+0x28>
		if (rx_payload_buffer[0] > CONFIG_ESB_MAX_PAYLOAD_LENGTH) {
    3688:	f898 3000 	ldrb.w	r3, [r8]
    368c:	2b20      	cmp	r3, #32
    368e:	d831      	bhi.n	36f4 <rx_fifo_push_rfbuf.part.0+0x80>
		rx_fifo.payload[rx_fifo.back]->length = rx_payload_buffer[0];
    3690:	4a1b      	ldr	r2, [pc, #108]	; (3700 <rx_fifo_push_rfbuf.part.0+0x8c>)
    3692:	6a11      	ldr	r1, [r2, #32]
    3694:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
    3698:	7013      	strb	r3, [r2, #0]
    369a:	e006      	b.n	36aa <rx_fifo_push_rfbuf.part.0+0x36>
		rx_fifo.payload[rx_fifo.back]->length = rx_payload_buffer[0];
    369c:	4a18      	ldr	r2, [pc, #96]	; (3700 <rx_fifo_push_rfbuf.part.0+0x8c>)
    369e:	6a11      	ldr	r1, [r2, #32]
    36a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
	} else if (esb_cfg.mode == ESB_MODE_PTX) {
    36a4:	7859      	ldrb	r1, [r3, #1]
    36a6:	bb19      	cbnz	r1, 36f0 <rx_fifo_push_rfbuf.part.0+0x7c>
		rx_fifo.payload[rx_fifo.back]->length = 0;
    36a8:	7011      	strb	r1, [r2, #0]
	memcpy(rx_fifo.payload[rx_fifo.back]->data, &rx_payload_buffer[2],
    36aa:	4c15      	ldr	r4, [pc, #84]	; (3700 <rx_fifo_push_rfbuf.part.0+0x8c>)
    36ac:	4915      	ldr	r1, [pc, #84]	; (3704 <rx_fifo_push_rfbuf.part.0+0x90>)
    36ae:	6a23      	ldr	r3, [r4, #32]
    36b0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    36b4:	f810 2b05 	ldrb.w	r2, [r0], #5
    36b8:	f003 ffbb 	bl	7632 <memcpy>
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
    36bc:	6a23      	ldr	r3, [r4, #32]
	rx_fifo.payload[rx_fifo.back]->rssi = NRF_RADIO->RSSISAMPLE;
    36be:	4a12      	ldr	r2, [pc, #72]	; (3708 <rx_fifo_push_rfbuf.part.0+0x94>)
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
    36c0:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	if (++rx_fifo.back >= CONFIG_ESB_RX_FIFO_SIZE) {
    36c4:	3301      	adds	r3, #1
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
    36c6:	706f      	strb	r7, [r5, #1]
	rx_fifo.payload[rx_fifo.back]->rssi = NRF_RADIO->RSSISAMPLE;
    36c8:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
    36cc:	70aa      	strb	r2, [r5, #2]
	if (++rx_fifo.back >= CONFIG_ESB_RX_FIFO_SIZE) {
    36ce:	2b07      	cmp	r3, #7
		rx_fifo.back = 0;
    36d0:	bf88      	it	hi
    36d2:	2300      	movhi	r3, #0
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
    36d4:	f898 2001 	ldrb.w	r2, [r8, #1]
		rx_fifo.back = 0;
    36d8:	6223      	str	r3, [r4, #32]
	rx_fifo.count++;
    36da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	rx_fifo.payload[rx_fifo.back]->pid = pid;
    36dc:	712e      	strb	r6, [r5, #4]
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
    36de:	43d2      	mvns	r2, r2
    36e0:	f002 0201 	and.w	r2, r2, #1
	rx_fifo.count++;
    36e4:	3301      	adds	r3, #1
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
    36e6:	70ea      	strb	r2, [r5, #3]
	rx_fifo.count++;
    36e8:	62a3      	str	r3, [r4, #40]	; 0x28
	return true;
    36ea:	2001      	movs	r0, #1
}
    36ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
    36f0:	7c5b      	ldrb	r3, [r3, #17]
    36f2:	e7d1      	b.n	3698 <rx_fifo_push_rfbuf.part.0+0x24>
			return false;
    36f4:	2000      	movs	r0, #0
    36f6:	e7f9      	b.n	36ec <rx_fifo_push_rfbuf.part.0+0x78>
    36f8:	20000990 	.word	0x20000990
    36fc:	20000e68 	.word	0x20000e68
    3700:	200009bc 	.word	0x200009bc
    3704:	20000e6a 	.word	0x20000e6a
    3708:	40001000 	.word	0x40001000

0000370c <start_tx_transaction>:
{
    370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	last_tx_attempts = 1;
    370e:	4b3f      	ldr	r3, [pc, #252]	; (380c <start_tx_transaction+0x100>)
	switch (esb_cfg.protocol) {
    3710:	4f3f      	ldr	r7, [pc, #252]	; (3810 <start_tx_transaction+0x104>)
	current_payload = tx_fifo.payload[tx_fifo.front];
    3712:	4e40      	ldr	r6, [pc, #256]	; (3814 <start_tx_transaction+0x108>)
	switch (esb_cfg.protocol) {
    3714:	783c      	ldrb	r4, [r7, #0]
    3716:	4d40      	ldr	r5, [pc, #256]	; (3818 <start_tx_transaction+0x10c>)
	last_tx_attempts = 1;
    3718:	2201      	movs	r2, #1
    371a:	601a      	str	r2, [r3, #0]
	current_payload = tx_fifo.payload[tx_fifo.front];
    371c:	4b3f      	ldr	r3, [pc, #252]	; (381c <start_tx_transaction+0x110>)
    371e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3724:	6031      	str	r1, [r6, #0]
	switch (esb_cfg.protocol) {
    3726:	b30c      	cbz	r4, 376c <start_tx_transaction+0x60>
    3728:	2c01      	cmp	r4, #1
    372a:	d03e      	beq.n	37aa <start_tx_transaction+0x9e>
	NRF_RADIO->TXADDRESS = current_payload->pipe;
    372c:	6833      	ldr	r3, [r6, #0]
    372e:	4c3c      	ldr	r4, [pc, #240]	; (3820 <start_tx_transaction+0x114>)
    3730:	785b      	ldrb	r3, [r3, #1]
    3732:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES = 1 << current_payload->pipe;
    3736:	2601      	movs	r6, #1
    3738:	fa06 f303 	lsl.w	r3, r6, r3
    373c:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
    3740:	4b38      	ldr	r3, [pc, #224]	; (3824 <start_tx_transaction+0x118>)
    3742:	7cdb      	ldrb	r3, [r3, #19]
    3744:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    3748:	4b37      	ldr	r3, [pc, #220]	; (3828 <start_tx_transaction+0x11c>)
	NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
    374a:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
    374e:	2202      	movs	r2, #2
    3750:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    3754:	4630      	mov	r0, r6
    3756:	f7fe f8db 	bl	1910 <arch_irq_enable>
	NRF_RADIO->EVENTS_ADDRESS = 0;
    375a:	2300      	movs	r3, #0
    375c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    3760:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	NRF_RADIO->EVENTS_DISABLED = 0;
    3764:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_TXEN = 1;
    3768:	6026      	str	r6, [r4, #0]
}
    376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		update_rf_payload_format(current_payload->length);
    376c:	4b2f      	ldr	r3, [pc, #188]	; (382c <start_tx_transaction+0x120>)
    376e:	7808      	ldrb	r0, [r1, #0]
    3770:	681b      	ldr	r3, [r3, #0]
    3772:	4798      	blx	r3
		tx_payload_buffer[0] = current_payload->pid;
    3774:	6831      	ldr	r1, [r6, #0]
		tx_payload_buffer[1] = 0;
    3776:	706c      	strb	r4, [r5, #1]
		tx_payload_buffer[0] = current_payload->pid;
    3778:	790b      	ldrb	r3, [r1, #4]
    377a:	702b      	strb	r3, [r5, #0]
		memcpy(&tx_payload_buffer[2], current_payload->data,
    377c:	f811 2b05 	ldrb.w	r2, [r1], #5
    3780:	1ca8      	adds	r0, r5, #2
    3782:	f003 ff56 	bl	7632 <memcpy>
		NRF_RADIO->SHORTS = radio_shorts_common |
    3786:	4b26      	ldr	r3, [pc, #152]	; (3820 <start_tx_transaction+0x114>)
    3788:	f240 121b 	movw	r2, #283	; 0x11b
    378c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk |
    3790:	2211      	movs	r2, #17
    3792:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		retransmits_remaining = esb_cfg.retransmit_count;
    3796:	4b26      	ldr	r3, [pc, #152]	; (3830 <start_tx_transaction+0x124>)
    3798:	89fa      	ldrh	r2, [r7, #14]
    379a:	601a      	str	r2, [r3, #0]
		on_radio_disabled = on_radio_disabled_tx;
    379c:	4b25      	ldr	r3, [pc, #148]	; (3834 <start_tx_transaction+0x128>)
    379e:	4a26      	ldr	r2, [pc, #152]	; (3838 <start_tx_transaction+0x12c>)
    37a0:	601a      	str	r2, [r3, #0]
		esb_state = ESB_STATE_PTX_TX_ACK;
    37a2:	4b26      	ldr	r3, [pc, #152]	; (383c <start_tx_transaction+0x130>)
    37a4:	2202      	movs	r2, #2
    37a6:	701a      	strb	r2, [r3, #0]
		break;
    37a8:	e7c0      	b.n	372c <start_tx_transaction+0x20>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    37aa:	78cb      	ldrb	r3, [r1, #3]
    37ac:	b113      	cbz	r3, 37b4 <start_tx_transaction+0xa8>
    37ae:	7cbc      	ldrb	r4, [r7, #18]
    37b0:	f084 0401 	eor.w	r4, r4, #1
		tx_payload_buffer[0] = current_payload->length;
    37b4:	780a      	ldrb	r2, [r1, #0]
    37b6:	702a      	strb	r2, [r5, #0]
		tx_payload_buffer[1] |= current_payload->noack ? 0x00 : 0x01;
    37b8:	fab3 f383 	clz	r3, r3
		tx_payload_buffer[1] = current_payload->pid << 1;
    37bc:	790a      	ldrb	r2, [r1, #4]
		memcpy(&tx_payload_buffer[2], current_payload->data,
    37be:	4820      	ldr	r0, [pc, #128]	; (3840 <start_tx_transaction+0x134>)
		tx_payload_buffer[1] |= current_payload->noack ? 0x00 : 0x01;
    37c0:	095b      	lsrs	r3, r3, #5
    37c2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    37c6:	706b      	strb	r3, [r5, #1]
		memcpy(&tx_payload_buffer[2], current_payload->data,
    37c8:	f811 2b05 	ldrb.w	r2, [r1], #5
    37cc:	f003 ff31 	bl	7632 <memcpy>
		if (ack) {
    37d0:	4b13      	ldr	r3, [pc, #76]	; (3820 <start_tx_transaction+0x114>)
    37d2:	4918      	ldr	r1, [pc, #96]	; (3834 <start_tx_transaction+0x128>)
    37d4:	4a19      	ldr	r2, [pc, #100]	; (383c <start_tx_transaction+0x130>)
    37d6:	b174      	cbz	r4, 37f6 <start_tx_transaction+0xea>
			NRF_RADIO->SHORTS = radio_shorts_common |
    37d8:	f240 101b 	movw	r0, #283	; 0x11b
    37dc:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk |
    37e0:	2011      	movs	r0, #17
    37e2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
			retransmits_remaining = esb_cfg.retransmit_count;
    37e6:	4b12      	ldr	r3, [pc, #72]	; (3830 <start_tx_transaction+0x124>)
    37e8:	89f8      	ldrh	r0, [r7, #14]
    37ea:	6018      	str	r0, [r3, #0]
			on_radio_disabled = on_radio_disabled_tx;
    37ec:	4b12      	ldr	r3, [pc, #72]	; (3838 <start_tx_transaction+0x12c>)
    37ee:	600b      	str	r3, [r1, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    37f0:	2302      	movs	r3, #2
			esb_state = ESB_STATE_PTX_TX;
    37f2:	7013      	strb	r3, [r2, #0]
    37f4:	e79a      	b.n	372c <start_tx_transaction+0x20>
			NRF_RADIO->SHORTS = radio_shorts_common;
    37f6:	f240 1013 	movw	r0, #275	; 0x113
    37fa:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
    37fe:	2010      	movs	r0, #16
    3800:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
			on_radio_disabled = on_radio_disabled_tx_noack;
    3804:	4b0f      	ldr	r3, [pc, #60]	; (3844 <start_tx_transaction+0x138>)
    3806:	600b      	str	r3, [r1, #0]
			esb_state = ESB_STATE_PTX_TX;
    3808:	2301      	movs	r3, #1
    380a:	e7f2      	b.n	37f2 <start_tx_transaction+0xe6>
    380c:	200009ac 	.word	0x200009ac
    3810:	20000990 	.word	0x20000990
    3814:	2000098c 	.word	0x2000098c
    3818:	20000fb2 	.word	0x20000fb2
    381c:	200009e8 	.word	0x200009e8
    3820:	40001000 	.word	0x40001000
    3824:	20000054 	.word	0x20000054
    3828:	e000e100 	.word	0xe000e100
    382c:	20000a14 	.word	0x20000a14
    3830:	200009b8 	.word	0x200009b8
    3834:	200009b0 	.word	0x200009b0
    3838:	0000350d 	.word	0x0000350d
    383c:	20000d33 	.word	0x20000d33
    3840:	20000fb4 	.word	0x20000fb4
    3844:	00003a99 	.word	0x00003a99

00003848 <on_radio_disabled_tx_wait_for_ack>:
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
    3848:	4b43      	ldr	r3, [pc, #268]	; (3958 <on_radio_disabled_tx_wait_for_ack+0x110>)
    384a:	681a      	ldr	r2, [r3, #0]
    384c:	4b43      	ldr	r3, [pc, #268]	; (395c <on_radio_disabled_tx_wait_for_ack+0x114>)
{
    384e:	b570      	push	{r4, r5, r6, lr}
    3850:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	if (NRF_RADIO->EVENTS_END && NRF_RADIO->CRCSTATUS != 0) {
    3854:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
    3858:	4a41      	ldr	r2, [pc, #260]	; (3960 <on_radio_disabled_tx_wait_for_ack+0x118>)
    385a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    385e:	2900      	cmp	r1, #0
    3860:	d042      	beq.n	38e8 <on_radio_disabled_tx_wait_for_ack+0xa0>
    3862:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3866:	2b00      	cmp	r3, #0
    3868:	d03e      	beq.n	38e8 <on_radio_disabled_tx_wait_for_ack+0xa0>
		ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
    386a:	4b3e      	ldr	r3, [pc, #248]	; (3964 <on_radio_disabled_tx_wait_for_ack+0x11c>)
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    386c:	4c3e      	ldr	r4, [pc, #248]	; (3968 <on_radio_disabled_tx_wait_for_ack+0x120>)
		last_tx_attempts = esb_cfg.retransmit_count -
    386e:	4d3f      	ldr	r5, [pc, #252]	; (396c <on_radio_disabled_tx_wait_for_ack+0x124>)
	if (tx_fifo.count == 0) {
    3870:	4e3f      	ldr	r6, [pc, #252]	; (3970 <on_radio_disabled_tx_wait_for_ack+0x128>)
		ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
    3872:	2101      	movs	r1, #1
    3874:	6119      	str	r1, [r3, #16]
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    3876:	6823      	ldr	r3, [r4, #0]
    3878:	430b      	orrs	r3, r1
    387a:	6023      	str	r3, [r4, #0]
		last_tx_attempts = esb_cfg.retransmit_count -
    387c:	6812      	ldr	r2, [r2, #0]
    387e:	89eb      	ldrh	r3, [r5, #14]
    3880:	1a9b      	subs	r3, r3, r2
    3882:	4a3c      	ldr	r2, [pc, #240]	; (3974 <on_radio_disabled_tx_wait_for_ack+0x12c>)
				   retransmits_remaining + 1;
    3884:	440b      	add	r3, r1
		last_tx_attempts = esb_cfg.retransmit_count -
    3886:	6013      	str	r3, [r2, #0]
	if (tx_fifo.count == 0) {
    3888:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    388a:	b10b      	cbz	r3, 3890 <on_radio_disabled_tx_wait_for_ack+0x48>
    388c:	f7ff fed8 	bl	3640 <tx_fifo_remove_last.part.0>
		if (esb_cfg.protocol != ESB_PROTOCOL_ESB &&
    3890:	782b      	ldrb	r3, [r5, #0]
    3892:	b19b      	cbz	r3, 38bc <on_radio_disabled_tx_wait_for_ack+0x74>
		    rx_payload_buffer[0] > 0) {
    3894:	4b38      	ldr	r3, [pc, #224]	; (3978 <on_radio_disabled_tx_wait_for_ack+0x130>)
		if (esb_cfg.protocol != ESB_PROTOCOL_ESB &&
    3896:	781a      	ldrb	r2, [r3, #0]
    3898:	b182      	cbz	r2, 38bc <on_radio_disabled_tx_wait_for_ack+0x74>
			if (rx_fifo_push_rfbuf((uint8_t)NRF_RADIO->TXADDRESS,
    389a:	4a38      	ldr	r2, [pc, #224]	; (397c <on_radio_disabled_tx_wait_for_ack+0x134>)
    389c:	f8d2 052c 	ldr.w	r0, [r2, #1324]	; 0x52c
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    38a0:	4a37      	ldr	r2, [pc, #220]	; (3980 <on_radio_disabled_tx_wait_for_ack+0x138>)
    38a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    38a4:	2a07      	cmp	r2, #7
    38a6:	d809      	bhi.n	38bc <on_radio_disabled_tx_wait_for_ack+0x74>
			if (rx_fifo_push_rfbuf((uint8_t)NRF_RADIO->TXADDRESS,
    38a8:	7859      	ldrb	r1, [r3, #1]
    38aa:	b2c0      	uxtb	r0, r0
    38ac:	0849      	lsrs	r1, r1, #1
    38ae:	f7ff fee1 	bl	3674 <rx_fifo_push_rfbuf.part.0>
    38b2:	b118      	cbz	r0, 38bc <on_radio_disabled_tx_wait_for_ack+0x74>
				interrupt_flags |=
    38b4:	6823      	ldr	r3, [r4, #0]
    38b6:	f043 0304 	orr.w	r3, r3, #4
    38ba:	6023      	str	r3, [r4, #0]
		if ((tx_fifo.count == 0) ||
    38bc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    38be:	4b31      	ldr	r3, [pc, #196]	; (3984 <on_radio_disabled_tx_wait_for_ack+0x13c>)
    38c0:	b112      	cbz	r2, 38c8 <on_radio_disabled_tx_wait_for_ack+0x80>
    38c2:	7c2a      	ldrb	r2, [r5, #16]
    38c4:	2a01      	cmp	r2, #1
    38c6:	d107      	bne.n	38d8 <on_radio_disabled_tx_wait_for_ack+0x90>
			esb_state = ESB_STATE_IDLE;
    38c8:	4a2f      	ldr	r2, [pc, #188]	; (3988 <on_radio_disabled_tx_wait_for_ack+0x140>)
    38ca:	2100      	movs	r1, #0
    38cc:	7011      	strb	r1, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    38d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    38d6:	bd70      	pop	{r4, r5, r6, pc}
    38d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    38dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    38e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			start_tx_transaction();
    38e4:	f7ff bf12 	b.w	370c <start_tx_transaction>
		if (retransmits_remaining-- == 0) {
    38e8:	6813      	ldr	r3, [r2, #0]
    38ea:	4d27      	ldr	r5, [pc, #156]	; (3988 <on_radio_disabled_tx_wait_for_ack+0x140>)
    38ec:	1e59      	subs	r1, r3, #1
    38ee:	6011      	str	r1, [r2, #0]
    38f0:	b97b      	cbnz	r3, 3912 <on_radio_disabled_tx_wait_for_ack+0xca>
			ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
    38f2:	4a1c      	ldr	r2, [pc, #112]	; (3964 <on_radio_disabled_tx_wait_for_ack+0x11c>)
    38f4:	2101      	movs	r1, #1
    38f6:	6111      	str	r1, [r2, #16]
			last_tx_attempts = esb_cfg.retransmit_count + 1;
    38f8:	4a1c      	ldr	r2, [pc, #112]	; (396c <on_radio_disabled_tx_wait_for_ack+0x124>)
    38fa:	89d2      	ldrh	r2, [r2, #14]
    38fc:	440a      	add	r2, r1
    38fe:	491d      	ldr	r1, [pc, #116]	; (3974 <on_radio_disabled_tx_wait_for_ack+0x12c>)
    3900:	600a      	str	r2, [r1, #0]
			interrupt_flags |= INT_TX_FAILED_MSK;
    3902:	4919      	ldr	r1, [pc, #100]	; (3968 <on_radio_disabled_tx_wait_for_ack+0x120>)
    3904:	680a      	ldr	r2, [r1, #0]
    3906:	f042 0202 	orr.w	r2, r2, #2
    390a:	600a      	str	r2, [r1, #0]
			esb_state = ESB_STATE_IDLE;
    390c:	702b      	strb	r3, [r5, #0]
    390e:	4b1d      	ldr	r3, [pc, #116]	; (3984 <on_radio_disabled_tx_wait_for_ack+0x13c>)
    3910:	e7dd      	b.n	38ce <on_radio_disabled_tx_wait_for_ack+0x86>
			NRF_RADIO->SHORTS = radio_shorts_common |
    3912:	4c1a      	ldr	r4, [pc, #104]	; (397c <on_radio_disabled_tx_wait_for_ack+0x134>)
    3914:	f240 131b 	movw	r3, #283	; 0x11b
    3918:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			update_rf_payload_format(current_payload->length);
    391c:	4b1b      	ldr	r3, [pc, #108]	; (398c <on_radio_disabled_tx_wait_for_ack+0x144>)
    391e:	681a      	ldr	r2, [r3, #0]
    3920:	4b1b      	ldr	r3, [pc, #108]	; (3990 <on_radio_disabled_tx_wait_for_ack+0x148>)
    3922:	7810      	ldrb	r0, [r2, #0]
    3924:	681b      	ldr	r3, [r3, #0]
    3926:	4798      	blx	r3
			NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
    3928:	4b1a      	ldr	r3, [pc, #104]	; (3994 <on_radio_disabled_tx_wait_for_ack+0x14c>)
    392a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
			on_radio_disabled = on_radio_disabled_tx;
    392e:	4b1a      	ldr	r3, [pc, #104]	; (3998 <on_radio_disabled_tx_wait_for_ack+0x150>)
    3930:	4a1a      	ldr	r2, [pc, #104]	; (399c <on_radio_disabled_tx_wait_for_ack+0x154>)
    3932:	601a      	str	r2, [r3, #0]
			ESB_SYS_TIMER->TASKS_START = 1;
    3934:	490b      	ldr	r1, [pc, #44]	; (3964 <on_radio_disabled_tx_wait_for_ack+0x11c>)
			nrfx_gppi_channels_enable(1 << ppi_ch_timer_compare1_radio_txen);
    3936:	4a1a      	ldr	r2, [pc, #104]	; (39a0 <on_radio_disabled_tx_wait_for_ack+0x158>)
    p_reg->CHENSET = mask;
    3938:	4808      	ldr	r0, [pc, #32]	; (395c <on_radio_disabled_tx_wait_for_ack+0x114>)
			esb_state = ESB_STATE_PTX_TX_ACK;
    393a:	2302      	movs	r3, #2
    393c:	702b      	strb	r3, [r5, #0]
			ESB_SYS_TIMER->TASKS_START = 1;
    393e:	2301      	movs	r3, #1
    3940:	600b      	str	r3, [r1, #0]
			nrfx_gppi_channels_enable(1 << ppi_ch_timer_compare1_radio_txen);
    3942:	7812      	ldrb	r2, [r2, #0]
    3944:	fa03 f202 	lsl.w	r2, r3, r2
    3948:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
			if (ESB_SYS_TIMER->EVENTS_COMPARE[1]) {
    394c:	f8d1 2144 	ldr.w	r2, [r1, #324]	; 0x144
    3950:	2a00      	cmp	r2, #0
    3952:	d0c0      	beq.n	38d6 <on_radio_disabled_tx_wait_for_ack+0x8e>
				NRF_RADIO->TASKS_TXEN = 1;
    3954:	6023      	str	r3, [r4, #0]
}
    3956:	e7be      	b.n	38d6 <on_radio_disabled_tx_wait_for_ack+0x8e>
    3958:	200009b4 	.word	0x200009b4
    395c:	4001f000 	.word	0x4001f000
    3960:	200009b8 	.word	0x200009b8
    3964:	4000a000 	.word	0x4000a000
    3968:	200009a8 	.word	0x200009a8
    396c:	20000990 	.word	0x20000990
    3970:	200009e8 	.word	0x200009e8
    3974:	200009ac 	.word	0x200009ac
    3978:	20000e68 	.word	0x20000e68
    397c:	40001000 	.word	0x40001000
    3980:	200009bc 	.word	0x200009bc
    3984:	e000e100 	.word	0xe000e100
    3988:	20000d33 	.word	0x20000d33
    398c:	2000098c 	.word	0x2000098c
    3990:	20000a14 	.word	0x20000a14
    3994:	20000fb2 	.word	0x20000fb2
    3998:	200009b0 	.word	0x200009b0
    399c:	0000350d 	.word	0x0000350d
    39a0:	20000d3f 	.word	0x20000d3f

000039a4 <RADIO_IRQHandler>:
	irq_unlock(key);
}

static void radio_irq_handler(void)
{
	if (NRF_RADIO->EVENTS_READY &&
    39a4:	4b19      	ldr	r3, [pc, #100]	; (3a0c <RADIO_IRQHandler+0x68>)
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    39a6:	4668      	mov	r0, sp
    39a8:	f020 0107 	bic.w	r1, r0, #7
	if (NRF_RADIO->EVENTS_READY &&
    39ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    39b0:	468d      	mov	sp, r1
    39b2:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
    39b4:	b14a      	cbz	r2, 39ca <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    39b6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    39ba:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
    39bc:	bf41      	itttt	mi
    39be:	2200      	movmi	r2, #0
    39c0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    39c4:	f503 4310 	addmi.w	r3, r3, #36864	; 0x9000
    39c8:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
    39ca:	4b10      	ldr	r3, [pc, #64]	; (3a0c <RADIO_IRQHandler+0x68>)
    39cc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    39d0:	b132      	cbz	r2, 39e0 <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    39d2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    39d6:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
    39d8:	bf44      	itt	mi
    39da:	2200      	movmi	r2, #0
    39dc:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
    39e0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    39e4:	b152      	cbz	r2, 39fc <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    39e6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    39ea:	06d2      	lsls	r2, r2, #27
    39ec:	d506      	bpl.n	39fc <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
    39ee:	2200      	movs	r2, #0
    39f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    39f4:	4b06      	ldr	r3, [pc, #24]	; (3a10 <RADIO_IRQHandler+0x6c>)
    39f6:	681b      	ldr	r3, [r3, #0]
    39f8:	b103      	cbz	r3, 39fc <RADIO_IRQHandler+0x58>
			on_radio_disabled();
    39fa:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    39fc:	f7fd ffe2 	bl	19c4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    3a00:	f7fe f8ca 	bl	1b98 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    3a04:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    3a08:	4685      	mov	sp, r0
    3a0a:	4770      	bx	lr
    3a0c:	40001000 	.word	0x40001000
    3a10:	200009b0 	.word	0x200009b0

00003a14 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    3a14:	4668      	mov	r0, sp
    3a16:	f020 0107 	bic.w	r1, r0, #7
    3a1a:	468d      	mov	sp, r1
    3a1c:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    3a1e:	4b1b      	ldr	r3, [pc, #108]	; (3a8c <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    3a20:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    3a22:	681b      	ldr	r3, [r3, #0]
    3a24:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    3a26:	f04f 0320 	mov.w	r3, #32
    3a2a:	f3ef 8111 	mrs	r1, BASEPRI
    3a2e:	f383 8812 	msr	BASEPRI_MAX, r3
    3a32:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    3a36:	4b16      	ldr	r3, [pc, #88]	; (3a90 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    3a38:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    3a3a:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    3a3c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    3a3e:	f381 8811 	msr	BASEPRI, r1
    3a42:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    3a46:	4c13      	ldr	r4, [pc, #76]	; (3a94 <SWI0_EGU0_IRQHandler+0x80>)
    3a48:	6823      	ldr	r3, [r4, #0]
    3a4a:	b1ab      	cbz	r3, 3a78 <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    3a4c:	07e9      	lsls	r1, r5, #31
    3a4e:	d503      	bpl.n	3a58 <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    3a50:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    3a54:	4668      	mov	r0, sp
    3a56:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    3a58:	07aa      	lsls	r2, r5, #30
    3a5a:	d505      	bpl.n	3a68 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    3a5c:	2301      	movs	r3, #1
    3a5e:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    3a62:	4668      	mov	r0, sp
    3a64:	6823      	ldr	r3, [r4, #0]
    3a66:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    3a68:	076b      	lsls	r3, r5, #29
    3a6a:	d505      	bpl.n	3a78 <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    3a6c:	2302      	movs	r3, #2
    3a6e:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    3a72:	4668      	mov	r0, sp
    3a74:	6823      	ldr	r3, [r4, #0]
    3a76:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    3a78:	f7fd ffa4 	bl	19c4 <_arch_isr_direct_pm>
    3a7c:	f7fe f88c 	bl	1b98 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    3a80:	b002      	add	sp, #8
    3a82:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    3a86:	4685      	mov	sp, r0
    3a88:	4770      	bx	lr
    3a8a:	bf00      	nop
    3a8c:	200009ac 	.word	0x200009ac
    3a90:	200009a8 	.word	0x200009a8
    3a94:	200009a4 	.word	0x200009a4

00003a98 <on_radio_disabled_tx_noack>:
	interrupt_flags |= INT_TX_SUCCESS_MSK;
    3a98:	4a0f      	ldr	r2, [pc, #60]	; (3ad8 <on_radio_disabled_tx_noack+0x40>)
    3a9a:	4810      	ldr	r0, [pc, #64]	; (3adc <on_radio_disabled_tx_noack+0x44>)
    3a9c:	6813      	ldr	r3, [r2, #0]
{
    3a9e:	b510      	push	{r4, lr}
	if (tx_fifo.count == 0) {
    3aa0:	4c0f      	ldr	r4, [pc, #60]	; (3ae0 <on_radio_disabled_tx_noack+0x48>)
	interrupt_flags |= INT_TX_SUCCESS_MSK;
    3aa2:	f043 0301 	orr.w	r3, r3, #1
    3aa6:	6013      	str	r3, [r2, #0]
	if (tx_fifo.count == 0) {
    3aa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3aaa:	b93b      	cbnz	r3, 3abc <on_radio_disabled_tx_noack+0x24>
		esb_state = ESB_STATE_IDLE;
    3aac:	4b0d      	ldr	r3, [pc, #52]	; (3ae4 <on_radio_disabled_tx_noack+0x4c>)
    3aae:	2200      	movs	r2, #0
    3ab0:	701a      	strb	r2, [r3, #0]
    3ab2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    3ab6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
}
    3aba:	bd10      	pop	{r4, pc}
    3abc:	f7ff fdc0 	bl	3640 <tx_fifo_remove_last.part.0>
	if (tx_fifo.count == 0) {
    3ac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d0f2      	beq.n	3aac <on_radio_disabled_tx_noack+0x14>
    3ac6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
}
    3aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ace:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
		start_tx_transaction();
    3ad2:	f7ff be1b 	b.w	370c <start_tx_transaction>
    3ad6:	bf00      	nop
    3ad8:	200009a8 	.word	0x200009a8
    3adc:	e000e100 	.word	0xe000e100
    3ae0:	200009e8 	.word	0x200009e8
    3ae4:	20000d33 	.word	0x20000d33

00003ae8 <update_radio_addresses>:
{
    3ae8:	4601      	mov	r1, r0
	if ((update_mask & ADDR_UPDATE_MASK_BASE0) != 0) {
    3aea:	07c8      	lsls	r0, r1, #31
{
    3aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((update_mask & ADDR_UPDATE_MASK_BASE0) != 0) {
    3aee:	d506      	bpl.n	3afe <update_radio_addresses+0x16>
	return __REV(bytewise_bit_swap(addr));
    3af0:	4838      	ldr	r0, [pc, #224]	; (3bd4 <update_radio_addresses+0xec>)
    3af2:	f003 ffca 	bl	7a8a <bytewise_bit_swap>
		NRF_RADIO->BASE0 = addr_conv(esb_addr.base_addr_p0);
    3af6:	4b38      	ldr	r3, [pc, #224]	; (3bd8 <update_radio_addresses+0xf0>)
  return __builtin_bswap32(value);
    3af8:	ba00      	rev	r0, r0
    3afa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	if ((update_mask & ADDR_UPDATE_MASK_BASE1) != 0) {
    3afe:	078a      	lsls	r2, r1, #30
    3b00:	d506      	bpl.n	3b10 <update_radio_addresses+0x28>
	return __REV(bytewise_bit_swap(addr));
    3b02:	4836      	ldr	r0, [pc, #216]	; (3bdc <update_radio_addresses+0xf4>)
    3b04:	f003 ffc1 	bl	7a8a <bytewise_bit_swap>
		NRF_RADIO->BASE1 = addr_conv(esb_addr.base_addr_p1);
    3b08:	4b33      	ldr	r3, [pc, #204]	; (3bd8 <update_radio_addresses+0xf0>)
    3b0a:	ba00      	rev	r0, r0
    3b0c:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
    3b10:	074b      	lsls	r3, r1, #29
    3b12:	d50a      	bpl.n	3b2a <update_radio_addresses+0x42>
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
    3b14:	4832      	ldr	r0, [pc, #200]	; (3be0 <update_radio_addresses+0xf8>)
		NRF_RADIO->PREFIX0 =
    3b16:	4930      	ldr	r1, [pc, #192]	; (3bd8 <update_radio_addresses+0xf0>)
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
    3b18:	f003 ffb7 	bl	7a8a <bytewise_bit_swap>
		NRF_RADIO->PREFIX0 =
    3b1c:	f8c1 0524 	str.w	r0, [r1, #1316]	; 0x524
			bytewise_bit_swap(&esb_addr.pipe_prefixes[4]);
    3b20:	4830      	ldr	r0, [pc, #192]	; (3be4 <update_radio_addresses+0xfc>)
    3b22:	f003 ffb2 	bl	7a8a <bytewise_bit_swap>
		NRF_RADIO->PREFIX1 =
    3b26:	f8c1 0528 	str.w	r0, [r1, #1320]	; 0x528
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3b2e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3b32:	2a08      	cmp	r2, #8
    3b34:	d14c      	bne.n	3bd0 <update_radio_addresses+0xe8>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3b36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    3b3a:	2b05      	cmp	r3, #5
    3b3c:	d848      	bhi.n	3bd0 <update_radio_addresses+0xe8>
	if (nrf52_errata_143()) {
    3b3e:	4a2a      	ldr	r2, [pc, #168]	; (3be8 <update_radio_addresses+0x100>)
    3b40:	5cd3      	ldrb	r3, [r2, r3]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d044      	beq.n	3bd0 <update_radio_addresses+0xe8>
		esb_addr.addr_length == 5 ? 0xFFFF0000 : 0xFF000000;
    3b46:	4b23      	ldr	r3, [pc, #140]	; (3bd4 <update_radio_addresses+0xec>)
    3b48:	4a28      	ldr	r2, [pc, #160]	; (3bec <update_radio_addresses+0x104>)
    3b4a:	7c5b      	ldrb	r3, [r3, #17]
    3b4c:	2b05      	cmp	r3, #5
	uint32_t addr0 = NRF_RADIO->BASE0 & base_address_mask;
    3b4e:	4b22      	ldr	r3, [pc, #136]	; (3bd8 <update_radio_addresses+0xf0>)
    3b50:	f8d3 151c 	ldr.w	r1, [r3, #1308]	; 0x51c
	uint32_t addr1 = NRF_RADIO->BASE1 & base_address_mask;
    3b54:	f8d3 0520 	ldr.w	r0, [r3, #1312]	; 0x520
		esb_addr.addr_length == 5 ? 0xFFFF0000 : 0xFF000000;
    3b58:	bf18      	it	ne
    3b5a:	f04f 427f 	movne.w	r2, #4278190080	; 0xff000000
	uint32_t addr0 = NRF_RADIO->BASE0 & base_address_mask;
    3b5e:	4011      	ands	r1, r2
	uint32_t addr1 = NRF_RADIO->BASE1 & base_address_mask;
    3b60:	4002      	ands	r2, r0
	if (addr0 == addr1) {
    3b62:	4291      	cmp	r1, r2
    3b64:	d134      	bne.n	3bd0 <update_radio_addresses+0xe8>
		uint32_t prefix0 = NRF_RADIO->PREFIX0 & 0x000000FF;
    3b66:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
		uint32_t prefix1 = (NRF_RADIO->PREFIX0 & 0x0000FF00) >> 8;
    3b6a:	f8d3 6524 	ldr.w	r6, [r3, #1316]	; 0x524
		uint32_t prefix2 = (NRF_RADIO->PREFIX0 & 0x00FF0000) >> 16;
    3b6e:	f8d3 5524 	ldr.w	r5, [r3, #1316]	; 0x524
		uint32_t prefix3 = (NRF_RADIO->PREFIX0 & 0xFF000000) >> 24;
    3b72:	f8d3 c524 	ldr.w	ip, [r3, #1316]	; 0x524
		uint32_t prefix4 = NRF_RADIO->PREFIX1 & 0x000000FF;
    3b76:	f8d3 4528 	ldr.w	r4, [r3, #1320]	; 0x528
		uint32_t prefix5 = (NRF_RADIO->PREFIX1 & 0x0000FF00) >> 8;
    3b7a:	f8d3 0528 	ldr.w	r0, [r3, #1320]	; 0x528
		uint32_t prefix6 = (NRF_RADIO->PREFIX1 & 0x00FF0000) >> 16;
    3b7e:	f8d3 1528 	ldr.w	r1, [r3, #1320]	; 0x528
		uint32_t prefix7 = (NRF_RADIO->PREFIX1 & 0xFF000000) >> 24;
    3b82:	f8d3 7528 	ldr.w	r7, [r3, #1320]	; 0x528
		uint32_t prefix0 = NRF_RADIO->PREFIX0 & 0x000000FF;
    3b86:	b2d2      	uxtb	r2, r2
		uint32_t prefix1 = (NRF_RADIO->PREFIX0 & 0x0000FF00) >> 8;
    3b88:	f3c6 2307 	ubfx	r3, r6, #8, #8
		if (prefix0 == prefix1 || prefix0 == prefix2 ||
    3b8c:	429a      	cmp	r2, r3
    3b8e:	d014      	beq.n	3bba <update_radio_addresses+0xd2>
		uint32_t prefix2 = (NRF_RADIO->PREFIX0 & 0x00FF0000) >> 16;
    3b90:	f3c5 4307 	ubfx	r3, r5, #16, #8
		if (prefix0 == prefix1 || prefix0 == prefix2 ||
    3b94:	429a      	cmp	r2, r3
    3b96:	d010      	beq.n	3bba <update_radio_addresses+0xd2>
    3b98:	ebb2 6f1c 	cmp.w	r2, ip, lsr #24
    3b9c:	d00d      	beq.n	3bba <update_radio_addresses+0xd2>
		uint32_t prefix4 = NRF_RADIO->PREFIX1 & 0x000000FF;
    3b9e:	b2e3      	uxtb	r3, r4
			prefix0 == prefix3 || prefix0 == prefix4 ||
    3ba0:	429a      	cmp	r2, r3
    3ba2:	d00a      	beq.n	3bba <update_radio_addresses+0xd2>
		uint32_t prefix5 = (NRF_RADIO->PREFIX1 & 0x0000FF00) >> 8;
    3ba4:	f3c0 2307 	ubfx	r3, r0, #8, #8
			prefix0 == prefix3 || prefix0 == prefix4 ||
    3ba8:	429a      	cmp	r2, r3
    3baa:	d006      	beq.n	3bba <update_radio_addresses+0xd2>
		uint32_t prefix6 = (NRF_RADIO->PREFIX1 & 0x00FF0000) >> 16;
    3bac:	f3c1 4307 	ubfx	r3, r1, #16, #8
			prefix0 == prefix5 || prefix0 == prefix6 ||
    3bb0:	429a      	cmp	r2, r3
    3bb2:	d002      	beq.n	3bba <update_radio_addresses+0xd2>
    3bb4:	ebb2 6f17 	cmp.w	r2, r7, lsr #24
    3bb8:	d10a      	bne.n	3bd0 <update_radio_addresses+0xe8>
				((*(volatile uint32_t *)0x40001774) & 0xfffffffe) | 0x01000000;
    3bba:	4a07      	ldr	r2, [pc, #28]	; (3bd8 <update_radio_addresses+0xf0>)
    3bbc:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
    3bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3bc4:	f023 0301 	bic.w	r3, r3, #1
    3bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
			*(volatile uint32_t *)0x40001774 =
    3bcc:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
}
    3bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bd2:	bf00      	nop
    3bd4:	20000054 	.word	0x20000054
    3bd8:	40001000 	.word	0x40001000
    3bdc:	20000058 	.word	0x20000058
    3be0:	2000005c 	.word	0x2000005c
    3be4:	20000060 	.word	0x20000060
    3be8:	00008c18 	.word	0x00008c18
    3bec:	ffff0000 	.word	0xffff0000

00003bf0 <on_radio_disabled_rx>:
	if (NRF_RADIO->CRCSTATUS == 0) {
    3bf0:	4b68      	ldr	r3, [pc, #416]	; (3d94 <on_radio_disabled_rx+0x1a4>)
{
    3bf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (NRF_RADIO->CRCSTATUS == 0) {
    3bf6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3bfa:	b922      	cbnz	r2, 3c06 <on_radio_disabled_rx+0x16>
}
    3bfc:	b003      	add	sp, #12
    3bfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_events_restart_rx();
    3c02:	f7ff bccf 	b.w	35a4 <clear_events_restart_rx>
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    3c06:	f8df 9190 	ldr.w	r9, [pc, #400]	; 3d98 <on_radio_disabled_rx+0x1a8>
    3c0a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    3c0e:	2a07      	cmp	r2, #7
    3c10:	d8f4      	bhi.n	3bfc <on_radio_disabled_rx+0xc>
	pipe_info = &rx_pipe_info[NRF_RADIO->RXMATCH];
    3c12:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    3c16:	4c61      	ldr	r4, [pc, #388]	; (3d9c <on_radio_disabled_rx+0x1ac>)
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
    3c18:	f8df 8184 	ldr.w	r8, [pc, #388]	; 3da0 <on_radio_disabled_rx+0x1b0>
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    3c1c:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
    3c20:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
    3c24:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    3c28:	4295      	cmp	r5, r2
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
    3c2a:	ea4f 0350 	mov.w	r3, r0, lsr #1
    3c2e:	ea4f 0581 	mov.w	r5, r1, lsl #2
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    3c32:	f040 808d 	bne.w	3d50 <on_radio_disabled_rx+0x160>
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
    3c36:	1962      	adds	r2, r4, r5
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    3c38:	7892      	ldrb	r2, [r2, #2]
	bool send_rx_event = true;
    3c3a:	429a      	cmp	r2, r3
    3c3c:	bf0c      	ite	eq
    3c3e:	2200      	moveq	r2, #0
    3c40:	2201      	movne	r2, #1
    3c42:	9201      	str	r2, [sp, #4]
    3c44:	bf0c      	ite	eq
    3c46:	2201      	moveq	r2, #1
    3c48:	2200      	movne	r2, #0
	pipe_info->pid = rx_payload_buffer[1] >> 1;
    3c4a:	1966      	adds	r6, r4, r5
    3c4c:	70b3      	strb	r3, [r6, #2]
	pipe_info->crc = NRF_RADIO->RXCRC;
    3c4e:	4b51      	ldr	r3, [pc, #324]	; (3d94 <on_radio_disabled_rx+0x1a4>)
    3c50:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    3c54:	f824 6021 	strh.w	r6, [r4, r1, lsl #2]
	if ((esb_cfg.selective_auto_ack == false) ||
    3c58:	4952      	ldr	r1, [pc, #328]	; (3da4 <on_radio_disabled_rx+0x1b4>)
    3c5a:	7c8e      	ldrb	r6, [r1, #18]
    3c5c:	b116      	cbz	r6, 3c64 <on_radio_disabled_rx+0x74>
    3c5e:	07c0      	lsls	r0, r0, #31
    3c60:	f140 8095 	bpl.w	3d8e <on_radio_disabled_rx+0x19e>
		NRF_RADIO->SHORTS = radio_shorts_common |
    3c64:	f240 101b 	movw	r0, #283	; 0x11b
    3c68:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
		switch (esb_cfg.protocol) {
    3c6c:	780f      	ldrb	r7, [r1, #0]
    3c6e:	4e4e      	ldr	r6, [pc, #312]	; (3da8 <on_radio_disabled_rx+0x1b8>)
    3c70:	2f00      	cmp	r7, #0
    3c72:	f000 8083 	beq.w	3d7c <on_radio_disabled_rx+0x18c>
    3c76:	2f01      	cmp	r7, #1
    3c78:	d141      	bne.n	3cfe <on_radio_disabled_rx+0x10e>
	if (tx_fifo.count > 0 && ack_pl_wrap_pipe[pipe] != 0) {
    3c7a:	484c      	ldr	r0, [pc, #304]	; (3dac <on_radio_disabled_rx+0x1bc>)
	uint32_t pipe = NRF_RADIO->RXMATCH;
    3c7c:	f8d3 a408 	ldr.w	sl, [r3, #1032]	; 0x408
	if (tx_fifo.count > 0 && ack_pl_wrap_pipe[pipe] != 0) {
    3c80:	6a83      	ldr	r3, [r0, #40]	; 0x28
    3c82:	f8df c12c 	ldr.w	ip, [pc, #300]	; 3db0 <on_radio_disabled_rx+0x1c0>
    3c86:	2b00      	cmp	r3, #0
    3c88:	d06f      	beq.n	3d6a <on_radio_disabled_rx+0x17a>
    3c8a:	f8df e128 	ldr.w	lr, [pc, #296]	; 3db4 <on_radio_disabled_rx+0x1c4>
    3c8e:	f85e 102a 	ldr.w	r1, [lr, sl, lsl #2]
    3c92:	2900      	cmp	r1, #0
    3c94:	d069      	beq.n	3d6a <on_radio_disabled_rx+0x17a>
		current_payload = ack_pl_wrap_pipe[pipe]->p_payload;
    3c96:	4f48      	ldr	r7, [pc, #288]	; (3db8 <on_radio_disabled_rx+0x1c8>)
    3c98:	f8d1 b000 	ldr.w	fp, [r1]
    3c9c:	f8c7 b000 	str.w	fp, [r7]
		if (pipe_info->ack_payload == true && !retransmit_payload) {
    3ca0:	eb04 0b05 	add.w	fp, r4, r5
    3ca4:	f89b b003 	ldrb.w	fp, [fp, #3]
    3ca8:	f1bb 0f00 	cmp.w	fp, #0
    3cac:	d010      	beq.n	3cd0 <on_radio_disabled_rx+0xe0>
    3cae:	b97a      	cbnz	r2, 3cd0 <on_radio_disabled_rx+0xe0>
			ack_pl_wrap_pipe[pipe]->in_use = false;
    3cb0:	710a      	strb	r2, [r1, #4]
			tx_fifo.count--;
    3cb2:	3b01      	subs	r3, #1
			ack_pl_wrap_pipe[pipe] = ack_pl_wrap_pipe[pipe]->p_next;
    3cb4:	6889      	ldr	r1, [r1, #8]
    3cb6:	f84e 102a 	str.w	r1, [lr, sl, lsl #2]
			tx_fifo.count--;
    3cba:	6283      	str	r3, [r0, #40]	; 0x28
			if (tx_fifo.count > 0 && ack_pl_wrap_pipe[pipe] != 0) {
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d04b      	beq.n	3d58 <on_radio_disabled_rx+0x168>
    3cc0:	b101      	cbz	r1, 3cc4 <on_radio_disabled_rx+0xd4>
				current_payload = ack_pl_wrap_pipe[pipe]->p_payload;
    3cc2:	6809      	ldr	r1, [r1, #0]
			interrupt_flags |= INT_TX_SUCCESS_MSK;
    3cc4:	4a3d      	ldr	r2, [pc, #244]	; (3dbc <on_radio_disabled_rx+0x1cc>)
    3cc6:	6039      	str	r1, [r7, #0]
    3cc8:	6813      	ldr	r3, [r2, #0]
    3cca:	f043 0301 	orr.w	r3, r3, #1
    3cce:	6013      	str	r3, [r2, #0]
		if (current_payload != 0) {
    3cd0:	f8d7 a000 	ldr.w	sl, [r7]
			update_rf_payload_format(current_payload->length);
    3cd4:	f8dc 2000 	ldr.w	r2, [ip]
			pipe_info->ack_payload = true;
    3cd8:	1963      	adds	r3, r4, r5
		if (current_payload != 0) {
    3cda:	f1ba 0f00 	cmp.w	sl, #0
    3cde:	d03d      	beq.n	3d5c <on_radio_disabled_rx+0x16c>
			pipe_info->ack_payload = true;
    3ce0:	2101      	movs	r1, #1
    3ce2:	70d9      	strb	r1, [r3, #3]
			update_rf_payload_format(current_payload->length);
    3ce4:	f89a 0000 	ldrb.w	r0, [sl]
    3ce8:	4790      	blx	r2
			tx_payload_buffer[0] = current_payload->length;
    3cea:	6839      	ldr	r1, [r7, #0]
			memcpy(&tx_payload_buffer[2],
    3cec:	4834      	ldr	r0, [pc, #208]	; (3dc0 <on_radio_disabled_rx+0x1d0>)
			tx_payload_buffer[0] = current_payload->length;
    3cee:	f811 2b05 	ldrb.w	r2, [r1], #5
    3cf2:	7032      	strb	r2, [r6, #0]
			memcpy(&tx_payload_buffer[2],
    3cf4:	f003 fc9d 	bl	7632 <memcpy>
	tx_payload_buffer[1] = rx_payload_buffer[1];
    3cf8:	f898 3001 	ldrb.w	r3, [r8, #1]
    3cfc:	7073      	strb	r3, [r6, #1]
		esb_state = ESB_STATE_PRX_SEND_ACK;
    3cfe:	4b31      	ldr	r3, [pc, #196]	; (3dc4 <on_radio_disabled_rx+0x1d4>)
    3d00:	2205      	movs	r2, #5
    3d02:	701a      	strb	r2, [r3, #0]
		NRF_RADIO->TXADDRESS = NRF_RADIO->RXMATCH;
    3d04:	4b23      	ldr	r3, [pc, #140]	; (3d94 <on_radio_disabled_rx+0x1a4>)
    3d06:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    3d0a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
    3d0e:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
		on_radio_disabled = on_radio_disabled_rx_ack;
    3d12:	4b2d      	ldr	r3, [pc, #180]	; (3dc8 <on_radio_disabled_rx+0x1d8>)
    3d14:	4a2d      	ldr	r2, [pc, #180]	; (3dcc <on_radio_disabled_rx+0x1dc>)
    3d16:	601a      	str	r2, [r3, #0]
	if (send_rx_event) {
    3d18:	9b01      	ldr	r3, [sp, #4]
    3d1a:	b1b3      	cbz	r3, 3d4a <on_radio_disabled_rx+0x15a>
		if (rx_fifo_push_rfbuf(NRF_RADIO->RXMATCH, pipe_info->pid)) {
    3d1c:	4b1d      	ldr	r3, [pc, #116]	; (3d94 <on_radio_disabled_rx+0x1a4>)
    3d1e:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    3d22:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    3d26:	2b07      	cmp	r3, #7
    3d28:	d80f      	bhi.n	3d4a <on_radio_disabled_rx+0x15a>
		if (rx_fifo_push_rfbuf(NRF_RADIO->RXMATCH, pipe_info->pid)) {
    3d2a:	442c      	add	r4, r5
    3d2c:	b2c0      	uxtb	r0, r0
    3d2e:	78a1      	ldrb	r1, [r4, #2]
    3d30:	f7ff fca0 	bl	3674 <rx_fifo_push_rfbuf.part.0>
    3d34:	b148      	cbz	r0, 3d4a <on_radio_disabled_rx+0x15a>
			interrupt_flags |= INT_RX_DATA_RECEIVED_MSK;
    3d36:	4a21      	ldr	r2, [pc, #132]	; (3dbc <on_radio_disabled_rx+0x1cc>)
    3d38:	6813      	ldr	r3, [r2, #0]
    3d3a:	f043 0304 	orr.w	r3, r3, #4
    3d3e:	6013      	str	r3, [r2, #0]
    3d40:	4b23      	ldr	r3, [pc, #140]	; (3dd0 <on_radio_disabled_rx+0x1e0>)
    3d42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3d46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    3d4a:	b003      	add	sp, #12
    3d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool send_rx_event = true;
    3d50:	2201      	movs	r2, #1
    3d52:	9201      	str	r2, [sp, #4]
	bool retransmit_payload = false;
    3d54:	2200      	movs	r2, #0
    3d56:	e778      	b.n	3c4a <on_radio_disabled_rx+0x5a>
				current_payload = 0;
    3d58:	4611      	mov	r1, r2
    3d5a:	e7b3      	b.n	3cc4 <on_radio_disabled_rx+0xd4>
			pipe_info->ack_payload = false;
    3d5c:	f883 a003 	strb.w	sl, [r3, #3]
			update_rf_payload_format(0);
    3d60:	4650      	mov	r0, sl
    3d62:	4790      	blx	r2
			tx_payload_buffer[0] = 0;
    3d64:	f886 a000 	strb.w	sl, [r6]
    3d68:	e7c6      	b.n	3cf8 <on_radio_disabled_rx+0x108>
		pipe_info->ack_payload = false;
    3d6a:	1963      	adds	r3, r4, r5
    3d6c:	2700      	movs	r7, #0
    3d6e:	70df      	strb	r7, [r3, #3]
		update_rf_payload_format(0);
    3d70:	4638      	mov	r0, r7
    3d72:	f8dc 3000 	ldr.w	r3, [ip]
    3d76:	4798      	blx	r3
		tx_payload_buffer[0] = 0;
    3d78:	7037      	strb	r7, [r6, #0]
    3d7a:	e7bd      	b.n	3cf8 <on_radio_disabled_rx+0x108>
			update_rf_payload_format(0);
    3d7c:	4b0c      	ldr	r3, [pc, #48]	; (3db0 <on_radio_disabled_rx+0x1c0>)
    3d7e:	4638      	mov	r0, r7
    3d80:	681b      	ldr	r3, [r3, #0]
    3d82:	4798      	blx	r3
			tx_payload_buffer[0] = rx_payload_buffer[0];
    3d84:	f898 3000 	ldrb.w	r3, [r8]
    3d88:	7033      	strb	r3, [r6, #0]
			tx_payload_buffer[1] = 0;
    3d8a:	7077      	strb	r7, [r6, #1]
			break;
    3d8c:	e7b7      	b.n	3cfe <on_radio_disabled_rx+0x10e>
		clear_events_restart_rx();
    3d8e:	f7ff fc09 	bl	35a4 <clear_events_restart_rx>
    3d92:	e7c1      	b.n	3d18 <on_radio_disabled_rx+0x128>
    3d94:	40001000 	.word	0x40001000
    3d98:	200009bc 	.word	0x200009bc
    3d9c:	20000cec 	.word	0x20000cec
    3da0:	20000e68 	.word	0x20000e68
    3da4:	20000990 	.word	0x20000990
    3da8:	20000fb2 	.word	0x20000fb2
    3dac:	200009e8 	.word	0x200009e8
    3db0:	20000a14 	.word	0x20000a14
    3db4:	2000096c 	.word	0x2000096c
    3db8:	2000098c 	.word	0x2000098c
    3dbc:	200009a8 	.word	0x200009a8
    3dc0:	20000fb4 	.word	0x20000fb4
    3dc4:	20000d33 	.word	0x20000d33
    3dc8:	200009b0 	.word	0x200009b0
    3dcc:	000035f9 	.word	0x000035f9
    3dd0:	e000e100 	.word	0xe000e100

00003dd4 <esb_disable>:
}

void esb_disable(void)
{
	/*  Clear PPI */
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
    3dd4:	4b12      	ldr	r3, [pc, #72]	; (3e20 <esb_disable+0x4c>)
	esb_state = ESB_STATE_IDLE;
	esb_initialized = false;

	reset_fifos();

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3dd6:	4813      	ldr	r0, [pc, #76]	; (3e24 <esb_disable+0x50>)
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
    3dd8:	681a      	ldr	r2, [r3, #0]
    p_reg->CHENCLR = mask;
    3dda:	4b13      	ldr	r3, [pc, #76]	; (3e28 <esb_disable+0x54>)
{
    3ddc:	b510      	push	{r4, lr}
    3dde:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	esb_state = ESB_STATE_IDLE;
    3de2:	4b12      	ldr	r3, [pc, #72]	; (3e2c <esb_disable+0x58>)
    3de4:	2400      	movs	r4, #0
    3de6:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
    3de8:	4b11      	ldr	r3, [pc, #68]	; (3e30 <esb_disable+0x5c>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3dea:	4621      	mov	r1, r4
	esb_initialized = false;
    3dec:	701c      	strb	r4, [r3, #0]
	reset_fifos();
    3dee:	f7ff fb7f 	bl	34f0 <reset_fifos>
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3df2:	2220      	movs	r2, #32
    3df4:	f003 fc28 	bl	7648 <memset>
	memset(pids, 0, sizeof(pids));
    3df8:	2208      	movs	r2, #8
    3dfa:	4621      	mov	r1, r4
    3dfc:	480d      	ldr	r0, [pc, #52]	; (3e34 <esb_disable+0x60>)
    3dfe:	f003 fc23 	bl	7648 <memset>

	/*  Disable the interrupts used by ESB */
	irq_disable(RADIO_IRQn);
    3e02:	2001      	movs	r0, #1
    3e04:	f7fd fd94 	bl	1930 <arch_irq_disable>
	irq_disable(ESB_SYS_TIMER_IRQn);
    3e08:	200a      	movs	r0, #10
    3e0a:	f7fd fd91 	bl	1930 <arch_irq_disable>
	irq_disable(ESB_EVT_IRQ);
    3e0e:	2014      	movs	r0, #20
    3e10:	f7fd fd8e 	bl	1930 <arch_irq_disable>

	NRF_RADIO->SHORTS =
    3e14:	4b08      	ldr	r3, [pc, #32]	; (3e38 <esb_disable+0x64>)
    3e16:	2203      	movs	r2, #3
    3e18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    RADIO_SHORTS_READY_START_Enabled << RADIO_SHORTS_READY_START_Pos |
	    RADIO_SHORTS_END_DISABLE_Enabled << RADIO_SHORTS_END_DISABLE_Pos;
}
    3e1c:	bd10      	pop	{r4, pc}
    3e1e:	bf00      	nop
    3e20:	200009b4 	.word	0x200009b4
    3e24:	20000cec 	.word	0x20000cec
    3e28:	4001f000 	.word	0x4001f000
    3e2c:	20000d33 	.word	0x20000d33
    3e30:	20000d32 	.word	0x20000d32
    3e34:	20000d34 	.word	0x20000d34
    3e38:	40001000 	.word	0x40001000

00003e3c <esb_init>:
{
    3e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (config == NULL) {
    3e40:	4605      	mov	r5, r0
    3e42:	2800      	cmp	r0, #0
    3e44:	f000 80f3 	beq.w	402e <esb_init+0x1f2>
	if (esb_initialized) {
    3e48:	4e7a      	ldr	r6, [pc, #488]	; (4034 <esb_init+0x1f8>)
    3e4a:	7833      	ldrb	r3, [r6, #0]
    3e4c:	b10b      	cbz	r3, 3e52 <esb_init+0x16>
		esb_disable();
    3e4e:	f7ff ffc1 	bl	3dd4 <esb_disable>
	event_handler = config->event_handler;
    3e52:	4b79      	ldr	r3, [pc, #484]	; (4038 <esb_init+0x1fc>)
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    3e54:	4c79      	ldr	r4, [pc, #484]	; (403c <esb_init+0x200>)
	event_handler = config->event_handler;
    3e56:	686a      	ldr	r2, [r5, #4]
    3e58:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    3e5a:	4629      	mov	r1, r5
    3e5c:	2214      	movs	r2, #20
    3e5e:	4620      	mov	r0, r4
    3e60:	f003 fbe7 	bl	7632 <memcpy>
	interrupt_flags = 0;
    3e64:	2500      	movs	r5, #0
    3e66:	4b76      	ldr	r3, [pc, #472]	; (4040 <esb_init+0x204>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3e68:	4876      	ldr	r0, [pc, #472]	; (4044 <esb_init+0x208>)
	interrupt_flags = 0;
    3e6a:	601d      	str	r5, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3e6c:	2220      	movs	r2, #32
    3e6e:	4629      	mov	r1, r5
    3e70:	f003 fbea 	bl	7648 <memset>
	memset(pids, 0, sizeof(pids));
    3e74:	2208      	movs	r2, #8
    3e76:	4874      	ldr	r0, [pc, #464]	; (4048 <esb_init+0x20c>)
    3e78:	4629      	mov	r1, r5
    3e7a:	f003 fbe5 	bl	7648 <memset>
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
    3e7e:	4b73      	ldr	r3, [pc, #460]	; (404c <esb_init+0x210>)
			     << RADIO_TXPOWER_TXPOWER_Pos;
    3e80:	7aa2      	ldrb	r2, [r4, #10]
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
    3e82:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	params_valid &= update_radio_bitrate();
    3e86:	f7ff fb15 	bl	34b4 <update_radio_bitrate>
	switch (esb_cfg.protocol) {
    3e8a:	7823      	ldrb	r3, [r4, #0]
    3e8c:	4a70      	ldr	r2, [pc, #448]	; (4050 <esb_init+0x214>)
    3e8e:	2b00      	cmp	r3, #0
    3e90:	f000 80bd 	beq.w	400e <esb_init+0x1d2>
    3e94:	2b01      	cmp	r3, #1
    3e96:	d101      	bne.n	3e9c <esb_init+0x60>
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
    3e98:	4b6e      	ldr	r3, [pc, #440]	; (4054 <esb_init+0x218>)
		update_rf_payload_format = update_rf_payload_format_esb;
    3e9a:	6013      	str	r3, [r2, #0]
	switch (esb_cfg.crc) {
    3e9c:	7a61      	ldrb	r1, [r4, #9]
    3e9e:	4b6b      	ldr	r3, [pc, #428]	; (404c <esb_init+0x210>)
    3ea0:	2901      	cmp	r1, #1
    3ea2:	f000 80be 	beq.w	4022 <esb_init+0x1e6>
    3ea6:	2902      	cmp	r1, #2
    3ea8:	f000 80b3 	beq.w	4012 <esb_init+0x1d6>
    3eac:	b949      	cbnz	r1, 3ec2 <esb_init+0x86>
	NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    3eae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3eb2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
	NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    3eb6:	4968      	ldr	r1, [pc, #416]	; (4058 <esb_init+0x21c>)
    3eb8:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
	NRF_RADIO->CRCCNF = ESB_CRC_16BIT << RADIO_CRCCNF_LEN_Pos;
    3ebc:	2102      	movs	r1, #2
    3ebe:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
	update_rf_payload_format(esb_cfg.payload_length);
    3ec2:	6813      	ldr	r3, [r2, #0]
    3ec4:	7c60      	ldrb	r0, [r4, #17]
    3ec6:	4798      	blx	r3
	NRF_RADIO->BASE0 = 0xE7E7E7E7;
    3ec8:	4b60      	ldr	r3, [pc, #384]	; (404c <esb_init+0x210>)
    3eca:	4964      	ldr	r1, [pc, #400]	; (405c <esb_init+0x220>)
    3ecc:	4864      	ldr	r0, [pc, #400]	; (4060 <esb_init+0x224>)
    3ece:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
    3ed2:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
	NRF_RADIO->BASE1 = 0x43434343;
    3ed6:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
    3eda:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_RADIO->PREFIX0 = 0x23C343E7;
    3ede:	4a61      	ldr	r2, [pc, #388]	; (4064 <esb_init+0x228>)
    3ee0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_RADIO->PREFIX1 = 0x13E363A3;
    3ee4:	4a60      	ldr	r2, [pc, #384]	; (4068 <esb_init+0x22c>)
    3ee6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	reset_fifos();
    3eea:	f7ff fb01 	bl	34f0 <reset_fifos>
    3eee:	460a      	mov	r2, r1
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3ef0:	2300      	movs	r3, #0
    3ef2:	3301      	adds	r3, #1
    3ef4:	2b08      	cmp	r3, #8
		tx_fifo.payload[i] = &tx_payload[i];
    3ef6:	f840 2b04 	str.w	r2, [r0], #4
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3efa:	f102 0225 	add.w	r2, r2, #37	; 0x25
    3efe:	d1f8      	bne.n	3ef2 <esb_init+0xb6>
    3f00:	4a5a      	ldr	r2, [pc, #360]	; (406c <esb_init+0x230>)
    3f02:	485b      	ldr	r0, [pc, #364]	; (4070 <esb_init+0x234>)
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    3f04:	2300      	movs	r3, #0
    3f06:	3301      	adds	r3, #1
    3f08:	2b08      	cmp	r3, #8
		rx_fifo.payload[i] = &rx_payload[i];
    3f0a:	f840 2b04 	str.w	r2, [r0], #4
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    3f0e:	f102 0225 	add.w	r2, r2, #37	; 0x25
    3f12:	d1f8      	bne.n	3f06 <esb_init+0xca>
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3f14:	2200      	movs	r2, #0
    3f16:	4b57      	ldr	r3, [pc, #348]	; (4074 <esb_init+0x238>)
		ack_pl_wrap[i].in_use = false;
    3f18:	4614      	mov	r4, r2
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3f1a:	3201      	adds	r2, #1
    3f1c:	2a08      	cmp	r2, #8
		ack_pl_wrap[i].p_payload = &tx_payload[i];
    3f1e:	6019      	str	r1, [r3, #0]
		ack_pl_wrap[i].in_use = false;
    3f20:	711c      	strb	r4, [r3, #4]
		ack_pl_wrap[i].p_next = 0;
    3f22:	609c      	str	r4, [r3, #8]
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3f24:	f101 0125 	add.w	r1, r1, #37	; 0x25
    3f28:	f103 030c 	add.w	r3, r3, #12
    3f2c:	d1f5      	bne.n	3f1a <esb_init+0xde>
		ack_pl_wrap_pipe[i] = 0;
    3f2e:	4b52      	ldr	r3, [pc, #328]	; (4078 <esb_init+0x23c>)
	ESB_SYS_TIMER->PRESCALER = 4;
    3f30:	4d52      	ldr	r5, [pc, #328]	; (407c <esb_init+0x240>)
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    3f32:	f8df a14c 	ldr.w	sl, [pc, #332]	; 4080 <esb_init+0x244>
	nrfx_ppi_channel_alloc(&ppi_ch_radio_address_timer_stop);
    3f36:	f8df 914c 	ldr.w	r9, [pc, #332]	; 4084 <esb_init+0x248>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare0_radio_disable);
    3f3a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 4088 <esb_init+0x24c>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare1_radio_txen);
    3f3e:	4f53      	ldr	r7, [pc, #332]	; (408c <esb_init+0x250>)
		ack_pl_wrap_pipe[i] = 0;
    3f40:	e9c3 4400 	strd	r4, r4, [r3]
    3f44:	e9c3 4402 	strd	r4, r4, [r3, #8]
    3f48:	e9c3 4404 	strd	r4, r4, [r3, #16]
    3f4c:	e9c3 4406 	strd	r4, r4, [r3, #24]
	ESB_SYS_TIMER->PRESCALER = 4;
    3f50:	2304      	movs	r3, #4
    3f52:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
    3f56:	f240 2302 	movw	r3, #514	; 0x202
	ESB_SYS_TIMER->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    3f5a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    3f5e:	4650      	mov	r0, sl
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
    3f60:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    3f64:	f001 f8c0 	bl	50e8 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_radio_address_timer_stop);
    3f68:	4648      	mov	r0, r9
    3f6a:	f001 f8bd 	bl	50e8 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare0_radio_disable);
    3f6e:	4640      	mov	r0, r8
    3f70:	f001 f8ba 	bl	50e8 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare1_radio_txen);
    3f74:	4638      	mov	r0, r7
    3f76:	f001 f8b7 	bl	50e8 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_assign(ppi_ch_radio_ready_timer_start,
    3f7a:	462a      	mov	r2, r5
    3f7c:	4944      	ldr	r1, [pc, #272]	; (4090 <esb_init+0x254>)
    3f7e:	f89a 0000 	ldrb.w	r0, [sl]
    3f82:	f001 f8b7 	bl	50f4 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_radio_address_timer_stop,
    3f86:	4a43      	ldr	r2, [pc, #268]	; (4094 <esb_init+0x258>)
    3f88:	4943      	ldr	r1, [pc, #268]	; (4098 <esb_init+0x25c>)
    3f8a:	f899 0000 	ldrb.w	r0, [r9]
    3f8e:	f001 f8b1 	bl	50f4 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_timer_compare0_radio_disable,
    3f92:	4a42      	ldr	r2, [pc, #264]	; (409c <esb_init+0x260>)
    3f94:	4942      	ldr	r1, [pc, #264]	; (40a0 <esb_init+0x264>)
    3f96:	f898 0000 	ldrb.w	r0, [r8]
    3f9a:	f001 f8ab 	bl	50f4 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_timer_compare1_radio_txen,
    3f9e:	4a2b      	ldr	r2, [pc, #172]	; (404c <esb_init+0x210>)
    3fa0:	4940      	ldr	r1, [pc, #256]	; (40a4 <esb_init+0x268>)
    3fa2:	7838      	ldrb	r0, [r7, #0]
    3fa4:	f001 f8a6 	bl	50f4 <nrfx_ppi_channel_assign>
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    3fa8:	f89a 3000 	ldrb.w	r3, [sl]
    3fac:	f899 2000 	ldrb.w	r2, [r9]
    3fb0:	2501      	movs	r5, #1
    3fb2:	fa05 f202 	lsl.w	r2, r5, r2
    3fb6:	fa05 f303 	lsl.w	r3, r5, r3
    3fba:	4313      	orrs	r3, r2
							(1 << ppi_ch_timer_compare0_radio_disable) | (1 << ppi_ch_timer_compare1_radio_txen);
    3fbc:	f898 2000 	ldrb.w	r2, [r8]
    3fc0:	fa05 f202 	lsl.w	r2, r5, r2
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    3fc4:	4313      	orrs	r3, r2
							(1 << ppi_ch_timer_compare0_radio_disable) | (1 << ppi_ch_timer_compare1_radio_txen);
    3fc6:	783a      	ldrb	r2, [r7, #0]
    3fc8:	fa05 f202 	lsl.w	r2, r5, r2
    3fcc:	4313      	orrs	r3, r2
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    3fce:	4a36      	ldr	r2, [pc, #216]	; (40a8 <esb_init+0x26c>)
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    3fd0:	4629      	mov	r1, r5
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    3fd2:	6013      	str	r3, [r2, #0]
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    3fd4:	4628      	mov	r0, r5
    3fd6:	2200      	movs	r2, #0
    3fd8:	f7fd fccc 	bl	1974 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_EVT_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    3fdc:	2200      	movs	r2, #0
    3fde:	2102      	movs	r1, #2
    3fe0:	2014      	movs	r0, #20
    3fe2:	f7fd fcc7 	bl	1974 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_SYS_TIMER_IRQn, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    3fe6:	2200      	movs	r2, #0
    3fe8:	2102      	movs	r1, #2
    3fea:	200a      	movs	r0, #10
    3fec:	f7fd fcc2 	bl	1974 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    3ff0:	4628      	mov	r0, r5
    3ff2:	f7fd fc8d 	bl	1910 <arch_irq_enable>
	irq_enable(ESB_EVT_IRQ);
    3ff6:	2014      	movs	r0, #20
    3ff8:	f7fd fc8a 	bl	1910 <arch_irq_enable>
	irq_enable(ESB_SYS_TIMER_IRQn);
    3ffc:	200a      	movs	r0, #10
    3ffe:	f7fd fc87 	bl	1910 <arch_irq_enable>
	esb_state = ESB_STATE_IDLE;
    4002:	4b2a      	ldr	r3, [pc, #168]	; (40ac <esb_init+0x270>)
	esb_initialized = true;
    4004:	7035      	strb	r5, [r6, #0]
	esb_state = ESB_STATE_IDLE;
    4006:	701c      	strb	r4, [r3, #0]
	return 0;
    4008:	2000      	movs	r0, #0
}
    400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		update_rf_payload_format = update_rf_payload_format_esb;
    400e:	4b28      	ldr	r3, [pc, #160]	; (40b0 <esb_init+0x274>)
    4010:	e743      	b.n	3e9a <esb_init+0x5e>
		NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    4012:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4016:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    401a:	490f      	ldr	r1, [pc, #60]	; (4058 <esb_init+0x21c>)
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
    401c:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
		break;
    4020:	e745      	b.n	3eae <esb_init+0x72>
		NRF_RADIO->CRCINIT = 0xFFUL;  /* Initial value */
    4022:	21ff      	movs	r1, #255	; 0xff
    4024:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
    4028:	f240 1107 	movw	r1, #263	; 0x107
    402c:	e7f6      	b.n	401c <esb_init+0x1e0>
		return -EINVAL;
    402e:	f06f 0015 	mvn.w	r0, #21
    4032:	e7ea      	b.n	400a <esb_init+0x1ce>
    4034:	20000d32 	.word	0x20000d32
    4038:	200009a4 	.word	0x200009a4
    403c:	20000990 	.word	0x20000990
    4040:	200009a8 	.word	0x200009a8
    4044:	20000cec 	.word	0x20000cec
    4048:	20000d34 	.word	0x20000d34
    404c:	40001000 	.word	0x40001000
    4050:	20000a14 	.word	0x20000a14
    4054:	0000345d 	.word	0x0000345d
    4058:	00011021 	.word	0x00011021
    405c:	20000e8a 	.word	0x20000e8a
    4060:	200009e8 	.word	0x200009e8
    4064:	23c343e7 	.word	0x23c343e7
    4068:	13e363a3 	.word	0x13e363a3
    406c:	20000d40 	.word	0x20000d40
    4070:	200009bc 	.word	0x200009bc
    4074:	2000090c 	.word	0x2000090c
    4078:	2000096c 	.word	0x2000096c
    407c:	4000a000 	.word	0x4000a000
    4080:	20000d3d 	.word	0x20000d3d
    4084:	20000d3c 	.word	0x20000d3c
    4088:	20000d3e 	.word	0x20000d3e
    408c:	20000d3f 	.word	0x20000d3f
    4090:	40001100 	.word	0x40001100
    4094:	4000a010 	.word	0x4000a010
    4098:	40001104 	.word	0x40001104
    409c:	40001010 	.word	0x40001010
    40a0:	4000a140 	.word	0x4000a140
    40a4:	4000a144 	.word	0x4000a144
    40a8:	200009b4 	.word	0x200009b4
    40ac:	20000d33 	.word	0x20000d33
    40b0:	00003489 	.word	0x00003489

000040b4 <esb_write_payload>:
	return 0;
}

int esb_write_payload(const struct esb_payload *payload)
{
	if (!esb_initialized) {
    40b4:	4b48      	ldr	r3, [pc, #288]	; (41d8 <esb_write_payload+0x124>)
    40b6:	781b      	ldrb	r3, [r3, #0]
{
    40b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40bc:	4604      	mov	r4, r0
	if (!esb_initialized) {
    40be:	2b00      	cmp	r3, #0
    40c0:	d07c      	beq.n	41bc <esb_write_payload+0x108>
		return -EACCES;
	}
	if (payload == NULL) {
    40c2:	2800      	cmp	r0, #0
    40c4:	f000 8084 	beq.w	41d0 <esb_write_payload+0x11c>
		return -EINVAL;
	}
	if (payload->length == 0 ||
    40c8:	7803      	ldrb	r3, [r0, #0]
    40ca:	1e5a      	subs	r2, r3, #1
    40cc:	2a1f      	cmp	r2, #31
    40ce:	d879      	bhi.n	41c4 <esb_write_payload+0x110>
	    payload->length > CONFIG_ESB_MAX_PAYLOAD_LENGTH ||
	    (esb_cfg.protocol == ESB_PROTOCOL_ESB &&
    40d0:	4f42      	ldr	r7, [pc, #264]	; (41dc <esb_write_payload+0x128>)
	    payload->length > CONFIG_ESB_MAX_PAYLOAD_LENGTH ||
    40d2:	783a      	ldrb	r2, [r7, #0]
    40d4:	b912      	cbnz	r2, 40dc <esb_write_payload+0x28>
	    (esb_cfg.protocol == ESB_PROTOCOL_ESB &&
    40d6:	7c7a      	ldrb	r2, [r7, #17]
    40d8:	429a      	cmp	r2, r3
    40da:	d373      	bcc.n	41c4 <esb_write_payload+0x110>
	     payload->length > esb_cfg.payload_length)) {
		return -EMSGSIZE;
	}
	if (tx_fifo.count >= CONFIG_ESB_TX_FIFO_SIZE) {
    40dc:	4d40      	ldr	r5, [pc, #256]	; (41e0 <esb_write_payload+0x12c>)
    40de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    40e0:	2b07      	cmp	r3, #7
    40e2:	d872      	bhi.n	41ca <esb_write_payload+0x116>
		return -ENOMEM;
	}
	if (payload->pipe >= CONFIG_ESB_PIPE_COUNT) {
    40e4:	7863      	ldrb	r3, [r4, #1]
    40e6:	2b07      	cmp	r3, #7
    40e8:	d872      	bhi.n	41d0 <esb_write_payload+0x11c>
	__asm__ volatile(
    40ea:	f04f 0320 	mov.w	r3, #32
    40ee:	f3ef 8811 	mrs	r8, BASEPRI
    40f2:	f383 8812 	msr	BASEPRI_MAX, r3
    40f6:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	uint32_t key = irq_lock();

	if (esb_cfg.mode == ESB_MODE_PTX) {
    40fa:	787e      	ldrb	r6, [r7, #1]
    40fc:	b9e6      	cbnz	r6, 4138 <esb_write_payload+0x84>
		memcpy(tx_fifo.payload[tx_fifo.back], payload,
    40fe:	6a2b      	ldr	r3, [r5, #32]
    4100:	2225      	movs	r2, #37	; 0x25
    4102:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    4106:	4621      	mov	r1, r4
    4108:	f003 fa93 	bl	7632 <memcpy>
			sizeof(struct esb_payload));

		pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
    410c:	7861      	ldrb	r1, [r4, #1]
    410e:	4a35      	ldr	r2, [pc, #212]	; (41e4 <esb_write_payload+0x130>)
    4110:	5c53      	ldrb	r3, [r2, r1]
    4112:	3301      	adds	r3, #1
    4114:	f003 0303 	and.w	r3, r3, #3
    4118:	5453      	strb	r3, [r2, r1]
		tx_fifo.payload[tx_fifo.back]->pid = pids[payload->pipe];
    411a:	6a2b      	ldr	r3, [r5, #32]
    411c:	7861      	ldrb	r1, [r4, #1]
    411e:	5c51      	ldrb	r1, [r2, r1]
    4120:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]

		if (++tx_fifo.back >= CONFIG_ESB_TX_FIFO_SIZE) {
    4124:	3301      	adds	r3, #1
    4126:	2b07      	cmp	r3, #7
    4128:	bf98      	it	ls
    412a:	461e      	movls	r6, r3
		tx_fifo.payload[tx_fifo.back]->pid = pids[payload->pipe];
    412c:	7111      	strb	r1, [r2, #4]
		if (++tx_fifo.back >= CONFIG_ESB_TX_FIFO_SIZE) {
    412e:	622e      	str	r6, [r5, #32]
				while (pl->p_next != 0) {
					pl = (struct payload_wrap *)pl->p_next;
				}
				pl->p_next = (struct payload_wrap *)new_ack_payload;
			}
			tx_fifo.count++;
    4130:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4132:	3301      	adds	r3, #1
    4134:	62ab      	str	r3, [r5, #40]	; 0x28
    4136:	e02b      	b.n	4190 <esb_write_payload+0xdc>
    4138:	4a2b      	ldr	r2, [pc, #172]	; (41e8 <esb_write_payload+0x134>)
	for (int i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    413a:	2300      	movs	r3, #0
    413c:	4692      	mov	sl, r2
		if (!ack_pl_wrap[i].in_use)
    413e:	7911      	ldrb	r1, [r2, #4]
    4140:	bb09      	cbnz	r1, 4186 <esb_write_payload+0xd2>
			return &ack_pl_wrap[i];
    4142:	260c      	movs	r6, #12
    4144:	435e      	muls	r6, r3
    4146:	eb0a 0906 	add.w	r9, sl, r6
			new_ack_payload->in_use = true;
    414a:	2301      	movs	r3, #1
    414c:	f889 3004 	strb.w	r3, [r9, #4]
			new_ack_payload->p_next = 0;
    4150:	f8c9 1008 	str.w	r1, [r9, #8]
			memcpy(new_ack_payload->p_payload, payload, sizeof(struct esb_payload));
    4154:	2225      	movs	r2, #37	; 0x25
    4156:	4621      	mov	r1, r4
    4158:	f85a 0006 	ldr.w	r0, [sl, r6]
    415c:	f003 fa69 	bl	7632 <memcpy>
			pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
    4160:	7862      	ldrb	r2, [r4, #1]
    4162:	4920      	ldr	r1, [pc, #128]	; (41e4 <esb_write_payload+0x130>)
    4164:	5c8b      	ldrb	r3, [r1, r2]
    4166:	3301      	adds	r3, #1
    4168:	f003 0303 	and.w	r3, r3, #3
    416c:	548b      	strb	r3, [r1, r2]
			new_ack_payload->p_payload->pid = pids[payload->pipe];
    416e:	7862      	ldrb	r2, [r4, #1]
    4170:	f85a 3006 	ldr.w	r3, [sl, r6]
    4174:	5c89      	ldrb	r1, [r1, r2]
    4176:	7119      	strb	r1, [r3, #4]
			if (ack_pl_wrap_pipe[payload->pipe] == 0) {
    4178:	491c      	ldr	r1, [pc, #112]	; (41ec <esb_write_payload+0x138>)
    417a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    417e:	b9b3      	cbnz	r3, 41ae <esb_write_payload+0xfa>
				ack_pl_wrap_pipe[payload->pipe] = new_ack_payload;
    4180:	f841 9022 	str.w	r9, [r1, r2, lsl #2]
    4184:	e7d4      	b.n	4130 <esb_write_payload+0x7c>
	for (int i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    4186:	3301      	adds	r3, #1
    4188:	2b08      	cmp	r3, #8
    418a:	f102 020c 	add.w	r2, r2, #12
    418e:	d1d6      	bne.n	413e <esb_write_payload+0x8a>
	__asm__ volatile(
    4190:	f388 8811 	msr	BASEPRI, r8
    4194:	f3bf 8f6f 	isb	sy
		}
	}

	irq_unlock(key);

	if (esb_cfg.mode == ESB_MODE_PTX &&
    4198:	7878      	ldrb	r0, [r7, #1]
    419a:	7c3b      	ldrb	r3, [r7, #16]
    419c:	4318      	orrs	r0, r3
    419e:	d104      	bne.n	41aa <esb_write_payload+0xf6>
	    esb_cfg.tx_mode == ESB_TXMODE_AUTO &&
	    esb_state == ESB_STATE_IDLE) {
    41a0:	4b13      	ldr	r3, [pc, #76]	; (41f0 <esb_write_payload+0x13c>)
    41a2:	781b      	ldrb	r3, [r3, #0]
	    esb_cfg.tx_mode == ESB_TXMODE_AUTO &&
    41a4:	b963      	cbnz	r3, 41c0 <esb_write_payload+0x10c>
		start_tx_transaction();
    41a6:	f7ff fab1 	bl	370c <start_tx_transaction>
	}

	return 0;
    41aa:	2000      	movs	r0, #0
    41ac:	e008      	b.n	41c0 <esb_write_payload+0x10c>
				while (pl->p_next != 0) {
    41ae:	461a      	mov	r2, r3
    41b0:	689b      	ldr	r3, [r3, #8]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d1fb      	bne.n	41ae <esb_write_payload+0xfa>
				pl->p_next = (struct payload_wrap *)new_ack_payload;
    41b6:	f8c2 9008 	str.w	r9, [r2, #8]
    41ba:	e7b9      	b.n	4130 <esb_write_payload+0x7c>
		return -EACCES;
    41bc:	f06f 000c 	mvn.w	r0, #12
}
    41c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EMSGSIZE;
    41c4:	f06f 0079 	mvn.w	r0, #121	; 0x79
    41c8:	e7fa      	b.n	41c0 <esb_write_payload+0x10c>
		return -ENOMEM;
    41ca:	f06f 000b 	mvn.w	r0, #11
    41ce:	e7f7      	b.n	41c0 <esb_write_payload+0x10c>
		return -EINVAL;
    41d0:	f06f 0015 	mvn.w	r0, #21
    41d4:	e7f4      	b.n	41c0 <esb_write_payload+0x10c>
    41d6:	bf00      	nop
    41d8:	20000d32 	.word	0x20000d32
    41dc:	20000990 	.word	0x20000990
    41e0:	200009e8 	.word	0x200009e8
    41e4:	20000d34 	.word	0x20000d34
    41e8:	2000090c 	.word	0x2000090c
    41ec:	2000096c 	.word	0x2000096c
    41f0:	20000d33 	.word	0x20000d33

000041f4 <esb_read_rx_payload>:

int esb_read_rx_payload(struct esb_payload *payload)
{
    41f4:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
    41f6:	4b1c      	ldr	r3, [pc, #112]	; (4268 <esb_read_rx_payload+0x74>)
    41f8:	781b      	ldrb	r3, [r3, #0]
    41fa:	b363      	cbz	r3, 4256 <esb_read_rx_payload+0x62>
		return -EACCES;
	}
	if (payload == NULL) {
    41fc:	b370      	cbz	r0, 425c <esb_read_rx_payload+0x68>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
    41fe:	4c1b      	ldr	r4, [pc, #108]	; (426c <esb_read_rx_payload+0x78>)
    4200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4202:	b373      	cbz	r3, 4262 <esb_read_rx_payload+0x6e>
	__asm__ volatile(
    4204:	f04f 0320 	mov.w	r3, #32
    4208:	f3ef 8511 	mrs	r5, BASEPRI
    420c:	f383 8812 	msr	BASEPRI_MAX, r3
    4210:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	uint32_t key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
    4214:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4216:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    421a:	780a      	ldrb	r2, [r1, #0]
    421c:	7002      	strb	r2, [r0, #0]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
    421e:	784b      	ldrb	r3, [r1, #1]
    4220:	7043      	strb	r3, [r0, #1]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
    4222:	f991 3002 	ldrsb.w	r3, [r1, #2]
    4226:	7083      	strb	r3, [r0, #2]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
    4228:	790b      	ldrb	r3, [r1, #4]
    422a:	7103      	strb	r3, [r0, #4]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
    422c:	78cb      	ldrb	r3, [r1, #3]
    422e:	70c3      	strb	r3, [r0, #3]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
    4230:	3105      	adds	r1, #5
    4232:	3005      	adds	r0, #5
    4234:	f003 f9fd 	bl	7632 <memcpy>
	       payload->length);

	if (++rx_fifo.front >= CONFIG_ESB_RX_FIFO_SIZE) {
    4238:	6a63      	ldr	r3, [r4, #36]	; 0x24
    423a:	3301      	adds	r3, #1
    423c:	2b07      	cmp	r3, #7
		rx_fifo.front = 0;
    423e:	bf88      	it	hi
    4240:	2300      	movhi	r3, #0
    4242:	6263      	str	r3, [r4, #36]	; 0x24
	}

	rx_fifo.count--;
    4244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4246:	3b01      	subs	r3, #1
    4248:	62a3      	str	r3, [r4, #40]	; 0x28
	__asm__ volatile(
    424a:	f385 8811 	msr	BASEPRI, r5
    424e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    4252:	2000      	movs	r0, #0
}
    4254:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
    4256:	f06f 000c 	mvn.w	r0, #12
    425a:	e7fb      	b.n	4254 <esb_read_rx_payload+0x60>
		return -EINVAL;
    425c:	f06f 0015 	mvn.w	r0, #21
    4260:	e7f8      	b.n	4254 <esb_read_rx_payload+0x60>
		return -ENODATA;
    4262:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    4266:	e7f5      	b.n	4254 <esb_read_rx_payload+0x60>
    4268:	20000d32 	.word	0x20000d32
    426c:	200009bc 	.word	0x200009bc

00004270 <esb_start_rx>:

	return 0;
}

int esb_start_rx(void)
{
    4270:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
    4272:	4b1b      	ldr	r3, [pc, #108]	; (42e0 <esb_start_rx+0x70>)
    4274:	781a      	ldrb	r2, [r3, #0]
    4276:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    427a:	bb6a      	cbnz	r2, 42d8 <esb_start_rx+0x68>
		return -EBUSY;
	}

	NRF_RADIO->INTENCLR = 0xFFFFFFFF;
    427c:	4c19      	ldr	r4, [pc, #100]	; (42e4 <esb_start_rx+0x74>)
	NRF_RADIO->EVENTS_DISABLED = 0;
	on_radio_disabled = on_radio_disabled_rx;
    427e:	491a      	ldr	r1, [pc, #104]	; (42e8 <esb_start_rx+0x78>)
	NRF_RADIO->INTENCLR = 0xFFFFFFFF;
    4280:	f04f 32ff 	mov.w	r2, #4294967295
    4284:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	on_radio_disabled = on_radio_disabled_rx;
    4288:	4a18      	ldr	r2, [pc, #96]	; (42ec <esb_start_rx+0x7c>)
	NRF_RADIO->EVENTS_DISABLED = 0;
    428a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
	on_radio_disabled = on_radio_disabled_rx;
    428e:	6011      	str	r1, [r2, #0]

	NRF_RADIO->SHORTS = radio_shorts_common |
    4290:	f240 1217 	movw	r2, #279	; 0x117
    4294:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
	NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
    4298:	2210      	movs	r2, #16
    429a:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
	esb_state = ESB_STATE_PRX;
    429e:	2204      	movs	r2, #4
    42a0:	701a      	strb	r2, [r3, #0]

	NRF_RADIO->RXADDRESSES = esb_addr.rx_pipes_enabled;
    42a2:	4b13      	ldr	r3, [pc, #76]	; (42f0 <esb_start_rx+0x80>)
    42a4:	7c9a      	ldrb	r2, [r3, #18]
    42a6:	f8c4 2530 	str.w	r2, [r4, #1328]	; 0x530
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
    42aa:	7cdb      	ldrb	r3, [r3, #19]
    42ac:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
    42b0:	4b10      	ldr	r3, [pc, #64]	; (42f4 <esb_start_rx+0x84>)
    42b2:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42b6:	4b10      	ldr	r3, [pc, #64]	; (42f8 <esb_start_rx+0x88>)
    42b8:	2202      	movs	r2, #2
    42ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    42be:	2001      	movs	r0, #1
    42c0:	f7fd fb26 	bl	1910 <arch_irq_enable>

	NRF_RADIO->EVENTS_ADDRESS = 0;
	NRF_RADIO->EVENTS_PAYLOAD = 0;
	NRF_RADIO->EVENTS_DISABLED = 0;

	NRF_RADIO->TASKS_RXEN = 1;
    42c4:	2301      	movs	r3, #1
	NRF_RADIO->EVENTS_ADDRESS = 0;
    42c6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104

	return 0;
    42ca:	4628      	mov	r0, r5
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    42cc:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NRF_RADIO->EVENTS_DISABLED = 0;
    42d0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_RXEN = 1;
    42d4:	6063      	str	r3, [r4, #4]
}
    42d6:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    42d8:	f06f 000f 	mvn.w	r0, #15
    42dc:	e7fb      	b.n	42d6 <esb_start_rx+0x66>
    42de:	bf00      	nop
    42e0:	20000d33 	.word	0x20000d33
    42e4:	40001000 	.word	0x40001000
    42e8:	00003bf1 	.word	0x00003bf1
    42ec:	200009b0 	.word	0x200009b0
    42f0:	20000054 	.word	0x20000054
    42f4:	20000e68 	.word	0x20000e68
    42f8:	e000e100 	.word	0xe000e100

000042fc <esb_set_base_address_0>:

	return 0;
}

int esb_set_base_address_0(const uint8_t *addr)
{
    42fc:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    42fe:	4b0b      	ldr	r3, [pc, #44]	; (432c <esb_set_base_address_0+0x30>)
    4300:	781b      	ldrb	r3, [r3, #0]
{
    4302:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    4304:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4308:	b94b      	cbnz	r3, 431e <esb_set_base_address_0+0x22>
		return -EBUSY;
	}
	if (addr == NULL) {
    430a:	b158      	cbz	r0, 4324 <esb_set_base_address_0+0x28>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
    430c:	2204      	movs	r2, #4
    430e:	4808      	ldr	r0, [pc, #32]	; (4330 <esb_set_base_address_0+0x34>)
    4310:	f003 f98f 	bl	7632 <memcpy>

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);
    4314:	2001      	movs	r0, #1
    4316:	f7ff fbe7 	bl	3ae8 <update_radio_addresses>

	return 0;
    431a:	4620      	mov	r0, r4
}
    431c:	bd10      	pop	{r4, pc}
		return -EBUSY;
    431e:	f06f 000f 	mvn.w	r0, #15
    4322:	e7fb      	b.n	431c <esb_set_base_address_0+0x20>
		return -EINVAL;
    4324:	f06f 0015 	mvn.w	r0, #21
    4328:	e7f8      	b.n	431c <esb_set_base_address_0+0x20>
    432a:	bf00      	nop
    432c:	20000d33 	.word	0x20000d33
    4330:	20000054 	.word	0x20000054

00004334 <esb_set_base_address_1>:

int esb_set_base_address_1(const uint8_t *addr)
{
    4334:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    4336:	4b0b      	ldr	r3, [pc, #44]	; (4364 <esb_set_base_address_1+0x30>)
    4338:	781b      	ldrb	r3, [r3, #0]
{
    433a:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    433c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4340:	b94b      	cbnz	r3, 4356 <esb_set_base_address_1+0x22>
		return -EBUSY;
	}
	if (addr == NULL) {
    4342:	b158      	cbz	r0, 435c <esb_set_base_address_1+0x28>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
    4344:	2204      	movs	r2, #4
    4346:	4808      	ldr	r0, [pc, #32]	; (4368 <esb_set_base_address_1+0x34>)
    4348:	f003 f973 	bl	7632 <memcpy>

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);
    434c:	2002      	movs	r0, #2
    434e:	f7ff fbcb 	bl	3ae8 <update_radio_addresses>

	return 0;
    4352:	4620      	mov	r0, r4
}
    4354:	bd10      	pop	{r4, pc}
		return -EBUSY;
    4356:	f06f 000f 	mvn.w	r0, #15
    435a:	e7fb      	b.n	4354 <esb_set_base_address_1+0x20>
		return -EINVAL;
    435c:	f06f 0015 	mvn.w	r0, #21
    4360:	e7f8      	b.n	4354 <esb_set_base_address_1+0x20>
    4362:	bf00      	nop
    4364:	20000d33 	.word	0x20000d33
    4368:	20000058 	.word	0x20000058

0000436c <esb_set_prefixes>:

int esb_set_prefixes(const uint8_t *prefixes, uint8_t num_pipes)
{
    436c:	b570      	push	{r4, r5, r6, lr}
	if (esb_state != ESB_STATE_IDLE) {
    436e:	4b11      	ldr	r3, [pc, #68]	; (43b4 <esb_set_prefixes+0x48>)
    4370:	781b      	ldrb	r3, [r3, #0]
{
    4372:	460c      	mov	r4, r1
	if (esb_state != ESB_STATE_IDLE) {
    4374:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    4378:	b9ab      	cbnz	r3, 43a6 <esb_set_prefixes+0x3a>
		return -EBUSY;
	}
	if (prefixes == NULL) {
    437a:	b1b8      	cbz	r0, 43ac <esb_set_prefixes+0x40>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_ESB_PIPE_COUNT)) {
    437c:	2908      	cmp	r1, #8
    437e:	d815      	bhi.n	43ac <esb_set_prefixes+0x40>
		return -EINVAL;
	}

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
    4380:	4e0d      	ldr	r6, [pc, #52]	; (43b8 <esb_set_prefixes+0x4c>)
    4382:	460a      	mov	r2, r1
    4384:	4601      	mov	r1, r0
    4386:	f106 0008 	add.w	r0, r6, #8
    438a:	f003 f952 	bl	7632 <memcpy>
	esb_addr.num_pipes = num_pipes;
    438e:	7434      	strb	r4, [r6, #16]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    4390:	22ff      	movs	r2, #255	; 0xff
    4392:	f1c4 0408 	rsb	r4, r4, #8
    4396:	fa42 f404 	asr.w	r4, r2, r4

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);
    439a:	2004      	movs	r0, #4
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    439c:	74b4      	strb	r4, [r6, #18]
	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);
    439e:	f7ff fba3 	bl	3ae8 <update_radio_addresses>

	return 0;
    43a2:	4628      	mov	r0, r5
}
    43a4:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    43a6:	f06f 000f 	mvn.w	r0, #15
    43aa:	e7fb      	b.n	43a4 <esb_set_prefixes+0x38>
		return -EINVAL;
    43ac:	f06f 0015 	mvn.w	r0, #21
    43b0:	e7f8      	b.n	43a4 <esb_set_prefixes+0x38>
    43b2:	bf00      	nop
    43b4:	20000d33 	.word	0x20000d33
    43b8:	20000054 	.word	0x20000054

000043bc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    43bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    43c0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    43c4:	2a08      	cmp	r2, #8
    43c6:	d106      	bne.n	43d6 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    43c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    43cc:	2b05      	cmp	r3, #5
    43ce:	d802      	bhi.n	43d6 <nrf52_errata_103+0x1a>
    43d0:	4a02      	ldr	r2, [pc, #8]	; (43dc <nrf52_errata_103+0x20>)
    43d2:	5cd0      	ldrb	r0, [r2, r3]
    43d4:	4770      	bx	lr
        return false;
    43d6:	2000      	movs	r0, #0
}
    43d8:	4770      	bx	lr
    43da:	bf00      	nop
    43dc:	00008c24 	.word	0x00008c24

000043e0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    43e0:	4a02      	ldr	r2, [pc, #8]	; (43ec <nvmc_wait+0xc>)
    43e2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    43e6:	2b00      	cmp	r3, #0
    43e8:	d0fb      	beq.n	43e2 <nvmc_wait+0x2>
}
    43ea:	4770      	bx	lr
    43ec:	4001e000 	.word	0x4001e000

000043f0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    43f0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    43f2:	f003 fb71 	bl	7ad8 <nrf52_errata_136>
    43f6:	b140      	cbz	r0, 440a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    43f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43fc:	2200      	movs	r2, #0
    43fe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4402:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4406:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    440a:	f003 fb65 	bl	7ad8 <nrf52_errata_136>
    440e:	2800      	cmp	r0, #0
    4410:	d046      	beq.n	44a0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4416:	4b60      	ldr	r3, [pc, #384]	; (4598 <SystemInit+0x1a8>)
    4418:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    441c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4420:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4424:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4428:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    442c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4430:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4434:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4438:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    443c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4440:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4444:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4448:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    444c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4450:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4454:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4458:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    445c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4460:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4464:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4468:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    446c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4470:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4474:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4478:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    447c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4480:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4484:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4488:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    448c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4490:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4494:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4498:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    449c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    44a0:	f7ff ff8c 	bl	43bc <nrf52_errata_103>
    44a4:	b118      	cbz	r0, 44ae <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    44a6:	4b3d      	ldr	r3, [pc, #244]	; (459c <SystemInit+0x1ac>)
    44a8:	4a3d      	ldr	r2, [pc, #244]	; (45a0 <SystemInit+0x1b0>)
    44aa:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    44ae:	f7ff ff85 	bl	43bc <nrf52_errata_103>
    44b2:	b118      	cbz	r0, 44bc <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    44b4:	4b3b      	ldr	r3, [pc, #236]	; (45a4 <SystemInit+0x1b4>)
    44b6:	22fb      	movs	r2, #251	; 0xfb
    44b8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    44bc:	f7ff ff7e 	bl	43bc <nrf52_errata_103>
    44c0:	b170      	cbz	r0, 44e0 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    44c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    44c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    44ca:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    44ce:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    44d2:	f022 020f 	bic.w	r2, r2, #15
    44d6:	f003 030f 	and.w	r3, r3, #15
    44da:	4313      	orrs	r3, r2
    44dc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    44e0:	f7ff ff6c 	bl	43bc <nrf52_errata_103>
    44e4:	b120      	cbz	r0, 44f0 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    44e6:	4b30      	ldr	r3, [pc, #192]	; (45a8 <SystemInit+0x1b8>)
    44e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    44ec:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    44f0:	f003 faf2 	bl	7ad8 <nrf52_errata_136>
    44f4:	b148      	cbz	r0, 450a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    44f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    44fe:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4500:	bf44      	itt	mi
    4502:	f06f 0201 	mvnmi.w	r2, #1
    4506:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    450a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    450e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4512:	2a08      	cmp	r2, #8
    4514:	d10e      	bne.n	4534 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4516:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    451a:	2b05      	cmp	r3, #5
    451c:	d802      	bhi.n	4524 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    451e:	4a23      	ldr	r2, [pc, #140]	; (45ac <SystemInit+0x1bc>)
    4520:	5cd3      	ldrb	r3, [r2, r3]
    4522:	b13b      	cbz	r3, 4534 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4524:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4528:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    452c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4530:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4534:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4538:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    453c:	2a00      	cmp	r2, #0
    453e:	db03      	blt.n	4548 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4540:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4544:	2b00      	cmp	r3, #0
    4546:	da22      	bge.n	458e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4548:	4919      	ldr	r1, [pc, #100]	; (45b0 <SystemInit+0x1c0>)
    454a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    454c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4550:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4554:	2412      	movs	r4, #18
    nvmc_wait();
    4556:	f7ff ff43 	bl	43e0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    455a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    455e:	f7ff ff3f 	bl	43e0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4562:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4566:	f7ff ff3b 	bl	43e0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    456a:	2300      	movs	r3, #0
    456c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4570:	f7ff ff36 	bl	43e0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4574:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4578:	490e      	ldr	r1, [pc, #56]	; (45b4 <SystemInit+0x1c4>)
    457a:	4b0f      	ldr	r3, [pc, #60]	; (45b8 <SystemInit+0x1c8>)
    457c:	68ca      	ldr	r2, [r1, #12]
    457e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4582:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4584:	60cb      	str	r3, [r1, #12]
    4586:	f3bf 8f4f 	dsb	sy
    __NOP();
    458a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    458c:	e7fd      	b.n	458a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    458e:	4b0b      	ldr	r3, [pc, #44]	; (45bc <SystemInit+0x1cc>)
    4590:	4a0b      	ldr	r2, [pc, #44]	; (45c0 <SystemInit+0x1d0>)
    4592:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4594:	bd10      	pop	{r4, pc}
    4596:	bf00      	nop
    4598:	4000c000 	.word	0x4000c000
    459c:	40005000 	.word	0x40005000
    45a0:	00038148 	.word	0x00038148
    45a4:	4000f000 	.word	0x4000f000
    45a8:	40029000 	.word	0x40029000
    45ac:	00008c1e 	.word	0x00008c1e
    45b0:	4001e000 	.word	0x4001e000
    45b4:	e000ed00 	.word	0xe000ed00
    45b8:	05fa0004 	.word	0x05fa0004
    45bc:	20000068 	.word	0x20000068
    45c0:	03d09000 	.word	0x03d09000

000045c4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    45c4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    45c6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    45c8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    45ca:	fab2 f382 	clz	r3, r2
    45ce:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    45d2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    45d4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    45d6:	d014      	beq.n	4602 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    45d8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    45dc:	fa05 f303 	lsl.w	r3, r5, r3
    45e0:	ea22 0303 	bic.w	r3, r2, r3
    45e4:	e850 6f00 	ldrex	r6, [r0]
    45e8:	4296      	cmp	r6, r2
    45ea:	d104      	bne.n	45f6 <nrfx_flag32_alloc+0x32>
    45ec:	e840 3c00 	strex	ip, r3, [r0]
    45f0:	f1bc 0f00 	cmp.w	ip, #0
    45f4:	d1f6      	bne.n	45e4 <nrfx_flag32_alloc+0x20>
    45f6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    45fa:	d1e5      	bne.n	45c8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    45fc:	4802      	ldr	r0, [pc, #8]	; (4608 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    45fe:	700c      	strb	r4, [r1, #0]
}
    4600:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    4602:	4802      	ldr	r0, [pc, #8]	; (460c <nrfx_flag32_alloc+0x48>)
    4604:	e7fc      	b.n	4600 <nrfx_flag32_alloc+0x3c>
    4606:	bf00      	nop
    4608:	0bad0000 	.word	0x0bad0000
    460c:	0bad0002 	.word	0x0bad0002

00004610 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4610:	6803      	ldr	r3, [r0, #0]
    4612:	40cb      	lsrs	r3, r1
    4614:	07db      	lsls	r3, r3, #31
{
    4616:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4618:	d415      	bmi.n	4646 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    461a:	2301      	movs	r3, #1
    461c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    4620:	6803      	ldr	r3, [r0, #0]
    4622:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4626:	ea41 0203 	orr.w	r2, r1, r3
    462a:	e850 4f00 	ldrex	r4, [r0]
    462e:	429c      	cmp	r4, r3
    4630:	d104      	bne.n	463c <nrfx_flag32_free+0x2c>
    4632:	e840 2c00 	strex	ip, r2, [r0]
    4636:	f1bc 0f00 	cmp.w	ip, #0
    463a:	d1f6      	bne.n	462a <nrfx_flag32_free+0x1a>
    463c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4640:	d1ee      	bne.n	4620 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4642:	4802      	ldr	r0, [pc, #8]	; (464c <nrfx_flag32_free+0x3c>)
}
    4644:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4646:	4802      	ldr	r0, [pc, #8]	; (4650 <nrfx_flag32_free+0x40>)
    4648:	e7fc      	b.n	4644 <nrfx_flag32_free+0x34>
    464a:	bf00      	nop
    464c:	0bad0000 	.word	0x0bad0000
    4650:	0bad0004 	.word	0x0bad0004

00004654 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    4656:	4604      	mov	r4, r0
    4658:	b168      	cbz	r0, 4676 <clock_stop+0x22>
    465a:	2801      	cmp	r0, #1
    465c:	d02f      	beq.n	46be <clock_stop+0x6a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    465e:	4930      	ldr	r1, [pc, #192]	; (4720 <clock_stop+0xcc>)
    4660:	4830      	ldr	r0, [pc, #192]	; (4724 <clock_stop+0xd0>)
    4662:	22d8      	movs	r2, #216	; 0xd8
    4664:	f002 ff9d 	bl	75a2 <assert_print>
    4668:	482d      	ldr	r0, [pc, #180]	; (4720 <clock_stop+0xcc>)
    466a:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    466c:	b003      	add	sp, #12
    466e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    4672:	f002 bf8f 	b.w	7594 <assert_post_action>
    p_reg->INTENCLR = mask;
    4676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    467a:	2202      	movs	r2, #2
    467c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4680:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4684:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4688:	2201      	movs	r2, #1
    468a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    468c:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    468e:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4690:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4694:	bf14      	ite	ne
    4696:	2500      	movne	r5, #0
    4698:	f10d 0507 	addeq.w	r5, sp, #7
    469c:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    46a0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    46a4:	b1b4      	cbz	r4, 46d4 <clock_stop+0x80>
    46a6:	2c01      	cmp	r4, #1
    46a8:	d02b      	beq.n	4702 <clock_stop+0xae>
            NRFX_ASSERT(0);
    46aa:	491f      	ldr	r1, [pc, #124]	; (4728 <clock_stop+0xd4>)
    46ac:	481d      	ldr	r0, [pc, #116]	; (4724 <clock_stop+0xd0>)
    46ae:	f44f 724f 	mov.w	r2, #828	; 0x33c
    46b2:	f002 ff76 	bl	75a2 <assert_print>
    46b6:	481c      	ldr	r0, [pc, #112]	; (4728 <clock_stop+0xd4>)
    46b8:	f44f 714f 	mov.w	r1, #828	; 0x33c
    46bc:	e7d6      	b.n	466c <clock_stop+0x18>
    p_reg->INTENCLR = mask;
    46be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46c2:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    46c4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    46cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46d0:	6058      	str	r0, [r3, #4]
}
    46d2:	e7db      	b.n	468c <clock_stop+0x38>
            if (p_clk_src != NULL)
    46d4:	b125      	cbz	r5, 46e0 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    46d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    46da:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    46de:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    46e0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    46e4:	03da      	lsls	r2, r3, #15
    46e6:	d519      	bpl.n	471c <clock_stop+0xc8>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    46e8:	b11d      	cbz	r5, 46f2 <clock_stop+0x9e>
    46ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    46ee:	2b01      	cmp	r3, #1
    46f0:	d104      	bne.n	46fc <clock_stop+0xa8>
    46f2:	2001      	movs	r0, #1
    46f4:	f003 f9fa 	bl	7aec <nrfx_busy_wait>
    46f8:	3f01      	subs	r7, #1
    46fa:	d1d3      	bne.n	46a4 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    46fc:	2c01      	cmp	r4, #1
    46fe:	d00a      	beq.n	4716 <clock_stop+0xc2>
    4700:	e00c      	b.n	471c <clock_stop+0xc8>
            if (p_clk_src != NULL)
    4702:	b125      	cbz	r5, 470e <clock_stop+0xba>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4704:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4708:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    470c:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    470e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4712:	03db      	lsls	r3, r3, #15
    4714:	d4e8      	bmi.n	46e8 <clock_stop+0x94>
            m_clock_cb.hfclk_started = false;
    4716:	4b05      	ldr	r3, [pc, #20]	; (472c <clock_stop+0xd8>)
    4718:	2200      	movs	r2, #0
    471a:	715a      	strb	r2, [r3, #5]
}
    471c:	b003      	add	sp, #12
    471e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4720:	00008c2a 	.word	0x00008c2a
    4724:	00008378 	.word	0x00008378
    4728:	00008c67 	.word	0x00008c67
    472c:	20000a1c 	.word	0x20000a1c

00004730 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4730:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    4732:	4604      	mov	r4, r0
    4734:	b950      	cbnz	r0, 474c <nrfx_clock_init+0x1c>
    4736:	490a      	ldr	r1, [pc, #40]	; (4760 <nrfx_clock_init+0x30>)
    4738:	480a      	ldr	r0, [pc, #40]	; (4764 <nrfx_clock_init+0x34>)
    473a:	f240 1215 	movw	r2, #277	; 0x115
    473e:	f002 ff30 	bl	75a2 <assert_print>
    4742:	4807      	ldr	r0, [pc, #28]	; (4760 <nrfx_clock_init+0x30>)
    4744:	f240 1115 	movw	r1, #277	; 0x115
    4748:	f002 ff24 	bl	7594 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    474c:	4b06      	ldr	r3, [pc, #24]	; (4768 <nrfx_clock_init+0x38>)
    474e:	791a      	ldrb	r2, [r3, #4]
    4750:	b922      	cbnz	r2, 475c <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4752:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    4754:	4805      	ldr	r0, [pc, #20]	; (476c <nrfx_clock_init+0x3c>)
        m_clock_cb.event_handler = event_handler;
    4756:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    4758:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    475a:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    475c:	4804      	ldr	r0, [pc, #16]	; (4770 <nrfx_clock_init+0x40>)
    return err_code;
    475e:	e7fc      	b.n	475a <nrfx_clock_init+0x2a>
    4760:	00008c2a 	.word	0x00008c2a
    4764:	00008378 	.word	0x00008378
    4768:	20000a1c 	.word	0x20000a1c
    476c:	0bad0000 	.word	0x0bad0000
    4770:	0bad000c 	.word	0x0bad000c

00004774 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    4774:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4776:	4b0d      	ldr	r3, [pc, #52]	; (47ac <nrfx_clock_enable+0x38>)
    4778:	791b      	ldrb	r3, [r3, #4]
    477a:	b953      	cbnz	r3, 4792 <nrfx_clock_enable+0x1e>
    477c:	490c      	ldr	r1, [pc, #48]	; (47b0 <nrfx_clock_enable+0x3c>)
    477e:	480d      	ldr	r0, [pc, #52]	; (47b4 <nrfx_clock_enable+0x40>)
    4780:	f44f 7297 	mov.w	r2, #302	; 0x12e
    4784:	f002 ff0d 	bl	75a2 <assert_print>
    4788:	4809      	ldr	r0, [pc, #36]	; (47b0 <nrfx_clock_enable+0x3c>)
    478a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    478e:	f002 ff01 	bl	7594 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4792:	2000      	movs	r0, #0
    4794:	f7fd f8e0 	bl	1958 <arch_irq_is_enabled>
    4798:	b908      	cbnz	r0, 479e <nrfx_clock_enable+0x2a>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    479a:	f7fd f8b9 	bl	1910 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    479e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47a2:	2200      	movs	r2, #0
    47a4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    47a8:	bd08      	pop	{r3, pc}
    47aa:	bf00      	nop
    47ac:	20000a1c 	.word	0x20000a1c
    47b0:	00008c2a 	.word	0x00008c2a
    47b4:	00008378 	.word	0x00008378

000047b8 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    47b8:	4b2b      	ldr	r3, [pc, #172]	; (4868 <nrfx_clock_start+0xb0>)
    47ba:	791b      	ldrb	r3, [r3, #4]
{
    47bc:	b510      	push	{r4, lr}
    47be:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    47c0:	b953      	cbnz	r3, 47d8 <nrfx_clock_start+0x20>
    47c2:	492a      	ldr	r1, [pc, #168]	; (486c <nrfx_clock_start+0xb4>)
    47c4:	482a      	ldr	r0, [pc, #168]	; (4870 <nrfx_clock_start+0xb8>)
    47c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
    47ca:	f002 feea 	bl	75a2 <assert_print>
    47ce:	4827      	ldr	r0, [pc, #156]	; (486c <nrfx_clock_start+0xb4>)
    47d0:	f44f 71b4 	mov.w	r1, #360	; 0x168
    47d4:	f002 fede 	bl	7594 <assert_post_action>
    switch (domain)
    47d8:	b174      	cbz	r4, 47f8 <nrfx_clock_start+0x40>
    47da:	2c01      	cmp	r4, #1
    47dc:	d039      	beq.n	4852 <nrfx_clock_start+0x9a>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    47de:	4923      	ldr	r1, [pc, #140]	; (486c <nrfx_clock_start+0xb4>)
    47e0:	4823      	ldr	r0, [pc, #140]	; (4870 <nrfx_clock_start+0xb8>)
    47e2:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
    47e6:	f002 fedc 	bl	75a2 <assert_print>
            break;
    }
}
    47ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    47ee:	481f      	ldr	r0, [pc, #124]	; (486c <nrfx_clock_start+0xb4>)
    47f0:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    47f4:	f002 bece 	b.w	7594 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    47f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    47fc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4800:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4804:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    4808:	d10b      	bne.n	4822 <nrfx_clock_start+0x6a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    480a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    480e:	07c9      	lsls	r1, r1, #31
    4810:	d510      	bpl.n	4834 <nrfx_clock_start+0x7c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4812:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    4816:	079b      	lsls	r3, r3, #30
    4818:	d408      	bmi.n	482c <nrfx_clock_start+0x74>
    p_reg->INTENSET = mask;
    481a:	2302      	movs	r3, #2
    481c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    4820:	e016      	b.n	4850 <nrfx_clock_start+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4822:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4826:	2b01      	cmp	r3, #1
    4828:	d004      	beq.n	4834 <nrfx_clock_start+0x7c>
    if (!is_correct_clk)
    482a:	b11b      	cbz	r3, 4834 <nrfx_clock_start+0x7c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    482c:	2000      	movs	r0, #0
    482e:	f7ff ff11 	bl	4654 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4832:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    4834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4838:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    483c:	2300      	movs	r3, #0
    483e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4842:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4846:	2302      	movs	r3, #2
    4848:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    484c:	2301      	movs	r3, #1
    484e:	6093      	str	r3, [r2, #8]
}
    4850:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4856:	2200      	movs	r2, #0
    4858:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    485c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4860:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4864:	601c      	str	r4, [r3, #0]
}
    4866:	e7f3      	b.n	4850 <nrfx_clock_start+0x98>
    4868:	20000a1c 	.word	0x20000a1c
    486c:	00008c2a 	.word	0x00008c2a
    4870:	00008378 	.word	0x00008378

00004874 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4874:	4b0a      	ldr	r3, [pc, #40]	; (48a0 <nrfx_clock_stop+0x2c>)
    4876:	791b      	ldrb	r3, [r3, #4]
{
    4878:	b510      	push	{r4, lr}
    487a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    487c:	b953      	cbnz	r3, 4894 <nrfx_clock_stop+0x20>
    487e:	4909      	ldr	r1, [pc, #36]	; (48a4 <nrfx_clock_stop+0x30>)
    4880:	4809      	ldr	r0, [pc, #36]	; (48a8 <nrfx_clock_stop+0x34>)
    4882:	f240 12ad 	movw	r2, #429	; 0x1ad
    4886:	f002 fe8c 	bl	75a2 <assert_print>
    488a:	4806      	ldr	r0, [pc, #24]	; (48a4 <nrfx_clock_stop+0x30>)
    488c:	f240 11ad 	movw	r1, #429	; 0x1ad
    4890:	f002 fe80 	bl	7594 <assert_post_action>
    clock_stop(domain);
    4894:	4620      	mov	r0, r4
}
    4896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    489a:	f7ff bedb 	b.w	4654 <clock_stop>
    489e:	bf00      	nop
    48a0:	20000a1c 	.word	0x20000a1c
    48a4:	00008c2a 	.word	0x00008c2a
    48a8:	00008378 	.word	0x00008378

000048ac <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    48b0:	b510      	push	{r4, lr}
    48b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    48b6:	b16a      	cbz	r2, 48d4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48b8:	2200      	movs	r2, #0
    48ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    48be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    48c2:	2201      	movs	r2, #1
    48c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    48c8:	4b11      	ldr	r3, [pc, #68]	; (4910 <nrfx_power_clock_irq_handler+0x64>)
    48ca:	7958      	ldrb	r0, [r3, #5]
    48cc:	b910      	cbnz	r0, 48d4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    48ce:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48d8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    48dc:	b172      	cbz	r2, 48fc <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48de:	2200      	movs	r2, #0
    48e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    48e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    48e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    48ec:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    48f0:	0792      	lsls	r2, r2, #30
    48f2:	d104      	bne.n	48fe <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    48f4:	2201      	movs	r2, #1
    48f6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48fa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    48fc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    48fe:	2202      	movs	r2, #2
    4900:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4904:	4b02      	ldr	r3, [pc, #8]	; (4910 <nrfx_power_clock_irq_handler+0x64>)
}
    4906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	2001      	movs	r0, #1
    490e:	4718      	bx	r3
    4910:	20000a1c 	.word	0x20000a1c

00004914 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4914:	4b03      	ldr	r3, [pc, #12]	; (4924 <pin_in_use_by_te+0x10>)
    4916:	3008      	adds	r0, #8
    4918:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    491c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4920:	4770      	bx	lr
    4922:	bf00      	nop
    4924:	2000006c 	.word	0x2000006c

00004928 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4928:	4b04      	ldr	r3, [pc, #16]	; (493c <pin_has_trigger+0x14>)
    492a:	3008      	adds	r0, #8
    492c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4930:	f010 001c 	ands.w	r0, r0, #28
    4934:	bf18      	it	ne
    4936:	2001      	movne	r0, #1
    4938:	4770      	bx	lr
    493a:	bf00      	nop
    493c:	2000006c 	.word	0x2000006c

00004940 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4940:	4b03      	ldr	r3, [pc, #12]	; (4950 <pin_is_output+0x10>)
    4942:	3008      	adds	r0, #8
    4944:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4948:	f3c0 0040 	ubfx	r0, r0, #1, #1
    494c:	4770      	bx	lr
    494e:	bf00      	nop
    4950:	2000006c 	.word	0x2000006c

00004954 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4954:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4956:	f100 0308 	add.w	r3, r0, #8
    495a:	4c0c      	ldr	r4, [pc, #48]	; (498c <call_handler+0x38>)
    495c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4960:	05da      	lsls	r2, r3, #23
{
    4962:	4605      	mov	r5, r0
    4964:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4966:	d507      	bpl.n	4978 <call_handler+0x24>
    4968:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    496c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4970:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4974:	6852      	ldr	r2, [r2, #4]
    4976:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4978:	68a3      	ldr	r3, [r4, #8]
    497a:	b12b      	cbz	r3, 4988 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    497c:	68e2      	ldr	r2, [r4, #12]
    497e:	4631      	mov	r1, r6
    4980:	4628      	mov	r0, r5
    }
}
    4982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4986:	4718      	bx	r3
}
    4988:	bd70      	pop	{r4, r5, r6, pc}
    498a:	bf00      	nop
    498c:	2000006c 	.word	0x2000006c

00004990 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4990:	4a19      	ldr	r2, [pc, #100]	; (49f8 <release_handler+0x68>)
    4992:	3008      	adds	r0, #8
{
    4994:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4996:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    499a:	05d9      	lsls	r1, r3, #23
    499c:	d51d      	bpl.n	49da <release_handler+0x4a>
    499e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    49a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    49a6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    49aa:	f102 0410 	add.w	r4, r2, #16
    49ae:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    49b0:	f834 3b02 	ldrh.w	r3, [r4], #2
    49b4:	f413 7f80 	tst.w	r3, #256	; 0x100
    49b8:	d003      	beq.n	49c2 <release_handler+0x32>
    49ba:	f3c3 2343 	ubfx	r3, r3, #9, #4
    49be:	4299      	cmp	r1, r3
    49c0:	d00b      	beq.n	49da <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    49c2:	3001      	adds	r0, #1
    49c4:	2830      	cmp	r0, #48	; 0x30
    49c6:	d1f3      	bne.n	49b0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    49c8:	2300      	movs	r3, #0
    49ca:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    49ce:	480b      	ldr	r0, [pc, #44]	; (49fc <release_handler+0x6c>)
    49d0:	f7ff fe1e 	bl	4610 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    49d4:	4b0a      	ldr	r3, [pc, #40]	; (4a00 <release_handler+0x70>)
    49d6:	4298      	cmp	r0, r3
    49d8:	d100      	bne.n	49dc <release_handler+0x4c>
}
    49da:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    49dc:	4909      	ldr	r1, [pc, #36]	; (4a04 <release_handler+0x74>)
    49de:	480a      	ldr	r0, [pc, #40]	; (4a08 <release_handler+0x78>)
    49e0:	f44f 7299 	mov.w	r2, #306	; 0x132
    49e4:	f002 fddd 	bl	75a2 <assert_print>
}
    49e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    49ec:	4805      	ldr	r0, [pc, #20]	; (4a04 <release_handler+0x74>)
    49ee:	f44f 7199 	mov.w	r1, #306	; 0x132
    49f2:	f002 bdcf 	b.w	7594 <assert_post_action>
    49f6:	bf00      	nop
    49f8:	2000006c 	.word	0x2000006c
    49fc:	200000e0 	.word	0x200000e0
    4a00:	0bad0000 	.word	0x0bad0000
    4a04:	00008c9b 	.word	0x00008c9b
    4a08:	00008378 	.word	0x00008378

00004a0c <pin_handler_trigger_uninit>:
{
    4a0c:	b538      	push	{r3, r4, r5, lr}
    4a0e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4a10:	f7ff ff80 	bl	4914 <pin_in_use_by_te>
    4a14:	4c09      	ldr	r4, [pc, #36]	; (4a3c <pin_handler_trigger_uninit+0x30>)
    4a16:	f102 0508 	add.w	r5, r2, #8
    4a1a:	b140      	cbz	r0, 4a2e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4a1c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4a20:	4907      	ldr	r1, [pc, #28]	; (4a40 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4a22:	0b5b      	lsrs	r3, r3, #13
    4a24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4a28:	2000      	movs	r0, #0
    4a2a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4a2e:	4610      	mov	r0, r2
    4a30:	f7ff ffae 	bl	4990 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4a34:	2300      	movs	r3, #0
    4a36:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4a3a:	bd38      	pop	{r3, r4, r5, pc}
    4a3c:	2000006c 	.word	0x2000006c
    4a40:	40006000 	.word	0x40006000

00004a44 <nrf_gpio_pin_port_decode>:
{
    4a44:	b510      	push	{r4, lr}
    4a46:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4a48:	6800      	ldr	r0, [r0, #0]
    4a4a:	f003 f856 	bl	7afa <nrf_gpio_pin_present_check>
    4a4e:	b950      	cbnz	r0, 4a66 <nrf_gpio_pin_port_decode+0x22>
    4a50:	4911      	ldr	r1, [pc, #68]	; (4a98 <nrf_gpio_pin_port_decode+0x54>)
    4a52:	4812      	ldr	r0, [pc, #72]	; (4a9c <nrf_gpio_pin_port_decode+0x58>)
    4a54:	f240 2229 	movw	r2, #553	; 0x229
    4a58:	f002 fda3 	bl	75a2 <assert_print>
    4a5c:	480e      	ldr	r0, [pc, #56]	; (4a98 <nrf_gpio_pin_port_decode+0x54>)
    4a5e:	f240 2129 	movw	r1, #553	; 0x229
    4a62:	f002 fd97 	bl	7594 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4a66:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4a68:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a6c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4a6e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a70:	d00c      	beq.n	4a8c <nrf_gpio_pin_port_decode+0x48>
    4a72:	2b01      	cmp	r3, #1
    4a74:	d00d      	beq.n	4a92 <nrf_gpio_pin_port_decode+0x4e>
            NRFX_ASSERT(0);
    4a76:	4908      	ldr	r1, [pc, #32]	; (4a98 <nrf_gpio_pin_port_decode+0x54>)
    4a78:	4808      	ldr	r0, [pc, #32]	; (4a9c <nrf_gpio_pin_port_decode+0x58>)
    4a7a:	f240 222e 	movw	r2, #558	; 0x22e
    4a7e:	f002 fd90 	bl	75a2 <assert_print>
    4a82:	4805      	ldr	r0, [pc, #20]	; (4a98 <nrf_gpio_pin_port_decode+0x54>)
    4a84:	f240 212e 	movw	r1, #558	; 0x22e
    4a88:	f002 fd84 	bl	7594 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4a90:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    4a92:	4803      	ldr	r0, [pc, #12]	; (4aa0 <nrf_gpio_pin_port_decode+0x5c>)
    4a94:	e7fc      	b.n	4a90 <nrf_gpio_pin_port_decode+0x4c>
    4a96:	bf00      	nop
    4a98:	00008b73 	.word	0x00008b73
    4a9c:	00008378 	.word	0x00008378
    4aa0:	50000300 	.word	0x50000300

00004aa4 <nrfx_gpiote_input_configure>:
{
    4aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aa6:	4604      	mov	r4, r0
    4aa8:	b085      	sub	sp, #20
    4aaa:	4617      	mov	r7, r2
    4aac:	461d      	mov	r5, r3
    if (p_input_config)
    4aae:	b1f1      	cbz	r1, 4aee <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    4ab0:	f003 f834 	bl	7b1c <pin_is_task_output>
    4ab4:	b110      	cbz	r0, 4abc <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    4ab6:	484d      	ldr	r0, [pc, #308]	; (4bec <nrfx_gpiote_input_configure+0x148>)
}
    4ab8:	b005      	add	sp, #20
    4aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4abc:	460b      	mov	r3, r1
    4abe:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4ac2:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4ac6:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4aca:	f10d 020f 	add.w	r2, sp, #15
    4ace:	f10d 010e 	add.w	r1, sp, #14
    4ad2:	4620      	mov	r0, r4
    4ad4:	f003 f831 	bl	7b3a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4ad8:	4a45      	ldr	r2, [pc, #276]	; (4bf0 <nrfx_gpiote_input_configure+0x14c>)
    4ada:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4ade:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4ae2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4ae6:	f043 0301 	orr.w	r3, r3, #1
    4aea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4aee:	b197      	cbz	r7, 4b16 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    4af0:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4af2:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4af4:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    4af6:	f7ff ff23 	bl	4940 <pin_is_output>
    4afa:	b180      	cbz	r0, 4b1e <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    4afc:	2a00      	cmp	r2, #0
    4afe:	d1da      	bne.n	4ab6 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4b00:	4a3b      	ldr	r2, [pc, #236]	; (4bf0 <nrfx_gpiote_input_configure+0x14c>)
    4b02:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4b06:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4b0a:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4b0e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    4b12:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    4b16:	2d00      	cmp	r5, #0
    4b18:	d13d      	bne.n	4b96 <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    4b1a:	4836      	ldr	r0, [pc, #216]	; (4bf4 <nrfx_gpiote_input_configure+0x150>)
    4b1c:	e7cc      	b.n	4ab8 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4b1e:	4f34      	ldr	r7, [pc, #208]	; (4bf0 <nrfx_gpiote_input_configure+0x14c>)
    4b20:	f104 0c08 	add.w	ip, r4, #8
    4b24:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    4b28:	f021 0120 	bic.w	r1, r1, #32
    4b2c:	04c9      	lsls	r1, r1, #19
    4b2e:	0cc9      	lsrs	r1, r1, #19
    4b30:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    4b34:	2a00      	cmp	r2, #0
    4b36:	d0e3      	beq.n	4b00 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    4b38:	2e03      	cmp	r6, #3
    4b3a:	d8bc      	bhi.n	4ab6 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4b3c:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4b3e:	b92e      	cbnz	r6, 4b4c <nrfx_gpiote_input_configure+0xa8>
    4b40:	4a2d      	ldr	r2, [pc, #180]	; (4bf8 <nrfx_gpiote_input_configure+0x154>)
    4b42:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    4b46:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4b4a:	e7d9      	b.n	4b00 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4b4c:	009a      	lsls	r2, r3, #2
    4b4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4b52:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4b56:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    4b5a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4b5e:	f020 0003 	bic.w	r0, r0, #3
    4b62:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4b66:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4b6a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    4b6e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4b72:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4b76:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4b7a:	0220      	lsls	r0, r4, #8
    4b7c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    4b80:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4b84:	ea40 000e 	orr.w	r0, r0, lr
    4b88:	f041 0120 	orr.w	r1, r1, #32
    4b8c:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    4b90:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4b94:	e7b4      	b.n	4b00 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4b96:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4b9a:	4620      	mov	r0, r4
    4b9c:	f7ff fef8 	bl	4990 <release_handler>
    if (!handler)
    4ba0:	2e00      	cmp	r6, #0
    4ba2:	d0ba      	beq.n	4b1a <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4ba4:	4d12      	ldr	r5, [pc, #72]	; (4bf0 <nrfx_gpiote_input_configure+0x14c>)
    4ba6:	682b      	ldr	r3, [r5, #0]
    4ba8:	429e      	cmp	r6, r3
    4baa:	d104      	bne.n	4bb6 <nrfx_gpiote_input_configure+0x112>
    4bac:	686b      	ldr	r3, [r5, #4]
    4bae:	429f      	cmp	r7, r3
    4bb0:	d101      	bne.n	4bb6 <nrfx_gpiote_input_configure+0x112>
    4bb2:	2200      	movs	r2, #0
    4bb4:	e00a      	b.n	4bcc <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4bb6:	4811      	ldr	r0, [pc, #68]	; (4bfc <nrfx_gpiote_input_configure+0x158>)
    4bb8:	f10d 010f 	add.w	r1, sp, #15
    4bbc:	f7ff fd02 	bl	45c4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4bc0:	4b0c      	ldr	r3, [pc, #48]	; (4bf4 <nrfx_gpiote_input_configure+0x150>)
    4bc2:	4298      	cmp	r0, r3
    4bc4:	f47f af78 	bne.w	4ab8 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4bc8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4bcc:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4bd0:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4bd4:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4bd6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4bd8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4bdc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4be4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4be8:	e797      	b.n	4b1a <nrfx_gpiote_input_configure+0x76>
    4bea:	bf00      	nop
    4bec:	0bad0004 	.word	0x0bad0004
    4bf0:	2000006c 	.word	0x2000006c
    4bf4:	0bad0000 	.word	0x0bad0000
    4bf8:	40006000 	.word	0x40006000
    4bfc:	200000e0 	.word	0x200000e0

00004c00 <nrfx_gpiote_output_configure>:
{
    4c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c02:	4604      	mov	r4, r0
    4c04:	b085      	sub	sp, #20
    4c06:	4615      	mov	r5, r2
    if (p_config)
    4c08:	b321      	cbz	r1, 4c54 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    4c0a:	f7ff fe99 	bl	4940 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4c0e:	b920      	cbnz	r0, 4c1a <nrfx_gpiote_output_configure+0x1a>
    4c10:	4620      	mov	r0, r4
    4c12:	f7ff fe7f 	bl	4914 <pin_in_use_by_te>
    4c16:	2800      	cmp	r0, #0
    4c18:	d15e      	bne.n	4cd8 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4c1a:	4620      	mov	r0, r4
    4c1c:	f7ff fe84 	bl	4928 <pin_has_trigger>
    4c20:	b110      	cbz	r0, 4c28 <nrfx_gpiote_output_configure+0x28>
    4c22:	784b      	ldrb	r3, [r1, #1]
    4c24:	2b01      	cmp	r3, #1
    4c26:	d057      	beq.n	4cd8 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4c28:	2301      	movs	r3, #1
    4c2a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4c2e:	2300      	movs	r3, #0
    4c30:	e9cd 1300 	strd	r1, r3, [sp]
    4c34:	1c4a      	adds	r2, r1, #1
    4c36:	1c8b      	adds	r3, r1, #2
    4c38:	4620      	mov	r0, r4
    4c3a:	f10d 010f 	add.w	r1, sp, #15
    4c3e:	f002 ff7c 	bl	7b3a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4c42:	4a26      	ldr	r2, [pc, #152]	; (4cdc <nrfx_gpiote_output_configure+0xdc>)
    4c44:	f104 0108 	add.w	r1, r4, #8
    4c48:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4c4c:	f043 0303 	orr.w	r3, r3, #3
    4c50:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    4c54:	b915      	cbnz	r5, 4c5c <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    4c56:	4822      	ldr	r0, [pc, #136]	; (4ce0 <nrfx_gpiote_output_configure+0xe0>)
}
    4c58:	b005      	add	sp, #20
    4c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    4c5c:	4620      	mov	r0, r4
    4c5e:	f7ff fe6f 	bl	4940 <pin_is_output>
        if (pin_is_input(pin))
    4c62:	b3c8      	cbz	r0, 4cd8 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4c64:	4e1d      	ldr	r6, [pc, #116]	; (4cdc <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    4c66:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4c6a:	f104 0708 	add.w	r7, r4, #8
    4c6e:	4661      	mov	r1, ip
    4c70:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    4c74:	0089      	lsls	r1, r1, #2
    4c76:	f020 0020 	bic.w	r0, r0, #32
    4c7a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4c7e:	04c0      	lsls	r0, r0, #19
    4c80:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4c84:	0cc0      	lsrs	r0, r0, #19
    4c86:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4c8a:	2300      	movs	r3, #0
    4c8c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4c90:	786a      	ldrb	r2, [r5, #1]
    4c92:	2a00      	cmp	r2, #0
    4c94:	d0df      	beq.n	4c56 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4c96:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4c9a:	78ad      	ldrb	r5, [r5, #2]
    4c9c:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4ca0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4ca4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ca8:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4cac:	0223      	lsls	r3, r4, #8
    4cae:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4cb2:	0412      	lsls	r2, r2, #16
    4cb4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4cb8:	ea43 030e 	orr.w	r3, r3, lr
    4cbc:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4cbe:	052a      	lsls	r2, r5, #20
    4cc0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4cc4:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4cc8:	4313      	orrs	r3, r2
    4cca:	f040 0020 	orr.w	r0, r0, #32
    4cce:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4cd2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4cd6:	e7be      	b.n	4c56 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    4cd8:	4802      	ldr	r0, [pc, #8]	; (4ce4 <nrfx_gpiote_output_configure+0xe4>)
    4cda:	e7bd      	b.n	4c58 <nrfx_gpiote_output_configure+0x58>
    4cdc:	2000006c 	.word	0x2000006c
    4ce0:	0bad0000 	.word	0x0bad0000
    4ce4:	0bad0004 	.word	0x0bad0004

00004ce8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4ce8:	4b01      	ldr	r3, [pc, #4]	; (4cf0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4cea:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4cee:	4770      	bx	lr
    4cf0:	2000006c 	.word	0x2000006c

00004cf4 <nrfx_gpiote_channel_get>:
{
    4cf4:	b538      	push	{r3, r4, r5, lr}
    4cf6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4cf8:	460d      	mov	r5, r1
    4cfa:	b951      	cbnz	r1, 4d12 <nrfx_gpiote_channel_get+0x1e>
    4cfc:	490c      	ldr	r1, [pc, #48]	; (4d30 <nrfx_gpiote_channel_get+0x3c>)
    4cfe:	480d      	ldr	r0, [pc, #52]	; (4d34 <nrfx_gpiote_channel_get+0x40>)
    4d00:	f240 2235 	movw	r2, #565	; 0x235
    4d04:	f002 fc4d 	bl	75a2 <assert_print>
    4d08:	4809      	ldr	r0, [pc, #36]	; (4d30 <nrfx_gpiote_channel_get+0x3c>)
    4d0a:	f240 2135 	movw	r1, #565	; 0x235
    4d0e:	f002 fc41 	bl	7594 <assert_post_action>
    if (pin_in_use_by_te(pin))
    4d12:	4620      	mov	r0, r4
    4d14:	f7ff fdfe 	bl	4914 <pin_in_use_by_te>
    4d18:	b138      	cbz	r0, 4d2a <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d1a:	4b07      	ldr	r3, [pc, #28]	; (4d38 <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
    4d1c:	4807      	ldr	r0, [pc, #28]	; (4d3c <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d1e:	3408      	adds	r4, #8
    4d20:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4d24:	0b5b      	lsrs	r3, r3, #13
    4d26:	702b      	strb	r3, [r5, #0]
}
    4d28:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4d2a:	4805      	ldr	r0, [pc, #20]	; (4d40 <nrfx_gpiote_channel_get+0x4c>)
    4d2c:	e7fc      	b.n	4d28 <nrfx_gpiote_channel_get+0x34>
    4d2e:	bf00      	nop
    4d30:	00008c9b 	.word	0x00008c9b
    4d34:	00008378 	.word	0x00008378
    4d38:	2000006c 	.word	0x2000006c
    4d3c:	0bad0000 	.word	0x0bad0000
    4d40:	0bad0004 	.word	0x0bad0004

00004d44 <nrfx_gpiote_init>:
{
    4d44:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4d46:	4c0f      	ldr	r4, [pc, #60]	; (4d84 <nrfx_gpiote_init+0x40>)
    4d48:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4d4c:	b9bd      	cbnz	r5, 4d7e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4d4e:	2260      	movs	r2, #96	; 0x60
    4d50:	4629      	mov	r1, r5
    4d52:	f104 0010 	add.w	r0, r4, #16
    4d56:	f002 fc77 	bl	7648 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4d5a:	2006      	movs	r0, #6
    4d5c:	f7fc fdd8 	bl	1910 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d60:	4b09      	ldr	r3, [pc, #36]	; (4d88 <nrfx_gpiote_init+0x44>)
    return err_code;
    4d62:	480a      	ldr	r0, [pc, #40]	; (4d8c <nrfx_gpiote_init+0x48>)
    4d64:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4d68:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4d6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4d70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4d74:	2301      	movs	r3, #1
    4d76:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4d7a:	6763      	str	r3, [r4, #116]	; 0x74
}
    4d7c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4d7e:	4804      	ldr	r0, [pc, #16]	; (4d90 <nrfx_gpiote_init+0x4c>)
    4d80:	e7fc      	b.n	4d7c <nrfx_gpiote_init+0x38>
    4d82:	bf00      	nop
    4d84:	2000006c 	.word	0x2000006c
    4d88:	40006000 	.word	0x40006000
    4d8c:	0bad0000 	.word	0x0bad0000
    4d90:	0bad0005 	.word	0x0bad0005

00004d94 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4d94:	4b03      	ldr	r3, [pc, #12]	; (4da4 <nrfx_gpiote_is_init+0x10>)
    4d96:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4d9a:	3800      	subs	r0, #0
    4d9c:	bf18      	it	ne
    4d9e:	2001      	movne	r0, #1
    4da0:	4770      	bx	lr
    4da2:	bf00      	nop
    4da4:	2000006c 	.word	0x2000006c

00004da8 <nrfx_gpiote_channel_free>:
{
    4da8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4daa:	4801      	ldr	r0, [pc, #4]	; (4db0 <nrfx_gpiote_channel_free+0x8>)
    4dac:	f7ff bc30 	b.w	4610 <nrfx_flag32_free>
    4db0:	200000dc 	.word	0x200000dc

00004db4 <nrfx_gpiote_channel_alloc>:
{
    4db4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4db6:	4801      	ldr	r0, [pc, #4]	; (4dbc <nrfx_gpiote_channel_alloc+0x8>)
    4db8:	f7ff bc04 	b.w	45c4 <nrfx_flag32_alloc>
    4dbc:	200000dc 	.word	0x200000dc

00004dc0 <nrfx_gpiote_trigger_enable>:
{
    4dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4dc2:	4604      	mov	r4, r0
    4dc4:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4dc6:	f7ff fdaf 	bl	4928 <pin_has_trigger>
    4dca:	b950      	cbnz	r0, 4de2 <nrfx_gpiote_trigger_enable+0x22>
    4dcc:	492f      	ldr	r1, [pc, #188]	; (4e8c <nrfx_gpiote_trigger_enable+0xcc>)
    4dce:	4830      	ldr	r0, [pc, #192]	; (4e90 <nrfx_gpiote_trigger_enable+0xd0>)
    4dd0:	f240 32df 	movw	r2, #991	; 0x3df
    4dd4:	f002 fbe5 	bl	75a2 <assert_print>
    4dd8:	482c      	ldr	r0, [pc, #176]	; (4e8c <nrfx_gpiote_trigger_enable+0xcc>)
    4dda:	f240 31df 	movw	r1, #991	; 0x3df
    4dde:	f002 fbd9 	bl	7594 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4de2:	4620      	mov	r0, r4
    4de4:	f7ff fd96 	bl	4914 <pin_in_use_by_te>
    4de8:	4e2a      	ldr	r6, [pc, #168]	; (4e94 <nrfx_gpiote_trigger_enable+0xd4>)
    4dea:	f104 0708 	add.w	r7, r4, #8
    4dee:	b318      	cbz	r0, 4e38 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
    4df0:	4620      	mov	r0, r4
    4df2:	f7ff fda5 	bl	4940 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4df6:	4602      	mov	r2, r0
    4df8:	b9f0      	cbnz	r0, 4e38 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4dfa:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    4dfe:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    4e00:	4608      	mov	r0, r1
    4e02:	f002 fe96 	bl	7b32 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    4e06:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    4e0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e0e:	601a      	str	r2, [r3, #0]
    4e10:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4e12:	008b      	lsls	r3, r1, #2
    4e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4e18:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4e1c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4e20:	f042 0201 	orr.w	r2, r2, #1
    4e24:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    4e28:	b125      	cbz	r5, 4e34 <nrfx_gpiote_trigger_enable+0x74>
    p_reg->INTENSET = mask;
    4e2a:	4a1b      	ldr	r2, [pc, #108]	; (4e98 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4e2c:	2301      	movs	r3, #1
    4e2e:	408b      	lsls	r3, r1
    4e30:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4e34:	b003      	add	sp, #12
    4e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    4e38:	b955      	cbnz	r5, 4e50 <nrfx_gpiote_trigger_enable+0x90>
    4e3a:	4914      	ldr	r1, [pc, #80]	; (4e8c <nrfx_gpiote_trigger_enable+0xcc>)
    4e3c:	4814      	ldr	r0, [pc, #80]	; (4e90 <nrfx_gpiote_trigger_enable+0xd0>)
    4e3e:	f240 32ee 	movw	r2, #1006	; 0x3ee
    4e42:	f002 fbae 	bl	75a2 <assert_print>
    4e46:	4811      	ldr	r0, [pc, #68]	; (4e8c <nrfx_gpiote_trigger_enable+0xcc>)
    4e48:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4e4c:	f002 fba2 	bl	7594 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e50:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4e54:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4e58:	2b04      	cmp	r3, #4
    4e5a:	d012      	beq.n	4e82 <nrfx_gpiote_trigger_enable+0xc2>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4e5c:	2b05      	cmp	r3, #5
    4e5e:	d012      	beq.n	4e86 <nrfx_gpiote_trigger_enable+0xc6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4e60:	a801      	add	r0, sp, #4
    4e62:	9401      	str	r4, [sp, #4]
    4e64:	f7ff fdee 	bl	4a44 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e68:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4e6a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e6e:	40d9      	lsrs	r1, r3
    4e70:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4e74:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4e76:	4620      	mov	r0, r4
}
    4e78:	b003      	add	sp, #12
    4e7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4e7e:	f002 bea7 	b.w	7bd0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4e82:	2103      	movs	r1, #3
    4e84:	e7f7      	b.n	4e76 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4e86:	2102      	movs	r1, #2
    4e88:	e7f5      	b.n	4e76 <nrfx_gpiote_trigger_enable+0xb6>
    4e8a:	bf00      	nop
    4e8c:	00008c9b 	.word	0x00008c9b
    4e90:	00008378 	.word	0x00008378
    4e94:	2000006c 	.word	0x2000006c
    4e98:	40006000 	.word	0x40006000

00004e9c <nrfx_gpiote_trigger_disable>:
{
    4e9c:	b508      	push	{r3, lr}
    4e9e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ea0:	f7ff fd38 	bl	4914 <pin_in_use_by_te>
    4ea4:	b1c8      	cbz	r0, 4eda <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    4ea6:	4610      	mov	r0, r2
    4ea8:	f7ff fd4a 	bl	4940 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4eac:	b9a8      	cbnz	r0, 4eda <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4eae:	3208      	adds	r2, #8
    4eb0:	4b0d      	ldr	r3, [pc, #52]	; (4ee8 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    4eb2:	490e      	ldr	r1, [pc, #56]	; (4eec <nrfx_gpiote_trigger_disable+0x50>)
    4eb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4eb8:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4eba:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4ebc:	409a      	lsls	r2, r3
    4ebe:	009b      	lsls	r3, r3, #2
    4ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4ec4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4ec8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4ecc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4ed0:	f022 0203 	bic.w	r2, r2, #3
    4ed4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4ed8:	bd08      	pop	{r3, pc}
    4eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ede:	2100      	movs	r1, #0
    4ee0:	4610      	mov	r0, r2
    4ee2:	f002 be75 	b.w	7bd0 <nrf_gpio_cfg_sense_set>
    4ee6:	bf00      	nop
    4ee8:	2000006c 	.word	0x2000006c
    4eec:	40006000 	.word	0x40006000

00004ef0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4ef0:	4b0e      	ldr	r3, [pc, #56]	; (4f2c <nrfx_gpiote_pin_uninit+0x3c>)
    4ef2:	f100 0208 	add.w	r2, r0, #8
{
    4ef6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4ef8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4efc:	07db      	lsls	r3, r3, #31
{
    4efe:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4f00:	d511      	bpl.n	4f26 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4f02:	f7ff ffcb 	bl	4e9c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4f06:	4620      	mov	r0, r4
    4f08:	f7ff fd80 	bl	4a0c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f0c:	a801      	add	r0, sp, #4
    4f0e:	9401      	str	r4, [sp, #4]
    4f10:	f7ff fd98 	bl	4a44 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4f1a:	2202      	movs	r2, #2
    4f1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4f20:	4803      	ldr	r0, [pc, #12]	; (4f30 <nrfx_gpiote_pin_uninit+0x40>)
}
    4f22:	b002      	add	sp, #8
    4f24:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f26:	4803      	ldr	r0, [pc, #12]	; (4f34 <nrfx_gpiote_pin_uninit+0x44>)
    4f28:	e7fb      	b.n	4f22 <nrfx_gpiote_pin_uninit+0x32>
    4f2a:	bf00      	nop
    4f2c:	2000006c 	.word	0x2000006c
    4f30:	0bad0000 	.word	0x0bad0000
    4f34:	0bad0004 	.word	0x0bad0004

00004f38 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f3c:	4b65      	ldr	r3, [pc, #404]	; (50d4 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    4f3e:	4866      	ldr	r0, [pc, #408]	; (50d8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f40:	4966      	ldr	r1, [pc, #408]	; (50dc <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    4f42:	2600      	movs	r6, #0
{
    4f44:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4f46:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f48:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f4a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4f4c:	b135      	cbz	r5, 4f5c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4f4e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4f52:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f54:	bf1e      	ittt	ne
    4f56:	601c      	strne	r4, [r3, #0]
    4f58:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4f5a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f5c:	3304      	adds	r3, #4
    4f5e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4f60:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f64:	d1f1      	bne.n	4f4a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f66:	f8df 8170 	ldr.w	r8, [pc, #368]	; 50d8 <nrfx_gpiote_irq_handler+0x1a0>
    4f6a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4f6e:	2b00      	cmp	r3, #0
    4f70:	f000 8093 	beq.w	509a <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
    4f74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4f78:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4f7c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4f7e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4f82:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4f86:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4f88:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4f8c:	2700      	movs	r7, #0
            while (latch[i])
    4f8e:	f10d 0910 	add.w	r9, sp, #16
    4f92:	017b      	lsls	r3, r7, #5
    4f94:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4f96:	f04f 0a01 	mov.w	sl, #1
    4f9a:	e04b      	b.n	5034 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    4f9c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4f9e:	4a50      	ldr	r2, [pc, #320]	; (50e0 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4fa0:	fa94 f4a4 	rbit	r4, r4
    4fa4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4fa8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4faa:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4fae:	08e0      	lsrs	r0, r4, #3
    4fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4fb4:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    4fb6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4fba:	fa0a fc02 	lsl.w	ip, sl, r2
    4fbe:	f819 2000 	ldrb.w	r2, [r9, r0]
    4fc2:	ea22 020c 	bic.w	r2, r2, ip
    4fc6:	0899      	lsrs	r1, r3, #2
    4fc8:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4fcc:	a803      	add	r0, sp, #12
    4fce:	f3c3 0582 	ubfx	r5, r3, #2, #3
    4fd2:	9101      	str	r1, [sp, #4]
    4fd4:	f7ff fd36 	bl	4a44 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4fd8:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    4fda:	9901      	ldr	r1, [sp, #4]
    4fdc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4fe0:	074b      	lsls	r3, r1, #29
    4fe2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fe6:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4fe8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4fec:	d529      	bpl.n	5042 <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
    4fee:	4659      	mov	r1, fp
    4ff0:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ff2:	b2d5      	uxtb	r5, r2
    4ff4:	f7ff fcae 	bl	4954 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ff8:	a803      	add	r0, sp, #12
    4ffa:	9403      	str	r4, [sp, #12]
    4ffc:	f7ff fd22 	bl	4a44 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5000:	9b03      	ldr	r3, [sp, #12]
    5002:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5006:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    500a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    500e:	429d      	cmp	r5, r3
    5010:	d107      	bne.n	5022 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5012:	2100      	movs	r1, #0
    5014:	4620      	mov	r0, r4
    5016:	f002 fddb 	bl	7bd0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    501a:	4629      	mov	r1, r5
    501c:	4620      	mov	r0, r4
    501e:	f002 fdd7 	bl	7bd0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5022:	a803      	add	r0, sp, #12
    5024:	9403      	str	r4, [sp, #12]
    5026:	f7ff fd0d 	bl	4a44 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    502a:	9b03      	ldr	r3, [sp, #12]
    502c:	fa0a f303 	lsl.w	r3, sl, r3
    5030:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5034:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    5038:	2c00      	cmp	r4, #0
    503a:	d1af      	bne.n	4f9c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    503c:	b9cf      	cbnz	r7, 5072 <nrfx_gpiote_irq_handler+0x13a>
    503e:	2701      	movs	r7, #1
    5040:	e7a7      	b.n	4f92 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5042:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5044:	bf0c      	ite	eq
    5046:	2103      	moveq	r1, #3
    5048:	2102      	movne	r1, #2
    504a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    504c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    504e:	f002 fdbf 	bl	7bd0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5052:	2d03      	cmp	r5, #3
    5054:	d004      	beq.n	5060 <nrfx_gpiote_irq_handler+0x128>
    5056:	9a01      	ldr	r2, [sp, #4]
    5058:	2a02      	cmp	r2, #2
    505a:	d106      	bne.n	506a <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    505c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    505e:	d1e0      	bne.n	5022 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    5060:	4659      	mov	r1, fp
    5062:	4620      	mov	r0, r4
    5064:	f7ff fc76 	bl	4954 <call_handler>
    5068:	e7db      	b.n	5022 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    506a:	2a03      	cmp	r2, #3
    506c:	d1d9      	bne.n	5022 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    506e:	2d02      	cmp	r5, #2
    5070:	e7f5      	b.n	505e <nrfx_gpiote_irq_handler+0x126>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5072:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    5076:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    507a:	491a      	ldr	r1, [pc, #104]	; (50e4 <nrfx_gpiote_irq_handler+0x1ac>)
    507c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5080:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5084:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5086:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    508a:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    508e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5090:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    5094:	4313      	orrs	r3, r2
    5096:	f47f af79 	bne.w	4f8c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    509a:	2401      	movs	r4, #1
    while (mask)
    509c:	b916      	cbnz	r6, 50a4 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    509e:	b007      	add	sp, #28
    50a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    50a4:	fa96 f3a6 	rbit	r3, r6
    50a8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    50ac:	fa04 f203 	lsl.w	r2, r4, r3
    50b0:	009b      	lsls	r3, r3, #2
    50b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    50b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    50ba:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    50be:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    50c2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    50c6:	f3c0 2005 	ubfx	r0, r0, #8, #6
    50ca:	f3c1 4101 	ubfx	r1, r1, #16, #2
    50ce:	f7ff fc41 	bl	4954 <call_handler>
    50d2:	e7e3      	b.n	509c <nrfx_gpiote_irq_handler+0x164>
    50d4:	40006100 	.word	0x40006100
    50d8:	40006000 	.word	0x40006000
    50dc:	40006120 	.word	0x40006120
    50e0:	2000006c 	.word	0x2000006c
    50e4:	50000300 	.word	0x50000300

000050e8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    50e8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    50ea:	4801      	ldr	r0, [pc, #4]	; (50f0 <nrfx_ppi_channel_alloc+0x8>)
    50ec:	f7ff ba6a 	b.w	45c4 <nrfx_flag32_alloc>
    50f0:	200000e8 	.word	0x200000e8

000050f4 <nrfx_ppi_channel_assign>:
    return nrfx_flag32_free(&m_channels_allocated, channel);
}


nrfx_err_t nrfx_ppi_channel_assign(nrf_ppi_channel_t channel, uint32_t eep, uint32_t tep)
{
    50f4:	b570      	push	{r4, r5, r6, lr}
    50f6:	4604      	mov	r4, r0
    50f8:	4615      	mov	r5, r2
    if ((uint32_t *)eep == NULL || (uint32_t *)tep == NULL)
    50fa:	460e      	mov	r6, r1
    50fc:	b1b1      	cbz	r1, 512c <nrfx_ppi_channel_assign+0x38>
    50fe:	b1aa      	cbz	r2, 512c <nrfx_ppi_channel_assign+0x38>
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    5100:	2301      	movs	r3, #1
    5102:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    5104:	f3c3 0313 	ubfx	r3, r3, #0, #20
        return NRFX_ERROR_NULL;
    }

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_programmable_app_channel(channel))
    5108:	b193      	cbz	r3, 5130 <nrfx_ppi_channel_assign+0x3c>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (!nrfx_flag32_is_allocated(m_channels_allocated, channel))
    510a:	4b0b      	ldr	r3, [pc, #44]	; (5138 <nrfx_ppi_channel_assign+0x44>)
    510c:	4601      	mov	r1, r0
    510e:	6818      	ldr	r0, [r3, #0]
    5110:	f002 fcee 	bl	7af0 <nrfx_flag32_is_allocated>
    5114:	b170      	cbz	r0, 5134 <nrfx_ppi_channel_assign+0x40>
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5116:	00e0      	lsls	r0, r4, #3
    5118:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    511c:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    5120:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5124:	f8c0 5514 	str.w	r5, [r0, #1300]	; 0x514
    nrfx_err_t err_code = NRFX_SUCCESS;
    5128:	4804      	ldr	r0, [pc, #16]	; (513c <nrfx_ppi_channel_assign+0x48>)
                      eep,
                      tep);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    512a:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_NULL;
    512c:	4804      	ldr	r0, [pc, #16]	; (5140 <nrfx_ppi_channel_assign+0x4c>)
    512e:	e7fc      	b.n	512a <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_PARAM;
    5130:	4804      	ldr	r0, [pc, #16]	; (5144 <nrfx_ppi_channel_assign+0x50>)
    5132:	e7fa      	b.n	512a <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_STATE;
    5134:	4804      	ldr	r0, [pc, #16]	; (5148 <nrfx_ppi_channel_assign+0x54>)
    5136:	e7f8      	b.n	512a <nrfx_ppi_channel_assign+0x36>
    5138:	200000e8 	.word	0x200000e8
    513c:	0bad0000 	.word	0x0bad0000
    5140:	0bad0009 	.word	0x0bad0009
    5144:	0bad0004 	.word	0x0bad0004
    5148:	0bad0005 	.word	0x0bad0005

0000514c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    514c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    514e:	4c14      	ldr	r4, [pc, #80]	; (51a0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5150:	4a14      	ldr	r2, [pc, #80]	; (51a4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5152:	4915      	ldr	r1, [pc, #84]	; (51a8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5154:	2303      	movs	r3, #3
    5156:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5158:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    515a:	4b14      	ldr	r3, [pc, #80]	; (51ac <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    515c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    515e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5160:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5164:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5166:	2300      	movs	r3, #0
    5168:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    516a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    516c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    516e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5170:	4a0f      	ldr	r2, [pc, #60]	; (51b0 <_DoInit+0x64>)
    5172:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    5174:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5176:	2210      	movs	r2, #16
    5178:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    517a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    517c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    517e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5180:	f002 fa3d 	bl	75fe <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5184:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    5188:	490a      	ldr	r1, [pc, #40]	; (51b4 <_DoInit+0x68>)
    518a:	4620      	mov	r0, r4
    518c:	f002 fa37 	bl	75fe <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5190:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    5194:	2320      	movs	r3, #32
    5196:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5198:	f3bf 8f5f 	dmb	sy
}
    519c:	bd10      	pop	{r4, pc}
    519e:	bf00      	nop
    51a0:	20000a24 	.word	0x20000a24
    51a4:	00008cd9 	.word	0x00008cd9
    51a8:	00008ce2 	.word	0x00008ce2
    51ac:	20000fe4 	.word	0x20000fe4
    51b0:	20000fd4 	.word	0x20000fd4
    51b4:	00008ce6 	.word	0x00008ce6

000051b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51b8:	4b0e      	ldr	r3, [pc, #56]	; (51f4 <z_sys_init_run_level+0x3c>)
{
    51ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    51c0:	3001      	adds	r0, #1
    51c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    51c6:	42a6      	cmp	r6, r4
    51c8:	d800      	bhi.n	51cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    51ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    51cc:	e9d4 3500 	ldrd	r3, r5, [r4]
    51d0:	4628      	mov	r0, r5
    51d2:	4798      	blx	r3
		if (dev != NULL) {
    51d4:	b165      	cbz	r5, 51f0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    51d6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    51d8:	b130      	cbz	r0, 51e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    51da:	2800      	cmp	r0, #0
    51dc:	bfb8      	it	lt
    51de:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    51e0:	28ff      	cmp	r0, #255	; 0xff
    51e2:	bfa8      	it	ge
    51e4:	20ff      	movge	r0, #255	; 0xff
    51e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    51e8:	785a      	ldrb	r2, [r3, #1]
    51ea:	f042 0201 	orr.w	r2, r2, #1
    51ee:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51f0:	3408      	adds	r4, #8
    51f2:	e7e8      	b.n	51c6 <z_sys_init_run_level+0xe>
    51f4:	00008134 	.word	0x00008134

000051f8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    51f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    51fa:	4604      	mov	r4, r0
    51fc:	460e      	mov	r6, r1
	__asm__ volatile(
    51fe:	f04f 0320 	mov.w	r3, #32
    5202:	f3ef 8711 	mrs	r7, BASEPRI
    5206:	f383 8812 	msr	BASEPRI_MAX, r3
    520a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    520e:	f001 fbcd 	bl	69ac <z_impl_z_current_get>
    5212:	2c04      	cmp	r4, #4
    5214:	bf96      	itet	ls
    5216:	4b1e      	ldrls	r3, [pc, #120]	; (5290 <z_fatal_error+0x98>)
    5218:	4b1e      	ldrhi	r3, [pc, #120]	; (5294 <z_fatal_error+0x9c>)
    521a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    521e:	2200      	movs	r2, #0
    5220:	4605      	mov	r5, r0
    5222:	9200      	str	r2, [sp, #0]
    5224:	481c      	ldr	r0, [pc, #112]	; (5298 <z_fatal_error+0xa0>)
    5226:	4622      	mov	r2, r4
    5228:	2145      	movs	r1, #69	; 0x45
    522a:	f002 f9c8 	bl	75be <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    522e:	b13e      	cbz	r6, 5240 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5230:	69f3      	ldr	r3, [r6, #28]
    5232:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5236:	b11b      	cbz	r3, 5240 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
    5238:	4818      	ldr	r0, [pc, #96]	; (529c <z_fatal_error+0xa4>)
    523a:	2145      	movs	r1, #69	; 0x45
    523c:	f002 f9bf 	bl	75be <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5240:	b135      	cbz	r5, 5250 <z_fatal_error+0x58>
    5242:	4628      	mov	r0, r5
    5244:	f002 fd0b 	bl	7c5e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5248:	4603      	mov	r3, r0
    524a:	b108      	cbz	r0, 5250 <z_fatal_error+0x58>
    524c:	7802      	ldrb	r2, [r0, #0]
    524e:	b902      	cbnz	r2, 5252 <z_fatal_error+0x5a>
		thread_name = "unknown";
    5250:	4b13      	ldr	r3, [pc, #76]	; (52a0 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5252:	4814      	ldr	r0, [pc, #80]	; (52a4 <z_fatal_error+0xac>)
    5254:	462a      	mov	r2, r5
    5256:	2145      	movs	r1, #69	; 0x45
    5258:	f002 f9b1 	bl	75be <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    525c:	4631      	mov	r1, r6
    525e:	4620      	mov	r0, r4
    5260:	f7fe f8f2 	bl	3448 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5264:	2c04      	cmp	r4, #4
    5266:	d108      	bne.n	527a <z_fatal_error+0x82>
    5268:	490f      	ldr	r1, [pc, #60]	; (52a8 <z_fatal_error+0xb0>)
    526a:	4810      	ldr	r0, [pc, #64]	; (52ac <z_fatal_error+0xb4>)
    526c:	228f      	movs	r2, #143	; 0x8f
    526e:	f002 f998 	bl	75a2 <assert_print>
    5272:	480d      	ldr	r0, [pc, #52]	; (52a8 <z_fatal_error+0xb0>)
    5274:	218f      	movs	r1, #143	; 0x8f
    5276:	f002 f98d 	bl	7594 <assert_post_action>
	__asm__ volatile(
    527a:	f387 8811 	msr	BASEPRI, r7
    527e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5282:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5284:	b003      	add	sp, #12
    5286:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    528a:	f7fc bf39 	b.w	2100 <z_impl_k_thread_abort>
    528e:	bf00      	nop
    5290:	0000814c 	.word	0x0000814c
    5294:	00008ced 	.word	0x00008ced
    5298:	00008d03 	.word	0x00008d03
    529c:	00008d30 	.word	0x00008d30
    52a0:	00008cfb 	.word	0x00008cfb
    52a4:	00008d56 	.word	0x00008d56
    52a8:	00008d73 	.word	0x00008d73
    52ac:	00008378 	.word	0x00008378

000052b0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    52b0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    52b2:	4b0a      	ldr	r3, [pc, #40]	; (52dc <bg_thread_main+0x2c>)
    52b4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    52b6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    52b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    52ba:	f7ff ff7d 	bl	51b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    52be:	f001 fead 	bl	701c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    52c2:	2003      	movs	r0, #3
    52c4:	f7ff ff78 	bl	51b8 <z_sys_init_run_level>

	z_init_static_threads();
    52c8:	f000 f9f0 	bl	56ac <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    52cc:	f7fb f95a 	bl	584 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    52d0:	4a03      	ldr	r2, [pc, #12]	; (52e0 <bg_thread_main+0x30>)
    52d2:	7b13      	ldrb	r3, [r2, #12]
    52d4:	f023 0301 	bic.w	r3, r3, #1
    52d8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    52da:	bd08      	pop	{r3, pc}
    52dc:	200013e4 	.word	0x200013e4
    52e0:	20000280 	.word	0x20000280

000052e4 <z_bss_zero>:
{
    52e4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    52e6:	4803      	ldr	r0, [pc, #12]	; (52f4 <z_bss_zero+0x10>)
    52e8:	4a03      	ldr	r2, [pc, #12]	; (52f8 <z_bss_zero+0x14>)
    52ea:	2100      	movs	r1, #0
    52ec:	1a12      	subs	r2, r2, r0
    52ee:	f002 fc90 	bl	7c12 <z_early_memset>
}
    52f2:	bd08      	pop	{r3, pc}
    52f4:	200001e0 	.word	0x200001e0
    52f8:	200013e8 	.word	0x200013e8

000052fc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    52fc:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    52fe:	2300      	movs	r3, #0
{
    5300:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5302:	2201      	movs	r2, #1
    5304:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5308:	4e13      	ldr	r6, [pc, #76]	; (5358 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    530a:	4d14      	ldr	r5, [pc, #80]	; (535c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    530c:	9301      	str	r3, [sp, #4]
    530e:	220f      	movs	r2, #15
    5310:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5314:	4912      	ldr	r1, [pc, #72]	; (5360 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5316:	2318      	movs	r3, #24
    5318:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    531c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5320:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5322:	f44f 70b0 	mov.w	r0, #352	; 0x160
    5326:	fb00 1104 	mla	r1, r0, r4, r1
    532a:	4b0e      	ldr	r3, [pc, #56]	; (5364 <z_init_cpu+0x68>)
    532c:	9500      	str	r5, [sp, #0]
    532e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5332:	4630      	mov	r0, r6
    5334:	f000 f962 	bl	55fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5338:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    533a:	480b      	ldr	r0, [pc, #44]	; (5368 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    533c:	752c      	strb	r4, [r5, #20]
    533e:	f023 0304 	bic.w	r3, r3, #4
    5342:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5344:	f44f 6302 	mov.w	r3, #2080	; 0x820
    5348:	fb03 0404 	mla	r4, r3, r4, r0
    534c:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    534e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    5350:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5352:	b006      	add	sp, #24
    5354:	bd70      	pop	{r4, r5, r6, pc}
    5356:	bf00      	nop
    5358:	20000200 	.word	0x20000200
    535c:	20000acc 	.word	0x20000acc
    5360:	20001820 	.word	0x20001820
    5364:	000057f1 	.word	0x000057f1
    5368:	20001980 	.word	0x20001980

0000536c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    536c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    536e:	4b2d      	ldr	r3, [pc, #180]	; (5424 <z_cstart+0xb8>)
    5370:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5372:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5376:	4d2c      	ldr	r5, [pc, #176]	; (5428 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5378:	4e2c      	ldr	r6, [pc, #176]	; (542c <z_cstart+0xc0>)
    537a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    537c:	4f2c      	ldr	r7, [pc, #176]	; (5430 <z_cstart+0xc4>)
    537e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5382:	2400      	movs	r4, #0
    5384:	616b      	str	r3, [r5, #20]
    5386:	23e0      	movs	r3, #224	; 0xe0
    5388:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    538c:	77ec      	strb	r4, [r5, #31]
    538e:	762c      	strb	r4, [r5, #24]
    5390:	766c      	strb	r4, [r5, #25]
    5392:	76ac      	strb	r4, [r5, #26]
    5394:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5398:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    539a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    539e:	626b      	str	r3, [r5, #36]	; 0x24
    53a0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    53a4:	f7fc fe20 	bl	1fe8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    53a8:	f7fc fa66 	bl	1878 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    53ac:	f04f 33ff 	mov.w	r3, #4294967295
    53b0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    53b2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    53b4:	f7fc ff84 	bl	22c0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    53b8:	f7fc feb8 	bl	212c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    53bc:	f240 1301 	movw	r3, #257	; 0x101
    53c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    53c4:	ab06      	add	r3, sp, #24
    53c6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    53c8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    53cc:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    53ce:	f002 fc15 	bl	7bfc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    53d2:	4620      	mov	r0, r4
    53d4:	f7ff fef0 	bl	51b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    53d8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    53da:	4d16      	ldr	r5, [pc, #88]	; (5434 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    53dc:	f7ff feec 	bl	51b8 <z_sys_init_run_level>
	z_sched_init();
    53e0:	f001 f99a 	bl	6718 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    53e4:	4b14      	ldr	r3, [pc, #80]	; (5438 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    53e6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    53e8:	9305      	str	r3, [sp, #20]
    53ea:	2301      	movs	r3, #1
    53ec:	4913      	ldr	r1, [pc, #76]	; (543c <z_cstart+0xd0>)
    53ee:	9400      	str	r4, [sp, #0]
    53f0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    53f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    53f8:	463b      	mov	r3, r7
    53fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    53fe:	4628      	mov	r0, r5
    5400:	f000 f8fc 	bl	55fc <z_setup_new_thread>
    5404:	7b6a      	ldrb	r2, [r5, #13]
    5406:	4606      	mov	r6, r0
    5408:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    540c:	4628      	mov	r0, r5
    540e:	736a      	strb	r2, [r5, #13]
    5410:	f000 fe84 	bl	611c <z_ready_thread>
	z_init_cpu(0);
    5414:	4620      	mov	r0, r4
    5416:	f7ff ff71 	bl	52fc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    541a:	463a      	mov	r2, r7
    541c:	4631      	mov	r1, r6
    541e:	4628      	mov	r0, r5
    5420:	f7fc fb84 	bl	1b2c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5424:	200021a0 	.word	0x200021a0
    5428:	e000ed00 	.word	0xe000ed00
    542c:	20000acc 	.word	0x20000acc
    5430:	000052b1 	.word	0x000052b1
    5434:	20000280 	.word	0x20000280
    5438:	00008ddf 	.word	0x00008ddf
    543c:	20001400 	.word	0x20001400

00005440 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5442:	4c14      	ldr	r4, [pc, #80]	; (5494 <init_mem_slab_module+0x54>)
    5444:	4d14      	ldr	r5, [pc, #80]	; (5498 <init_mem_slab_module+0x58>)
    5446:	4e15      	ldr	r6, [pc, #84]	; (549c <init_mem_slab_module+0x5c>)
    5448:	42ac      	cmp	r4, r5
    544a:	d908      	bls.n	545e <init_mem_slab_module+0x1e>
    544c:	4814      	ldr	r0, [pc, #80]	; (54a0 <init_mem_slab_module+0x60>)
    544e:	4631      	mov	r1, r6
    5450:	223d      	movs	r2, #61	; 0x3d
    5452:	f002 f8a6 	bl	75a2 <assert_print>
    5456:	213d      	movs	r1, #61	; 0x3d
    5458:	4630      	mov	r0, r6
    545a:	f002 f89b 	bl	7594 <assert_post_action>
    545e:	42ac      	cmp	r4, r5
    5460:	d301      	bcc.n	5466 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5462:	2000      	movs	r0, #0
	return rc;
}
    5464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5466:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    546a:	ea42 0301 	orr.w	r3, r2, r1
    546e:	f013 0303 	ands.w	r3, r3, #3
    5472:	d10b      	bne.n	548c <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
    5474:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    5476:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    5478:	4283      	cmp	r3, r0
    547a:	d101      	bne.n	5480 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    547c:	3420      	adds	r4, #32
    547e:	e7e3      	b.n	5448 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    5480:	69a7      	ldr	r7, [r4, #24]
    5482:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5484:	3301      	adds	r3, #1
		slab->free_list = p;
    5486:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    5488:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    548a:	e7f5      	b.n	5478 <init_mem_slab_module+0x38>
	return rc;
    548c:	f06f 0015 	mvn.w	r0, #21
    5490:	e7e8      	b.n	5464 <init_mem_slab_module+0x24>
    5492:	bf00      	nop
    5494:	20000190 	.word	0x20000190
    5498:	20000190 	.word	0x20000190
    549c:	00008de7 	.word	0x00008de7
    54a0:	00008378 	.word	0x00008378

000054a4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    54a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    54a8:	4604      	mov	r4, r0
    54aa:	460d      	mov	r5, r1
    54ac:	4690      	mov	r8, r2
    54ae:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    54b0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    54b4:	f04f 0320 	mov.w	r3, #32
    54b8:	f3ef 8911 	mrs	r9, BASEPRI
    54bc:	f383 8812 	msr	BASEPRI_MAX, r3
    54c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54c4:	4630      	mov	r0, r6
    54c6:	f000 f96d 	bl	57a4 <z_spin_lock_valid>
    54ca:	b940      	cbnz	r0, 54de <k_mem_slab_alloc+0x3a>
    54cc:	491f      	ldr	r1, [pc, #124]	; (554c <k_mem_slab_alloc+0xa8>)
    54ce:	4820      	ldr	r0, [pc, #128]	; (5550 <k_mem_slab_alloc+0xac>)
    54d0:	228e      	movs	r2, #142	; 0x8e
    54d2:	f002 f866 	bl	75a2 <assert_print>
    54d6:	481d      	ldr	r0, [pc, #116]	; (554c <k_mem_slab_alloc+0xa8>)
    54d8:	218e      	movs	r1, #142	; 0x8e
    54da:	f002 f85b 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    54de:	4630      	mov	r0, r6
    54e0:	f000 f97e 	bl	57e0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    54e4:	69a3      	ldr	r3, [r4, #24]
    54e6:	b1c3      	cbz	r3, 551a <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    54e8:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    54ea:	681b      	ldr	r3, [r3, #0]
    54ec:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    54ee:	69e3      	ldr	r3, [r4, #28]
    54f0:	3301      	adds	r3, #1
    54f2:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    54f4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54f6:	4630      	mov	r0, r6
    54f8:	f000 f962 	bl	57c0 <z_spin_unlock_valid>
    54fc:	b940      	cbnz	r0, 5510 <k_mem_slab_alloc+0x6c>
    54fe:	4913      	ldr	r1, [pc, #76]	; (554c <k_mem_slab_alloc+0xa8>)
    5500:	4813      	ldr	r0, [pc, #76]	; (5550 <k_mem_slab_alloc+0xac>)
    5502:	22b9      	movs	r2, #185	; 0xb9
    5504:	f002 f84d 	bl	75a2 <assert_print>
    5508:	4810      	ldr	r0, [pc, #64]	; (554c <k_mem_slab_alloc+0xa8>)
    550a:	21b9      	movs	r1, #185	; 0xb9
    550c:	f002 f842 	bl	7594 <assert_post_action>
	__asm__ volatile(
    5510:	f389 8811 	msr	BASEPRI, r9
    5514:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5518:	e013      	b.n	5542 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    551a:	ea58 0207 	orrs.w	r2, r8, r7
    551e:	d103      	bne.n	5528 <k_mem_slab_alloc+0x84>
		*mem = NULL;
    5520:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    5522:	f06f 040b 	mvn.w	r4, #11
    5526:	e7e6      	b.n	54f6 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5528:	4622      	mov	r2, r4
    552a:	e9cd 8700 	strd	r8, r7, [sp]
    552e:	4649      	mov	r1, r9
    5530:	4630      	mov	r0, r6
    5532:	f000 ff57 	bl	63e4 <z_pend_curr>
		if (result == 0) {
    5536:	4604      	mov	r4, r0
    5538:	b918      	cbnz	r0, 5542 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    553a:	4b06      	ldr	r3, [pc, #24]	; (5554 <k_mem_slab_alloc+0xb0>)
    553c:	689b      	ldr	r3, [r3, #8]
    553e:	695b      	ldr	r3, [r3, #20]
    5540:	602b      	str	r3, [r5, #0]
}
    5542:	4620      	mov	r0, r4
    5544:	b003      	add	sp, #12
    5546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    554a:	bf00      	nop
    554c:	000084a7 	.word	0x000084a7
    5550:	00008378 	.word	0x00008378
    5554:	20000acc 	.word	0x20000acc

00005558 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    555c:	4604      	mov	r4, r0
    555e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5560:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    5564:	f04f 0320 	mov.w	r3, #32
    5568:	f3ef 8711 	mrs	r7, BASEPRI
    556c:	f383 8812 	msr	BASEPRI_MAX, r3
    5570:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5574:	4630      	mov	r0, r6
    5576:	f000 f915 	bl	57a4 <z_spin_lock_valid>
    557a:	b940      	cbnz	r0, 558e <k_mem_slab_free+0x36>
    557c:	491d      	ldr	r1, [pc, #116]	; (55f4 <k_mem_slab_free+0x9c>)
    557e:	481e      	ldr	r0, [pc, #120]	; (55f8 <k_mem_slab_free+0xa0>)
    5580:	228e      	movs	r2, #142	; 0x8e
    5582:	f002 f80e 	bl	75a2 <assert_print>
    5586:	481b      	ldr	r0, [pc, #108]	; (55f4 <k_mem_slab_free+0x9c>)
    5588:	218e      	movs	r1, #142	; 0x8e
    558a:	f002 f803 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    558e:	4630      	mov	r0, r6
    5590:	f000 f926 	bl	57e0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5594:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5598:	f1b8 0f00 	cmp.w	r8, #0
    559c:	d10f      	bne.n	55be <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    559e:	4620      	mov	r0, r4
    55a0:	f001 f87c 	bl	669c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    55a4:	b158      	cbz	r0, 55be <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    55a6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    55a8:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    55aa:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    55ae:	f000 fdb5 	bl	611c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    55b2:	4639      	mov	r1, r7
    55b4:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    55b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    55ba:	f000 bbb9 	b.w	5d30 <z_reschedule>
	**(char ***) mem = slab->free_list;
    55be:	682b      	ldr	r3, [r5, #0]
    55c0:	69a2      	ldr	r2, [r4, #24]
    55c2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    55c4:	682b      	ldr	r3, [r5, #0]
    55c6:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    55c8:	69e3      	ldr	r3, [r4, #28]
    55ca:	3b01      	subs	r3, #1
    55cc:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55ce:	4630      	mov	r0, r6
    55d0:	f000 f8f6 	bl	57c0 <z_spin_unlock_valid>
    55d4:	b940      	cbnz	r0, 55e8 <k_mem_slab_free+0x90>
    55d6:	4907      	ldr	r1, [pc, #28]	; (55f4 <k_mem_slab_free+0x9c>)
    55d8:	4807      	ldr	r0, [pc, #28]	; (55f8 <k_mem_slab_free+0xa0>)
    55da:	22b9      	movs	r2, #185	; 0xb9
    55dc:	f001 ffe1 	bl	75a2 <assert_print>
    55e0:	4804      	ldr	r0, [pc, #16]	; (55f4 <k_mem_slab_free+0x9c>)
    55e2:	21b9      	movs	r1, #185	; 0xb9
    55e4:	f001 ffd6 	bl	7594 <assert_post_action>
	__asm__ volatile(
    55e8:	f387 8811 	msr	BASEPRI, r7
    55ec:	f3bf 8f6f 	isb	sy
}
    55f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55f4:	000084a7 	.word	0x000084a7
    55f8:	00008378 	.word	0x00008378

000055fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    55fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5600:	b085      	sub	sp, #20
    5602:	4604      	mov	r4, r0
    5604:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    5608:	f1b8 0f0f 	cmp.w	r8, #15
{
    560c:	460f      	mov	r7, r1
    560e:	4615      	mov	r5, r2
    5610:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    5612:	d132      	bne.n	567a <z_setup_new_thread+0x7e>
    5614:	4b21      	ldr	r3, [pc, #132]	; (569c <z_setup_new_thread+0xa0>)
    5616:	4599      	cmp	r9, r3
    5618:	d133      	bne.n	5682 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    561a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    561e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5622:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5624:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5626:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    5628:	2304      	movs	r3, #4
    562a:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    562c:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5630:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    5634:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5638:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    563a:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    563e:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5640:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5646:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    5648:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    564a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    564c:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    564e:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5650:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5652:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    5656:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    5658:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    565a:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    565c:	4642      	mov	r2, r8
    565e:	4639      	mov	r1, r7
    5660:	4620      	mov	r0, r4
    5662:	f7fc fa31 	bl	1ac8 <arch_new_thread>
	if (!_current) {
    5666:	4b0e      	ldr	r3, [pc, #56]	; (56a0 <z_setup_new_thread+0xa4>)
	new_thread->init_data = NULL;
    5668:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    566a:	689b      	ldr	r3, [r3, #8]
    566c:	b103      	cbz	r3, 5670 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5670:	6723      	str	r3, [r4, #112]	; 0x70
}
    5672:	4640      	mov	r0, r8
    5674:	b005      	add	sp, #20
    5676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    567a:	f108 0310 	add.w	r3, r8, #16
    567e:	2b1e      	cmp	r3, #30
    5680:	d9cb      	bls.n	561a <z_setup_new_thread+0x1e>
    5682:	4908      	ldr	r1, [pc, #32]	; (56a4 <z_setup_new_thread+0xa8>)
    5684:	4808      	ldr	r0, [pc, #32]	; (56a8 <z_setup_new_thread+0xac>)
    5686:	f240 12ff 	movw	r2, #511	; 0x1ff
    568a:	f001 ff8a 	bl	75a2 <assert_print>
    568e:	4805      	ldr	r0, [pc, #20]	; (56a4 <z_setup_new_thread+0xa8>)
    5690:	f240 11ff 	movw	r1, #511	; 0x1ff
    5694:	f001 ff7e 	bl	7594 <assert_post_action>
    5698:	e7bf      	b.n	561a <z_setup_new_thread+0x1e>
    569a:	bf00      	nop
    569c:	000057f1 	.word	0x000057f1
    56a0:	20000acc 	.word	0x20000acc
    56a4:	00008e0c 	.word	0x00008e0c
    56a8:	00008378 	.word	0x00008378

000056ac <z_init_static_threads>:
{
    56ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    56b0:	4c37      	ldr	r4, [pc, #220]	; (5790 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    56b2:	4d38      	ldr	r5, [pc, #224]	; (5794 <z_init_static_threads+0xe8>)
    56b4:	4f38      	ldr	r7, [pc, #224]	; (5798 <z_init_static_threads+0xec>)
{
    56b6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    56b8:	42ac      	cmp	r4, r5
    56ba:	4626      	mov	r6, r4
    56bc:	d90a      	bls.n	56d4 <z_init_static_threads+0x28>
    56be:	4837      	ldr	r0, [pc, #220]	; (579c <z_init_static_threads+0xf0>)
    56c0:	4639      	mov	r1, r7
    56c2:	f240 22d5 	movw	r2, #725	; 0x2d5
    56c6:	f001 ff6c 	bl	75a2 <assert_print>
    56ca:	f240 21d5 	movw	r1, #725	; 0x2d5
    56ce:	4638      	mov	r0, r7
    56d0:	f001 ff60 	bl	7594 <assert_post_action>
    56d4:	42ae      	cmp	r6, r5
    56d6:	f104 0430 	add.w	r4, r4, #48	; 0x30
    56da:	d31b      	bcc.n	5714 <z_init_static_threads+0x68>
	k_sched_lock();
    56dc:	f000 fb5e 	bl	5d9c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    56e0:	4c2b      	ldr	r4, [pc, #172]	; (5790 <z_init_static_threads+0xe4>)
    56e2:	4e2d      	ldr	r6, [pc, #180]	; (5798 <z_init_static_threads+0xec>)
    56e4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 579c <z_init_static_threads+0xf0>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    56e8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 57a0 <z_init_static_threads+0xf4>
    56ec:	42ac      	cmp	r4, r5
    56ee:	d90a      	bls.n	5706 <z_init_static_threads+0x5a>
    56f0:	4631      	mov	r1, r6
    56f2:	4640      	mov	r0, r8
    56f4:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    56f8:	f001 ff53 	bl	75a2 <assert_print>
    56fc:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    5700:	4630      	mov	r0, r6
    5702:	f001 ff47 	bl	7594 <assert_post_action>
    5706:	42ac      	cmp	r4, r5
    5708:	d320      	bcc.n	574c <z_init_static_threads+0xa0>
}
    570a:	b007      	add	sp, #28
    570c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5710:	f000 bf68 	b.w	65e4 <k_sched_unlock>
		z_setup_new_thread(
    5714:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5718:	9305      	str	r3, [sp, #20]
    571a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    571e:	9304      	str	r3, [sp, #16]
    5720:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5724:	9303      	str	r3, [sp, #12]
    5726:	f854 3c18 	ldr.w	r3, [r4, #-24]
    572a:	9302      	str	r3, [sp, #8]
    572c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5730:	9301      	str	r3, [sp, #4]
    5732:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5736:	9300      	str	r3, [sp, #0]
    5738:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    573c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5740:	f7ff ff5c 	bl	55fc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5744:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5748:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    574a:	e7b5      	b.n	56b8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    574c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    574e:	1c5a      	adds	r2, r3, #1
    5750:	d00f      	beq.n	5772 <z_init_static_threads+0xc6>
					    K_MSEC(thread_data->init_delay));
    5752:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5756:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    575a:	f240 30e7 	movw	r0, #999	; 0x3e7
    575e:	2100      	movs	r1, #0
    5760:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5764:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5768:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    576a:	d104      	bne.n	5776 <z_init_static_threads+0xca>
	z_sched_start(thread);
    576c:	4638      	mov	r0, r7
    576e:	f000 fd0b 	bl	6188 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5772:	3430      	adds	r4, #48	; 0x30
    5774:	e7ba      	b.n	56ec <z_init_static_threads+0x40>
    5776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    577a:	2300      	movs	r3, #0
    577c:	f7fa fcc0 	bl	100 <__aeabi_uldivmod>
    5780:	4602      	mov	r2, r0
    5782:	460b      	mov	r3, r1
    5784:	f107 0018 	add.w	r0, r7, #24
    5788:	4649      	mov	r1, r9
    578a:	f001 fa0d 	bl	6ba8 <z_add_timeout>
    578e:	e7f0      	b.n	5772 <z_init_static_threads+0xc6>
    5790:	20000190 	.word	0x20000190
    5794:	20000190 	.word	0x20000190
    5798:	00008e0c 	.word	0x00008e0c
    579c:	00008378 	.word	0x00008378
    57a0:	0000620d 	.word	0x0000620d

000057a4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    57a4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    57a6:	b138      	cbz	r0, 57b8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    57a8:	4b04      	ldr	r3, [pc, #16]	; (57bc <z_spin_lock_valid+0x18>)
    57aa:	7d1b      	ldrb	r3, [r3, #20]
    57ac:	f000 0003 	and.w	r0, r0, #3
    57b0:	1ac0      	subs	r0, r0, r3
    57b2:	bf18      	it	ne
    57b4:	2001      	movne	r0, #1
    57b6:	4770      	bx	lr
			return false;
		}
	}
	return true;
    57b8:	2001      	movs	r0, #1
}
    57ba:	4770      	bx	lr
    57bc:	20000acc 	.word	0x20000acc

000057c0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    57c0:	4906      	ldr	r1, [pc, #24]	; (57dc <z_spin_unlock_valid+0x1c>)
{
    57c2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    57c4:	688a      	ldr	r2, [r1, #8]
    57c6:	7d08      	ldrb	r0, [r1, #20]
    57c8:	6819      	ldr	r1, [r3, #0]
    57ca:	4302      	orrs	r2, r0
    57cc:	4291      	cmp	r1, r2
    57ce:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    57d2:	bf04      	itt	eq
    57d4:	6018      	streq	r0, [r3, #0]
	return true;
    57d6:	2001      	moveq	r0, #1
}
    57d8:	4770      	bx	lr
    57da:	bf00      	nop
    57dc:	20000acc 	.word	0x20000acc

000057e0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    57e0:	4a02      	ldr	r2, [pc, #8]	; (57ec <z_spin_lock_set_owner+0xc>)
    57e2:	7d11      	ldrb	r1, [r2, #20]
    57e4:	6893      	ldr	r3, [r2, #8]
    57e6:	430b      	orrs	r3, r1
    57e8:	6003      	str	r3, [r0, #0]
}
    57ea:	4770      	bx	lr
    57ec:	20000acc 	.word	0x20000acc

000057f0 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    57f0:	4c12      	ldr	r4, [pc, #72]	; (583c <idle+0x4c>)
{
    57f2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    57f4:	68a3      	ldr	r3, [r4, #8]
    57f6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    57fa:	2b00      	cmp	r3, #0
    57fc:	da08      	bge.n	5810 <idle+0x20>
    57fe:	4910      	ldr	r1, [pc, #64]	; (5840 <idle+0x50>)
    5800:	4810      	ldr	r0, [pc, #64]	; (5844 <idle+0x54>)
    5802:	2227      	movs	r2, #39	; 0x27
    5804:	f001 fecd 	bl	75a2 <assert_print>
    5808:	480d      	ldr	r0, [pc, #52]	; (5840 <idle+0x50>)
    580a:	2127      	movs	r1, #39	; 0x27
    580c:	f001 fec2 	bl	7594 <assert_post_action>
	return !z_sys_post_kernel;
    5810:	4d0d      	ldr	r5, [pc, #52]	; (5848 <idle+0x58>)
	__asm__ volatile(
    5812:	f04f 0220 	mov.w	r2, #32
    5816:	f3ef 8311 	mrs	r3, BASEPRI
    581a:	f382 8812 	msr	BASEPRI_MAX, r2
    581e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5822:	f001 faab 	bl	6d7c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5826:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5828:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    582a:	b913      	cbnz	r3, 5832 <idle+0x42>
	arch_cpu_idle();
    582c:	f7fc f82a 	bl	1884 <arch_cpu_idle>
}
    5830:	e7ef      	b.n	5812 <idle+0x22>
    5832:	f7fb fe7d 	bl	1530 <pm_system_suspend>
    5836:	2800      	cmp	r0, #0
    5838:	d1eb      	bne.n	5812 <idle+0x22>
    583a:	e7f7      	b.n	582c <idle+0x3c>
    583c:	20000acc 	.word	0x20000acc
    5840:	00008e2f 	.word	0x00008e2f
    5844:	00008378 	.word	0x00008378
    5848:	200013e4 	.word	0x200013e4

0000584c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    584c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5850:	4604      	mov	r4, r0
    5852:	4617      	mov	r7, r2
    5854:	461e      	mov	r6, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5856:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    585a:	b143      	cbz	r3, 586e <z_impl_k_mutex_lock+0x22>
    585c:	495f      	ldr	r1, [pc, #380]	; (59dc <z_impl_k_mutex_lock+0x190>)
    585e:	4860      	ldr	r0, [pc, #384]	; (59e0 <z_impl_k_mutex_lock+0x194>)
    5860:	2265      	movs	r2, #101	; 0x65
    5862:	f001 fe9e 	bl	75a2 <assert_print>
    5866:	485d      	ldr	r0, [pc, #372]	; (59dc <z_impl_k_mutex_lock+0x190>)
    5868:	2165      	movs	r1, #101	; 0x65
    586a:	f001 fe93 	bl	7594 <assert_post_action>
    586e:	f04f 0320 	mov.w	r3, #32
    5872:	f3ef 8811 	mrs	r8, BASEPRI
    5876:	f383 8812 	msr	BASEPRI_MAX, r3
    587a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    587e:	4859      	ldr	r0, [pc, #356]	; (59e4 <z_impl_k_mutex_lock+0x198>)
    5880:	f7ff ff90 	bl	57a4 <z_spin_lock_valid>
    5884:	b940      	cbnz	r0, 5898 <z_impl_k_mutex_lock+0x4c>
    5886:	4958      	ldr	r1, [pc, #352]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    5888:	4855      	ldr	r0, [pc, #340]	; (59e0 <z_impl_k_mutex_lock+0x194>)
    588a:	228e      	movs	r2, #142	; 0x8e
    588c:	f001 fe89 	bl	75a2 <assert_print>
    5890:	4855      	ldr	r0, [pc, #340]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    5892:	218e      	movs	r1, #142	; 0x8e
    5894:	f001 fe7e 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    5898:	4852      	ldr	r0, [pc, #328]	; (59e4 <z_impl_k_mutex_lock+0x198>)
    589a:	f7ff ffa1 	bl	57e0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    589e:	68e3      	ldr	r3, [r4, #12]
    58a0:	4a52      	ldr	r2, [pc, #328]	; (59ec <z_impl_k_mutex_lock+0x1a0>)
    58a2:	b1d3      	cbz	r3, 58da <z_impl_k_mutex_lock+0x8e>
    58a4:	68a0      	ldr	r0, [r4, #8]
    58a6:	6891      	ldr	r1, [r2, #8]
    58a8:	4288      	cmp	r0, r1
    58aa:	d033      	beq.n	5914 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    58ac:	ea57 0306 	orrs.w	r3, r7, r6
    58b0:	d132      	bne.n	5918 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58b2:	484c      	ldr	r0, [pc, #304]	; (59e4 <z_impl_k_mutex_lock+0x198>)
    58b4:	f7ff ff84 	bl	57c0 <z_spin_unlock_valid>
    58b8:	b940      	cbnz	r0, 58cc <z_impl_k_mutex_lock+0x80>
    58ba:	494b      	ldr	r1, [pc, #300]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    58bc:	4848      	ldr	r0, [pc, #288]	; (59e0 <z_impl_k_mutex_lock+0x194>)
    58be:	22b9      	movs	r2, #185	; 0xb9
    58c0:	f001 fe6f 	bl	75a2 <assert_print>
    58c4:	4848      	ldr	r0, [pc, #288]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    58c6:	21b9      	movs	r1, #185	; 0xb9
    58c8:	f001 fe64 	bl	7594 <assert_post_action>
	__asm__ volatile(
    58cc:	f388 8811 	msr	BASEPRI, r8
    58d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    58d4:	f06f 000f 	mvn.w	r0, #15
    58d8:	e019      	b.n	590e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    58da:	6891      	ldr	r1, [r2, #8]
    58dc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    58e0:	4840      	ldr	r0, [pc, #256]	; (59e4 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    58e2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    58e4:	3301      	adds	r3, #1
    58e6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    58e8:	6893      	ldr	r3, [r2, #8]
    58ea:	60a3      	str	r3, [r4, #8]
    58ec:	f7ff ff68 	bl	57c0 <z_spin_unlock_valid>
    58f0:	b940      	cbnz	r0, 5904 <z_impl_k_mutex_lock+0xb8>
    58f2:	493d      	ldr	r1, [pc, #244]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    58f4:	483a      	ldr	r0, [pc, #232]	; (59e0 <z_impl_k_mutex_lock+0x194>)
    58f6:	22b9      	movs	r2, #185	; 0xb9
    58f8:	f001 fe53 	bl	75a2 <assert_print>
    58fc:	483a      	ldr	r0, [pc, #232]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    58fe:	21b9      	movs	r1, #185	; 0xb9
    5900:	f001 fe48 	bl	7594 <assert_post_action>
    5904:	f388 8811 	msr	BASEPRI, r8
    5908:	f3bf 8f6f 	isb	sy
		return 0;
    590c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    590e:	b002      	add	sp, #8
    5910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5914:	6921      	ldr	r1, [r4, #16]
    5916:	e7e3      	b.n	58e0 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5918:	f991 100e 	ldrsb.w	r1, [r1, #14]
    591c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5920:	4299      	cmp	r1, r3
    5922:	bfa8      	it	ge
    5924:	4619      	movge	r1, r3
    5926:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    592a:	4291      	cmp	r1, r2
    592c:	bfb8      	it	lt
    592e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5930:	428b      	cmp	r3, r1
    5932:	dd3e      	ble.n	59b2 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    5934:	f002 f99c 	bl	7c70 <adjust_owner_prio.isra.0>
    5938:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    593a:	e9cd 7600 	strd	r7, r6, [sp]
    593e:	4829      	ldr	r0, [pc, #164]	; (59e4 <z_impl_k_mutex_lock+0x198>)
    5940:	4622      	mov	r2, r4
    5942:	4641      	mov	r1, r8
    5944:	f000 fd4e 	bl	63e4 <z_pend_curr>
	if (got_mutex == 0) {
    5948:	2800      	cmp	r0, #0
    594a:	d0e0      	beq.n	590e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    594c:	f04f 0320 	mov.w	r3, #32
    5950:	f3ef 8611 	mrs	r6, BASEPRI
    5954:	f383 8812 	msr	BASEPRI_MAX, r3
    5958:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    595c:	4821      	ldr	r0, [pc, #132]	; (59e4 <z_impl_k_mutex_lock+0x198>)
    595e:	f7ff ff21 	bl	57a4 <z_spin_lock_valid>
    5962:	b940      	cbnz	r0, 5976 <z_impl_k_mutex_lock+0x12a>
    5964:	4920      	ldr	r1, [pc, #128]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    5966:	481e      	ldr	r0, [pc, #120]	; (59e0 <z_impl_k_mutex_lock+0x194>)
    5968:	228e      	movs	r2, #142	; 0x8e
    596a:	f001 fe1a 	bl	75a2 <assert_print>
    596e:	481e      	ldr	r0, [pc, #120]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    5970:	218e      	movs	r1, #142	; 0x8e
    5972:	f001 fe0f 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    5976:	481b      	ldr	r0, [pc, #108]	; (59e4 <z_impl_k_mutex_lock+0x198>)
    5978:	f7ff ff32 	bl	57e0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    597c:	6823      	ldr	r3, [r4, #0]
    597e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5980:	429c      	cmp	r4, r3
    5982:	d00a      	beq.n	599a <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5984:	b14b      	cbz	r3, 599a <z_impl_k_mutex_lock+0x14e>
    5986:	f993 300e 	ldrsb.w	r3, [r3, #14]
    598a:	4299      	cmp	r1, r3
    598c:	bfa8      	it	ge
    598e:	4619      	movge	r1, r3
    5990:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5994:	4299      	cmp	r1, r3
    5996:	bfb8      	it	lt
    5998:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    599a:	68a0      	ldr	r0, [r4, #8]
    599c:	f002 f968 	bl	7c70 <adjust_owner_prio.isra.0>
    59a0:	b900      	cbnz	r0, 59a4 <z_impl_k_mutex_lock+0x158>
	if (resched) {
    59a2:	b145      	cbz	r5, 59b6 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
    59a4:	480f      	ldr	r0, [pc, #60]	; (59e4 <z_impl_k_mutex_lock+0x198>)
    59a6:	4631      	mov	r1, r6
    59a8:	f000 f9c2 	bl	5d30 <z_reschedule>
	return -EAGAIN;
    59ac:	f06f 000a 	mvn.w	r0, #10
    59b0:	e7ad      	b.n	590e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    59b2:	2500      	movs	r5, #0
    59b4:	e7c1      	b.n	593a <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59b6:	480b      	ldr	r0, [pc, #44]	; (59e4 <z_impl_k_mutex_lock+0x198>)
    59b8:	f7ff ff02 	bl	57c0 <z_spin_unlock_valid>
    59bc:	b940      	cbnz	r0, 59d0 <z_impl_k_mutex_lock+0x184>
    59be:	490a      	ldr	r1, [pc, #40]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    59c0:	4807      	ldr	r0, [pc, #28]	; (59e0 <z_impl_k_mutex_lock+0x194>)
    59c2:	22b9      	movs	r2, #185	; 0xb9
    59c4:	f001 fded 	bl	75a2 <assert_print>
    59c8:	4807      	ldr	r0, [pc, #28]	; (59e8 <z_impl_k_mutex_lock+0x19c>)
    59ca:	21b9      	movs	r1, #185	; 0xb9
    59cc:	f001 fde2 	bl	7594 <assert_post_action>
	__asm__ volatile(
    59d0:	f386 8811 	msr	BASEPRI, r6
    59d4:	f3bf 8f6f 	isb	sy
    59d8:	e7e8      	b.n	59ac <z_impl_k_mutex_lock+0x160>
    59da:	bf00      	nop
    59dc:	00008e50 	.word	0x00008e50
    59e0:	00008378 	.word	0x00008378
    59e4:	20000af4 	.word	0x20000af4
    59e8:	000084a7 	.word	0x000084a7
    59ec:	20000acc 	.word	0x20000acc

000059f0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    59f0:	b538      	push	{r3, r4, r5, lr}
    59f2:	4604      	mov	r4, r0
    59f4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    59f8:	b143      	cbz	r3, 5a0c <z_impl_k_mutex_unlock+0x1c>
    59fa:	4943      	ldr	r1, [pc, #268]	; (5b08 <z_impl_k_mutex_unlock+0x118>)
    59fc:	4843      	ldr	r0, [pc, #268]	; (5b0c <z_impl_k_mutex_unlock+0x11c>)
    59fe:	22c7      	movs	r2, #199	; 0xc7
    5a00:	f001 fdcf 	bl	75a2 <assert_print>
    5a04:	4840      	ldr	r0, [pc, #256]	; (5b08 <z_impl_k_mutex_unlock+0x118>)
    5a06:	21c7      	movs	r1, #199	; 0xc7
    5a08:	f001 fdc4 	bl	7594 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5a0c:	68a3      	ldr	r3, [r4, #8]
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d074      	beq.n	5afc <z_impl_k_mutex_unlock+0x10c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5a12:	4d3f      	ldr	r5, [pc, #252]	; (5b10 <z_impl_k_mutex_unlock+0x120>)
    5a14:	68aa      	ldr	r2, [r5, #8]
    5a16:	4293      	cmp	r3, r2
    5a18:	d173      	bne.n	5b02 <z_impl_k_mutex_unlock+0x112>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5a1a:	68e3      	ldr	r3, [r4, #12]
    5a1c:	b943      	cbnz	r3, 5a30 <z_impl_k_mutex_unlock+0x40>
    5a1e:	493a      	ldr	r1, [pc, #232]	; (5b08 <z_impl_k_mutex_unlock+0x118>)
    5a20:	483a      	ldr	r0, [pc, #232]	; (5b0c <z_impl_k_mutex_unlock+0x11c>)
    5a22:	22df      	movs	r2, #223	; 0xdf
    5a24:	f001 fdbd 	bl	75a2 <assert_print>
    5a28:	4837      	ldr	r0, [pc, #220]	; (5b08 <z_impl_k_mutex_unlock+0x118>)
    5a2a:	21df      	movs	r1, #223	; 0xdf
    5a2c:	f001 fdb2 	bl	7594 <assert_post_action>
    5a30:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5a34:	b143      	cbz	r3, 5a48 <z_impl_k_mutex_unlock+0x58>
    5a36:	4937      	ldr	r1, [pc, #220]	; (5b14 <z_impl_k_mutex_unlock+0x124>)
    5a38:	4834      	ldr	r0, [pc, #208]	; (5b0c <z_impl_k_mutex_unlock+0x11c>)
    5a3a:	22fd      	movs	r2, #253	; 0xfd
    5a3c:	f001 fdb1 	bl	75a2 <assert_print>
    5a40:	4834      	ldr	r0, [pc, #208]	; (5b14 <z_impl_k_mutex_unlock+0x124>)
    5a42:	21fd      	movs	r1, #253	; 0xfd
    5a44:	f001 fda6 	bl	7594 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5a48:	68ab      	ldr	r3, [r5, #8]
    5a4a:	7bdb      	ldrb	r3, [r3, #15]
    5a4c:	2b01      	cmp	r3, #1
    5a4e:	d108      	bne.n	5a62 <z_impl_k_mutex_unlock+0x72>
    5a50:	4930      	ldr	r1, [pc, #192]	; (5b14 <z_impl_k_mutex_unlock+0x124>)
    5a52:	482e      	ldr	r0, [pc, #184]	; (5b0c <z_impl_k_mutex_unlock+0x11c>)
    5a54:	22fe      	movs	r2, #254	; 0xfe
    5a56:	f001 fda4 	bl	75a2 <assert_print>
    5a5a:	482e      	ldr	r0, [pc, #184]	; (5b14 <z_impl_k_mutex_unlock+0x124>)
    5a5c:	21fe      	movs	r1, #254	; 0xfe
    5a5e:	f001 fd99 	bl	7594 <assert_post_action>

	--_current->base.sched_locked;
    5a62:	68aa      	ldr	r2, [r5, #8]
    5a64:	7bd3      	ldrb	r3, [r2, #15]
    5a66:	3b01      	subs	r3, #1
    5a68:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5a6a:	68e3      	ldr	r3, [r4, #12]
    5a6c:	2b01      	cmp	r3, #1
    5a6e:	d905      	bls.n	5a7c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    5a70:	3b01      	subs	r3, #1
    5a72:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5a74:	f000 fdb6 	bl	65e4 <k_sched_unlock>

	return 0;
    5a78:	2000      	movs	r0, #0
}
    5a7a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5a7c:	f04f 0320 	mov.w	r3, #32
    5a80:	f3ef 8511 	mrs	r5, BASEPRI
    5a84:	f383 8812 	msr	BASEPRI_MAX, r3
    5a88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a8c:	4822      	ldr	r0, [pc, #136]	; (5b18 <z_impl_k_mutex_unlock+0x128>)
    5a8e:	f7ff fe89 	bl	57a4 <z_spin_lock_valid>
    5a92:	b940      	cbnz	r0, 5aa6 <z_impl_k_mutex_unlock+0xb6>
    5a94:	4921      	ldr	r1, [pc, #132]	; (5b1c <z_impl_k_mutex_unlock+0x12c>)
    5a96:	481d      	ldr	r0, [pc, #116]	; (5b0c <z_impl_k_mutex_unlock+0x11c>)
    5a98:	228e      	movs	r2, #142	; 0x8e
    5a9a:	f001 fd82 	bl	75a2 <assert_print>
    5a9e:	481f      	ldr	r0, [pc, #124]	; (5b1c <z_impl_k_mutex_unlock+0x12c>)
    5aa0:	218e      	movs	r1, #142	; 0x8e
    5aa2:	f001 fd77 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    5aa6:	481c      	ldr	r0, [pc, #112]	; (5b18 <z_impl_k_mutex_unlock+0x128>)
    5aa8:	f7ff fe9a 	bl	57e0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5aac:	6921      	ldr	r1, [r4, #16]
    5aae:	68a0      	ldr	r0, [r4, #8]
    5ab0:	f002 f8de 	bl	7c70 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5ab4:	4620      	mov	r0, r4
    5ab6:	f000 fdf1 	bl	669c <z_unpend_first_thread>
	mutex->owner = new_owner;
    5aba:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5abc:	b158      	cbz	r0, 5ad6 <z_impl_k_mutex_unlock+0xe6>
		mutex->owner_orig_prio = new_owner->base.prio;
    5abe:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5ac2:	6122      	str	r2, [r4, #16]
    5ac4:	2200      	movs	r2, #0
    5ac6:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5ac8:	f000 fb28 	bl	611c <z_ready_thread>
		z_reschedule(&lock, key);
    5acc:	4812      	ldr	r0, [pc, #72]	; (5b18 <z_impl_k_mutex_unlock+0x128>)
    5ace:	4629      	mov	r1, r5
    5ad0:	f000 f92e 	bl	5d30 <z_reschedule>
    5ad4:	e7ce      	b.n	5a74 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    5ad6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ad8:	480f      	ldr	r0, [pc, #60]	; (5b18 <z_impl_k_mutex_unlock+0x128>)
    5ada:	f7ff fe71 	bl	57c0 <z_spin_unlock_valid>
    5ade:	b940      	cbnz	r0, 5af2 <z_impl_k_mutex_unlock+0x102>
    5ae0:	490e      	ldr	r1, [pc, #56]	; (5b1c <z_impl_k_mutex_unlock+0x12c>)
    5ae2:	480a      	ldr	r0, [pc, #40]	; (5b0c <z_impl_k_mutex_unlock+0x11c>)
    5ae4:	22b9      	movs	r2, #185	; 0xb9
    5ae6:	f001 fd5c 	bl	75a2 <assert_print>
    5aea:	480c      	ldr	r0, [pc, #48]	; (5b1c <z_impl_k_mutex_unlock+0x12c>)
    5aec:	21b9      	movs	r1, #185	; 0xb9
    5aee:	f001 fd51 	bl	7594 <assert_post_action>
	__asm__ volatile(
    5af2:	f385 8811 	msr	BASEPRI, r5
    5af6:	f3bf 8f6f 	isb	sy
    5afa:	e7bb      	b.n	5a74 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    5afc:	f06f 0015 	mvn.w	r0, #21
    5b00:	e7bb      	b.n	5a7a <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    5b02:	f04f 30ff 	mov.w	r0, #4294967295
    5b06:	e7b8      	b.n	5a7a <z_impl_k_mutex_unlock+0x8a>
    5b08:	00008e50 	.word	0x00008e50
    5b0c:	00008378 	.word	0x00008378
    5b10:	20000acc 	.word	0x20000acc
    5b14:	00008e72 	.word	0x00008e72
    5b18:	20000af4 	.word	0x20000af4
    5b1c:	000084a7 	.word	0x000084a7

00005b20 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5b20:	b538      	push	{r3, r4, r5, lr}
    5b22:	4604      	mov	r4, r0
	__asm__ volatile(
    5b24:	f04f 0320 	mov.w	r3, #32
    5b28:	f3ef 8511 	mrs	r5, BASEPRI
    5b2c:	f383 8812 	msr	BASEPRI_MAX, r3
    5b30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b34:	4812      	ldr	r0, [pc, #72]	; (5b80 <z_impl_k_sem_give+0x60>)
    5b36:	f7ff fe35 	bl	57a4 <z_spin_lock_valid>
    5b3a:	b940      	cbnz	r0, 5b4e <z_impl_k_sem_give+0x2e>
    5b3c:	4911      	ldr	r1, [pc, #68]	; (5b84 <z_impl_k_sem_give+0x64>)
    5b3e:	4812      	ldr	r0, [pc, #72]	; (5b88 <z_impl_k_sem_give+0x68>)
    5b40:	228e      	movs	r2, #142	; 0x8e
    5b42:	f001 fd2e 	bl	75a2 <assert_print>
    5b46:	480f      	ldr	r0, [pc, #60]	; (5b84 <z_impl_k_sem_give+0x64>)
    5b48:	218e      	movs	r1, #142	; 0x8e
    5b4a:	f001 fd23 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b4e:	480c      	ldr	r0, [pc, #48]	; (5b80 <z_impl_k_sem_give+0x60>)
    5b50:	f7ff fe46 	bl	57e0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5b54:	4620      	mov	r0, r4
    5b56:	f000 fda1 	bl	669c <z_unpend_first_thread>

	if (thread != NULL) {
    5b5a:	b148      	cbz	r0, 5b70 <z_impl_k_sem_give+0x50>
    5b5c:	2200      	movs	r2, #0
    5b5e:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5b60:	f000 fadc 	bl	611c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5b64:	4629      	mov	r1, r5
    5b66:	4806      	ldr	r0, [pc, #24]	; (5b80 <z_impl_k_sem_give+0x60>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5b6c:	f000 b8e0 	b.w	5d30 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5b70:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5b74:	429a      	cmp	r2, r3
    5b76:	bf18      	it	ne
    5b78:	3301      	addne	r3, #1
    5b7a:	60a3      	str	r3, [r4, #8]
}
    5b7c:	e7f2      	b.n	5b64 <z_impl_k_sem_give+0x44>
    5b7e:	bf00      	nop
    5b80:	20000af8 	.word	0x20000af8
    5b84:	000084a7 	.word	0x000084a7
    5b88:	00008378 	.word	0x00008378

00005b8c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b8e:	4604      	mov	r4, r0
    5b90:	4616      	mov	r6, r2
    5b92:	461d      	mov	r5, r3
    5b94:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5b98:	b15b      	cbz	r3, 5bb2 <z_impl_k_sem_take+0x26>
    5b9a:	ea52 0305 	orrs.w	r3, r2, r5
    5b9e:	d008      	beq.n	5bb2 <z_impl_k_sem_take+0x26>
    5ba0:	492b      	ldr	r1, [pc, #172]	; (5c50 <z_impl_k_sem_take+0xc4>)
    5ba2:	482c      	ldr	r0, [pc, #176]	; (5c54 <z_impl_k_sem_take+0xc8>)
    5ba4:	2279      	movs	r2, #121	; 0x79
    5ba6:	f001 fcfc 	bl	75a2 <assert_print>
    5baa:	4829      	ldr	r0, [pc, #164]	; (5c50 <z_impl_k_sem_take+0xc4>)
    5bac:	2179      	movs	r1, #121	; 0x79
    5bae:	f001 fcf1 	bl	7594 <assert_post_action>
    5bb2:	f04f 0320 	mov.w	r3, #32
    5bb6:	f3ef 8711 	mrs	r7, BASEPRI
    5bba:	f383 8812 	msr	BASEPRI_MAX, r3
    5bbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5bc2:	4825      	ldr	r0, [pc, #148]	; (5c58 <z_impl_k_sem_take+0xcc>)
    5bc4:	f7ff fdee 	bl	57a4 <z_spin_lock_valid>
    5bc8:	b940      	cbnz	r0, 5bdc <z_impl_k_sem_take+0x50>
    5bca:	4924      	ldr	r1, [pc, #144]	; (5c5c <z_impl_k_sem_take+0xd0>)
    5bcc:	4821      	ldr	r0, [pc, #132]	; (5c54 <z_impl_k_sem_take+0xc8>)
    5bce:	228e      	movs	r2, #142	; 0x8e
    5bd0:	f001 fce7 	bl	75a2 <assert_print>
    5bd4:	4821      	ldr	r0, [pc, #132]	; (5c5c <z_impl_k_sem_take+0xd0>)
    5bd6:	218e      	movs	r1, #142	; 0x8e
    5bd8:	f001 fcdc 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    5bdc:	481e      	ldr	r0, [pc, #120]	; (5c58 <z_impl_k_sem_take+0xcc>)
    5bde:	f7ff fdff 	bl	57e0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5be2:	68a3      	ldr	r3, [r4, #8]
    5be4:	b1ab      	cbz	r3, 5c12 <z_impl_k_sem_take+0x86>
		sem->count--;
    5be6:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5be8:	481b      	ldr	r0, [pc, #108]	; (5c58 <z_impl_k_sem_take+0xcc>)
    5bea:	60a3      	str	r3, [r4, #8]
    5bec:	f7ff fde8 	bl	57c0 <z_spin_unlock_valid>
    5bf0:	b940      	cbnz	r0, 5c04 <z_impl_k_sem_take+0x78>
    5bf2:	491a      	ldr	r1, [pc, #104]	; (5c5c <z_impl_k_sem_take+0xd0>)
    5bf4:	4817      	ldr	r0, [pc, #92]	; (5c54 <z_impl_k_sem_take+0xc8>)
    5bf6:	22b9      	movs	r2, #185	; 0xb9
    5bf8:	f001 fcd3 	bl	75a2 <assert_print>
    5bfc:	4817      	ldr	r0, [pc, #92]	; (5c5c <z_impl_k_sem_take+0xd0>)
    5bfe:	21b9      	movs	r1, #185	; 0xb9
    5c00:	f001 fcc8 	bl	7594 <assert_post_action>
	__asm__ volatile(
    5c04:	f387 8811 	msr	BASEPRI, r7
    5c08:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5c0c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5c0e:	b003      	add	sp, #12
    5c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5c12:	ea56 0305 	orrs.w	r3, r6, r5
    5c16:	d113      	bne.n	5c40 <z_impl_k_sem_take+0xb4>
    5c18:	480f      	ldr	r0, [pc, #60]	; (5c58 <z_impl_k_sem_take+0xcc>)
    5c1a:	f7ff fdd1 	bl	57c0 <z_spin_unlock_valid>
    5c1e:	b940      	cbnz	r0, 5c32 <z_impl_k_sem_take+0xa6>
    5c20:	490e      	ldr	r1, [pc, #56]	; (5c5c <z_impl_k_sem_take+0xd0>)
    5c22:	480c      	ldr	r0, [pc, #48]	; (5c54 <z_impl_k_sem_take+0xc8>)
    5c24:	22b9      	movs	r2, #185	; 0xb9
    5c26:	f001 fcbc 	bl	75a2 <assert_print>
    5c2a:	480c      	ldr	r0, [pc, #48]	; (5c5c <z_impl_k_sem_take+0xd0>)
    5c2c:	21b9      	movs	r1, #185	; 0xb9
    5c2e:	f001 fcb1 	bl	7594 <assert_post_action>
    5c32:	f387 8811 	msr	BASEPRI, r7
    5c36:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5c3a:	f06f 000f 	mvn.w	r0, #15
    5c3e:	e7e6      	b.n	5c0e <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5c40:	e9cd 6500 	strd	r6, r5, [sp]
    5c44:	4622      	mov	r2, r4
    5c46:	4639      	mov	r1, r7
    5c48:	4803      	ldr	r0, [pc, #12]	; (5c58 <z_impl_k_sem_take+0xcc>)
    5c4a:	f000 fbcb 	bl	63e4 <z_pend_curr>
	return ret;
    5c4e:	e7de      	b.n	5c0e <z_impl_k_sem_take+0x82>
    5c50:	00008e9d 	.word	0x00008e9d
    5c54:	00008378 	.word	0x00008378
    5c58:	20000af8 	.word	0x20000af8
    5c5c:	000084a7 	.word	0x000084a7

00005c60 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5c60:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5c62:	4d07      	ldr	r5, [pc, #28]	; (5c80 <z_reset_time_slice+0x20>)
    5c64:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5c66:	b154      	cbz	r4, 5c7e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5c68:	f7fd fba8 	bl	33bc <sys_clock_elapsed>
    5c6c:	4b05      	ldr	r3, [pc, #20]	; (5c84 <z_reset_time_slice+0x24>)
    5c6e:	4404      	add	r4, r0
    5c70:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5c72:	6828      	ldr	r0, [r5, #0]
    5c74:	2100      	movs	r1, #0
	}
}
    5c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5c7a:	f001 b8b5 	b.w	6de8 <z_set_timeout_expiry>
}
    5c7e:	bd38      	pop	{r3, r4, r5, pc}
    5c80:	20000b08 	.word	0x20000b08
    5c84:	20000acc 	.word	0x20000acc

00005c88 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c8a:	4604      	mov	r4, r0
    5c8c:	460d      	mov	r5, r1
	__asm__ volatile(
    5c8e:	f04f 0320 	mov.w	r3, #32
    5c92:	f3ef 8711 	mrs	r7, BASEPRI
    5c96:	f383 8812 	msr	BASEPRI_MAX, r3
    5c9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c9e:	481e      	ldr	r0, [pc, #120]	; (5d18 <k_sched_time_slice_set+0x90>)
    5ca0:	f7ff fd80 	bl	57a4 <z_spin_lock_valid>
    5ca4:	b940      	cbnz	r0, 5cb8 <k_sched_time_slice_set+0x30>
    5ca6:	491d      	ldr	r1, [pc, #116]	; (5d1c <k_sched_time_slice_set+0x94>)
    5ca8:	481d      	ldr	r0, [pc, #116]	; (5d20 <k_sched_time_slice_set+0x98>)
    5caa:	228e      	movs	r2, #142	; 0x8e
    5cac:	f001 fc79 	bl	75a2 <assert_print>
    5cb0:	481a      	ldr	r0, [pc, #104]	; (5d1c <k_sched_time_slice_set+0x94>)
    5cb2:	218e      	movs	r1, #142	; 0x8e
    5cb4:	f001 fc6e 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    5cb8:	4817      	ldr	r0, [pc, #92]	; (5d18 <k_sched_time_slice_set+0x90>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5cba:	4e1a      	ldr	r6, [pc, #104]	; (5d24 <k_sched_time_slice_set+0x9c>)
    5cbc:	f7ff fd90 	bl	57e0 <z_spin_lock_set_owner>
    5cc0:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5cc2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5cc6:	f240 30e7 	movw	r0, #999	; 0x3e7
    5cca:	6131      	str	r1, [r6, #16]
    5ccc:	2300      	movs	r3, #0
    5cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5cd2:	fbe4 010c 	umlal	r0, r1, r4, ip
    5cd6:	f7fa fa13 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5cda:	2c00      	cmp	r4, #0
    5cdc:	4b12      	ldr	r3, [pc, #72]	; (5d28 <k_sched_time_slice_set+0xa0>)
    5cde:	dc17      	bgt.n	5d10 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    5ce0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5ce2:	4b12      	ldr	r3, [pc, #72]	; (5d2c <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
    5ce4:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    5ce6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    5ce8:	f7ff ffba 	bl	5c60 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5cec:	480a      	ldr	r0, [pc, #40]	; (5d18 <k_sched_time_slice_set+0x90>)
    5cee:	f7ff fd67 	bl	57c0 <z_spin_unlock_valid>
    5cf2:	b940      	cbnz	r0, 5d06 <k_sched_time_slice_set+0x7e>
    5cf4:	4909      	ldr	r1, [pc, #36]	; (5d1c <k_sched_time_slice_set+0x94>)
    5cf6:	480a      	ldr	r0, [pc, #40]	; (5d20 <k_sched_time_slice_set+0x98>)
    5cf8:	22b9      	movs	r2, #185	; 0xb9
    5cfa:	f001 fc52 	bl	75a2 <assert_print>
    5cfe:	4807      	ldr	r0, [pc, #28]	; (5d1c <k_sched_time_slice_set+0x94>)
    5d00:	21b9      	movs	r1, #185	; 0xb9
    5d02:	f001 fc47 	bl	7594 <assert_post_action>
	__asm__ volatile(
    5d06:	f387 8811 	msr	BASEPRI, r7
    5d0a:	f3bf 8f6f 	isb	sy
	}
}
    5d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    5d10:	2802      	cmp	r0, #2
    5d12:	bfb8      	it	lt
    5d14:	2002      	movlt	r0, #2
    5d16:	e7e3      	b.n	5ce0 <k_sched_time_slice_set+0x58>
    5d18:	20000b00 	.word	0x20000b00
    5d1c:	000084a7 	.word	0x000084a7
    5d20:	00008378 	.word	0x00008378
    5d24:	20000acc 	.word	0x20000acc
    5d28:	20000b08 	.word	0x20000b08
    5d2c:	20000b04 	.word	0x20000b04

00005d30 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    5d30:	b510      	push	{r4, lr}
    5d32:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5d34:	460c      	mov	r4, r1
    5d36:	b9c1      	cbnz	r1, 5d6a <z_reschedule+0x3a>
    5d38:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    5d3c:	b9aa      	cbnz	r2, 5d6a <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    5d3e:	4a14      	ldr	r2, [pc, #80]	; (5d90 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    5d40:	69d1      	ldr	r1, [r2, #28]
    5d42:	6892      	ldr	r2, [r2, #8]
    5d44:	4291      	cmp	r1, r2
    5d46:	d010      	beq.n	5d6a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d48:	f7ff fd3a 	bl	57c0 <z_spin_unlock_valid>
    5d4c:	b940      	cbnz	r0, 5d60 <z_reschedule+0x30>
    5d4e:	4911      	ldr	r1, [pc, #68]	; (5d94 <z_reschedule+0x64>)
    5d50:	4811      	ldr	r0, [pc, #68]	; (5d98 <z_reschedule+0x68>)
    5d52:	22d0      	movs	r2, #208	; 0xd0
    5d54:	f001 fc25 	bl	75a2 <assert_print>
    5d58:	480e      	ldr	r0, [pc, #56]	; (5d94 <z_reschedule+0x64>)
    5d5a:	21d0      	movs	r1, #208	; 0xd0
    5d5c:	f001 fc1a 	bl	7594 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    5d64:	2000      	movs	r0, #0
    5d66:	f7fb be5b 	b.w	1a20 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d6a:	4618      	mov	r0, r3
    5d6c:	f7ff fd28 	bl	57c0 <z_spin_unlock_valid>
    5d70:	b940      	cbnz	r0, 5d84 <z_reschedule+0x54>
    5d72:	4908      	ldr	r1, [pc, #32]	; (5d94 <z_reschedule+0x64>)
    5d74:	4808      	ldr	r0, [pc, #32]	; (5d98 <z_reschedule+0x68>)
    5d76:	22b9      	movs	r2, #185	; 0xb9
    5d78:	f001 fc13 	bl	75a2 <assert_print>
    5d7c:	4805      	ldr	r0, [pc, #20]	; (5d94 <z_reschedule+0x64>)
    5d7e:	21b9      	movs	r1, #185	; 0xb9
    5d80:	f001 fc08 	bl	7594 <assert_post_action>
    5d84:	f384 8811 	msr	BASEPRI, r4
    5d88:	f3bf 8f6f 	isb	sy
    5d8c:	bd10      	pop	{r4, pc}
    5d8e:	bf00      	nop
    5d90:	20000acc 	.word	0x20000acc
    5d94:	000084a7 	.word	0x000084a7
    5d98:	00008378 	.word	0x00008378

00005d9c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5d9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5d9e:	f04f 0320 	mov.w	r3, #32
    5da2:	f3ef 8511 	mrs	r5, BASEPRI
    5da6:	f383 8812 	msr	BASEPRI_MAX, r3
    5daa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5dae:	4820      	ldr	r0, [pc, #128]	; (5e30 <k_sched_lock+0x94>)
    5db0:	f7ff fcf8 	bl	57a4 <z_spin_lock_valid>
    5db4:	b940      	cbnz	r0, 5dc8 <k_sched_lock+0x2c>
    5db6:	491f      	ldr	r1, [pc, #124]	; (5e34 <k_sched_lock+0x98>)
    5db8:	481f      	ldr	r0, [pc, #124]	; (5e38 <k_sched_lock+0x9c>)
    5dba:	228e      	movs	r2, #142	; 0x8e
    5dbc:	f001 fbf1 	bl	75a2 <assert_print>
    5dc0:	481c      	ldr	r0, [pc, #112]	; (5e34 <k_sched_lock+0x98>)
    5dc2:	218e      	movs	r1, #142	; 0x8e
    5dc4:	f001 fbe6 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    5dc8:	4819      	ldr	r0, [pc, #100]	; (5e30 <k_sched_lock+0x94>)
    5dca:	f7ff fd09 	bl	57e0 <z_spin_lock_set_owner>
    5dce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5dd2:	b143      	cbz	r3, 5de6 <k_sched_lock+0x4a>
    5dd4:	4919      	ldr	r1, [pc, #100]	; (5e3c <k_sched_lock+0xa0>)
    5dd6:	4818      	ldr	r0, [pc, #96]	; (5e38 <k_sched_lock+0x9c>)
    5dd8:	22fd      	movs	r2, #253	; 0xfd
    5dda:	f001 fbe2 	bl	75a2 <assert_print>
    5dde:	4817      	ldr	r0, [pc, #92]	; (5e3c <k_sched_lock+0xa0>)
    5de0:	21fd      	movs	r1, #253	; 0xfd
    5de2:	f001 fbd7 	bl	7594 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5de6:	4c16      	ldr	r4, [pc, #88]	; (5e40 <k_sched_lock+0xa4>)
    5de8:	68a3      	ldr	r3, [r4, #8]
    5dea:	7bdb      	ldrb	r3, [r3, #15]
    5dec:	2b01      	cmp	r3, #1
    5dee:	d108      	bne.n	5e02 <k_sched_lock+0x66>
    5df0:	4912      	ldr	r1, [pc, #72]	; (5e3c <k_sched_lock+0xa0>)
    5df2:	4811      	ldr	r0, [pc, #68]	; (5e38 <k_sched_lock+0x9c>)
    5df4:	22fe      	movs	r2, #254	; 0xfe
    5df6:	f001 fbd4 	bl	75a2 <assert_print>
    5dfa:	4810      	ldr	r0, [pc, #64]	; (5e3c <k_sched_lock+0xa0>)
    5dfc:	21fe      	movs	r1, #254	; 0xfe
    5dfe:	f001 fbc9 	bl	7594 <assert_post_action>
	--_current->base.sched_locked;
    5e02:	68a2      	ldr	r2, [r4, #8]
    5e04:	7bd3      	ldrb	r3, [r2, #15]
    5e06:	3b01      	subs	r3, #1
    5e08:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e0a:	4809      	ldr	r0, [pc, #36]	; (5e30 <k_sched_lock+0x94>)
    5e0c:	f7ff fcd8 	bl	57c0 <z_spin_unlock_valid>
    5e10:	b940      	cbnz	r0, 5e24 <k_sched_lock+0x88>
    5e12:	4908      	ldr	r1, [pc, #32]	; (5e34 <k_sched_lock+0x98>)
    5e14:	4808      	ldr	r0, [pc, #32]	; (5e38 <k_sched_lock+0x9c>)
    5e16:	22b9      	movs	r2, #185	; 0xb9
    5e18:	f001 fbc3 	bl	75a2 <assert_print>
    5e1c:	4805      	ldr	r0, [pc, #20]	; (5e34 <k_sched_lock+0x98>)
    5e1e:	21b9      	movs	r1, #185	; 0xb9
    5e20:	f001 fbb8 	bl	7594 <assert_post_action>
	__asm__ volatile(
    5e24:	f385 8811 	msr	BASEPRI, r5
    5e28:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5e2c:	bd38      	pop	{r3, r4, r5, pc}
    5e2e:	bf00      	nop
    5e30:	20000b00 	.word	0x20000b00
    5e34:	000084a7 	.word	0x000084a7
    5e38:	00008378 	.word	0x00008378
    5e3c:	00008e72 	.word	0x00008e72
    5e40:	20000acc 	.word	0x20000acc

00005e44 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5e44:	4b0b      	ldr	r3, [pc, #44]	; (5e74 <z_priq_dumb_remove+0x30>)
    5e46:	4299      	cmp	r1, r3
{
    5e48:	b510      	push	{r4, lr}
    5e4a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5e4c:	d10a      	bne.n	5e64 <z_priq_dumb_remove+0x20>
    5e4e:	490a      	ldr	r1, [pc, #40]	; (5e78 <z_priq_dumb_remove+0x34>)
    5e50:	480a      	ldr	r0, [pc, #40]	; (5e7c <z_priq_dumb_remove+0x38>)
    5e52:	f240 423d 	movw	r2, #1085	; 0x43d
    5e56:	f001 fba4 	bl	75a2 <assert_print>
    5e5a:	4807      	ldr	r0, [pc, #28]	; (5e78 <z_priq_dumb_remove+0x34>)
    5e5c:	f240 413d 	movw	r1, #1085	; 0x43d
    5e60:	f001 fb98 	bl	7594 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5e64:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    5e68:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5e6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5e6c:	2300      	movs	r3, #0
	node->prev = NULL;
    5e6e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5e72:	bd10      	pop	{r4, pc}
    5e74:	20000200 	.word	0x20000200
    5e78:	00008ebd 	.word	0x00008ebd
    5e7c:	00008378 	.word	0x00008378

00005e80 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5e80:	6883      	ldr	r3, [r0, #8]
{
    5e82:	b510      	push	{r4, lr}
    5e84:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    5e86:	b953      	cbnz	r3, 5e9e <unpend_thread_no_timeout+0x1e>
    5e88:	490a      	ldr	r1, [pc, #40]	; (5eb4 <unpend_thread_no_timeout+0x34>)
    5e8a:	480b      	ldr	r0, [pc, #44]	; (5eb8 <unpend_thread_no_timeout+0x38>)
    5e8c:	f240 22b9 	movw	r2, #697	; 0x2b9
    5e90:	f001 fb87 	bl	75a2 <assert_print>
    5e94:	4807      	ldr	r0, [pc, #28]	; (5eb4 <unpend_thread_no_timeout+0x34>)
    5e96:	f240 21b9 	movw	r1, #697	; 0x2b9
    5e9a:	f001 fb7b 	bl	7594 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5e9e:	68a0      	ldr	r0, [r4, #8]
    5ea0:	4621      	mov	r1, r4
    5ea2:	f7ff ffcf 	bl	5e44 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5ea6:	7b63      	ldrb	r3, [r4, #13]
    5ea8:	f023 0302 	bic.w	r3, r3, #2
    5eac:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5eae:	2300      	movs	r3, #0
    5eb0:	60a3      	str	r3, [r4, #8]
}
    5eb2:	bd10      	pop	{r4, pc}
    5eb4:	00008ebd 	.word	0x00008ebd
    5eb8:	00008378 	.word	0x00008378

00005ebc <update_cache>:
{
    5ebc:	b538      	push	{r3, r4, r5, lr}
    5ebe:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5ec0:	4812      	ldr	r0, [pc, #72]	; (5f0c <update_cache+0x50>)
    5ec2:	4d13      	ldr	r5, [pc, #76]	; (5f10 <update_cache+0x54>)
    5ec4:	f001 fef9 	bl	7cba <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5ec8:	4604      	mov	r4, r0
    5eca:	b900      	cbnz	r0, 5ece <update_cache+0x12>
    5ecc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    5ece:	b9aa      	cbnz	r2, 5efc <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    5ed0:	68ab      	ldr	r3, [r5, #8]
    5ed2:	b943      	cbnz	r3, 5ee6 <update_cache+0x2a>
    5ed4:	490f      	ldr	r1, [pc, #60]	; (5f14 <update_cache+0x58>)
    5ed6:	4810      	ldr	r0, [pc, #64]	; (5f18 <update_cache+0x5c>)
    5ed8:	2289      	movs	r2, #137	; 0x89
    5eda:	f001 fb62 	bl	75a2 <assert_print>
    5ede:	480d      	ldr	r0, [pc, #52]	; (5f14 <update_cache+0x58>)
    5ee0:	2189      	movs	r1, #137	; 0x89
    5ee2:	f001 fb57 	bl	7594 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5ee6:	68ab      	ldr	r3, [r5, #8]
    5ee8:	7b5a      	ldrb	r2, [r3, #13]
    5eea:	06d2      	lsls	r2, r2, #27
    5eec:	d106      	bne.n	5efc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5eee:	69a2      	ldr	r2, [r4, #24]
    5ef0:	b922      	cbnz	r2, 5efc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    5ef2:	89da      	ldrh	r2, [r3, #14]
    5ef4:	2a7f      	cmp	r2, #127	; 0x7f
    5ef6:	d901      	bls.n	5efc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    5ef8:	61eb      	str	r3, [r5, #28]
}
    5efa:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5efc:	68ab      	ldr	r3, [r5, #8]
    5efe:	42a3      	cmp	r3, r4
    5f00:	d002      	beq.n	5f08 <update_cache+0x4c>
			z_reset_time_slice(thread);
    5f02:	4620      	mov	r0, r4
    5f04:	f7ff feac 	bl	5c60 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5f08:	61ec      	str	r4, [r5, #28]
}
    5f0a:	e7f6      	b.n	5efa <update_cache+0x3e>
    5f0c:	20000aec 	.word	0x20000aec
    5f10:	20000acc 	.word	0x20000acc
    5f14:	00008ebd 	.word	0x00008ebd
    5f18:	00008378 	.word	0x00008378

00005f1c <move_thread_to_end_of_prio_q>:
{
    5f1c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5f1e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5f22:	7b43      	ldrb	r3, [r0, #13]
    5f24:	2a00      	cmp	r2, #0
{
    5f26:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5f28:	da06      	bge.n	5f38 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5f2e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5f30:	4601      	mov	r1, r0
    5f32:	481d      	ldr	r0, [pc, #116]	; (5fa8 <move_thread_to_end_of_prio_q+0x8c>)
    5f34:	f7ff ff86 	bl	5e44 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5f38:	7b63      	ldrb	r3, [r4, #13]
    5f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5f3e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5f40:	4b1a      	ldr	r3, [pc, #104]	; (5fac <move_thread_to_end_of_prio_q+0x90>)
    5f42:	429c      	cmp	r4, r3
    5f44:	d108      	bne.n	5f58 <move_thread_to_end_of_prio_q+0x3c>
    5f46:	491a      	ldr	r1, [pc, #104]	; (5fb0 <move_thread_to_end_of_prio_q+0x94>)
    5f48:	481a      	ldr	r0, [pc, #104]	; (5fb4 <move_thread_to_end_of_prio_q+0x98>)
    5f4a:	22ba      	movs	r2, #186	; 0xba
    5f4c:	f001 fb29 	bl	75a2 <assert_print>
    5f50:	4817      	ldr	r0, [pc, #92]	; (5fb0 <move_thread_to_end_of_prio_q+0x94>)
    5f52:	21ba      	movs	r1, #186	; 0xba
    5f54:	f001 fb1e 	bl	7594 <assert_post_action>
	return list->head == list;
    5f58:	4a17      	ldr	r2, [pc, #92]	; (5fb8 <move_thread_to_end_of_prio_q+0x9c>)
	return (node == list->tail) ? NULL : node->next;
    5f5a:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f5e:	f102 0520 	add.w	r5, r2, #32
    5f62:	42ab      	cmp	r3, r5
    5f64:	d01b      	beq.n	5f9e <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f66:	b1d3      	cbz	r3, 5f9e <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
    5f68:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5f6c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5f70:	428e      	cmp	r6, r1
    5f72:	d00f      	beq.n	5f94 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
    5f74:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5f76:	2900      	cmp	r1, #0
    5f78:	dd0c      	ble.n	5f94 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
    5f7a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5f7c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5f80:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5f82:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5f84:	6890      	ldr	r0, [r2, #8]
    5f86:	1b03      	subs	r3, r0, r4
    5f88:	4258      	negs	r0, r3
}
    5f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5f8e:	4158      	adcs	r0, r3
    5f90:	f7ff bf94 	b.w	5ebc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5f94:	4283      	cmp	r3, r0
    5f96:	d002      	beq.n	5f9e <move_thread_to_end_of_prio_q+0x82>
    5f98:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	d1e6      	bne.n	5f6c <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
    5f9e:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    5fa2:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5fa4:	6254      	str	r4, [r2, #36]	; 0x24
}
    5fa6:	e7ed      	b.n	5f84 <move_thread_to_end_of_prio_q+0x68>
    5fa8:	20000aec 	.word	0x20000aec
    5fac:	20000200 	.word	0x20000200
    5fb0:	00008ebd 	.word	0x00008ebd
    5fb4:	00008378 	.word	0x00008378
    5fb8:	20000acc 	.word	0x20000acc

00005fbc <z_time_slice>:
{
    5fbc:	b570      	push	{r4, r5, r6, lr}
    5fbe:	4605      	mov	r5, r0
	__asm__ volatile(
    5fc0:	f04f 0320 	mov.w	r3, #32
    5fc4:	f3ef 8611 	mrs	r6, BASEPRI
    5fc8:	f383 8812 	msr	BASEPRI_MAX, r3
    5fcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5fd0:	4825      	ldr	r0, [pc, #148]	; (6068 <z_time_slice+0xac>)
    5fd2:	f7ff fbe7 	bl	57a4 <z_spin_lock_valid>
    5fd6:	b940      	cbnz	r0, 5fea <z_time_slice+0x2e>
    5fd8:	4924      	ldr	r1, [pc, #144]	; (606c <z_time_slice+0xb0>)
    5fda:	4825      	ldr	r0, [pc, #148]	; (6070 <z_time_slice+0xb4>)
    5fdc:	228e      	movs	r2, #142	; 0x8e
    5fde:	f001 fae0 	bl	75a2 <assert_print>
    5fe2:	4822      	ldr	r0, [pc, #136]	; (606c <z_time_slice+0xb0>)
    5fe4:	218e      	movs	r1, #142	; 0x8e
    5fe6:	f001 fad5 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    5fea:	481f      	ldr	r0, [pc, #124]	; (6068 <z_time_slice+0xac>)
    5fec:	f7ff fbf8 	bl	57e0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5ff0:	4b20      	ldr	r3, [pc, #128]	; (6074 <z_time_slice+0xb8>)
    5ff2:	4a21      	ldr	r2, [pc, #132]	; (6078 <z_time_slice+0xbc>)
    5ff4:	689c      	ldr	r4, [r3, #8]
    5ff6:	6811      	ldr	r1, [r2, #0]
    5ff8:	428c      	cmp	r4, r1
    5ffa:	d114      	bne.n	6026 <z_time_slice+0x6a>
	z_reset_time_slice(curr);
    5ffc:	4620      	mov	r0, r4
    5ffe:	f7ff fe2f 	bl	5c60 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6002:	4819      	ldr	r0, [pc, #100]	; (6068 <z_time_slice+0xac>)
    6004:	f7ff fbdc 	bl	57c0 <z_spin_unlock_valid>
    6008:	b940      	cbnz	r0, 601c <z_time_slice+0x60>
    600a:	4918      	ldr	r1, [pc, #96]	; (606c <z_time_slice+0xb0>)
    600c:	4818      	ldr	r0, [pc, #96]	; (6070 <z_time_slice+0xb4>)
    600e:	22b9      	movs	r2, #185	; 0xb9
    6010:	f001 fac7 	bl	75a2 <assert_print>
    6014:	4815      	ldr	r0, [pc, #84]	; (606c <z_time_slice+0xb0>)
    6016:	21b9      	movs	r1, #185	; 0xb9
    6018:	f001 fabc 	bl	7594 <assert_post_action>
	__asm__ volatile(
    601c:	f386 8811 	msr	BASEPRI, r6
    6020:	f3bf 8f6f 	isb	sy
}
    6024:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    6026:	2100      	movs	r1, #0
    6028:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    602a:	4a14      	ldr	r2, [pc, #80]	; (607c <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
    602c:	6812      	ldr	r2, [r2, #0]
    602e:	b1c2      	cbz	r2, 6062 <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
    6030:	89e2      	ldrh	r2, [r4, #14]
    6032:	2a7f      	cmp	r2, #127	; 0x7f
    6034:	d815      	bhi.n	6062 <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
    6036:	7b62      	ldrb	r2, [r4, #13]
    6038:	06d2      	lsls	r2, r2, #27
    603a:	d112      	bne.n	6062 <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    603c:	4a10      	ldr	r2, [pc, #64]	; (6080 <z_time_slice+0xc4>)
    603e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    6042:	6812      	ldr	r2, [r2, #0]
    6044:	4291      	cmp	r1, r2
    6046:	db0c      	blt.n	6062 <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
    6048:	4a0e      	ldr	r2, [pc, #56]	; (6084 <z_time_slice+0xc8>)
    604a:	4294      	cmp	r4, r2
    604c:	d009      	beq.n	6062 <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
    604e:	691a      	ldr	r2, [r3, #16]
    6050:	42aa      	cmp	r2, r5
    6052:	dc03      	bgt.n	605c <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
    6054:	4620      	mov	r0, r4
    6056:	f7ff ff61 	bl	5f1c <move_thread_to_end_of_prio_q>
    605a:	e7cf      	b.n	5ffc <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
    605c:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    605e:	611a      	str	r2, [r3, #16]
    6060:	e7cf      	b.n	6002 <z_time_slice+0x46>
    6062:	2200      	movs	r2, #0
    6064:	e7fb      	b.n	605e <z_time_slice+0xa2>
    6066:	bf00      	nop
    6068:	20000b00 	.word	0x20000b00
    606c:	000084a7 	.word	0x000084a7
    6070:	00008378 	.word	0x00008378
    6074:	20000acc 	.word	0x20000acc
    6078:	20000afc 	.word	0x20000afc
    607c:	20000b08 	.word	0x20000b08
    6080:	20000b04 	.word	0x20000b04
    6084:	20000200 	.word	0x20000200

00006088 <ready_thread>:
{
    6088:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    608a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    608e:	7b43      	ldrb	r3, [r0, #13]
    6090:	2a00      	cmp	r2, #0
{
    6092:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6094:	db38      	blt.n	6108 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6096:	06da      	lsls	r2, r3, #27
    6098:	d136      	bne.n	6108 <ready_thread+0x80>
    609a:	6982      	ldr	r2, [r0, #24]
    609c:	2a00      	cmp	r2, #0
    609e:	d133      	bne.n	6108 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    60a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    60a4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    60a6:	4b19      	ldr	r3, [pc, #100]	; (610c <ready_thread+0x84>)
    60a8:	4298      	cmp	r0, r3
    60aa:	d108      	bne.n	60be <ready_thread+0x36>
    60ac:	4918      	ldr	r1, [pc, #96]	; (6110 <ready_thread+0x88>)
    60ae:	4819      	ldr	r0, [pc, #100]	; (6114 <ready_thread+0x8c>)
    60b0:	22ba      	movs	r2, #186	; 0xba
    60b2:	f001 fa76 	bl	75a2 <assert_print>
    60b6:	4816      	ldr	r0, [pc, #88]	; (6110 <ready_thread+0x88>)
    60b8:	21ba      	movs	r1, #186	; 0xba
    60ba:	f001 fa6b 	bl	7594 <assert_post_action>
	return list->head == list;
    60be:	4a16      	ldr	r2, [pc, #88]	; (6118 <ready_thread+0x90>)
	return (node == list->tail) ? NULL : node->next;
    60c0:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60c4:	f102 0520 	add.w	r5, r2, #32
    60c8:	42ab      	cmp	r3, r5
    60ca:	d018      	beq.n	60fe <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    60cc:	b1bb      	cbz	r3, 60fe <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
    60ce:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    60d2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    60d6:	428e      	cmp	r6, r1
    60d8:	d00c      	beq.n	60f4 <ready_thread+0x6c>
		return b2 - b1;
    60da:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    60dc:	2900      	cmp	r1, #0
    60de:	dd09      	ble.n	60f4 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
    60e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    60e2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    60e6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    60e8:	605c      	str	r4, [r3, #4]
}
    60ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    60ee:	2000      	movs	r0, #0
    60f0:	f7ff bee4 	b.w	5ebc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    60f4:	4298      	cmp	r0, r3
    60f6:	d002      	beq.n	60fe <ready_thread+0x76>
    60f8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    60fa:	2b00      	cmp	r3, #0
    60fc:	d1e9      	bne.n	60d2 <ready_thread+0x4a>
	node->prev = tail;
    60fe:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    6102:	6004      	str	r4, [r0, #0]
	list->tail = node;
    6104:	6254      	str	r4, [r2, #36]	; 0x24
}
    6106:	e7f0      	b.n	60ea <ready_thread+0x62>
}
    6108:	bd70      	pop	{r4, r5, r6, pc}
    610a:	bf00      	nop
    610c:	20000200 	.word	0x20000200
    6110:	00008ebd 	.word	0x00008ebd
    6114:	00008378 	.word	0x00008378
    6118:	20000acc 	.word	0x20000acc

0000611c <z_ready_thread>:
{
    611c:	b538      	push	{r3, r4, r5, lr}
    611e:	4604      	mov	r4, r0
	__asm__ volatile(
    6120:	f04f 0320 	mov.w	r3, #32
    6124:	f3ef 8511 	mrs	r5, BASEPRI
    6128:	f383 8812 	msr	BASEPRI_MAX, r3
    612c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6130:	4812      	ldr	r0, [pc, #72]	; (617c <z_ready_thread+0x60>)
    6132:	f7ff fb37 	bl	57a4 <z_spin_lock_valid>
    6136:	b940      	cbnz	r0, 614a <z_ready_thread+0x2e>
    6138:	4911      	ldr	r1, [pc, #68]	; (6180 <z_ready_thread+0x64>)
    613a:	4812      	ldr	r0, [pc, #72]	; (6184 <z_ready_thread+0x68>)
    613c:	228e      	movs	r2, #142	; 0x8e
    613e:	f001 fa30 	bl	75a2 <assert_print>
    6142:	480f      	ldr	r0, [pc, #60]	; (6180 <z_ready_thread+0x64>)
    6144:	218e      	movs	r1, #142	; 0x8e
    6146:	f001 fa25 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    614a:	480c      	ldr	r0, [pc, #48]	; (617c <z_ready_thread+0x60>)
    614c:	f7ff fb48 	bl	57e0 <z_spin_lock_set_owner>
			ready_thread(thread);
    6150:	4620      	mov	r0, r4
    6152:	f7ff ff99 	bl	6088 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6156:	4809      	ldr	r0, [pc, #36]	; (617c <z_ready_thread+0x60>)
    6158:	f7ff fb32 	bl	57c0 <z_spin_unlock_valid>
    615c:	b940      	cbnz	r0, 6170 <z_ready_thread+0x54>
    615e:	4908      	ldr	r1, [pc, #32]	; (6180 <z_ready_thread+0x64>)
    6160:	4808      	ldr	r0, [pc, #32]	; (6184 <z_ready_thread+0x68>)
    6162:	22b9      	movs	r2, #185	; 0xb9
    6164:	f001 fa1d 	bl	75a2 <assert_print>
    6168:	4805      	ldr	r0, [pc, #20]	; (6180 <z_ready_thread+0x64>)
    616a:	21b9      	movs	r1, #185	; 0xb9
    616c:	f001 fa12 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6170:	f385 8811 	msr	BASEPRI, r5
    6174:	f3bf 8f6f 	isb	sy
}
    6178:	bd38      	pop	{r3, r4, r5, pc}
    617a:	bf00      	nop
    617c:	20000b00 	.word	0x20000b00
    6180:	000084a7 	.word	0x000084a7
    6184:	00008378 	.word	0x00008378

00006188 <z_sched_start>:
{
    6188:	b538      	push	{r3, r4, r5, lr}
    618a:	4604      	mov	r4, r0
	__asm__ volatile(
    618c:	f04f 0320 	mov.w	r3, #32
    6190:	f3ef 8511 	mrs	r5, BASEPRI
    6194:	f383 8812 	msr	BASEPRI_MAX, r3
    6198:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    619c:	4818      	ldr	r0, [pc, #96]	; (6200 <z_sched_start+0x78>)
    619e:	f7ff fb01 	bl	57a4 <z_spin_lock_valid>
    61a2:	b940      	cbnz	r0, 61b6 <z_sched_start+0x2e>
    61a4:	4917      	ldr	r1, [pc, #92]	; (6204 <z_sched_start+0x7c>)
    61a6:	4818      	ldr	r0, [pc, #96]	; (6208 <z_sched_start+0x80>)
    61a8:	228e      	movs	r2, #142	; 0x8e
    61aa:	f001 f9fa 	bl	75a2 <assert_print>
    61ae:	4815      	ldr	r0, [pc, #84]	; (6204 <z_sched_start+0x7c>)
    61b0:	218e      	movs	r1, #142	; 0x8e
    61b2:	f001 f9ef 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    61b6:	4812      	ldr	r0, [pc, #72]	; (6200 <z_sched_start+0x78>)
    61b8:	f7ff fb12 	bl	57e0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    61bc:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    61be:	075a      	lsls	r2, r3, #29
    61c0:	d411      	bmi.n	61e6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61c2:	480f      	ldr	r0, [pc, #60]	; (6200 <z_sched_start+0x78>)
    61c4:	f7ff fafc 	bl	57c0 <z_spin_unlock_valid>
    61c8:	b940      	cbnz	r0, 61dc <z_sched_start+0x54>
    61ca:	490e      	ldr	r1, [pc, #56]	; (6204 <z_sched_start+0x7c>)
    61cc:	480e      	ldr	r0, [pc, #56]	; (6208 <z_sched_start+0x80>)
    61ce:	22b9      	movs	r2, #185	; 0xb9
    61d0:	f001 f9e7 	bl	75a2 <assert_print>
    61d4:	480b      	ldr	r0, [pc, #44]	; (6204 <z_sched_start+0x7c>)
    61d6:	21b9      	movs	r1, #185	; 0xb9
    61d8:	f001 f9dc 	bl	7594 <assert_post_action>
	__asm__ volatile(
    61dc:	f385 8811 	msr	BASEPRI, r5
    61e0:	f3bf 8f6f 	isb	sy
}
    61e4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    61e6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    61ea:	4620      	mov	r0, r4
    61ec:	7363      	strb	r3, [r4, #13]
    61ee:	f7ff ff4b 	bl	6088 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    61f2:	4629      	mov	r1, r5
    61f4:	4802      	ldr	r0, [pc, #8]	; (6200 <z_sched_start+0x78>)
}
    61f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    61fa:	f7ff bd99 	b.w	5d30 <z_reschedule>
    61fe:	bf00      	nop
    6200:	20000b00 	.word	0x20000b00
    6204:	000084a7 	.word	0x000084a7
    6208:	00008378 	.word	0x00008378

0000620c <z_thread_timeout>:
{
    620c:	b570      	push	{r4, r5, r6, lr}
    620e:	4604      	mov	r4, r0
	__asm__ volatile(
    6210:	f04f 0320 	mov.w	r3, #32
    6214:	f3ef 8611 	mrs	r6, BASEPRI
    6218:	f383 8812 	msr	BASEPRI_MAX, r3
    621c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6220:	481b      	ldr	r0, [pc, #108]	; (6290 <z_thread_timeout+0x84>)
    6222:	f7ff fabf 	bl	57a4 <z_spin_lock_valid>
    6226:	b940      	cbnz	r0, 623a <z_thread_timeout+0x2e>
    6228:	491a      	ldr	r1, [pc, #104]	; (6294 <z_thread_timeout+0x88>)
    622a:	481b      	ldr	r0, [pc, #108]	; (6298 <z_thread_timeout+0x8c>)
    622c:	228e      	movs	r2, #142	; 0x8e
    622e:	f001 f9b8 	bl	75a2 <assert_print>
    6232:	4818      	ldr	r0, [pc, #96]	; (6294 <z_thread_timeout+0x88>)
    6234:	218e      	movs	r1, #142	; 0x8e
    6236:	f001 f9ad 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    623a:	4815      	ldr	r0, [pc, #84]	; (6290 <z_thread_timeout+0x84>)
    623c:	f7ff fad0 	bl	57e0 <z_spin_lock_set_owner>
		if (!killed) {
    6240:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6244:	f013 0f28 	tst.w	r3, #40	; 0x28
    6248:	d110      	bne.n	626c <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    624a:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    624e:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6252:	b113      	cbz	r3, 625a <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    6254:	4628      	mov	r0, r5
    6256:	f7ff fe13 	bl	5e80 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    625a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    625e:	f023 0314 	bic.w	r3, r3, #20
    6262:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6266:	4628      	mov	r0, r5
    6268:	f7ff ff0e 	bl	6088 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    626c:	4808      	ldr	r0, [pc, #32]	; (6290 <z_thread_timeout+0x84>)
    626e:	f7ff faa7 	bl	57c0 <z_spin_unlock_valid>
    6272:	b940      	cbnz	r0, 6286 <z_thread_timeout+0x7a>
    6274:	4907      	ldr	r1, [pc, #28]	; (6294 <z_thread_timeout+0x88>)
    6276:	4808      	ldr	r0, [pc, #32]	; (6298 <z_thread_timeout+0x8c>)
    6278:	22b9      	movs	r2, #185	; 0xb9
    627a:	f001 f992 	bl	75a2 <assert_print>
    627e:	4805      	ldr	r0, [pc, #20]	; (6294 <z_thread_timeout+0x88>)
    6280:	21b9      	movs	r1, #185	; 0xb9
    6282:	f001 f987 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6286:	f386 8811 	msr	BASEPRI, r6
    628a:	f3bf 8f6f 	isb	sy
}
    628e:	bd70      	pop	{r4, r5, r6, pc}
    6290:	20000b00 	.word	0x20000b00
    6294:	000084a7 	.word	0x000084a7
    6298:	00008378 	.word	0x00008378

0000629c <unready_thread>:
{
    629c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    629e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    62a2:	7b43      	ldrb	r3, [r0, #13]
    62a4:	2a00      	cmp	r2, #0
{
    62a6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    62a8:	da06      	bge.n	62b8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    62aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    62ae:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    62b0:	4601      	mov	r1, r0
    62b2:	4806      	ldr	r0, [pc, #24]	; (62cc <unready_thread+0x30>)
    62b4:	f7ff fdc6 	bl	5e44 <z_priq_dumb_remove>
	update_cache(thread == _current);
    62b8:	4b05      	ldr	r3, [pc, #20]	; (62d0 <unready_thread+0x34>)
    62ba:	6898      	ldr	r0, [r3, #8]
    62bc:	1b03      	subs	r3, r0, r4
    62be:	4258      	negs	r0, r3
}
    62c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    62c4:	4158      	adcs	r0, r3
    62c6:	f7ff bdf9 	b.w	5ebc <update_cache>
    62ca:	bf00      	nop
    62cc:	20000aec 	.word	0x20000aec
    62d0:	20000acc 	.word	0x20000acc

000062d4 <add_to_waitq_locked>:
{
    62d4:	b538      	push	{r3, r4, r5, lr}
    62d6:	4604      	mov	r4, r0
    62d8:	460d      	mov	r5, r1
	unready_thread(thread);
    62da:	f7ff ffdf 	bl	629c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    62de:	7b63      	ldrb	r3, [r4, #13]
    62e0:	f043 0302 	orr.w	r3, r3, #2
    62e4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    62e6:	b1f5      	cbz	r5, 6326 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    62e8:	4b15      	ldr	r3, [pc, #84]	; (6340 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    62ea:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    62ec:	429c      	cmp	r4, r3
    62ee:	d108      	bne.n	6302 <add_to_waitq_locked+0x2e>
    62f0:	4914      	ldr	r1, [pc, #80]	; (6344 <add_to_waitq_locked+0x70>)
    62f2:	4815      	ldr	r0, [pc, #84]	; (6348 <add_to_waitq_locked+0x74>)
    62f4:	22ba      	movs	r2, #186	; 0xba
    62f6:	f001 f954 	bl	75a2 <assert_print>
    62fa:	4812      	ldr	r0, [pc, #72]	; (6344 <add_to_waitq_locked+0x70>)
    62fc:	21ba      	movs	r1, #186	; 0xba
    62fe:	f001 f949 	bl	7594 <assert_post_action>
	return list->head == list;
    6302:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6304:	429d      	cmp	r5, r3
    6306:	d015      	beq.n	6334 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6308:	b1a3      	cbz	r3, 6334 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
    630a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    630e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6312:	4291      	cmp	r1, r2
    6314:	d008      	beq.n	6328 <add_to_waitq_locked+0x54>
		return b2 - b1;
    6316:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6318:	2a00      	cmp	r2, #0
    631a:	dd05      	ble.n	6328 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
    631c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    631e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6322:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6324:	605c      	str	r4, [r3, #4]
}
    6326:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6328:	686a      	ldr	r2, [r5, #4]
    632a:	4293      	cmp	r3, r2
    632c:	d002      	beq.n	6334 <add_to_waitq_locked+0x60>
    632e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6330:	2b00      	cmp	r3, #0
    6332:	d1ec      	bne.n	630e <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
    6334:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6336:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    633a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    633c:	606c      	str	r4, [r5, #4]
}
    633e:	e7f2      	b.n	6326 <add_to_waitq_locked+0x52>
    6340:	20000200 	.word	0x20000200
    6344:	00008ebd 	.word	0x00008ebd
    6348:	00008378 	.word	0x00008378

0000634c <pend>:
{
    634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6350:	4604      	mov	r4, r0
    6352:	4688      	mov	r8, r1
    6354:	4616      	mov	r6, r2
    6356:	461d      	mov	r5, r3
	__asm__ volatile(
    6358:	f04f 0320 	mov.w	r3, #32
    635c:	f3ef 8711 	mrs	r7, BASEPRI
    6360:	f383 8812 	msr	BASEPRI_MAX, r3
    6364:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6368:	481a      	ldr	r0, [pc, #104]	; (63d4 <pend+0x88>)
    636a:	f7ff fa1b 	bl	57a4 <z_spin_lock_valid>
    636e:	b940      	cbnz	r0, 6382 <pend+0x36>
    6370:	4919      	ldr	r1, [pc, #100]	; (63d8 <pend+0x8c>)
    6372:	481a      	ldr	r0, [pc, #104]	; (63dc <pend+0x90>)
    6374:	228e      	movs	r2, #142	; 0x8e
    6376:	f001 f914 	bl	75a2 <assert_print>
    637a:	4817      	ldr	r0, [pc, #92]	; (63d8 <pend+0x8c>)
    637c:	218e      	movs	r1, #142	; 0x8e
    637e:	f001 f909 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6382:	4814      	ldr	r0, [pc, #80]	; (63d4 <pend+0x88>)
    6384:	f7ff fa2c 	bl	57e0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    6388:	4620      	mov	r0, r4
    638a:	4641      	mov	r1, r8
    638c:	f7ff ffa2 	bl	62d4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6390:	4810      	ldr	r0, [pc, #64]	; (63d4 <pend+0x88>)
    6392:	f7ff fa15 	bl	57c0 <z_spin_unlock_valid>
    6396:	b940      	cbnz	r0, 63aa <pend+0x5e>
    6398:	490f      	ldr	r1, [pc, #60]	; (63d8 <pend+0x8c>)
    639a:	4810      	ldr	r0, [pc, #64]	; (63dc <pend+0x90>)
    639c:	22b9      	movs	r2, #185	; 0xb9
    639e:	f001 f900 	bl	75a2 <assert_print>
    63a2:	480d      	ldr	r0, [pc, #52]	; (63d8 <pend+0x8c>)
    63a4:	21b9      	movs	r1, #185	; 0xb9
    63a6:	f001 f8f5 	bl	7594 <assert_post_action>
	__asm__ volatile(
    63aa:	f387 8811 	msr	BASEPRI, r7
    63ae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    63b2:	f1b5 3fff 	cmp.w	r5, #4294967295
    63b6:	bf08      	it	eq
    63b8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    63bc:	d008      	beq.n	63d0 <pend+0x84>
    63be:	4632      	mov	r2, r6
    63c0:	462b      	mov	r3, r5
    63c2:	f104 0018 	add.w	r0, r4, #24
    63c6:	4906      	ldr	r1, [pc, #24]	; (63e0 <pend+0x94>)
}
    63c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    63cc:	f000 bbec 	b.w	6ba8 <z_add_timeout>
    63d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63d4:	20000b00 	.word	0x20000b00
    63d8:	000084a7 	.word	0x000084a7
    63dc:	00008378 	.word	0x00008378
    63e0:	0000620d 	.word	0x0000620d

000063e4 <z_pend_curr>:
{
    63e4:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    63e6:	4b0e      	ldr	r3, [pc, #56]	; (6420 <z_pend_curr+0x3c>)
{
    63e8:	4605      	mov	r5, r0
	pending_current = _current;
    63ea:	6898      	ldr	r0, [r3, #8]
    63ec:	4b0d      	ldr	r3, [pc, #52]	; (6424 <z_pend_curr+0x40>)
{
    63ee:	460c      	mov	r4, r1
	pending_current = _current;
    63f0:	6018      	str	r0, [r3, #0]
{
    63f2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    63f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    63f8:	f7ff ffa8 	bl	634c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63fc:	4628      	mov	r0, r5
    63fe:	f7ff f9df 	bl	57c0 <z_spin_unlock_valid>
    6402:	b940      	cbnz	r0, 6416 <z_pend_curr+0x32>
    6404:	4908      	ldr	r1, [pc, #32]	; (6428 <z_pend_curr+0x44>)
    6406:	4809      	ldr	r0, [pc, #36]	; (642c <z_pend_curr+0x48>)
    6408:	22d0      	movs	r2, #208	; 0xd0
    640a:	f001 f8ca 	bl	75a2 <assert_print>
    640e:	4806      	ldr	r0, [pc, #24]	; (6428 <z_pend_curr+0x44>)
    6410:	21d0      	movs	r1, #208	; 0xd0
    6412:	f001 f8bf 	bl	7594 <assert_post_action>
    6416:	4620      	mov	r0, r4
}
    6418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    641c:	f7fb bb00 	b.w	1a20 <arch_swap>
    6420:	20000acc 	.word	0x20000acc
    6424:	20000afc 	.word	0x20000afc
    6428:	000084a7 	.word	0x000084a7
    642c:	00008378 	.word	0x00008378

00006430 <z_set_prio>:
{
    6430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6432:	4604      	mov	r4, r0
    6434:	460d      	mov	r5, r1
	__asm__ volatile(
    6436:	f04f 0320 	mov.w	r3, #32
    643a:	f3ef 8611 	mrs	r6, BASEPRI
    643e:	f383 8812 	msr	BASEPRI_MAX, r3
    6442:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6446:	4834      	ldr	r0, [pc, #208]	; (6518 <z_set_prio+0xe8>)
    6448:	f7ff f9ac 	bl	57a4 <z_spin_lock_valid>
    644c:	b940      	cbnz	r0, 6460 <z_set_prio+0x30>
    644e:	4933      	ldr	r1, [pc, #204]	; (651c <z_set_prio+0xec>)
    6450:	4833      	ldr	r0, [pc, #204]	; (6520 <z_set_prio+0xf0>)
    6452:	228e      	movs	r2, #142	; 0x8e
    6454:	f001 f8a5 	bl	75a2 <assert_print>
    6458:	4830      	ldr	r0, [pc, #192]	; (651c <z_set_prio+0xec>)
    645a:	218e      	movs	r1, #142	; 0x8e
    645c:	f001 f89a 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6460:	482d      	ldr	r0, [pc, #180]	; (6518 <z_set_prio+0xe8>)
    6462:	f7ff f9bd 	bl	57e0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    6466:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6468:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    646a:	b26d      	sxtb	r5, r5
    646c:	d151      	bne.n	6512 <z_set_prio+0xe2>
		if (need_sched) {
    646e:	69a2      	ldr	r2, [r4, #24]
    6470:	2a00      	cmp	r2, #0
    6472:	d14e      	bne.n	6512 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6478:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    647a:	482a      	ldr	r0, [pc, #168]	; (6524 <z_set_prio+0xf4>)
    647c:	4621      	mov	r1, r4
    647e:	f7ff fce1 	bl	5e44 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6482:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6484:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6486:	f063 037f 	orn	r3, r3, #127	; 0x7f
    648a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    648c:	4b26      	ldr	r3, [pc, #152]	; (6528 <z_set_prio+0xf8>)
    648e:	429c      	cmp	r4, r3
    6490:	d108      	bne.n	64a4 <z_set_prio+0x74>
    6492:	4926      	ldr	r1, [pc, #152]	; (652c <z_set_prio+0xfc>)
    6494:	4822      	ldr	r0, [pc, #136]	; (6520 <z_set_prio+0xf0>)
    6496:	22ba      	movs	r2, #186	; 0xba
    6498:	f001 f883 	bl	75a2 <assert_print>
    649c:	4823      	ldr	r0, [pc, #140]	; (652c <z_set_prio+0xfc>)
    649e:	21ba      	movs	r1, #186	; 0xba
    64a0:	f001 f878 	bl	7594 <assert_post_action>
	return list->head == list;
    64a4:	4a22      	ldr	r2, [pc, #136]	; (6530 <z_set_prio+0x100>)
	return (node == list->tail) ? NULL : node->next;
    64a6:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64aa:	f102 0520 	add.w	r5, r2, #32
    64ae:	42ab      	cmp	r3, r5
    64b0:	d02a      	beq.n	6508 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    64b2:	b34b      	cbz	r3, 6508 <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
    64b4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    64b8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    64bc:	428f      	cmp	r7, r1
    64be:	d01e      	beq.n	64fe <z_set_prio+0xce>
		return b2 - b1;
    64c0:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    64c2:	2900      	cmp	r1, #0
    64c4:	dd1b      	ble.n	64fe <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
    64c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    64c8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    64cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    64ce:	605c      	str	r4, [r3, #4]
			update_cache(1);
    64d0:	2001      	movs	r0, #1
    64d2:	f7ff fcf3 	bl	5ebc <update_cache>
    64d6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64d8:	480f      	ldr	r0, [pc, #60]	; (6518 <z_set_prio+0xe8>)
    64da:	f7ff f971 	bl	57c0 <z_spin_unlock_valid>
    64de:	b940      	cbnz	r0, 64f2 <z_set_prio+0xc2>
    64e0:	490e      	ldr	r1, [pc, #56]	; (651c <z_set_prio+0xec>)
    64e2:	480f      	ldr	r0, [pc, #60]	; (6520 <z_set_prio+0xf0>)
    64e4:	22b9      	movs	r2, #185	; 0xb9
    64e6:	f001 f85c 	bl	75a2 <assert_print>
    64ea:	480c      	ldr	r0, [pc, #48]	; (651c <z_set_prio+0xec>)
    64ec:	21b9      	movs	r1, #185	; 0xb9
    64ee:	f001 f851 	bl	7594 <assert_post_action>
	__asm__ volatile(
    64f2:	f386 8811 	msr	BASEPRI, r6
    64f6:	f3bf 8f6f 	isb	sy
}
    64fa:	4620      	mov	r0, r4
    64fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    64fe:	4283      	cmp	r3, r0
    6500:	d002      	beq.n	6508 <z_set_prio+0xd8>
    6502:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6504:	2b00      	cmp	r3, #0
    6506:	d1d7      	bne.n	64b8 <z_set_prio+0x88>
	node->prev = tail;
    6508:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    650c:	6004      	str	r4, [r0, #0]
	list->tail = node;
    650e:	6254      	str	r4, [r2, #36]	; 0x24
}
    6510:	e7de      	b.n	64d0 <z_set_prio+0xa0>
			thread->base.prio = prio;
    6512:	73a5      	strb	r5, [r4, #14]
    6514:	2400      	movs	r4, #0
    6516:	e7df      	b.n	64d8 <z_set_prio+0xa8>
    6518:	20000b00 	.word	0x20000b00
    651c:	000084a7 	.word	0x000084a7
    6520:	00008378 	.word	0x00008378
    6524:	20000aec 	.word	0x20000aec
    6528:	20000200 	.word	0x20000200
    652c:	00008ebd 	.word	0x00008ebd
    6530:	20000acc 	.word	0x20000acc

00006534 <z_impl_k_thread_suspend>:
{
    6534:	b570      	push	{r4, r5, r6, lr}
    6536:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6538:	3018      	adds	r0, #24
    653a:	f000 fbe3 	bl	6d04 <z_abort_timeout>
	__asm__ volatile(
    653e:	f04f 0320 	mov.w	r3, #32
    6542:	f3ef 8611 	mrs	r6, BASEPRI
    6546:	f383 8812 	msr	BASEPRI_MAX, r3
    654a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    654e:	4820      	ldr	r0, [pc, #128]	; (65d0 <z_impl_k_thread_suspend+0x9c>)
    6550:	f7ff f928 	bl	57a4 <z_spin_lock_valid>
    6554:	b940      	cbnz	r0, 6568 <z_impl_k_thread_suspend+0x34>
    6556:	491f      	ldr	r1, [pc, #124]	; (65d4 <z_impl_k_thread_suspend+0xa0>)
    6558:	481f      	ldr	r0, [pc, #124]	; (65d8 <z_impl_k_thread_suspend+0xa4>)
    655a:	228e      	movs	r2, #142	; 0x8e
    655c:	f001 f821 	bl	75a2 <assert_print>
    6560:	481c      	ldr	r0, [pc, #112]	; (65d4 <z_impl_k_thread_suspend+0xa0>)
    6562:	218e      	movs	r1, #142	; 0x8e
    6564:	f001 f816 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6568:	4819      	ldr	r0, [pc, #100]	; (65d0 <z_impl_k_thread_suspend+0x9c>)
    656a:	f7ff f939 	bl	57e0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    656e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    6572:	7b63      	ldrb	r3, [r4, #13]
    6574:	2a00      	cmp	r2, #0
    6576:	da06      	bge.n	6586 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    657c:	4817      	ldr	r0, [pc, #92]	; (65dc <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    657e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6580:	4621      	mov	r1, r4
    6582:	f7ff fc5f 	bl	5e44 <z_priq_dumb_remove>
		update_cache(thread == _current);
    6586:	4d16      	ldr	r5, [pc, #88]	; (65e0 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6588:	7b63      	ldrb	r3, [r4, #13]
    658a:	68a8      	ldr	r0, [r5, #8]
    658c:	f043 0310 	orr.w	r3, r3, #16
    6590:	7363      	strb	r3, [r4, #13]
    6592:	1b03      	subs	r3, r0, r4
    6594:	4258      	negs	r0, r3
    6596:	4158      	adcs	r0, r3
    6598:	f7ff fc90 	bl	5ebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    659c:	480c      	ldr	r0, [pc, #48]	; (65d0 <z_impl_k_thread_suspend+0x9c>)
    659e:	f7ff f90f 	bl	57c0 <z_spin_unlock_valid>
    65a2:	b940      	cbnz	r0, 65b6 <z_impl_k_thread_suspend+0x82>
    65a4:	490b      	ldr	r1, [pc, #44]	; (65d4 <z_impl_k_thread_suspend+0xa0>)
    65a6:	480c      	ldr	r0, [pc, #48]	; (65d8 <z_impl_k_thread_suspend+0xa4>)
    65a8:	22b9      	movs	r2, #185	; 0xb9
    65aa:	f000 fffa 	bl	75a2 <assert_print>
    65ae:	4809      	ldr	r0, [pc, #36]	; (65d4 <z_impl_k_thread_suspend+0xa0>)
    65b0:	21b9      	movs	r1, #185	; 0xb9
    65b2:	f000 ffef 	bl	7594 <assert_post_action>
	__asm__ volatile(
    65b6:	f386 8811 	msr	BASEPRI, r6
    65ba:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    65be:	68ab      	ldr	r3, [r5, #8]
    65c0:	42a3      	cmp	r3, r4
    65c2:	d103      	bne.n	65cc <z_impl_k_thread_suspend+0x98>
}
    65c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    65c8:	f001 bb6d 	b.w	7ca6 <z_reschedule_unlocked>
}
    65cc:	bd70      	pop	{r4, r5, r6, pc}
    65ce:	bf00      	nop
    65d0:	20000b00 	.word	0x20000b00
    65d4:	000084a7 	.word	0x000084a7
    65d8:	00008378 	.word	0x00008378
    65dc:	20000aec 	.word	0x20000aec
    65e0:	20000acc 	.word	0x20000acc

000065e4 <k_sched_unlock>:
{
    65e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    65e6:	f04f 0320 	mov.w	r3, #32
    65ea:	f3ef 8511 	mrs	r5, BASEPRI
    65ee:	f383 8812 	msr	BASEPRI_MAX, r3
    65f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65f6:	4824      	ldr	r0, [pc, #144]	; (6688 <k_sched_unlock+0xa4>)
    65f8:	f7ff f8d4 	bl	57a4 <z_spin_lock_valid>
    65fc:	b940      	cbnz	r0, 6610 <k_sched_unlock+0x2c>
    65fe:	4923      	ldr	r1, [pc, #140]	; (668c <k_sched_unlock+0xa8>)
    6600:	4823      	ldr	r0, [pc, #140]	; (6690 <k_sched_unlock+0xac>)
    6602:	228e      	movs	r2, #142	; 0x8e
    6604:	f000 ffcd 	bl	75a2 <assert_print>
    6608:	4820      	ldr	r0, [pc, #128]	; (668c <k_sched_unlock+0xa8>)
    660a:	218e      	movs	r1, #142	; 0x8e
    660c:	f000 ffc2 	bl	7594 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    6610:	4c20      	ldr	r4, [pc, #128]	; (6694 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    6612:	481d      	ldr	r0, [pc, #116]	; (6688 <k_sched_unlock+0xa4>)
    6614:	f7ff f8e4 	bl	57e0 <z_spin_lock_set_owner>
    6618:	68a3      	ldr	r3, [r4, #8]
    661a:	7bdb      	ldrb	r3, [r3, #15]
    661c:	b953      	cbnz	r3, 6634 <k_sched_unlock+0x50>
    661e:	491e      	ldr	r1, [pc, #120]	; (6698 <k_sched_unlock+0xb4>)
    6620:	481b      	ldr	r0, [pc, #108]	; (6690 <k_sched_unlock+0xac>)
    6622:	f240 32bb 	movw	r2, #955	; 0x3bb
    6626:	f000 ffbc 	bl	75a2 <assert_print>
    662a:	481b      	ldr	r0, [pc, #108]	; (6698 <k_sched_unlock+0xb4>)
    662c:	f240 31bb 	movw	r1, #955	; 0x3bb
    6630:	f000 ffb0 	bl	7594 <assert_post_action>
    6634:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    6638:	b153      	cbz	r3, 6650 <k_sched_unlock+0x6c>
    663a:	4917      	ldr	r1, [pc, #92]	; (6698 <k_sched_unlock+0xb4>)
    663c:	4814      	ldr	r0, [pc, #80]	; (6690 <k_sched_unlock+0xac>)
    663e:	f44f 726f 	mov.w	r2, #956	; 0x3bc
    6642:	f000 ffae 	bl	75a2 <assert_print>
    6646:	4814      	ldr	r0, [pc, #80]	; (6698 <k_sched_unlock+0xb4>)
    6648:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    664c:	f000 ffa2 	bl	7594 <assert_post_action>
		++_current->base.sched_locked;
    6650:	68a2      	ldr	r2, [r4, #8]
    6652:	7bd3      	ldrb	r3, [r2, #15]
    6654:	3301      	adds	r3, #1
		update_cache(0);
    6656:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    6658:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    665a:	f7ff fc2f 	bl	5ebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    665e:	480a      	ldr	r0, [pc, #40]	; (6688 <k_sched_unlock+0xa4>)
    6660:	f7ff f8ae 	bl	57c0 <z_spin_unlock_valid>
    6664:	b940      	cbnz	r0, 6678 <k_sched_unlock+0x94>
    6666:	4909      	ldr	r1, [pc, #36]	; (668c <k_sched_unlock+0xa8>)
    6668:	4809      	ldr	r0, [pc, #36]	; (6690 <k_sched_unlock+0xac>)
    666a:	22b9      	movs	r2, #185	; 0xb9
    666c:	f000 ff99 	bl	75a2 <assert_print>
    6670:	4806      	ldr	r0, [pc, #24]	; (668c <k_sched_unlock+0xa8>)
    6672:	21b9      	movs	r1, #185	; 0xb9
    6674:	f000 ff8e 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6678:	f385 8811 	msr	BASEPRI, r5
    667c:	f3bf 8f6f 	isb	sy
}
    6680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    6684:	f001 bb0f 	b.w	7ca6 <z_reschedule_unlocked>
    6688:	20000b00 	.word	0x20000b00
    668c:	000084a7 	.word	0x000084a7
    6690:	00008378 	.word	0x00008378
    6694:	20000acc 	.word	0x20000acc
    6698:	00008ebd 	.word	0x00008ebd

0000669c <z_unpend_first_thread>:
{
    669c:	b538      	push	{r3, r4, r5, lr}
    669e:	4604      	mov	r4, r0
	__asm__ volatile(
    66a0:	f04f 0320 	mov.w	r3, #32
    66a4:	f3ef 8511 	mrs	r5, BASEPRI
    66a8:	f383 8812 	msr	BASEPRI_MAX, r3
    66ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66b0:	4816      	ldr	r0, [pc, #88]	; (670c <z_unpend_first_thread+0x70>)
    66b2:	f7ff f877 	bl	57a4 <z_spin_lock_valid>
    66b6:	b940      	cbnz	r0, 66ca <z_unpend_first_thread+0x2e>
    66b8:	4915      	ldr	r1, [pc, #84]	; (6710 <z_unpend_first_thread+0x74>)
    66ba:	4816      	ldr	r0, [pc, #88]	; (6714 <z_unpend_first_thread+0x78>)
    66bc:	228e      	movs	r2, #142	; 0x8e
    66be:	f000 ff70 	bl	75a2 <assert_print>
    66c2:	4813      	ldr	r0, [pc, #76]	; (6710 <z_unpend_first_thread+0x74>)
    66c4:	218e      	movs	r1, #142	; 0x8e
    66c6:	f000 ff65 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    66ca:	4810      	ldr	r0, [pc, #64]	; (670c <z_unpend_first_thread+0x70>)
    66cc:	f7ff f888 	bl	57e0 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    66d0:	4620      	mov	r0, r4
    66d2:	f001 faf2 	bl	7cba <z_priq_dumb_best>
		if (thread != NULL) {
    66d6:	4604      	mov	r4, r0
    66d8:	b128      	cbz	r0, 66e6 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    66da:	f7ff fbd1 	bl	5e80 <unpend_thread_no_timeout>
    66de:	f104 0018 	add.w	r0, r4, #24
    66e2:	f000 fb0f 	bl	6d04 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66e6:	4809      	ldr	r0, [pc, #36]	; (670c <z_unpend_first_thread+0x70>)
    66e8:	f7ff f86a 	bl	57c0 <z_spin_unlock_valid>
    66ec:	b940      	cbnz	r0, 6700 <z_unpend_first_thread+0x64>
    66ee:	4908      	ldr	r1, [pc, #32]	; (6710 <z_unpend_first_thread+0x74>)
    66f0:	4808      	ldr	r0, [pc, #32]	; (6714 <z_unpend_first_thread+0x78>)
    66f2:	22b9      	movs	r2, #185	; 0xb9
    66f4:	f000 ff55 	bl	75a2 <assert_print>
    66f8:	4805      	ldr	r0, [pc, #20]	; (6710 <z_unpend_first_thread+0x74>)
    66fa:	21b9      	movs	r1, #185	; 0xb9
    66fc:	f000 ff4a 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6700:	f385 8811 	msr	BASEPRI, r5
    6704:	f3bf 8f6f 	isb	sy
}
    6708:	4620      	mov	r0, r4
    670a:	bd38      	pop	{r3, r4, r5, pc}
    670c:	20000b00 	.word	0x20000b00
    6710:	000084a7 	.word	0x000084a7
    6714:	00008378 	.word	0x00008378

00006718 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6718:	4b04      	ldr	r3, [pc, #16]	; (672c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    671a:	2100      	movs	r1, #0
    671c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    6720:	e9c3 2208 	strd	r2, r2, [r3, #32]
    6724:	4608      	mov	r0, r1
    6726:	f7ff baaf 	b.w	5c88 <k_sched_time_slice_set>
    672a:	bf00      	nop
    672c:	20000acc 	.word	0x20000acc

00006730 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    6730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6732:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6736:	b153      	cbz	r3, 674e <z_impl_k_yield+0x1e>
    6738:	4938      	ldr	r1, [pc, #224]	; (681c <z_impl_k_yield+0xec>)
    673a:	4839      	ldr	r0, [pc, #228]	; (6820 <z_impl_k_yield+0xf0>)
    673c:	f240 5232 	movw	r2, #1330	; 0x532
    6740:	f000 ff2f 	bl	75a2 <assert_print>
    6744:	4835      	ldr	r0, [pc, #212]	; (681c <z_impl_k_yield+0xec>)
    6746:	f240 5132 	movw	r1, #1330	; 0x532
    674a:	f000 ff23 	bl	7594 <assert_post_action>
	__asm__ volatile(
    674e:	f04f 0320 	mov.w	r3, #32
    6752:	f3ef 8611 	mrs	r6, BASEPRI
    6756:	f383 8812 	msr	BASEPRI_MAX, r3
    675a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    675e:	4831      	ldr	r0, [pc, #196]	; (6824 <z_impl_k_yield+0xf4>)
    6760:	f7ff f820 	bl	57a4 <z_spin_lock_valid>
    6764:	b940      	cbnz	r0, 6778 <z_impl_k_yield+0x48>
    6766:	4930      	ldr	r1, [pc, #192]	; (6828 <z_impl_k_yield+0xf8>)
    6768:	482d      	ldr	r0, [pc, #180]	; (6820 <z_impl_k_yield+0xf0>)
    676a:	228e      	movs	r2, #142	; 0x8e
    676c:	f000 ff19 	bl	75a2 <assert_print>
    6770:	482d      	ldr	r0, [pc, #180]	; (6828 <z_impl_k_yield+0xf8>)
    6772:	218e      	movs	r1, #142	; 0x8e
    6774:	f000 ff0e 	bl	7594 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6778:	4d2c      	ldr	r5, [pc, #176]	; (682c <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
    677a:	482a      	ldr	r0, [pc, #168]	; (6824 <z_impl_k_yield+0xf4>)
    677c:	f7ff f830 	bl	57e0 <z_spin_lock_set_owner>
    6780:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6782:	7b4b      	ldrb	r3, [r1, #13]
    6784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6788:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    678a:	f105 0020 	add.w	r0, r5, #32
    678e:	f7ff fb59 	bl	5e44 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6792:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6794:	7b63      	ldrb	r3, [r4, #13]
    6796:	f063 037f 	orn	r3, r3, #127	; 0x7f
    679a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    679c:	4b24      	ldr	r3, [pc, #144]	; (6830 <z_impl_k_yield+0x100>)
    679e:	429c      	cmp	r4, r3
    67a0:	d108      	bne.n	67b4 <z_impl_k_yield+0x84>
    67a2:	491e      	ldr	r1, [pc, #120]	; (681c <z_impl_k_yield+0xec>)
    67a4:	481e      	ldr	r0, [pc, #120]	; (6820 <z_impl_k_yield+0xf0>)
    67a6:	22ba      	movs	r2, #186	; 0xba
    67a8:	f000 fefb 	bl	75a2 <assert_print>
    67ac:	481b      	ldr	r0, [pc, #108]	; (681c <z_impl_k_yield+0xec>)
    67ae:	21ba      	movs	r1, #186	; 0xba
    67b0:	f000 fef0 	bl	7594 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    67b4:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    67b8:	481e      	ldr	r0, [pc, #120]	; (6834 <z_impl_k_yield+0x104>)
    67ba:	4283      	cmp	r3, r0
    67bc:	d028      	beq.n	6810 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    67be:	b33b      	cbz	r3, 6810 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
    67c0:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    67c4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    67c8:	4297      	cmp	r7, r2
    67ca:	d01c      	beq.n	6806 <z_impl_k_yield+0xd6>
		return b2 - b1;
    67cc:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    67ce:	2a00      	cmp	r2, #0
    67d0:	dd19      	ble.n	6806 <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
    67d2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    67d4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    67d8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    67da:	605c      	str	r4, [r3, #4]
	update_cache(1);
    67dc:	2001      	movs	r0, #1
    67de:	f7ff fb6d 	bl	5ebc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67e2:	4810      	ldr	r0, [pc, #64]	; (6824 <z_impl_k_yield+0xf4>)
    67e4:	f7fe ffec 	bl	57c0 <z_spin_unlock_valid>
    67e8:	b940      	cbnz	r0, 67fc <z_impl_k_yield+0xcc>
    67ea:	490f      	ldr	r1, [pc, #60]	; (6828 <z_impl_k_yield+0xf8>)
    67ec:	480c      	ldr	r0, [pc, #48]	; (6820 <z_impl_k_yield+0xf0>)
    67ee:	22d0      	movs	r2, #208	; 0xd0
    67f0:	f000 fed7 	bl	75a2 <assert_print>
    67f4:	480c      	ldr	r0, [pc, #48]	; (6828 <z_impl_k_yield+0xf8>)
    67f6:	21d0      	movs	r1, #208	; 0xd0
    67f8:	f000 fecc 	bl	7594 <assert_post_action>
    67fc:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    67fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6802:	f7fb b90d 	b.w	1a20 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6806:	428b      	cmp	r3, r1
    6808:	d002      	beq.n	6810 <z_impl_k_yield+0xe0>
    680a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    680c:	2b00      	cmp	r3, #0
    680e:	d1d9      	bne.n	67c4 <z_impl_k_yield+0x94>
	node->prev = tail;
    6810:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6814:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6816:	626c      	str	r4, [r5, #36]	; 0x24
}
    6818:	e7e0      	b.n	67dc <z_impl_k_yield+0xac>
    681a:	bf00      	nop
    681c:	00008ebd 	.word	0x00008ebd
    6820:	00008378 	.word	0x00008378
    6824:	20000b00 	.word	0x20000b00
    6828:	000084a7 	.word	0x000084a7
    682c:	20000acc 	.word	0x20000acc
    6830:	20000200 	.word	0x20000200
    6834:	20000aec 	.word	0x20000aec

00006838 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    6838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    683c:	4605      	mov	r5, r0
    683e:	460e      	mov	r6, r1
    6840:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6844:	b153      	cbz	r3, 685c <z_tick_sleep+0x24>
    6846:	493a      	ldr	r1, [pc, #232]	; (6930 <z_tick_sleep+0xf8>)
    6848:	483a      	ldr	r0, [pc, #232]	; (6934 <z_tick_sleep+0xfc>)
    684a:	f240 524e 	movw	r2, #1358	; 0x54e
    684e:	f000 fea8 	bl	75a2 <assert_print>
    6852:	4837      	ldr	r0, [pc, #220]	; (6930 <z_tick_sleep+0xf8>)
    6854:	f240 514e 	movw	r1, #1358	; 0x54e
    6858:	f000 fe9c 	bl	7594 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    685c:	ea55 0306 	orrs.w	r3, r5, r6
    6860:	d103      	bne.n	686a <z_tick_sleep+0x32>
	z_impl_k_yield();
    6862:	f7ff ff65 	bl	6730 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    6866:	2000      	movs	r0, #0
    6868:	e05f      	b.n	692a <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
    686a:	f06f 0401 	mvn.w	r4, #1
    686e:	1b64      	subs	r4, r4, r5
    6870:	f04f 33ff 	mov.w	r3, #4294967295
    6874:	eb63 0306 	sbc.w	r3, r3, r6
    6878:	2c01      	cmp	r4, #1
    687a:	f173 0300 	sbcs.w	r3, r3, #0
    687e:	da02      	bge.n	6886 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6880:	f001 fa21 	bl	7cc6 <sys_clock_tick_get_32>
    6884:	1944      	adds	r4, r0, r5
    6886:	f04f 0320 	mov.w	r3, #32
    688a:	f3ef 8811 	mrs	r8, BASEPRI
    688e:	f383 8812 	msr	BASEPRI_MAX, r3
    6892:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6896:	4828      	ldr	r0, [pc, #160]	; (6938 <z_tick_sleep+0x100>)
    6898:	f7fe ff84 	bl	57a4 <z_spin_lock_valid>
    689c:	b940      	cbnz	r0, 68b0 <z_tick_sleep+0x78>
    689e:	4927      	ldr	r1, [pc, #156]	; (693c <z_tick_sleep+0x104>)
    68a0:	4824      	ldr	r0, [pc, #144]	; (6934 <z_tick_sleep+0xfc>)
    68a2:	228e      	movs	r2, #142	; 0x8e
    68a4:	f000 fe7d 	bl	75a2 <assert_print>
    68a8:	4824      	ldr	r0, [pc, #144]	; (693c <z_tick_sleep+0x104>)
    68aa:	218e      	movs	r1, #142	; 0x8e
    68ac:	f000 fe72 	bl	7594 <assert_post_action>
	pending_current = _current;
    68b0:	4f23      	ldr	r7, [pc, #140]	; (6940 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
    68b2:	4821      	ldr	r0, [pc, #132]	; (6938 <z_tick_sleep+0x100>)
    68b4:	f7fe ff94 	bl	57e0 <z_spin_lock_set_owner>
    68b8:	4b22      	ldr	r3, [pc, #136]	; (6944 <z_tick_sleep+0x10c>)
    68ba:	68b8      	ldr	r0, [r7, #8]
    68bc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    68be:	f7ff fced 	bl	629c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    68c2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    68c4:	4920      	ldr	r1, [pc, #128]	; (6948 <z_tick_sleep+0x110>)
    68c6:	462a      	mov	r2, r5
    68c8:	4633      	mov	r3, r6
    68ca:	3018      	adds	r0, #24
    68cc:	f000 f96c 	bl	6ba8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    68d0:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68d2:	4819      	ldr	r0, [pc, #100]	; (6938 <z_tick_sleep+0x100>)
    68d4:	7b53      	ldrb	r3, [r2, #13]
    68d6:	f043 0310 	orr.w	r3, r3, #16
    68da:	7353      	strb	r3, [r2, #13]
    68dc:	f7fe ff70 	bl	57c0 <z_spin_unlock_valid>
    68e0:	b940      	cbnz	r0, 68f4 <z_tick_sleep+0xbc>
    68e2:	4916      	ldr	r1, [pc, #88]	; (693c <z_tick_sleep+0x104>)
    68e4:	4813      	ldr	r0, [pc, #76]	; (6934 <z_tick_sleep+0xfc>)
    68e6:	22d0      	movs	r2, #208	; 0xd0
    68e8:	f000 fe5b 	bl	75a2 <assert_print>
    68ec:	4813      	ldr	r0, [pc, #76]	; (693c <z_tick_sleep+0x104>)
    68ee:	21d0      	movs	r1, #208	; 0xd0
    68f0:	f000 fe50 	bl	7594 <assert_post_action>
    68f4:	4640      	mov	r0, r8
    68f6:	f7fb f893 	bl	1a20 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    68fa:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    68fc:	7b5b      	ldrb	r3, [r3, #13]
    68fe:	06db      	lsls	r3, r3, #27
    6900:	d50a      	bpl.n	6918 <z_tick_sleep+0xe0>
    6902:	490b      	ldr	r1, [pc, #44]	; (6930 <z_tick_sleep+0xf8>)
    6904:	480b      	ldr	r0, [pc, #44]	; (6934 <z_tick_sleep+0xfc>)
    6906:	f240 526f 	movw	r2, #1391	; 0x56f
    690a:	f000 fe4a 	bl	75a2 <assert_print>
    690e:	4808      	ldr	r0, [pc, #32]	; (6930 <z_tick_sleep+0xf8>)
    6910:	f240 516f 	movw	r1, #1391	; 0x56f
    6914:	f000 fe3e 	bl	7594 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6918:	f001 f9d5 	bl	7cc6 <sys_clock_tick_get_32>
    691c:	1a20      	subs	r0, r4, r0
    691e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    6922:	2801      	cmp	r0, #1
    6924:	f173 0300 	sbcs.w	r3, r3, #0
    6928:	db9d      	blt.n	6866 <z_tick_sleep+0x2e>
}
    692a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    692e:	bf00      	nop
    6930:	00008ebd 	.word	0x00008ebd
    6934:	00008378 	.word	0x00008378
    6938:	20000b00 	.word	0x20000b00
    693c:	000084a7 	.word	0x000084a7
    6940:	20000acc 	.word	0x20000acc
    6944:	20000afc 	.word	0x20000afc
    6948:	0000620d 	.word	0x0000620d

0000694c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    694c:	b538      	push	{r3, r4, r5, lr}
    694e:	4605      	mov	r5, r0
    6950:	460c      	mov	r4, r1
    6952:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6956:	b153      	cbz	r3, 696e <z_impl_k_sleep+0x22>
    6958:	4911      	ldr	r1, [pc, #68]	; (69a0 <z_impl_k_sleep+0x54>)
    695a:	4812      	ldr	r0, [pc, #72]	; (69a4 <z_impl_k_sleep+0x58>)
    695c:	f240 527e 	movw	r2, #1406	; 0x57e
    6960:	f000 fe1f 	bl	75a2 <assert_print>
    6964:	480e      	ldr	r0, [pc, #56]	; (69a0 <z_impl_k_sleep+0x54>)
    6966:	f240 517e 	movw	r1, #1406	; 0x57e
    696a:	f000 fe13 	bl	7594 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    696e:	f1b4 3fff 	cmp.w	r4, #4294967295
    6972:	bf08      	it	eq
    6974:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    6978:	d106      	bne.n	6988 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
    697a:	4b0b      	ldr	r3, [pc, #44]	; (69a8 <z_impl_k_sleep+0x5c>)
    697c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    697e:	f7ff fdd9 	bl	6534 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6982:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6986:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    6988:	4628      	mov	r0, r5
    698a:	4621      	mov	r1, r4
    698c:	f7ff ff54 	bl	6838 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    6990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6994:	fb80 0303 	smull	r0, r3, r0, r3
    6998:	0bc0      	lsrs	r0, r0, #15
    699a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    699e:	e7f2      	b.n	6986 <z_impl_k_sleep+0x3a>
    69a0:	00008ebd 	.word	0x00008ebd
    69a4:	00008378 	.word	0x00008378
    69a8:	20000acc 	.word	0x20000acc

000069ac <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    69ac:	4b01      	ldr	r3, [pc, #4]	; (69b4 <z_impl_z_current_get+0x8>)
    69ae:	6898      	ldr	r0, [r3, #8]
    69b0:	4770      	bx	lr
    69b2:	bf00      	nop
    69b4:	20000acc 	.word	0x20000acc

000069b8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    69b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69bc:	4604      	mov	r4, r0
    69be:	f04f 0320 	mov.w	r3, #32
    69c2:	f3ef 8611 	mrs	r6, BASEPRI
    69c6:	f383 8812 	msr	BASEPRI_MAX, r3
    69ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69ce:	483e      	ldr	r0, [pc, #248]	; (6ac8 <z_thread_abort+0x110>)
    69d0:	f7fe fee8 	bl	57a4 <z_spin_lock_valid>
    69d4:	b940      	cbnz	r0, 69e8 <z_thread_abort+0x30>
    69d6:	493d      	ldr	r1, [pc, #244]	; (6acc <z_thread_abort+0x114>)
    69d8:	483d      	ldr	r0, [pc, #244]	; (6ad0 <z_thread_abort+0x118>)
    69da:	228e      	movs	r2, #142	; 0x8e
    69dc:	f000 fde1 	bl	75a2 <assert_print>
    69e0:	483a      	ldr	r0, [pc, #232]	; (6acc <z_thread_abort+0x114>)
    69e2:	218e      	movs	r1, #142	; 0x8e
    69e4:	f000 fdd6 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    69e8:	4837      	ldr	r0, [pc, #220]	; (6ac8 <z_thread_abort+0x110>)
    69ea:	f7fe fef9 	bl	57e0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    69ee:	7b63      	ldrb	r3, [r4, #13]
    69f0:	071a      	lsls	r2, r3, #28
    69f2:	d512      	bpl.n	6a1a <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69f4:	4834      	ldr	r0, [pc, #208]	; (6ac8 <z_thread_abort+0x110>)
    69f6:	f7fe fee3 	bl	57c0 <z_spin_unlock_valid>
    69fa:	b940      	cbnz	r0, 6a0e <z_thread_abort+0x56>
    69fc:	4933      	ldr	r1, [pc, #204]	; (6acc <z_thread_abort+0x114>)
    69fe:	4834      	ldr	r0, [pc, #208]	; (6ad0 <z_thread_abort+0x118>)
    6a00:	22b9      	movs	r2, #185	; 0xb9
    6a02:	f000 fdce 	bl	75a2 <assert_print>
    6a06:	4831      	ldr	r0, [pc, #196]	; (6acc <z_thread_abort+0x114>)
    6a08:	21b9      	movs	r1, #185	; 0xb9
    6a0a:	f000 fdc3 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6a0e:	f386 8811 	msr	BASEPRI, r6
    6a12:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6a1a:	f023 0220 	bic.w	r2, r3, #32
    6a1e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6a22:	09d2      	lsrs	r2, r2, #7
    6a24:	d138      	bne.n	6a98 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6a26:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6a28:	68a3      	ldr	r3, [r4, #8]
    6a2a:	b113      	cbz	r3, 6a32 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    6a2c:	4620      	mov	r0, r4
    6a2e:	f7ff fa27 	bl	5e80 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6a32:	f104 0018 	add.w	r0, r4, #24
    6a36:	f000 f965 	bl	6d04 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6a3a:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6a3e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6a42:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a44:	42bd      	cmp	r5, r7
    6a46:	d000      	beq.n	6a4a <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6a48:	bb85      	cbnz	r5, 6aac <z_thread_abort+0xf4>
		update_cache(1);
    6a4a:	2001      	movs	r0, #1
    6a4c:	f7ff fa36 	bl	5ebc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6a50:	4b20      	ldr	r3, [pc, #128]	; (6ad4 <z_thread_abort+0x11c>)
    6a52:	689b      	ldr	r3, [r3, #8]
    6a54:	42a3      	cmp	r3, r4
    6a56:	d1cd      	bne.n	69f4 <z_thread_abort+0x3c>
    6a58:	f3ef 8305 	mrs	r3, IPSR
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d1c9      	bne.n	69f4 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a60:	4819      	ldr	r0, [pc, #100]	; (6ac8 <z_thread_abort+0x110>)
    6a62:	f7fe fead 	bl	57c0 <z_spin_unlock_valid>
    6a66:	b940      	cbnz	r0, 6a7a <z_thread_abort+0xc2>
    6a68:	4918      	ldr	r1, [pc, #96]	; (6acc <z_thread_abort+0x114>)
    6a6a:	4819      	ldr	r0, [pc, #100]	; (6ad0 <z_thread_abort+0x118>)
    6a6c:	22d0      	movs	r2, #208	; 0xd0
    6a6e:	f000 fd98 	bl	75a2 <assert_print>
    6a72:	4816      	ldr	r0, [pc, #88]	; (6acc <z_thread_abort+0x114>)
    6a74:	21d0      	movs	r1, #208	; 0xd0
    6a76:	f000 fd8d 	bl	7594 <assert_post_action>
    6a7a:	4630      	mov	r0, r6
    6a7c:	f7fa ffd0 	bl	1a20 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    6a80:	4915      	ldr	r1, [pc, #84]	; (6ad8 <z_thread_abort+0x120>)
    6a82:	4813      	ldr	r0, [pc, #76]	; (6ad0 <z_thread_abort+0x118>)
    6a84:	f240 62ac 	movw	r2, #1708	; 0x6ac
    6a88:	f000 fd8b 	bl	75a2 <assert_print>
    6a8c:	4812      	ldr	r0, [pc, #72]	; (6ad8 <z_thread_abort+0x120>)
    6a8e:	f240 61ac 	movw	r1, #1708	; 0x6ac
    6a92:	f000 fd7f 	bl	7594 <assert_post_action>
    6a96:	e7ad      	b.n	69f4 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6a98:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6a9c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    6aa0:	480e      	ldr	r0, [pc, #56]	; (6adc <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6aa2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6aa4:	4621      	mov	r1, r4
    6aa6:	f7ff f9cd 	bl	5e44 <z_priq_dumb_remove>
}
    6aaa:	e7bd      	b.n	6a28 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    6aac:	4628      	mov	r0, r5
    6aae:	f7ff f9e7 	bl	5e80 <unpend_thread_no_timeout>
    6ab2:	f105 0018 	add.w	r0, r5, #24
    6ab6:	f000 f925 	bl	6d04 <z_abort_timeout>
    6aba:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    6abe:	4628      	mov	r0, r5
    6ac0:	f7ff fae2 	bl	6088 <ready_thread>
    6ac4:	e7bd      	b.n	6a42 <z_thread_abort+0x8a>
    6ac6:	bf00      	nop
    6ac8:	20000b00 	.word	0x20000b00
    6acc:	000084a7 	.word	0x000084a7
    6ad0:	00008378 	.word	0x00008378
    6ad4:	20000acc 	.word	0x20000acc
    6ad8:	00008ebd 	.word	0x00008ebd
    6adc:	20000aec 	.word	0x20000aec

00006ae0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6ae0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    6ae2:	4806      	ldr	r0, [pc, #24]	; (6afc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6ae4:	4a06      	ldr	r2, [pc, #24]	; (6b00 <z_data_copy+0x20>)
    6ae6:	4907      	ldr	r1, [pc, #28]	; (6b04 <z_data_copy+0x24>)
    6ae8:	1a12      	subs	r2, r2, r0
    6aea:	f001 f894 	bl	7c16 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6af2:	4a05      	ldr	r2, [pc, #20]	; (6b08 <z_data_copy+0x28>)
    6af4:	4905      	ldr	r1, [pc, #20]	; (6b0c <z_data_copy+0x2c>)
    6af6:	4806      	ldr	r0, [pc, #24]	; (6b10 <z_data_copy+0x30>)
    6af8:	f001 b88d 	b.w	7c16 <z_early_memcpy>
    6afc:	20000000 	.word	0x20000000
    6b00:	200001e0 	.word	0x200001e0
    6b04:	00008f38 	.word	0x00008f38
    6b08:	00000000 	.word	0x00000000
    6b0c:	00008f38 	.word	0x00008f38
    6b10:	20000000 	.word	0x20000000

00006b14 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6b14:	4b03      	ldr	r3, [pc, #12]	; (6b24 <elapsed+0x10>)
    6b16:	681b      	ldr	r3, [r3, #0]
    6b18:	b90b      	cbnz	r3, 6b1e <elapsed+0xa>
    6b1a:	f7fc bc4f 	b.w	33bc <sys_clock_elapsed>
}
    6b1e:	2000      	movs	r0, #0
    6b20:	4770      	bx	lr
    6b22:	bf00      	nop
    6b24:	20000b0c 	.word	0x20000b0c

00006b28 <next_timeout>:
	return list->head == list;
    6b28:	4b10      	ldr	r3, [pc, #64]	; (6b6c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    6b2a:	b510      	push	{r4, lr}
    6b2c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b2e:	429c      	cmp	r4, r3
    6b30:	bf08      	it	eq
    6b32:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6b34:	f7ff ffee 	bl	6b14 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    6b38:	b1a4      	cbz	r4, 6b64 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6b3a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    6b3e:	1a1b      	subs	r3, r3, r0
    6b40:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    6b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6b48:	f170 0200 	sbcs.w	r2, r0, #0
    6b4c:	da0a      	bge.n	6b64 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    6b4e:	2800      	cmp	r0, #0
    6b50:	bfac      	ite	ge
    6b52:	4618      	movge	r0, r3
    6b54:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6b56:	4b06      	ldr	r3, [pc, #24]	; (6b70 <next_timeout+0x48>)
    6b58:	691b      	ldr	r3, [r3, #16]
    6b5a:	b113      	cbz	r3, 6b62 <next_timeout+0x3a>
    6b5c:	4298      	cmp	r0, r3
    6b5e:	bfa8      	it	ge
    6b60:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6b62:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    6b64:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6b68:	e7f5      	b.n	6b56 <next_timeout+0x2e>
    6b6a:	bf00      	nop
    6b6c:	200000ec 	.word	0x200000ec
    6b70:	20000acc 	.word	0x20000acc

00006b74 <remove_timeout>:
{
    6b74:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    6b76:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6b78:	b168      	cbz	r0, 6b96 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    6b7a:	4a0a      	ldr	r2, [pc, #40]	; (6ba4 <remove_timeout+0x30>)
    6b7c:	6852      	ldr	r2, [r2, #4]
    6b7e:	4290      	cmp	r0, r2
    6b80:	d009      	beq.n	6b96 <remove_timeout+0x22>
	if (next(t) != NULL) {
    6b82:	b143      	cbz	r3, 6b96 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6b84:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6b88:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6b8c:	1912      	adds	r2, r2, r4
    6b8e:	eb41 0105 	adc.w	r1, r1, r5
    6b92:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    6b96:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    6b98:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6b9a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6b9c:	2300      	movs	r3, #0
	node->prev = NULL;
    6b9e:	e9c0 3300 	strd	r3, r3, [r0]
}
    6ba2:	bd30      	pop	{r4, r5, pc}
    6ba4:	200000ec 	.word	0x200000ec

00006ba8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
    6bac:	bf08      	it	eq
    6bae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bb6:	4604      	mov	r4, r0
    6bb8:	460e      	mov	r6, r1
    6bba:	4698      	mov	r8, r3
    6bbc:	4615      	mov	r5, r2
    6bbe:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6bc0:	f000 8090 	beq.w	6ce4 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6bc4:	6803      	ldr	r3, [r0, #0]
    6bc6:	b143      	cbz	r3, 6bda <z_add_timeout+0x32>
    6bc8:	4947      	ldr	r1, [pc, #284]	; (6ce8 <z_add_timeout+0x140>)
    6bca:	4848      	ldr	r0, [pc, #288]	; (6cec <z_add_timeout+0x144>)
    6bcc:	2263      	movs	r2, #99	; 0x63
    6bce:	f000 fce8 	bl	75a2 <assert_print>
    6bd2:	4845      	ldr	r0, [pc, #276]	; (6ce8 <z_add_timeout+0x140>)
    6bd4:	2163      	movs	r1, #99	; 0x63
    6bd6:	f000 fcdd 	bl	7594 <assert_post_action>
	to->fn = fn;
    6bda:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    6bdc:	f04f 0320 	mov.w	r3, #32
    6be0:	f3ef 8611 	mrs	r6, BASEPRI
    6be4:	f383 8812 	msr	BASEPRI_MAX, r3
    6be8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bec:	4840      	ldr	r0, [pc, #256]	; (6cf0 <z_add_timeout+0x148>)
    6bee:	f7fe fdd9 	bl	57a4 <z_spin_lock_valid>
    6bf2:	b940      	cbnz	r0, 6c06 <z_add_timeout+0x5e>
    6bf4:	493f      	ldr	r1, [pc, #252]	; (6cf4 <z_add_timeout+0x14c>)
    6bf6:	483d      	ldr	r0, [pc, #244]	; (6cec <z_add_timeout+0x144>)
    6bf8:	228e      	movs	r2, #142	; 0x8e
    6bfa:	f000 fcd2 	bl	75a2 <assert_print>
    6bfe:	483d      	ldr	r0, [pc, #244]	; (6cf4 <z_add_timeout+0x14c>)
    6c00:	218e      	movs	r1, #142	; 0x8e
    6c02:	f000 fcc7 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6c06:	483a      	ldr	r0, [pc, #232]	; (6cf0 <z_add_timeout+0x148>)
    6c08:	f7fe fdea 	bl	57e0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6c0c:	f06f 0201 	mvn.w	r2, #1
    6c10:	1b53      	subs	r3, r2, r5
    6c12:	f04f 30ff 	mov.w	r0, #4294967295
    6c16:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	db1b      	blt.n	6c56 <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6c1e:	4b36      	ldr	r3, [pc, #216]	; (6cf8 <z_add_timeout+0x150>)
    6c20:	e9d3 1300 	ldrd	r1, r3, [r3]
    6c24:	1a52      	subs	r2, r2, r1
    6c26:	eb60 0303 	sbc.w	r3, r0, r3
    6c2a:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    6c2c:	eb63 0707 	sbc.w	r7, r3, r7
    6c30:	2d01      	cmp	r5, #1
    6c32:	f177 0300 	sbcs.w	r3, r7, #0
    6c36:	bfbc      	itt	lt
    6c38:	2501      	movlt	r5, #1
    6c3a:	2700      	movlt	r7, #0
    6c3c:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
    6c40:	4a2e      	ldr	r2, [pc, #184]	; (6cfc <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
    6c42:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c46:	4293      	cmp	r3, r2
    6c48:	d118      	bne.n	6c7c <z_add_timeout+0xd4>
	node->prev = tail;
    6c4a:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    6c4e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    6c52:	6054      	str	r4, [r2, #4]
}
    6c54:	e026      	b.n	6ca4 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6c56:	f7ff ff5d 	bl	6b14 <elapsed>
    6c5a:	3501      	adds	r5, #1
    6c5c:	f148 0800 	adc.w	r8, r8, #0
    6c60:	182d      	adds	r5, r5, r0
    6c62:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
    6c66:	e9c4 5004 	strd	r5, r0, [r4, #16]
    6c6a:	e7e9      	b.n	6c40 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    6c6c:	1a09      	subs	r1, r1, r0
    6c6e:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    6c72:	459c      	cmp	ip, r3
    6c74:	e9c4 1504 	strd	r1, r5, [r4, #16]
    6c78:	d0e7      	beq.n	6c4a <z_add_timeout+0xa2>
    6c7a:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d0e4      	beq.n	6c4a <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
    6c80:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    6c84:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    6c88:	4281      	cmp	r1, r0
    6c8a:	eb75 0e07 	sbcs.w	lr, r5, r7
    6c8e:	daed      	bge.n	6c6c <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
    6c90:	1a41      	subs	r1, r0, r1
    6c92:	eb67 0505 	sbc.w	r5, r7, r5
    6c96:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6c9a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6c9c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    6ca0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6ca2:	605c      	str	r4, [r3, #4]
	return list->head == list;
    6ca4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ca6:	4293      	cmp	r3, r2
    6ca8:	d00b      	beq.n	6cc2 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6caa:	429c      	cmp	r4, r3
    6cac:	d109      	bne.n	6cc2 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6cae:	f7ff ff3b 	bl	6b28 <next_timeout>

			if (next_time == 0 ||
    6cb2:	b118      	cbz	r0, 6cbc <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
    6cb4:	4b12      	ldr	r3, [pc, #72]	; (6d00 <z_add_timeout+0x158>)
			if (next_time == 0 ||
    6cb6:	691b      	ldr	r3, [r3, #16]
    6cb8:	4283      	cmp	r3, r0
    6cba:	d002      	beq.n	6cc2 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
    6cbc:	2100      	movs	r1, #0
    6cbe:	f7fc fb4b 	bl	3358 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6cc2:	480b      	ldr	r0, [pc, #44]	; (6cf0 <z_add_timeout+0x148>)
    6cc4:	f7fe fd7c 	bl	57c0 <z_spin_unlock_valid>
    6cc8:	b940      	cbnz	r0, 6cdc <z_add_timeout+0x134>
    6cca:	490a      	ldr	r1, [pc, #40]	; (6cf4 <z_add_timeout+0x14c>)
    6ccc:	4807      	ldr	r0, [pc, #28]	; (6cec <z_add_timeout+0x144>)
    6cce:	22b9      	movs	r2, #185	; 0xb9
    6cd0:	f000 fc67 	bl	75a2 <assert_print>
    6cd4:	4807      	ldr	r0, [pc, #28]	; (6cf4 <z_add_timeout+0x14c>)
    6cd6:	21b9      	movs	r1, #185	; 0xb9
    6cd8:	f000 fc5c 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6cdc:	f386 8811 	msr	BASEPRI, r6
    6ce0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ce8:	00008edf 	.word	0x00008edf
    6cec:	00008378 	.word	0x00008378
    6cf0:	20000b10 	.word	0x20000b10
    6cf4:	000084a7 	.word	0x000084a7
    6cf8:	20000300 	.word	0x20000300
    6cfc:	200000ec 	.word	0x200000ec
    6d00:	20000acc 	.word	0x20000acc

00006d04 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    6d04:	b538      	push	{r3, r4, r5, lr}
    6d06:	4604      	mov	r4, r0
	__asm__ volatile(
    6d08:	f04f 0320 	mov.w	r3, #32
    6d0c:	f3ef 8511 	mrs	r5, BASEPRI
    6d10:	f383 8812 	msr	BASEPRI_MAX, r3
    6d14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d18:	4815      	ldr	r0, [pc, #84]	; (6d70 <z_abort_timeout+0x6c>)
    6d1a:	f7fe fd43 	bl	57a4 <z_spin_lock_valid>
    6d1e:	b940      	cbnz	r0, 6d32 <z_abort_timeout+0x2e>
    6d20:	4914      	ldr	r1, [pc, #80]	; (6d74 <z_abort_timeout+0x70>)
    6d22:	4815      	ldr	r0, [pc, #84]	; (6d78 <z_abort_timeout+0x74>)
    6d24:	228e      	movs	r2, #142	; 0x8e
    6d26:	f000 fc3c 	bl	75a2 <assert_print>
    6d2a:	4812      	ldr	r0, [pc, #72]	; (6d74 <z_abort_timeout+0x70>)
    6d2c:	218e      	movs	r1, #142	; 0x8e
    6d2e:	f000 fc31 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d32:	480f      	ldr	r0, [pc, #60]	; (6d70 <z_abort_timeout+0x6c>)
    6d34:	f7fe fd54 	bl	57e0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    6d38:	6823      	ldr	r3, [r4, #0]
    6d3a:	b1b3      	cbz	r3, 6d6a <z_abort_timeout+0x66>
			remove_timeout(to);
    6d3c:	4620      	mov	r0, r4
    6d3e:	f7ff ff19 	bl	6b74 <remove_timeout>
			ret = 0;
    6d42:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d44:	480a      	ldr	r0, [pc, #40]	; (6d70 <z_abort_timeout+0x6c>)
    6d46:	f7fe fd3b 	bl	57c0 <z_spin_unlock_valid>
    6d4a:	b940      	cbnz	r0, 6d5e <z_abort_timeout+0x5a>
    6d4c:	4909      	ldr	r1, [pc, #36]	; (6d74 <z_abort_timeout+0x70>)
    6d4e:	480a      	ldr	r0, [pc, #40]	; (6d78 <z_abort_timeout+0x74>)
    6d50:	22b9      	movs	r2, #185	; 0xb9
    6d52:	f000 fc26 	bl	75a2 <assert_print>
    6d56:	4807      	ldr	r0, [pc, #28]	; (6d74 <z_abort_timeout+0x70>)
    6d58:	21b9      	movs	r1, #185	; 0xb9
    6d5a:	f000 fc1b 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6d5e:	f385 8811 	msr	BASEPRI, r5
    6d62:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6d66:	4620      	mov	r0, r4
    6d68:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    6d6a:	f06f 0415 	mvn.w	r4, #21
    6d6e:	e7e9      	b.n	6d44 <z_abort_timeout+0x40>
    6d70:	20000b10 	.word	0x20000b10
    6d74:	000084a7 	.word	0x000084a7
    6d78:	00008378 	.word	0x00008378

00006d7c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    6d7c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6d7e:	f04f 0320 	mov.w	r3, #32
    6d82:	f3ef 8511 	mrs	r5, BASEPRI
    6d86:	f383 8812 	msr	BASEPRI_MAX, r3
    6d8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d8e:	4813      	ldr	r0, [pc, #76]	; (6ddc <z_get_next_timeout_expiry+0x60>)
    6d90:	f7fe fd08 	bl	57a4 <z_spin_lock_valid>
    6d94:	b940      	cbnz	r0, 6da8 <z_get_next_timeout_expiry+0x2c>
    6d96:	4912      	ldr	r1, [pc, #72]	; (6de0 <z_get_next_timeout_expiry+0x64>)
    6d98:	4812      	ldr	r0, [pc, #72]	; (6de4 <z_get_next_timeout_expiry+0x68>)
    6d9a:	228e      	movs	r2, #142	; 0x8e
    6d9c:	f000 fc01 	bl	75a2 <assert_print>
    6da0:	480f      	ldr	r0, [pc, #60]	; (6de0 <z_get_next_timeout_expiry+0x64>)
    6da2:	218e      	movs	r1, #142	; 0x8e
    6da4:	f000 fbf6 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6da8:	480c      	ldr	r0, [pc, #48]	; (6ddc <z_get_next_timeout_expiry+0x60>)
    6daa:	f7fe fd19 	bl	57e0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6dae:	f7ff febb 	bl	6b28 <next_timeout>
    6db2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6db4:	4809      	ldr	r0, [pc, #36]	; (6ddc <z_get_next_timeout_expiry+0x60>)
    6db6:	f7fe fd03 	bl	57c0 <z_spin_unlock_valid>
    6dba:	b940      	cbnz	r0, 6dce <z_get_next_timeout_expiry+0x52>
    6dbc:	4908      	ldr	r1, [pc, #32]	; (6de0 <z_get_next_timeout_expiry+0x64>)
    6dbe:	4809      	ldr	r0, [pc, #36]	; (6de4 <z_get_next_timeout_expiry+0x68>)
    6dc0:	22b9      	movs	r2, #185	; 0xb9
    6dc2:	f000 fbee 	bl	75a2 <assert_print>
    6dc6:	4806      	ldr	r0, [pc, #24]	; (6de0 <z_get_next_timeout_expiry+0x64>)
    6dc8:	21b9      	movs	r1, #185	; 0xb9
    6dca:	f000 fbe3 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6dce:	f385 8811 	msr	BASEPRI, r5
    6dd2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    6dd6:	4620      	mov	r0, r4
    6dd8:	bd38      	pop	{r3, r4, r5, pc}
    6dda:	bf00      	nop
    6ddc:	20000b10 	.word	0x20000b10
    6de0:	000084a7 	.word	0x000084a7
    6de4:	00008378 	.word	0x00008378

00006de8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6de8:	b570      	push	{r4, r5, r6, lr}
    6dea:	4604      	mov	r4, r0
    6dec:	460d      	mov	r5, r1
	__asm__ volatile(
    6dee:	f04f 0320 	mov.w	r3, #32
    6df2:	f3ef 8611 	mrs	r6, BASEPRI
    6df6:	f383 8812 	msr	BASEPRI_MAX, r3
    6dfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6dfe:	4816      	ldr	r0, [pc, #88]	; (6e58 <z_set_timeout_expiry+0x70>)
    6e00:	f7fe fcd0 	bl	57a4 <z_spin_lock_valid>
    6e04:	b940      	cbnz	r0, 6e18 <z_set_timeout_expiry+0x30>
    6e06:	4915      	ldr	r1, [pc, #84]	; (6e5c <z_set_timeout_expiry+0x74>)
    6e08:	4815      	ldr	r0, [pc, #84]	; (6e60 <z_set_timeout_expiry+0x78>)
    6e0a:	228e      	movs	r2, #142	; 0x8e
    6e0c:	f000 fbc9 	bl	75a2 <assert_print>
    6e10:	4812      	ldr	r0, [pc, #72]	; (6e5c <z_set_timeout_expiry+0x74>)
    6e12:	218e      	movs	r1, #142	; 0x8e
    6e14:	f000 fbbe 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e18:	480f      	ldr	r0, [pc, #60]	; (6e58 <z_set_timeout_expiry+0x70>)
    6e1a:	f7fe fce1 	bl	57e0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    6e1e:	f7ff fe83 	bl	6b28 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6e22:	2801      	cmp	r0, #1
    6e24:	dd05      	ble.n	6e32 <z_set_timeout_expiry+0x4a>
    6e26:	42a0      	cmp	r0, r4
    6e28:	db03      	blt.n	6e32 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6e2a:	4629      	mov	r1, r5
    6e2c:	4620      	mov	r0, r4
    6e2e:	f7fc fa93 	bl	3358 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e32:	4809      	ldr	r0, [pc, #36]	; (6e58 <z_set_timeout_expiry+0x70>)
    6e34:	f7fe fcc4 	bl	57c0 <z_spin_unlock_valid>
    6e38:	b940      	cbnz	r0, 6e4c <z_set_timeout_expiry+0x64>
    6e3a:	4908      	ldr	r1, [pc, #32]	; (6e5c <z_set_timeout_expiry+0x74>)
    6e3c:	4808      	ldr	r0, [pc, #32]	; (6e60 <z_set_timeout_expiry+0x78>)
    6e3e:	22b9      	movs	r2, #185	; 0xb9
    6e40:	f000 fbaf 	bl	75a2 <assert_print>
    6e44:	4805      	ldr	r0, [pc, #20]	; (6e5c <z_set_timeout_expiry+0x74>)
    6e46:	21b9      	movs	r1, #185	; 0xb9
    6e48:	f000 fba4 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6e4c:	f386 8811 	msr	BASEPRI, r6
    6e50:	f3bf 8f6f 	isb	sy
		}
	}
}
    6e54:	bd70      	pop	{r4, r5, r6, pc}
    6e56:	bf00      	nop
    6e58:	20000b10 	.word	0x20000b10
    6e5c:	000084a7 	.word	0x000084a7
    6e60:	00008378 	.word	0x00008378

00006e64 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    6e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e68:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6e6a:	f7ff f8a7 	bl	5fbc <z_time_slice>
	__asm__ volatile(
    6e6e:	f04f 0320 	mov.w	r3, #32
    6e72:	f3ef 8511 	mrs	r5, BASEPRI
    6e76:	f383 8812 	msr	BASEPRI_MAX, r3
    6e7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e7e:	4842      	ldr	r0, [pc, #264]	; (6f88 <sys_clock_announce+0x124>)
    6e80:	f7fe fc90 	bl	57a4 <z_spin_lock_valid>
    6e84:	b940      	cbnz	r0, 6e98 <sys_clock_announce+0x34>
    6e86:	4941      	ldr	r1, [pc, #260]	; (6f8c <sys_clock_announce+0x128>)
    6e88:	4841      	ldr	r0, [pc, #260]	; (6f90 <sys_clock_announce+0x12c>)
    6e8a:	228e      	movs	r2, #142	; 0x8e
    6e8c:	f000 fb89 	bl	75a2 <assert_print>
    6e90:	483e      	ldr	r0, [pc, #248]	; (6f8c <sys_clock_announce+0x128>)
    6e92:	218e      	movs	r1, #142	; 0x8e
    6e94:	f000 fb7e 	bl	7594 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6e98:	4f3e      	ldr	r7, [pc, #248]	; (6f94 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
    6e9a:	483b      	ldr	r0, [pc, #236]	; (6f88 <sys_clock_announce+0x124>)
	return list->head == list;
    6e9c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 6f98 <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6ea0:	4e3e      	ldr	r6, [pc, #248]	; (6f9c <sys_clock_announce+0x138>)
    6ea2:	f7fe fc9d 	bl	57e0 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    6ea6:	603c      	str	r4, [r7, #0]
    6ea8:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6eac:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6eae:	4544      	cmp	r4, r8
		curr_tick += dt;
    6eb0:	e9d6 1e00 	ldrd	r1, lr, [r6]
    6eb4:	ea4f 70e2 	mov.w	r0, r2, asr #31
    6eb8:	d00b      	beq.n	6ed2 <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6eba:	b154      	cbz	r4, 6ed2 <sys_clock_announce+0x6e>
    6ebc:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    6ec0:	429a      	cmp	r2, r3
    6ec2:	eb70 090c 	sbcs.w	r9, r0, ip
    6ec6:	da23      	bge.n	6f10 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6ec8:	1a9b      	subs	r3, r3, r2
    6eca:	eb6c 0c00 	sbc.w	ip, ip, r0
    6ece:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    6ed2:	1852      	adds	r2, r2, r1
    6ed4:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    6ed8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6eda:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
    6ede:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6ee0:	f7ff fe22 	bl	6b28 <next_timeout>
    6ee4:	4621      	mov	r1, r4
    6ee6:	f7fc fa37 	bl	3358 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6eea:	4827      	ldr	r0, [pc, #156]	; (6f88 <sys_clock_announce+0x124>)
    6eec:	f7fe fc68 	bl	57c0 <z_spin_unlock_valid>
    6ef0:	b940      	cbnz	r0, 6f04 <sys_clock_announce+0xa0>
    6ef2:	4926      	ldr	r1, [pc, #152]	; (6f8c <sys_clock_announce+0x128>)
    6ef4:	4826      	ldr	r0, [pc, #152]	; (6f90 <sys_clock_announce+0x12c>)
    6ef6:	22b9      	movs	r2, #185	; 0xb9
    6ef8:	f000 fb53 	bl	75a2 <assert_print>
    6efc:	4823      	ldr	r0, [pc, #140]	; (6f8c <sys_clock_announce+0x128>)
    6efe:	21b9      	movs	r1, #185	; 0xb9
    6f00:	f000 fb48 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6f04:	f385 8811 	msr	BASEPRI, r5
    6f08:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    6f10:	1859      	adds	r1, r3, r1
    6f12:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    6f16:	1ad3      	subs	r3, r2, r3
    6f18:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    6f1a:	2200      	movs	r2, #0
    6f1c:	2300      	movs	r3, #0
		curr_tick += dt;
    6f1e:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    6f22:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    6f26:	4620      	mov	r0, r4
    6f28:	f7ff fe24 	bl	6b74 <remove_timeout>
    6f2c:	4816      	ldr	r0, [pc, #88]	; (6f88 <sys_clock_announce+0x124>)
    6f2e:	f7fe fc47 	bl	57c0 <z_spin_unlock_valid>
    6f32:	b940      	cbnz	r0, 6f46 <sys_clock_announce+0xe2>
    6f34:	4915      	ldr	r1, [pc, #84]	; (6f8c <sys_clock_announce+0x128>)
    6f36:	4816      	ldr	r0, [pc, #88]	; (6f90 <sys_clock_announce+0x12c>)
    6f38:	22b9      	movs	r2, #185	; 0xb9
    6f3a:	f000 fb32 	bl	75a2 <assert_print>
    6f3e:	4813      	ldr	r0, [pc, #76]	; (6f8c <sys_clock_announce+0x128>)
    6f40:	21b9      	movs	r1, #185	; 0xb9
    6f42:	f000 fb27 	bl	7594 <assert_post_action>
    6f46:	f385 8811 	msr	BASEPRI, r5
    6f4a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6f4e:	68a3      	ldr	r3, [r4, #8]
    6f50:	4620      	mov	r0, r4
    6f52:	4798      	blx	r3
	__asm__ volatile(
    6f54:	f04f 0320 	mov.w	r3, #32
    6f58:	f3ef 8511 	mrs	r5, BASEPRI
    6f5c:	f383 8812 	msr	BASEPRI_MAX, r3
    6f60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f64:	4808      	ldr	r0, [pc, #32]	; (6f88 <sys_clock_announce+0x124>)
    6f66:	f7fe fc1d 	bl	57a4 <z_spin_lock_valid>
    6f6a:	b940      	cbnz	r0, 6f7e <sys_clock_announce+0x11a>
    6f6c:	4907      	ldr	r1, [pc, #28]	; (6f8c <sys_clock_announce+0x128>)
    6f6e:	4808      	ldr	r0, [pc, #32]	; (6f90 <sys_clock_announce+0x12c>)
    6f70:	228e      	movs	r2, #142	; 0x8e
    6f72:	f000 fb16 	bl	75a2 <assert_print>
    6f76:	4805      	ldr	r0, [pc, #20]	; (6f8c <sys_clock_announce+0x128>)
    6f78:	218e      	movs	r1, #142	; 0x8e
    6f7a:	f000 fb0b 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6f7e:	4802      	ldr	r0, [pc, #8]	; (6f88 <sys_clock_announce+0x124>)
    6f80:	f7fe fc2e 	bl	57e0 <z_spin_lock_set_owner>
	return k;
    6f84:	e790      	b.n	6ea8 <sys_clock_announce+0x44>
    6f86:	bf00      	nop
    6f88:	20000b10 	.word	0x20000b10
    6f8c:	000084a7 	.word	0x000084a7
    6f90:	00008378 	.word	0x00008378
    6f94:	20000b0c 	.word	0x20000b0c
    6f98:	200000ec 	.word	0x200000ec
    6f9c:	20000300 	.word	0x20000300

00006fa0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6fa0:	b570      	push	{r4, r5, r6, lr}
    6fa2:	f04f 0320 	mov.w	r3, #32
    6fa6:	f3ef 8611 	mrs	r6, BASEPRI
    6faa:	f383 8812 	msr	BASEPRI_MAX, r3
    6fae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6fb2:	4816      	ldr	r0, [pc, #88]	; (700c <sys_clock_tick_get+0x6c>)
    6fb4:	f7fe fbf6 	bl	57a4 <z_spin_lock_valid>
    6fb8:	b940      	cbnz	r0, 6fcc <sys_clock_tick_get+0x2c>
    6fba:	4915      	ldr	r1, [pc, #84]	; (7010 <sys_clock_tick_get+0x70>)
    6fbc:	4815      	ldr	r0, [pc, #84]	; (7014 <sys_clock_tick_get+0x74>)
    6fbe:	228e      	movs	r2, #142	; 0x8e
    6fc0:	f000 faef 	bl	75a2 <assert_print>
    6fc4:	4812      	ldr	r0, [pc, #72]	; (7010 <sys_clock_tick_get+0x70>)
    6fc6:	218e      	movs	r1, #142	; 0x8e
    6fc8:	f000 fae4 	bl	7594 <assert_post_action>
	z_spin_lock_set_owner(l);
    6fcc:	480f      	ldr	r0, [pc, #60]	; (700c <sys_clock_tick_get+0x6c>)
    6fce:	f7fe fc07 	bl	57e0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    6fd2:	f7fc f9f3 	bl	33bc <sys_clock_elapsed>
    6fd6:	4b10      	ldr	r3, [pc, #64]	; (7018 <sys_clock_tick_get+0x78>)
    6fd8:	e9d3 4500 	ldrd	r4, r5, [r3]
    6fdc:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fde:	480b      	ldr	r0, [pc, #44]	; (700c <sys_clock_tick_get+0x6c>)
    6fe0:	f145 0500 	adc.w	r5, r5, #0
    6fe4:	f7fe fbec 	bl	57c0 <z_spin_unlock_valid>
    6fe8:	b940      	cbnz	r0, 6ffc <sys_clock_tick_get+0x5c>
    6fea:	4909      	ldr	r1, [pc, #36]	; (7010 <sys_clock_tick_get+0x70>)
    6fec:	4809      	ldr	r0, [pc, #36]	; (7014 <sys_clock_tick_get+0x74>)
    6fee:	22b9      	movs	r2, #185	; 0xb9
    6ff0:	f000 fad7 	bl	75a2 <assert_print>
    6ff4:	4806      	ldr	r0, [pc, #24]	; (7010 <sys_clock_tick_get+0x70>)
    6ff6:	21b9      	movs	r1, #185	; 0xb9
    6ff8:	f000 facc 	bl	7594 <assert_post_action>
	__asm__ volatile(
    6ffc:	f386 8811 	msr	BASEPRI, r6
    7000:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7004:	4620      	mov	r0, r4
    7006:	4629      	mov	r1, r5
    7008:	bd70      	pop	{r4, r5, r6, pc}
    700a:	bf00      	nop
    700c:	20000b10 	.word	0x20000b10
    7010:	000084a7 	.word	0x000084a7
    7014:	00008378 	.word	0x00008378
    7018:	20000300 	.word	0x20000300

0000701c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    701c:	4a02      	ldr	r2, [pc, #8]	; (7028 <boot_banner+0xc>)
    701e:	4903      	ldr	r1, [pc, #12]	; (702c <boot_banner+0x10>)
    7020:	4803      	ldr	r0, [pc, #12]	; (7030 <boot_banner+0x14>)
    7022:	f000 b9f0 	b.w	7406 <printk>
    7026:	bf00      	nop
    7028:	00008d55 	.word	0x00008d55
    702c:	00008f03 	.word	0x00008f03
    7030:	00008f10 	.word	0x00008f10

00007034 <nrf_cc3xx_platform_init_no_rng>:
    7034:	b510      	push	{r4, lr}
    7036:	4c0a      	ldr	r4, [pc, #40]	; (7060 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    7038:	6823      	ldr	r3, [r4, #0]
    703a:	b11b      	cbz	r3, 7044 <nrf_cc3xx_platform_init_no_rng+0x10>
    703c:	2301      	movs	r3, #1
    703e:	6023      	str	r3, [r4, #0]
    7040:	2000      	movs	r0, #0
    7042:	bd10      	pop	{r4, pc}
    7044:	f000 f8ce 	bl	71e4 <CC_LibInitNoRng>
    7048:	2800      	cmp	r0, #0
    704a:	d0f7      	beq.n	703c <nrf_cc3xx_platform_init_no_rng+0x8>
    704c:	3801      	subs	r0, #1
    704e:	2806      	cmp	r0, #6
    7050:	d803      	bhi.n	705a <nrf_cc3xx_platform_init_no_rng+0x26>
    7052:	4b04      	ldr	r3, [pc, #16]	; (7064 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7054:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7058:	bd10      	pop	{r4, pc}
    705a:	4803      	ldr	r0, [pc, #12]	; (7068 <nrf_cc3xx_platform_init_no_rng+0x34>)
    705c:	bd10      	pop	{r4, pc}
    705e:	bf00      	nop
    7060:	20000b14 	.word	0x20000b14
    7064:	00008160 	.word	0x00008160
    7068:	ffff8ffe 	.word	0xffff8ffe

0000706c <nrf_cc3xx_platform_abort>:
    706c:	f3bf 8f4f 	dsb	sy
    7070:	4905      	ldr	r1, [pc, #20]	; (7088 <nrf_cc3xx_platform_abort+0x1c>)
    7072:	4b06      	ldr	r3, [pc, #24]	; (708c <nrf_cc3xx_platform_abort+0x20>)
    7074:	68ca      	ldr	r2, [r1, #12]
    7076:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    707a:	4313      	orrs	r3, r2
    707c:	60cb      	str	r3, [r1, #12]
    707e:	f3bf 8f4f 	dsb	sy
    7082:	bf00      	nop
    7084:	e7fd      	b.n	7082 <nrf_cc3xx_platform_abort+0x16>
    7086:	bf00      	nop
    7088:	e000ed00 	.word	0xe000ed00
    708c:	05fa0004 	.word	0x05fa0004

00007090 <CC_PalAbort>:
    7090:	b410      	push	{r4}
    7092:	4b09      	ldr	r3, [pc, #36]	; (70b8 <CC_PalAbort+0x28>)
    7094:	4909      	ldr	r1, [pc, #36]	; (70bc <CC_PalAbort+0x2c>)
    7096:	4c0a      	ldr	r4, [pc, #40]	; (70c0 <CC_PalAbort+0x30>)
    7098:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    709c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    70a0:	6849      	ldr	r1, [r1, #4]
    70a2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    70a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    70aa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    70ae:	2300      	movs	r3, #0
    70b0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    70b4:	bc10      	pop	{r4}
    70b6:	4708      	bx	r1
    70b8:	5002b000 	.word	0x5002b000
    70bc:	200000f4 	.word	0x200000f4
    70c0:	5002a000 	.word	0x5002a000

000070c4 <nrf_cc3xx_platform_set_abort>:
    70c4:	e9d0 1200 	ldrd	r1, r2, [r0]
    70c8:	4b01      	ldr	r3, [pc, #4]	; (70d0 <nrf_cc3xx_platform_set_abort+0xc>)
    70ca:	e9c3 1200 	strd	r1, r2, [r3]
    70ce:	4770      	bx	lr
    70d0:	200000f4 	.word	0x200000f4

000070d4 <mutex_free>:
    70d4:	b510      	push	{r4, lr}
    70d6:	4604      	mov	r4, r0
    70d8:	b130      	cbz	r0, 70e8 <mutex_free+0x14>
    70da:	6863      	ldr	r3, [r4, #4]
    70dc:	06db      	lsls	r3, r3, #27
    70de:	d502      	bpl.n	70e6 <mutex_free+0x12>
    70e0:	2300      	movs	r3, #0
    70e2:	6023      	str	r3, [r4, #0]
    70e4:	6063      	str	r3, [r4, #4]
    70e6:	bd10      	pop	{r4, pc}
    70e8:	4b02      	ldr	r3, [pc, #8]	; (70f4 <mutex_free+0x20>)
    70ea:	4803      	ldr	r0, [pc, #12]	; (70f8 <mutex_free+0x24>)
    70ec:	685b      	ldr	r3, [r3, #4]
    70ee:	4798      	blx	r3
    70f0:	e7f3      	b.n	70da <mutex_free+0x6>
    70f2:	bf00      	nop
    70f4:	200000f4 	.word	0x200000f4
    70f8:	0000817c 	.word	0x0000817c

000070fc <mutex_lock>:
    70fc:	b1b0      	cbz	r0, 712c <mutex_lock+0x30>
    70fe:	6843      	ldr	r3, [r0, #4]
    7100:	b193      	cbz	r3, 7128 <mutex_lock+0x2c>
    7102:	06db      	lsls	r3, r3, #27
    7104:	d50e      	bpl.n	7124 <mutex_lock+0x28>
    7106:	2301      	movs	r3, #1
    7108:	e850 2f00 	ldrex	r2, [r0]
    710c:	4619      	mov	r1, r3
    710e:	e840 1c00 	strex	ip, r1, [r0]
    7112:	f09c 0f00 	teq	ip, #0
    7116:	d1f7      	bne.n	7108 <mutex_lock+0xc>
    7118:	2a01      	cmp	r2, #1
    711a:	d0f5      	beq.n	7108 <mutex_lock+0xc>
    711c:	f3bf 8f5f 	dmb	sy
    7120:	2000      	movs	r0, #0
    7122:	4770      	bx	lr
    7124:	4803      	ldr	r0, [pc, #12]	; (7134 <mutex_lock+0x38>)
    7126:	4770      	bx	lr
    7128:	4803      	ldr	r0, [pc, #12]	; (7138 <mutex_lock+0x3c>)
    712a:	4770      	bx	lr
    712c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7130:	4770      	bx	lr
    7132:	bf00      	nop
    7134:	ffff8fe9 	.word	0xffff8fe9
    7138:	ffff8fea 	.word	0xffff8fea

0000713c <mutex_unlock>:
    713c:	b168      	cbz	r0, 715a <mutex_unlock+0x1e>
    713e:	6843      	ldr	r3, [r0, #4]
    7140:	b13b      	cbz	r3, 7152 <mutex_unlock+0x16>
    7142:	06db      	lsls	r3, r3, #27
    7144:	d507      	bpl.n	7156 <mutex_unlock+0x1a>
    7146:	f3bf 8f5f 	dmb	sy
    714a:	2300      	movs	r3, #0
    714c:	6003      	str	r3, [r0, #0]
    714e:	4618      	mov	r0, r3
    7150:	4770      	bx	lr
    7152:	4803      	ldr	r0, [pc, #12]	; (7160 <mutex_unlock+0x24>)
    7154:	4770      	bx	lr
    7156:	4803      	ldr	r0, [pc, #12]	; (7164 <mutex_unlock+0x28>)
    7158:	4770      	bx	lr
    715a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    715e:	4770      	bx	lr
    7160:	ffff8fea 	.word	0xffff8fea
    7164:	ffff8fe9 	.word	0xffff8fe9

00007168 <mutex_init>:
    7168:	b510      	push	{r4, lr}
    716a:	4604      	mov	r4, r0
    716c:	b120      	cbz	r0, 7178 <mutex_init+0x10>
    716e:	2200      	movs	r2, #0
    7170:	2311      	movs	r3, #17
    7172:	6022      	str	r2, [r4, #0]
    7174:	6063      	str	r3, [r4, #4]
    7176:	bd10      	pop	{r4, pc}
    7178:	4801      	ldr	r0, [pc, #4]	; (7180 <mutex_init+0x18>)
    717a:	f7ff ff89 	bl	7090 <CC_PalAbort>
    717e:	e7f6      	b.n	716e <mutex_init+0x6>
    7180:	000081a4 	.word	0x000081a4

00007184 <nrf_cc3xx_platform_set_mutexes>:
    7184:	b570      	push	{r4, r5, r6, lr}
    7186:	e9d0 2300 	ldrd	r2, r3, [r0]
    718a:	4c13      	ldr	r4, [pc, #76]	; (71d8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    718c:	4d13      	ldr	r5, [pc, #76]	; (71dc <nrf_cc3xx_platform_set_mutexes+0x58>)
    718e:	6063      	str	r3, [r4, #4]
    7190:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    7194:	e9c4 3002 	strd	r3, r0, [r4, #8]
    7198:	6022      	str	r2, [r4, #0]
    719a:	4b11      	ldr	r3, [pc, #68]	; (71e0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    719c:	6808      	ldr	r0, [r1, #0]
    719e:	6018      	str	r0, [r3, #0]
    71a0:	6848      	ldr	r0, [r1, #4]
    71a2:	6058      	str	r0, [r3, #4]
    71a4:	6888      	ldr	r0, [r1, #8]
    71a6:	6098      	str	r0, [r3, #8]
    71a8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    71ac:	60d8      	str	r0, [r3, #12]
    71ae:	6119      	str	r1, [r3, #16]
    71b0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    71b4:	06db      	lsls	r3, r3, #27
    71b6:	d50d      	bpl.n	71d4 <nrf_cc3xx_platform_set_mutexes+0x50>
    71b8:	2300      	movs	r3, #0
    71ba:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    71be:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    71c2:	f505 708a 	add.w	r0, r5, #276	; 0x114
    71c6:	4790      	blx	r2
    71c8:	6823      	ldr	r3, [r4, #0]
    71ca:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    71ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71d2:	4718      	bx	r3
    71d4:	bd70      	pop	{r4, r5, r6, pc}
    71d6:	bf00      	nop
    71d8:	20000104 	.word	0x20000104
    71dc:	20000b2c 	.word	0x20000b2c
    71e0:	20000114 	.word	0x20000114

000071e4 <CC_LibInitNoRng>:
    71e4:	b538      	push	{r3, r4, r5, lr}
    71e6:	f000 f82f 	bl	7248 <CC_HalInit>
    71ea:	b120      	cbz	r0, 71f6 <CC_LibInitNoRng+0x12>
    71ec:	2403      	movs	r4, #3
    71ee:	f000 f863 	bl	72b8 <CC_PalTerminate>
    71f2:	4620      	mov	r0, r4
    71f4:	bd38      	pop	{r3, r4, r5, pc}
    71f6:	f000 f831 	bl	725c <CC_PalInit>
    71fa:	b998      	cbnz	r0, 7224 <CC_LibInitNoRng+0x40>
    71fc:	f000 f8ac 	bl	7358 <CC_PalPowerSaveModeSelect>
    7200:	b998      	cbnz	r0, 722a <CC_LibInitNoRng+0x46>
    7202:	4d0f      	ldr	r5, [pc, #60]	; (7240 <CC_LibInitNoRng+0x5c>)
    7204:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    7208:	0e1b      	lsrs	r3, r3, #24
    720a:	2bf0      	cmp	r3, #240	; 0xf0
    720c:	d108      	bne.n	7220 <CC_LibInitNoRng+0x3c>
    720e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    7212:	4b0c      	ldr	r3, [pc, #48]	; (7244 <CC_LibInitNoRng+0x60>)
    7214:	429a      	cmp	r2, r3
    7216:	d00a      	beq.n	722e <CC_LibInitNoRng+0x4a>
    7218:	2407      	movs	r4, #7
    721a:	f000 f817 	bl	724c <CC_HalTerminate>
    721e:	e7e6      	b.n	71ee <CC_LibInitNoRng+0xa>
    7220:	2406      	movs	r4, #6
    7222:	e7fa      	b.n	721a <CC_LibInitNoRng+0x36>
    7224:	2404      	movs	r4, #4
    7226:	4620      	mov	r0, r4
    7228:	bd38      	pop	{r3, r4, r5, pc}
    722a:	2400      	movs	r4, #0
    722c:	e7f5      	b.n	721a <CC_LibInitNoRng+0x36>
    722e:	2001      	movs	r0, #1
    7230:	f000 f892 	bl	7358 <CC_PalPowerSaveModeSelect>
    7234:	4604      	mov	r4, r0
    7236:	2800      	cmp	r0, #0
    7238:	d1f7      	bne.n	722a <CC_LibInitNoRng+0x46>
    723a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    723e:	e7d8      	b.n	71f2 <CC_LibInitNoRng+0xe>
    7240:	5002b000 	.word	0x5002b000
    7244:	20e00000 	.word	0x20e00000

00007248 <CC_HalInit>:
    7248:	2000      	movs	r0, #0
    724a:	4770      	bx	lr

0000724c <CC_HalTerminate>:
    724c:	2000      	movs	r0, #0
    724e:	4770      	bx	lr

00007250 <CC_HalMaskInterrupt>:
    7250:	4b01      	ldr	r3, [pc, #4]	; (7258 <CC_HalMaskInterrupt+0x8>)
    7252:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    7256:	4770      	bx	lr
    7258:	5002b000 	.word	0x5002b000

0000725c <CC_PalInit>:
    725c:	b510      	push	{r4, lr}
    725e:	4811      	ldr	r0, [pc, #68]	; (72a4 <CC_PalInit+0x48>)
    7260:	f000 f848 	bl	72f4 <CC_PalMutexCreate>
    7264:	b100      	cbz	r0, 7268 <CC_PalInit+0xc>
    7266:	bd10      	pop	{r4, pc}
    7268:	480f      	ldr	r0, [pc, #60]	; (72a8 <CC_PalInit+0x4c>)
    726a:	f000 f843 	bl	72f4 <CC_PalMutexCreate>
    726e:	2800      	cmp	r0, #0
    7270:	d1f9      	bne.n	7266 <CC_PalInit+0xa>
    7272:	4c0e      	ldr	r4, [pc, #56]	; (72ac <CC_PalInit+0x50>)
    7274:	4620      	mov	r0, r4
    7276:	f000 f83d 	bl	72f4 <CC_PalMutexCreate>
    727a:	2800      	cmp	r0, #0
    727c:	d1f3      	bne.n	7266 <CC_PalInit+0xa>
    727e:	4b0c      	ldr	r3, [pc, #48]	; (72b0 <CC_PalInit+0x54>)
    7280:	480c      	ldr	r0, [pc, #48]	; (72b4 <CC_PalInit+0x58>)
    7282:	601c      	str	r4, [r3, #0]
    7284:	f000 f836 	bl	72f4 <CC_PalMutexCreate>
    7288:	4601      	mov	r1, r0
    728a:	2800      	cmp	r0, #0
    728c:	d1eb      	bne.n	7266 <CC_PalInit+0xa>
    728e:	f000 f82d 	bl	72ec <CC_PalDmaInit>
    7292:	4604      	mov	r4, r0
    7294:	b108      	cbz	r0, 729a <CC_PalInit+0x3e>
    7296:	4620      	mov	r0, r4
    7298:	bd10      	pop	{r4, pc}
    729a:	f000 f83f 	bl	731c <CC_PalPowerSaveModeInit>
    729e:	4620      	mov	r0, r4
    72a0:	e7fa      	b.n	7298 <CC_PalInit+0x3c>
    72a2:	bf00      	nop
    72a4:	2000014c 	.word	0x2000014c
    72a8:	20000140 	.word	0x20000140
    72ac:	20000148 	.word	0x20000148
    72b0:	20000150 	.word	0x20000150
    72b4:	20000144 	.word	0x20000144

000072b8 <CC_PalTerminate>:
    72b8:	b508      	push	{r3, lr}
    72ba:	4808      	ldr	r0, [pc, #32]	; (72dc <CC_PalTerminate+0x24>)
    72bc:	f000 f824 	bl	7308 <CC_PalMutexDestroy>
    72c0:	4807      	ldr	r0, [pc, #28]	; (72e0 <CC_PalTerminate+0x28>)
    72c2:	f000 f821 	bl	7308 <CC_PalMutexDestroy>
    72c6:	4807      	ldr	r0, [pc, #28]	; (72e4 <CC_PalTerminate+0x2c>)
    72c8:	f000 f81e 	bl	7308 <CC_PalMutexDestroy>
    72cc:	4806      	ldr	r0, [pc, #24]	; (72e8 <CC_PalTerminate+0x30>)
    72ce:	f000 f81b 	bl	7308 <CC_PalMutexDestroy>
    72d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    72d6:	f000 b80b 	b.w	72f0 <CC_PalDmaTerminate>
    72da:	bf00      	nop
    72dc:	2000014c 	.word	0x2000014c
    72e0:	20000140 	.word	0x20000140
    72e4:	20000148 	.word	0x20000148
    72e8:	20000144 	.word	0x20000144

000072ec <CC_PalDmaInit>:
    72ec:	2000      	movs	r0, #0
    72ee:	4770      	bx	lr

000072f0 <CC_PalDmaTerminate>:
    72f0:	4770      	bx	lr
    72f2:	bf00      	nop

000072f4 <CC_PalMutexCreate>:
    72f4:	b508      	push	{r3, lr}
    72f6:	4b03      	ldr	r3, [pc, #12]	; (7304 <CC_PalMutexCreate+0x10>)
    72f8:	6802      	ldr	r2, [r0, #0]
    72fa:	681b      	ldr	r3, [r3, #0]
    72fc:	6810      	ldr	r0, [r2, #0]
    72fe:	4798      	blx	r3
    7300:	2000      	movs	r0, #0
    7302:	bd08      	pop	{r3, pc}
    7304:	20000104 	.word	0x20000104

00007308 <CC_PalMutexDestroy>:
    7308:	b508      	push	{r3, lr}
    730a:	4b03      	ldr	r3, [pc, #12]	; (7318 <CC_PalMutexDestroy+0x10>)
    730c:	6802      	ldr	r2, [r0, #0]
    730e:	685b      	ldr	r3, [r3, #4]
    7310:	6810      	ldr	r0, [r2, #0]
    7312:	4798      	blx	r3
    7314:	2000      	movs	r0, #0
    7316:	bd08      	pop	{r3, pc}
    7318:	20000104 	.word	0x20000104

0000731c <CC_PalPowerSaveModeInit>:
    731c:	b570      	push	{r4, r5, r6, lr}
    731e:	4c09      	ldr	r4, [pc, #36]	; (7344 <CC_PalPowerSaveModeInit+0x28>)
    7320:	4d09      	ldr	r5, [pc, #36]	; (7348 <CC_PalPowerSaveModeInit+0x2c>)
    7322:	6920      	ldr	r0, [r4, #16]
    7324:	68ab      	ldr	r3, [r5, #8]
    7326:	4798      	blx	r3
    7328:	b118      	cbz	r0, 7332 <CC_PalPowerSaveModeInit+0x16>
    732a:	4b08      	ldr	r3, [pc, #32]	; (734c <CC_PalPowerSaveModeInit+0x30>)
    732c:	4808      	ldr	r0, [pc, #32]	; (7350 <CC_PalPowerSaveModeInit+0x34>)
    732e:	685b      	ldr	r3, [r3, #4]
    7330:	4798      	blx	r3
    7332:	4a08      	ldr	r2, [pc, #32]	; (7354 <CC_PalPowerSaveModeInit+0x38>)
    7334:	68eb      	ldr	r3, [r5, #12]
    7336:	6920      	ldr	r0, [r4, #16]
    7338:	2100      	movs	r1, #0
    733a:	6011      	str	r1, [r2, #0]
    733c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7340:	4718      	bx	r3
    7342:	bf00      	nop
    7344:	20000114 	.word	0x20000114
    7348:	20000104 	.word	0x20000104
    734c:	200000f4 	.word	0x200000f4
    7350:	000081c8 	.word	0x000081c8
    7354:	20000b28 	.word	0x20000b28

00007358 <CC_PalPowerSaveModeSelect>:
    7358:	b570      	push	{r4, r5, r6, lr}
    735a:	4d1b      	ldr	r5, [pc, #108]	; (73c8 <CC_PalPowerSaveModeSelect+0x70>)
    735c:	4e1b      	ldr	r6, [pc, #108]	; (73cc <CC_PalPowerSaveModeSelect+0x74>)
    735e:	4604      	mov	r4, r0
    7360:	68b2      	ldr	r2, [r6, #8]
    7362:	6928      	ldr	r0, [r5, #16]
    7364:	4790      	blx	r2
    7366:	b9f8      	cbnz	r0, 73a8 <CC_PalPowerSaveModeSelect+0x50>
    7368:	b15c      	cbz	r4, 7382 <CC_PalPowerSaveModeSelect+0x2a>
    736a:	4c19      	ldr	r4, [pc, #100]	; (73d0 <CC_PalPowerSaveModeSelect+0x78>)
    736c:	6823      	ldr	r3, [r4, #0]
    736e:	b1b3      	cbz	r3, 739e <CC_PalPowerSaveModeSelect+0x46>
    7370:	2b01      	cmp	r3, #1
    7372:	d01b      	beq.n	73ac <CC_PalPowerSaveModeSelect+0x54>
    7374:	3b01      	subs	r3, #1
    7376:	6023      	str	r3, [r4, #0]
    7378:	6928      	ldr	r0, [r5, #16]
    737a:	68f3      	ldr	r3, [r6, #12]
    737c:	4798      	blx	r3
    737e:	2000      	movs	r0, #0
    7380:	bd70      	pop	{r4, r5, r6, pc}
    7382:	4c13      	ldr	r4, [pc, #76]	; (73d0 <CC_PalPowerSaveModeSelect+0x78>)
    7384:	6821      	ldr	r1, [r4, #0]
    7386:	b941      	cbnz	r1, 739a <CC_PalPowerSaveModeSelect+0x42>
    7388:	4b12      	ldr	r3, [pc, #72]	; (73d4 <CC_PalPowerSaveModeSelect+0x7c>)
    738a:	2201      	movs	r2, #1
    738c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7390:	4a11      	ldr	r2, [pc, #68]	; (73d8 <CC_PalPowerSaveModeSelect+0x80>)
    7392:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    7396:	2b00      	cmp	r3, #0
    7398:	d1fb      	bne.n	7392 <CC_PalPowerSaveModeSelect+0x3a>
    739a:	3101      	adds	r1, #1
    739c:	6021      	str	r1, [r4, #0]
    739e:	68f3      	ldr	r3, [r6, #12]
    73a0:	6928      	ldr	r0, [r5, #16]
    73a2:	4798      	blx	r3
    73a4:	2000      	movs	r0, #0
    73a6:	bd70      	pop	{r4, r5, r6, pc}
    73a8:	480c      	ldr	r0, [pc, #48]	; (73dc <CC_PalPowerSaveModeSelect+0x84>)
    73aa:	bd70      	pop	{r4, r5, r6, pc}
    73ac:	4a0a      	ldr	r2, [pc, #40]	; (73d8 <CC_PalPowerSaveModeSelect+0x80>)
    73ae:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    73b2:	2b00      	cmp	r3, #0
    73b4:	d1fb      	bne.n	73ae <CC_PalPowerSaveModeSelect+0x56>
    73b6:	4a07      	ldr	r2, [pc, #28]	; (73d4 <CC_PalPowerSaveModeSelect+0x7c>)
    73b8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    73bc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    73c0:	f7ff ff46 	bl	7250 <CC_HalMaskInterrupt>
    73c4:	6823      	ldr	r3, [r4, #0]
    73c6:	e7d5      	b.n	7374 <CC_PalPowerSaveModeSelect+0x1c>
    73c8:	20000114 	.word	0x20000114
    73cc:	20000104 	.word	0x20000104
    73d0:	20000b28 	.word	0x20000b28
    73d4:	5002a000 	.word	0x5002a000
    73d8:	5002b000 	.word	0x5002b000
    73dc:	ffff8fe9 	.word	0xffff8fe9

000073e0 <sys_notify_validate>:
	if (notify == NULL) {
    73e0:	4603      	mov	r3, r0
    73e2:	b158      	cbz	r0, 73fc <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    73e4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    73e6:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    73ea:	2a01      	cmp	r2, #1
    73ec:	d003      	beq.n	73f6 <sys_notify_validate+0x16>
    73ee:	2a03      	cmp	r2, #3
    73f0:	d104      	bne.n	73fc <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    73f2:	6802      	ldr	r2, [r0, #0]
    73f4:	b112      	cbz	r2, 73fc <sys_notify_validate+0x1c>
		notify->result = 0;
    73f6:	2000      	movs	r0, #0
    73f8:	6098      	str	r0, [r3, #8]
    73fa:	4770      	bx	lr
		return -EINVAL;
    73fc:	f06f 0015 	mvn.w	r0, #21
}
    7400:	4770      	bx	lr

00007402 <arch_printk_char_out>:
}
    7402:	2000      	movs	r0, #0
    7404:	4770      	bx	lr

00007406 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    7406:	b40f      	push	{r0, r1, r2, r3}
    7408:	b507      	push	{r0, r1, r2, lr}
    740a:	a904      	add	r1, sp, #16
    740c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7410:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    7412:	f7f9 f99d 	bl	750 <vprintk>

	va_end(ap);
}
    7416:	b003      	add	sp, #12
    7418:	f85d eb04 	ldr.w	lr, [sp], #4
    741c:	b004      	add	sp, #16
    741e:	4770      	bx	lr

00007420 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7420:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    7422:	f013 0307 	ands.w	r3, r3, #7
    7426:	d105      	bne.n	7434 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7428:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    742a:	2b00      	cmp	r3, #0
    742c:	bf0c      	ite	eq
    742e:	2000      	moveq	r0, #0
    7430:	2003      	movne	r0, #3
    7432:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7434:	2b02      	cmp	r3, #2
    7436:	d105      	bne.n	7444 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7438:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
    743a:	2b00      	cmp	r3, #0
    743c:	bf14      	ite	ne
    743e:	2000      	movne	r0, #0
    7440:	2004      	moveq	r0, #4
    7442:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7444:	2b01      	cmp	r3, #1
    7446:	d105      	bne.n	7454 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7448:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    744a:	2b00      	cmp	r3, #0
    744c:	bf0c      	ite	eq
    744e:	2000      	moveq	r0, #0
    7450:	2005      	movne	r0, #5
    7452:	4770      	bx	lr
	int evt = EVT_NOP;
    7454:	2000      	movs	r0, #0
}
    7456:	4770      	bx	lr

00007458 <notify_one>:
{
    7458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    745c:	460d      	mov	r5, r1
    745e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7460:	4619      	mov	r1, r3
    7462:	1d28      	adds	r0, r5, #4
{
    7464:	4690      	mov	r8, r2
    7466:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7468:	f7f9 f946 	bl	6f8 <sys_notify_finalize>
	if (cb) {
    746c:	4604      	mov	r4, r0
    746e:	b138      	cbz	r0, 7480 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7470:	4633      	mov	r3, r6
    7472:	4642      	mov	r2, r8
    7474:	4629      	mov	r1, r5
    7476:	4638      	mov	r0, r7
    7478:	46a4      	mov	ip, r4
}
    747a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    747e:	4760      	bx	ip
}
    7480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007484 <validate_args>:
{
    7484:	b510      	push	{r4, lr}
    7486:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7488:	b140      	cbz	r0, 749c <validate_args+0x18>
    748a:	b139      	cbz	r1, 749c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    748c:	1d08      	adds	r0, r1, #4
    748e:	f7ff ffa7 	bl	73e0 <sys_notify_validate>
	if ((rv == 0)
    7492:	b928      	cbnz	r0, 74a0 <validate_args+0x1c>
	    && ((cli->notify.flags
    7494:	68a3      	ldr	r3, [r4, #8]
    7496:	f033 0303 	bics.w	r3, r3, #3
    749a:	d001      	beq.n	74a0 <validate_args+0x1c>
		rv = -EINVAL;
    749c:	f06f 0015 	mvn.w	r0, #21
}
    74a0:	bd10      	pop	{r4, pc}

000074a2 <onoff_manager_init>:
{
    74a2:	b538      	push	{r3, r4, r5, lr}
    74a4:	460c      	mov	r4, r1
	if ((mgr == NULL)
    74a6:	4605      	mov	r5, r0
    74a8:	b158      	cbz	r0, 74c2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    74aa:	b151      	cbz	r1, 74c2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    74ac:	680b      	ldr	r3, [r1, #0]
    74ae:	b143      	cbz	r3, 74c2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    74b0:	684b      	ldr	r3, [r1, #4]
    74b2:	b133      	cbz	r3, 74c2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    74b4:	2220      	movs	r2, #32
    74b6:	2100      	movs	r1, #0
    74b8:	f000 f8c6 	bl	7648 <memset>
    74bc:	612c      	str	r4, [r5, #16]
	return 0;
    74be:	2000      	movs	r0, #0
}
    74c0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    74c2:	f06f 0015 	mvn.w	r0, #21
    74c6:	e7fb      	b.n	74c0 <onoff_manager_init+0x1e>

000074c8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    74c8:	4604      	mov	r4, r0
    74ca:	b508      	push	{r3, lr}
    74cc:	4608      	mov	r0, r1
    74ce:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    74d0:	461a      	mov	r2, r3
    74d2:	47a0      	blx	r4
	return z_impl_z_current_get();
    74d4:	f7ff fa6a 	bl	69ac <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    74d8:	f7fa fe12 	bl	2100 <z_impl_k_thread_abort>

000074dc <encode_uint>:
{
    74dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74e0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    74e2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    74e4:	2b6f      	cmp	r3, #111	; 0x6f
{
    74e6:	4680      	mov	r8, r0
    74e8:	460f      	mov	r7, r1
    74ea:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    74ec:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    74f0:	d029      	beq.n	7546 <encode_uint+0x6a>
    74f2:	d824      	bhi.n	753e <encode_uint+0x62>
		return 16;
    74f4:	2b58      	cmp	r3, #88	; 0x58
    74f6:	bf14      	ite	ne
    74f8:	260a      	movne	r6, #10
    74fa:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    74fc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    7500:	4632      	mov	r2, r6
    7502:	2300      	movs	r3, #0
    7504:	4640      	mov	r0, r8
    7506:	4639      	mov	r1, r7
    7508:	f7f8 fdfa 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    750c:	2a09      	cmp	r2, #9
    750e:	b2d4      	uxtb	r4, r2
    7510:	d81e      	bhi.n	7550 <encode_uint+0x74>
    7512:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7514:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7516:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    7518:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    751c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    7520:	d301      	bcc.n	7526 <encode_uint+0x4a>
    7522:	45d1      	cmp	r9, sl
    7524:	d811      	bhi.n	754a <encode_uint+0x6e>
	if (conv->flag_hash) {
    7526:	782b      	ldrb	r3, [r5, #0]
    7528:	069b      	lsls	r3, r3, #26
    752a:	d505      	bpl.n	7538 <encode_uint+0x5c>
		if (radix == 8) {
    752c:	2e08      	cmp	r6, #8
    752e:	d115      	bne.n	755c <encode_uint+0x80>
			conv->altform_0 = true;
    7530:	78ab      	ldrb	r3, [r5, #2]
    7532:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7536:	70ab      	strb	r3, [r5, #2]
}
    7538:	4648      	mov	r0, r9
    753a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    753e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    7542:	2b70      	cmp	r3, #112	; 0x70
    7544:	e7d7      	b.n	74f6 <encode_uint+0x1a>
	switch (specifier) {
    7546:	2608      	movs	r6, #8
    7548:	e7d8      	b.n	74fc <encode_uint+0x20>
		value /= radix;
    754a:	4680      	mov	r8, r0
    754c:	460f      	mov	r7, r1
    754e:	e7d7      	b.n	7500 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7550:	f1bb 0f19 	cmp.w	fp, #25
    7554:	bf94      	ite	ls
    7556:	3437      	addls	r4, #55	; 0x37
    7558:	3457      	addhi	r4, #87	; 0x57
    755a:	e7db      	b.n	7514 <encode_uint+0x38>
		} else if (radix == 16) {
    755c:	2e10      	cmp	r6, #16
    755e:	d1eb      	bne.n	7538 <encode_uint+0x5c>
			conv->altform_0c = true;
    7560:	78ab      	ldrb	r3, [r5, #2]
    7562:	f043 0310 	orr.w	r3, r3, #16
    7566:	e7e6      	b.n	7536 <encode_uint+0x5a>

00007568 <outs>:
{
    7568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    756c:	4607      	mov	r7, r0
    756e:	4688      	mov	r8, r1
    7570:	4615      	mov	r5, r2
    7572:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7574:	4614      	mov	r4, r2
    7576:	42b4      	cmp	r4, r6
    7578:	eba4 0005 	sub.w	r0, r4, r5
    757c:	d302      	bcc.n	7584 <outs+0x1c>
    757e:	b93e      	cbnz	r6, 7590 <outs+0x28>
    7580:	7823      	ldrb	r3, [r4, #0]
    7582:	b12b      	cbz	r3, 7590 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    7584:	f814 0b01 	ldrb.w	r0, [r4], #1
    7588:	4641      	mov	r1, r8
    758a:	47b8      	blx	r7
		if (rc < 0) {
    758c:	2800      	cmp	r0, #0
    758e:	daf2      	bge.n	7576 <outs+0xe>
}
    7590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007594 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    7594:	4040      	eors	r0, r0
    7596:	f380 8811 	msr	BASEPRI, r0
    759a:	f04f 0004 	mov.w	r0, #4
    759e:	df02      	svc	2
}
    75a0:	4770      	bx	lr

000075a2 <assert_print>:

void assert_print(const char *fmt, ...)
{
    75a2:	b40f      	push	{r0, r1, r2, r3}
    75a4:	b507      	push	{r0, r1, r2, lr}
    75a6:	a904      	add	r1, sp, #16
    75a8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    75ac:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    75ae:	f7f9 f8cf 	bl	750 <vprintk>

	va_end(ap);
}
    75b2:	b003      	add	sp, #12
    75b4:	f85d eb04 	ldr.w	lr, [sp], #4
    75b8:	b004      	add	sp, #16
    75ba:	4770      	bx	lr

000075bc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ESB_PRX_APP_LOG_LEVEL, 4);

GEN_ABS_SYM_END
    75bc:	4770      	bx	lr

000075be <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    75be:	b40f      	push	{r0, r1, r2, r3}
    75c0:	b507      	push	{r0, r1, r2, lr}
    75c2:	a904      	add	r1, sp, #16
    75c4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    75c8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    75ca:	f7f9 f8c1 	bl	750 <vprintk>
	va_end(ap);
}
    75ce:	b003      	add	sp, #12
    75d0:	f85d eb04 	ldr.w	lr, [sp], #4
    75d4:	b004      	add	sp, #16
    75d6:	4770      	bx	lr

000075d8 <abort_function>:
{
    75d8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    75da:	2000      	movs	r0, #0
    75dc:	f7f9 feec 	bl	13b8 <sys_reboot>

000075e0 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    75e0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    75e2:	6800      	ldr	r0, [r0, #0]
    75e4:	f7fa b966 	b.w	18b4 <z_arm_fatal_error>

000075e8 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    75e8:	2100      	movs	r1, #0
    75ea:	2001      	movs	r0, #1
    75ec:	f7fa b962 	b.w	18b4 <z_arm_fatal_error>

000075f0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    75f0:	b508      	push	{r3, lr}
	handler();
    75f2:	f7fa f9f5 	bl	19e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    75f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    75fa:	f7fa bacd 	b.w	1b98 <z_arm_exc_exit>

000075fe <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    75fe:	3901      	subs	r1, #1
    7600:	4603      	mov	r3, r0
    7602:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7606:	b90a      	cbnz	r2, 760c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    7608:	701a      	strb	r2, [r3, #0]

	return dest;
}
    760a:	4770      	bx	lr
		*d = *s;
    760c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    7610:	e7f7      	b.n	7602 <strcpy+0x4>

00007612 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7612:	4603      	mov	r3, r0
	size_t n = 0;
    7614:	2000      	movs	r0, #0

	while (*s != '\0') {
    7616:	5c1a      	ldrb	r2, [r3, r0]
    7618:	b902      	cbnz	r2, 761c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    761a:	4770      	bx	lr
		n++;
    761c:	3001      	adds	r0, #1
    761e:	e7fa      	b.n	7616 <strlen+0x4>

00007620 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7620:	4603      	mov	r3, r0
	size_t n = 0;
    7622:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7624:	5c1a      	ldrb	r2, [r3, r0]
    7626:	b10a      	cbz	r2, 762c <strnlen+0xc>
    7628:	4288      	cmp	r0, r1
    762a:	d100      	bne.n	762e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    762c:	4770      	bx	lr
		n++;
    762e:	3001      	adds	r0, #1
    7630:	e7f8      	b.n	7624 <strnlen+0x4>

00007632 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7632:	b510      	push	{r4, lr}
    7634:	1e43      	subs	r3, r0, #1
    7636:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7638:	4291      	cmp	r1, r2
    763a:	d100      	bne.n	763e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    763c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    763e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7642:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7646:	e7f7      	b.n	7638 <memcpy+0x6>

00007648 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7648:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    764a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    764c:	4603      	mov	r3, r0
	while (n > 0) {
    764e:	4293      	cmp	r3, r2
    7650:	d100      	bne.n	7654 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7652:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7654:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7658:	e7f9      	b.n	764e <memset+0x6>

0000765a <_stdout_hook_default>:
}
    765a:	f04f 30ff 	mov.w	r0, #4294967295
    765e:	4770      	bx	lr

00007660 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    7660:	2806      	cmp	r0, #6
    7662:	d108      	bne.n	7676 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    7664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7668:	2201      	movs	r2, #1
    766a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    766e:	f3bf 8f4f 	dsb	sy
        __WFE();
    7672:	bf20      	wfe
    while (true)
    7674:	e7fd      	b.n	7672 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    7676:	4770      	bx	lr

00007678 <pm_state_exit_post_ops>:
    7678:	2300      	movs	r3, #0
    767a:	f383 8811 	msr	BASEPRI, r3
    767e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7682:	4770      	bx	lr

00007684 <set_on_state>:
	__asm__ volatile(
    7684:	f04f 0320 	mov.w	r3, #32
    7688:	f3ef 8211 	mrs	r2, BASEPRI
    768c:	f383 8812 	msr	BASEPRI_MAX, r3
    7690:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7694:	6803      	ldr	r3, [r0, #0]
    7696:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    769a:	f043 0302 	orr.w	r3, r3, #2
    769e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    76a0:	f382 8811 	msr	BASEPRI, r2
    76a4:	f3bf 8f6f 	isb	sy
}
    76a8:	4770      	bx	lr

000076aa <async_start>:
{
    76aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76ac:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    76ae:	6904      	ldr	r4, [r0, #16]
{
    76b0:	4605      	mov	r5, r0
    76b2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    76b4:	f04f 0020 	mov.w	r0, #32
    76b8:	f3ef 8c11 	mrs	ip, BASEPRI
    76bc:	f380 8812 	msr	BASEPRI_MAX, r0
    76c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    76c4:	260c      	movs	r6, #12
    76c6:	fb06 4601 	mla	r6, r6, r1, r4
    76ca:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    76cc:	f000 0e07 	and.w	lr, r0, #7
    76d0:	f1be 0f01 	cmp.w	lr, #1
    76d4:	d110      	bne.n	76f8 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    76d6:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    76d8:	2600      	movs	r6, #0
	__asm__ volatile(
    76da:	f38c 8811 	msr	BASEPRI, ip
    76de:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    76e2:	b93e      	cbnz	r6, 76f4 <async_start+0x4a>
	subdata->cb = cb;
    76e4:	200c      	movs	r0, #12
    76e6:	4341      	muls	r1, r0
    76e8:	440c      	add	r4, r1
	subdata->user_data = user_data;
    76ea:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    76ee:	686b      	ldr	r3, [r5, #4]
    76f0:	585b      	ldr	r3, [r3, r1]
    76f2:	4798      	blx	r3
}
    76f4:	4630      	mov	r0, r6
    76f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    76f8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    76fc:	4287      	cmp	r7, r0
    76fe:	bf14      	ite	ne
    7700:	f04f 36ff 	movne.w	r6, #4294967295
    7704:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    7708:	e7e7      	b.n	76da <async_start+0x30>

0000770a <api_start>:
{
    770a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    770c:	2480      	movs	r4, #128	; 0x80
    770e:	9400      	str	r4, [sp, #0]
    7710:	f7ff ffcb 	bl	76aa <async_start>
}
    7714:	b002      	add	sp, #8
    7716:	bd10      	pop	{r4, pc}

00007718 <onoff_started_callback>:
	return &data->mgr[type];
    7718:	6900      	ldr	r0, [r0, #16]
    771a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    771c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    7720:	2100      	movs	r1, #0
    7722:	4710      	bx	r2

00007724 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7724:	2000      	movs	r0, #0
    7726:	f7fd b847 	b.w	47b8 <nrfx_clock_start>

0000772a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    772a:	2000      	movs	r0, #0
    772c:	f7fd b8a2 	b.w	4874 <nrfx_clock_stop>

00007730 <api_stop>:
	return stop(dev, subsys, CTX_API);
    7730:	2280      	movs	r2, #128	; 0x80
    7732:	f7fa bea3 	b.w	247c <stop>

00007736 <blocking_start_callback>:
{
    7736:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    7738:	f7fe b9f2 	b.w	5b20 <z_impl_k_sem_give>

0000773c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    773c:	6843      	ldr	r3, [r0, #4]
    773e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7740:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7744:	600b      	str	r3, [r1, #0]
}
    7746:	2000      	movs	r0, #0
    7748:	4770      	bx	lr

0000774a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    774a:	6843      	ldr	r3, [r0, #4]
    774c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    774e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7752:	4042      	eors	r2, r0
    7754:	400a      	ands	r2, r1
    7756:	4042      	eors	r2, r0
    p_reg->OUT = value;
    7758:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    775c:	2000      	movs	r0, #0
    775e:	4770      	bx	lr

00007760 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7760:	6843      	ldr	r3, [r0, #4]
    7762:	685b      	ldr	r3, [r3, #4]
}
    7764:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    7766:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    776a:	4770      	bx	lr

0000776c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    776c:	6843      	ldr	r3, [r0, #4]
    776e:	685b      	ldr	r3, [r3, #4]
}
    7770:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7772:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    7776:	4770      	bx	lr

00007778 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7778:	6843      	ldr	r3, [r0, #4]
    777a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    777c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    7780:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7782:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    7786:	2000      	movs	r0, #0
    7788:	4770      	bx	lr

0000778a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    778a:	6902      	ldr	r2, [r0, #16]
{
    778c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    778e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7792:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7796:	2000      	movs	r0, #0
    7798:	4770      	bx	lr

0000779a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    779a:	6843      	ldr	r3, [r0, #4]
    779c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    779e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    77a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    77a6:	4770      	bx	lr

000077a8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    77a8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    77aa:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    77ac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    77ae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    77b2:	b148      	cbz	r0, 77c8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    77b4:	7c52      	ldrb	r2, [r2, #17]
    77b6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77b8:	2000      	movs	r0, #0
    77ba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    77be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    77c2:	2201      	movs	r2, #1
    77c4:	601a      	str	r2, [r3, #0]
	return 0;
    77c6:	4770      	bx	lr
		return -1;
    77c8:	f04f 30ff 	mov.w	r0, #4294967295
}
    77cc:	4770      	bx	lr

000077ce <is_tx_ready.isra.0>:
	return config->uarte_regs;
    77ce:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    77d0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    77d2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    77d6:	b940      	cbnz	r0, 77ea <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    77d8:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    77da:	079b      	lsls	r3, r3, #30
    77dc:	d406      	bmi.n	77ec <is_tx_ready.isra.0+0x1e>
    77de:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    77e2:	3800      	subs	r0, #0
    77e4:	bf18      	it	ne
    77e6:	2001      	movne	r0, #1
    77e8:	4770      	bx	lr
    77ea:	2001      	movs	r0, #1
}
    77ec:	4770      	bx	lr

000077ee <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    77ee:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    77f0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    77f2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    77f6:	05c9      	lsls	r1, r1, #23
    77f8:	d518      	bpl.n	782c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    77fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    77fe:	b1a9      	cbz	r1, 782c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7800:	f04f 0020 	mov.w	r0, #32
    7804:	f3ef 8111 	mrs	r1, BASEPRI
    7808:	f380 8812 	msr	BASEPRI_MAX, r0
    780c:	f3bf 8f6f 	isb	sy
    7810:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7814:	b130      	cbz	r0, 7824 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7816:	2000      	movs	r0, #0
    7818:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    781c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7820:	2001      	movs	r0, #1
    7822:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    7824:	f381 8811 	msr	BASEPRI, r1
    7828:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    782c:	6852      	ldr	r2, [r2, #4]
    782e:	06d2      	lsls	r2, r2, #27
    7830:	d515      	bpl.n	785e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    7832:	f04f 0120 	mov.w	r1, #32
    7836:	f3ef 8211 	mrs	r2, BASEPRI
    783a:	f381 8812 	msr	BASEPRI_MAX, r1
    783e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7842:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7846:	b111      	cbz	r1, 784e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7848:	2100      	movs	r1, #0
    784a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    784e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7852:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7856:	f382 8811 	msr	BASEPRI, r2
    785a:	f3bf 8f6f 	isb	sy
}
    785e:	4770      	bx	lr

00007860 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    7860:	b510      	push	{r4, lr}
    7862:	2200      	movs	r2, #0
    7864:	4604      	mov	r4, r0
    7866:	2101      	movs	r1, #1
    7868:	2028      	movs	r0, #40	; 0x28
    786a:	f7fa f883 	bl	1974 <z_arm_irq_priority_set>
    786e:	2028      	movs	r0, #40	; 0x28
    7870:	f7fa f84e 	bl	1910 <arch_irq_enable>
    7874:	4620      	mov	r0, r4
    7876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    787a:	f7fb ba81 	b.w	2d80 <uarte_instance_init.constprop.0>

0000787e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    787e:	b510      	push	{r4, lr}
    7880:	2200      	movs	r2, #0
    7882:	4604      	mov	r4, r0
    7884:	2101      	movs	r1, #1
    7886:	2002      	movs	r0, #2
    7888:	f7fa f874 	bl	1974 <z_arm_irq_priority_set>
    788c:	2002      	movs	r0, #2
    788e:	f7fa f83f 	bl	1910 <arch_irq_enable>
    7892:	4620      	mov	r0, r4
    7894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7898:	f7fb ba72 	b.w	2d80 <uarte_instance_init.constprop.0>

0000789c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    789c:	4770      	bx	lr

0000789e <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    789e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    78a0:	6843      	ldr	r3, [r0, #4]
    78a2:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    78a4:	7a03      	ldrb	r3, [r0, #8]
    78a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    78aa:	3b01      	subs	r3, #1
    78ac:	00db      	lsls	r3, r3, #3
    78ae:	6845      	ldr	r5, [r0, #4]
    78b0:	6814      	ldr	r4, [r2, #0]
    78b2:	441d      	add	r5, r3
    78b4:	42ac      	cmp	r4, r5
    78b6:	d902      	bls.n	78be <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    78b8:	f06f 0001 	mvn.w	r0, #1
}
    78bc:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    78be:	7965      	ldrb	r5, [r4, #5]
    78c0:	428d      	cmp	r5, r1
    78c2:	d002      	beq.n	78ca <pinctrl_lookup_state+0x2c>
		(*state)++;
    78c4:	3408      	adds	r4, #8
    78c6:	6014      	str	r4, [r2, #0]
    78c8:	e7f1      	b.n	78ae <pinctrl_lookup_state+0x10>
			return 0;
    78ca:	2000      	movs	r0, #0
    78cc:	e7f6      	b.n	78bc <pinctrl_lookup_state+0x1e>

000078ce <nrf_gpio_pin_clear>:
{
    78ce:	b507      	push	{r0, r1, r2, lr}
    78d0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    78d2:	a801      	add	r0, sp, #4
    78d4:	f7fb fd7c 	bl	33d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    78d8:	9a01      	ldr	r2, [sp, #4]
    78da:	2301      	movs	r3, #1
    78dc:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    78de:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    78e2:	b003      	add	sp, #12
    78e4:	f85d fb04 	ldr.w	pc, [sp], #4

000078e8 <nrf_gpio_pin_set>:
{
    78e8:	b507      	push	{r0, r1, r2, lr}
    78ea:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    78ec:	a801      	add	r0, sp, #4
    78ee:	f7fb fd6f 	bl	33d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    78f2:	9a01      	ldr	r2, [sp, #4]
    78f4:	2301      	movs	r3, #1
    78f6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    78f8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    78fc:	b003      	add	sp, #12
    78fe:	f85d fb04 	ldr.w	pc, [sp], #4

00007902 <nrf_gpio_pin_write>:
    if (value == 0)
    7902:	b909      	cbnz	r1, 7908 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    7904:	f7ff bfe3 	b.w	78ce <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    7908:	f7ff bfee 	b.w	78e8 <nrf_gpio_pin_set>

0000790c <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    790c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    790e:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7912:	2b00      	cmp	r3, #0
{
    7914:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    7916:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    791a:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    791c:	bf0b      	itete	eq
    791e:	4615      	moveq	r5, r2
    7920:	2501      	movne	r5, #1
    7922:	460e      	moveq	r6, r1
    7924:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    7926:	9301      	str	r3, [sp, #4]
    7928:	f7fb fd52 	bl	33d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    792c:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    792e:	f3c4 1281 	ubfx	r2, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    7932:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7936:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
    793a:	4332      	orrs	r2, r6
    reg->PIN_CNF[pin_number] = cnf;
    793c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7940:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    7944:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    7948:	b002      	add	sp, #8
    794a:	bd70      	pop	{r4, r5, r6, pc}

0000794c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    794c:	b570      	push	{r4, r5, r6, lr}
    794e:	4615      	mov	r5, r2
    7950:	4604      	mov	r4, r0
    7952:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7956:	42a6      	cmp	r6, r4
    7958:	d101      	bne.n	795e <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    795a:	2000      	movs	r0, #0
}
    795c:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    795e:	6823      	ldr	r3, [r4, #0]
    7960:	0c1a      	lsrs	r2, r3, #16
    7962:	2a22      	cmp	r2, #34	; 0x22
    7964:	f200 808e 	bhi.w	7a84 <pinctrl_configure_pins+0x138>
    7968:	e8df f002 	tbb	[pc, r2]
    796c:	43241d12 	.word	0x43241d12
    7970:	8c433929 	.word	0x8c433929
    7974:	488c8c8c 	.word	0x488c8c8c
    7978:	8c8c8c4d 	.word	0x8c8c8c4d
    797c:	8c8c8c8c 	.word	0x8c8c8c8c
    7980:	5e528c8c 	.word	0x5e528c8c
    7984:	8c8c6863 	.word	0x8c8c6863
    7988:	78736d8c 	.word	0x78736d8c
    798c:	827d      	.short	0x827d
    798e:	87          	.byte	0x87
    798f:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    7990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7994:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    7998:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    799a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    799e:	f7ff ffa3 	bl	78e8 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    79a2:	2201      	movs	r2, #1
    79a4:	e015      	b.n	79d2 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    79a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    79aa:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    79ae:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    79b0:	2100      	movs	r1, #0
    79b2:	e00f      	b.n	79d4 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    79b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    79b8:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    79bc:	e7ec      	b.n	7998 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    79be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    79c2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    79c6:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    79c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    79cc:	f7ff ff7f 	bl	78ce <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    79d0:	2200      	movs	r2, #0
    79d2:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    79d4:	6820      	ldr	r0, [r4, #0]
    79d6:	f7ff ff99 	bl	790c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    79da:	3404      	adds	r4, #4
    79dc:	e7bb      	b.n	7956 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    79de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    79e2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    79e6:	6820      	ldr	r0, [r4, #0]
    79e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    79ec:	f7ff ff6f 	bl	78ce <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    79f0:	e7d7      	b.n	79a2 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    79f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    79f6:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    79fa:	e7d8      	b.n	79ae <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    79fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a00:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7a04:	e7d3      	b.n	79ae <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    7a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a0a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    7a0e:	e7ce      	b.n	79ae <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    7a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a14:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7a18:	6820      	ldr	r0, [r4, #0]
    7a1a:	f3c0 3140 	ubfx	r1, r0, #13, #1
    7a1e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7a22:	f7ff ff6e 	bl	7902 <nrf_gpio_pin_write>
    7a26:	e7bc      	b.n	79a2 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a2c:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7a30:	e7f2      	b.n	7a18 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    7a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a36:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7a3a:	e7ed      	b.n	7a18 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    7a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a40:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    7a44:	e7e8      	b.n	7a18 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    7a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a4a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7a4e:	2201      	movs	r2, #1
    7a50:	e7ae      	b.n	79b0 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    7a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a56:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7a5a:	e7f8      	b.n	7a4e <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    7a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a60:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7a64:	e7f3      	b.n	7a4e <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    7a66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a6a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7a6e:	e7ee      	b.n	7a4e <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    7a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a74:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7a78:	e7e9      	b.n	7a4e <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    7a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a7e:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    7a82:	e7e4      	b.n	7a4e <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    7a84:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7a88:	e768      	b.n	795c <pinctrl_configure_pins+0x10>

00007a8a <bytewise_bit_swap>:
	uint32_t inp = (*(uint32_t *)input);
    7a8a:	6803      	ldr	r3, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    7a8c:	fa93 f3a3 	rbit	r3, r3
	return sys_cpu_to_be32((uint32_t)__RBIT(inp));
    7a90:	0618      	lsls	r0, r3, #24
    7a92:	0a1a      	lsrs	r2, r3, #8
    7a94:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
    7a98:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    7a9c:	021b      	lsls	r3, r3, #8
    7a9e:	4310      	orrs	r0, r2
    7aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
    7aa4:	4318      	orrs	r0, r3
    7aa6:	4770      	bx	lr

00007aa8 <ESB_SYS_TIMER_IRQHandler>:
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    7aa8:	4668      	mov	r0, sp
    7aaa:	f020 0107 	bic.w	r1, r0, #7
    7aae:	468d      	mov	sp, r1
    7ab0:	b501      	push	{r0, lr}
	ISR_DIRECT_PM();
    7ab2:	f7f9 ff87 	bl	19c4 <_arch_isr_direct_pm>
    7ab6:	f7fa f86f 	bl	1b98 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    7aba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    7abe:	4685      	mov	sp, r0
    7ac0:	4770      	bx	lr

00007ac2 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7ac2:	f7ff bab7 	b.w	7034 <nrf_cc3xx_platform_init_no_rng>

00007ac6 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7ac6:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7ac8:	f7f9 fe0c 	bl	16e4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7acc:	f7f9 febe 	bl	184c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7ad4:	f7ff baae 	b.w	7034 <nrf_cc3xx_platform_init_no_rng>

00007ad8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7ad8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7adc:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    7ae0:	f1a0 0308 	sub.w	r3, r0, #8
    7ae4:	4258      	negs	r0, r3
    7ae6:	4158      	adcs	r0, r3
    7ae8:	4770      	bx	lr

00007aea <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7aea:	4700      	bx	r0

00007aec <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7aec:	f000 b8ef 	b.w	7cce <z_impl_k_busy_wait>

00007af0 <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
    7af0:	40c8      	lsrs	r0, r1
    7af2:	43c0      	mvns	r0, r0
}
    7af4:	f000 0001 	and.w	r0, r0, #1
    7af8:	4770      	bx	lr

00007afa <nrf_gpio_pin_present_check>:
    switch (port)
    7afa:	0943      	lsrs	r3, r0, #5
    7afc:	d00b      	beq.n	7b16 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    7afe:	2b01      	cmp	r3, #1
    7b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7b04:	bf18      	it	ne
    7b06:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    7b08:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7b0c:	fa23 f000 	lsr.w	r0, r3, r0
}
    7b10:	f000 0001 	and.w	r0, r0, #1
    7b14:	4770      	bx	lr
    switch (port)
    7b16:	f04f 33ff 	mov.w	r3, #4294967295
    7b1a:	e7f5      	b.n	7b08 <nrf_gpio_pin_present_check+0xe>

00007b1c <pin_is_task_output>:
{
    7b1c:	b508      	push	{r3, lr}
    7b1e:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7b20:	f7fc ff0e 	bl	4940 <pin_is_output>
    7b24:	b110      	cbz	r0, 7b2c <pin_is_task_output+0x10>
    7b26:	4610      	mov	r0, r2
    7b28:	f7fc fef4 	bl	4914 <pin_in_use_by_te>
}
    7b2c:	f000 0001 	and.w	r0, r0, #1
    7b30:	bd08      	pop	{r3, pc}

00007b32 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7b32:	0080      	lsls	r0, r0, #2
}
    7b34:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7b38:	4770      	bx	lr

00007b3a <nrf_gpio_reconfigure>:
{
    7b3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7b3e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b40:	a801      	add	r0, sp, #4
{
    7b42:	460e      	mov	r6, r1
    7b44:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    7b48:	4690      	mov	r8, r2
    7b4a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b4c:	f7fc ff7a 	bl	4a44 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7b50:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7b52:	f1b8 0f00 	cmp.w	r8, #0
    7b56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7b5a:	bf14      	ite	ne
    7b5c:	2302      	movne	r3, #2
    7b5e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7b60:	2e00      	cmp	r6, #0
    7b62:	bf18      	it	ne
    7b64:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7b68:	2d00      	cmp	r5, #0
    7b6a:	bf14      	ite	ne
    7b6c:	210c      	movne	r1, #12
    7b6e:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7b70:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7b72:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7b76:	bf14      	ite	ne
    7b78:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    7b7c:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7b7e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7b80:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7b84:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7b88:	bf14      	ite	ne
    7b8a:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    7b8e:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7b90:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    7b92:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7b96:	b106      	cbz	r6, 7b9a <nrf_gpio_reconfigure+0x60>
    7b98:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7b9a:	f1b8 0f00 	cmp.w	r8, #0
    7b9e:	d003      	beq.n	7ba8 <nrf_gpio_reconfigure+0x6e>
    7ba0:	f898 8000 	ldrb.w	r8, [r8]
    7ba4:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7ba8:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7baa:	b10d      	cbz	r5, 7bb0 <nrf_gpio_reconfigure+0x76>
    7bac:	782d      	ldrb	r5, [r5, #0]
    7bae:	00ad      	lsls	r5, r5, #2
    7bb0:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7bb4:	b10c      	cbz	r4, 7bba <nrf_gpio_reconfigure+0x80>
    7bb6:	7822      	ldrb	r2, [r4, #0]
    7bb8:	0214      	lsls	r4, r2, #8
    7bba:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7bbc:	b10f      	cbz	r7, 7bc2 <nrf_gpio_reconfigure+0x88>
    7bbe:	783f      	ldrb	r7, [r7, #0]
    7bc0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7bc2:	432c      	orrs	r4, r5
    7bc4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    7bc6:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7bca:	b002      	add	sp, #8
    7bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007bd0 <nrf_gpio_cfg_sense_set>:
{
    7bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7bd2:	f10d 030f 	add.w	r3, sp, #15
    7bd6:	9301      	str	r3, [sp, #4]
    7bd8:	2300      	movs	r3, #0
{
    7bda:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7bde:	9300      	str	r3, [sp, #0]
    7be0:	461a      	mov	r2, r3
    7be2:	4619      	mov	r1, r3
    7be4:	f7ff ffa9 	bl	7b3a <nrf_gpio_reconfigure>
}
    7be8:	b005      	add	sp, #20
    7bea:	f85d fb04 	ldr.w	pc, [sp], #4

00007bee <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7bee:	f7fd baad 	b.w	514c <_DoInit>

00007bf2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7bf2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7bf4:	f7ff fffb 	bl	7bee <SEGGER_RTT_Init>

	return 0;
}
    7bf8:	2000      	movs	r0, #0
    7bfa:	bd08      	pop	{r3, pc}

00007bfc <z_device_state_init>:
}
    7bfc:	4770      	bx	lr

00007bfe <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7bfe:	b138      	cbz	r0, 7c10 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7c00:	68c3      	ldr	r3, [r0, #12]
    7c02:	8818      	ldrh	r0, [r3, #0]
    7c04:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7c08:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7c0c:	4258      	negs	r0, r3
    7c0e:	4158      	adcs	r0, r3
}
    7c10:	4770      	bx	lr

00007c12 <z_early_memset>:
	(void) memset(dst, c, n);
    7c12:	f7ff bd19 	b.w	7648 <memset>

00007c16 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7c16:	f7ff bd0c 	b.w	7632 <memcpy>

00007c1a <k_mem_slab_init>:
{
    7c1a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7c1c:	2400      	movs	r4, #0
    7c1e:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    7c20:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7c22:	ea41 0402 	orr.w	r4, r1, r2
    7c26:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7c2a:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    7c2e:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7c30:	d10c      	bne.n	7c4c <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    7c32:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7c34:	42a3      	cmp	r3, r4
    7c36:	d103      	bne.n	7c40 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    7c38:	e9c0 0000 	strd	r0, r0, [r0]
}
    7c3c:	2000      	movs	r0, #0
}
    7c3e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7c40:	6985      	ldr	r5, [r0, #24]
    7c42:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7c44:	3401      	adds	r4, #1
		slab->free_list = p;
    7c46:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    7c48:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7c4a:	e7f3      	b.n	7c34 <k_mem_slab_init+0x1a>
		return -EINVAL;
    7c4c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7c50:	e7f5      	b.n	7c3e <k_mem_slab_init+0x24>

00007c52 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7c52:	f3ef 8005 	mrs	r0, IPSR
}
    7c56:	3800      	subs	r0, #0
    7c58:	bf18      	it	ne
    7c5a:	2001      	movne	r0, #1
    7c5c:	4770      	bx	lr

00007c5e <k_thread_name_get>:
}
    7c5e:	2000      	movs	r0, #0
    7c60:	4770      	bx	lr

00007c62 <z_pm_save_idle_exit>:
{
    7c62:	b508      	push	{r3, lr}
	pm_system_resume();
    7c64:	f7f9 fc26 	bl	14b4 <pm_system_resume>
}
    7c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7c6c:	f7ff be16 	b.w	789c <sys_clock_idle_exit>

00007c70 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    7c70:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7c74:	428b      	cmp	r3, r1
    7c76:	d001      	beq.n	7c7c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    7c78:	f7fe bbda 	b.w	6430 <z_set_prio>
}
    7c7c:	2000      	movs	r0, #0
    7c7e:	4770      	bx	lr

00007c80 <z_impl_k_mutex_init>:
{
    7c80:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7c82:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7c84:	e9c3 0002 	strd	r0, r0, [r3, #8]
    7c88:	e9c3 3300 	strd	r3, r3, [r3]
}
    7c8c:	4770      	bx	lr

00007c8e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7c8e:	4603      	mov	r3, r0
    7c90:	b920      	cbnz	r0, 7c9c <z_reschedule_irqlock+0xe>
    7c92:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7c96:	b90a      	cbnz	r2, 7c9c <z_reschedule_irqlock+0xe>
    7c98:	f7f9 bec2 	b.w	1a20 <arch_swap>
    7c9c:	f383 8811 	msr	BASEPRI, r3
    7ca0:	f3bf 8f6f 	isb	sy
}
    7ca4:	4770      	bx	lr

00007ca6 <z_reschedule_unlocked>:
	__asm__ volatile(
    7ca6:	f04f 0320 	mov.w	r3, #32
    7caa:	f3ef 8011 	mrs	r0, BASEPRI
    7cae:	f383 8812 	msr	BASEPRI_MAX, r3
    7cb2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7cb6:	f7ff bfea 	b.w	7c8e <z_reschedule_irqlock>

00007cba <z_priq_dumb_best>:
{
    7cba:	4603      	mov	r3, r0
	return list->head == list;
    7cbc:	6800      	ldr	r0, [r0, #0]
}
    7cbe:	4283      	cmp	r3, r0
    7cc0:	bf08      	it	eq
    7cc2:	2000      	moveq	r0, #0
    7cc4:	4770      	bx	lr

00007cc6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7cc6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7cc8:	f7ff f96a 	bl	6fa0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7ccc:	bd08      	pop	{r3, pc}

00007cce <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7cce:	b108      	cbz	r0, 7cd4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7cd0:	f7fa bb92 	b.w	23f8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7cd4:	4770      	bx	lr

00007cd6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7cd6:	4770      	bx	lr

00007cd8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7cd8:	f7fc bb8a 	b.w	43f0 <SystemInit>
